<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170809 03:52:45.859">
<suite id="s1" source="/tmp/fspcibld/26435/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:52:46.491">Dictionary does not contain key 'host'.</msg>
<status starttime="20170809 03:52:46.491" status="FAIL" endtime="20170809 03:52:46.491"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:46.491">${has_host} = False</msg>
<status starttime="20170809 03:52:46.490" status="PASS" endtime="20170809 03:52:46.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170809 03:52:46.492" status="PASS" endtime="20170809 03:52:46.493"></status>
</kw>
<status starttime="20170809 03:52:46.491" status="PASS" endtime="20170809 03:52:46.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:46.494">${port_num} = 22</msg>
<status starttime="20170809 03:52:46.494" status="PASS" endtime="20170809 03:52:46.494"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:46.495">${SSH_PORT} = 22</msg>
<status starttime="20170809 03:52:46.495" status="PASS" endtime="20170809 03:52:46.495"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:46.495">${https_num} = 443</msg>
<status starttime="20170809 03:52:46.495" status="PASS" endtime="20170809 03:52:46.495"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:46.496">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170809 03:52:46.496" status="PASS" endtime="20170809 03:52:46.496"></status>
</kw>
<status starttime="20170809 03:52:46.494" status="PASS" endtime="20170809 03:52:46.496"></status>
</kw>
<status starttime="20170809 03:52:46.493" status="PASS" endtime="20170809 03:52:46.496"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:52:46.497">Dictionary does not contain key 'port'.</msg>
<status starttime="20170809 03:52:46.497" status="FAIL" endtime="20170809 03:52:46.497"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:46.497">${has_port} = False</msg>
<status starttime="20170809 03:52:46.497" status="PASS" endtime="20170809 03:52:46.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170809 03:52:46.499" status="PASS" endtime="20170809 03:52:46.499"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170809 03:52:46.499" status="PASS" endtime="20170809 03:52:46.500"></status>
</kw>
<status starttime="20170809 03:52:46.498" status="PASS" endtime="20170809 03:52:46.500"></status>
</kw>
<status starttime="20170809 03:52:46.498" status="PASS" endtime="20170809 03:52:46.500"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:46.500">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 03:52:48.284">Read output: root@witherspoon:~#</msg>
<status starttime="20170809 03:52:46.500" status="PASS" endtime="20170809 03:52:48.284"></status>
</kw>
<status starttime="20170809 03:52:46.489" status="PASS" endtime="20170809 03:52:48.285"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:48.286">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170809 03:52:48.363">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 03:52:48.363">${output} = VERSION_ID="v1.99.8-201-gb983102"</msg>
<msg level="INFO" timestamp="20170809 03:52:48.363">${stderr} = </msg>
<status starttime="20170809 03:52:48.286" status="PASS" endtime="20170809 03:52:48.363"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:48.364">Length is 0</msg>
<status starttime="20170809 03:52:48.364" status="PASS" endtime="20170809 03:52:48.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:48.364">VERSION_ID="v1.99.8-201-gb983102"</msg>
<status starttime="20170809 03:52:48.364" status="PASS" endtime="20170809 03:52:48.364"></status>
</kw>
<status starttime="20170809 03:52:48.285" status="PASS" endtime="20170809 03:52:48.365"></status>
</kw>
<status starttime="20170809 03:52:48.285" status="PASS" endtime="20170809 03:52:48.365"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:48.366">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170809 03:52:48.485">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170809 03:52:48.485">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg level="INFO" timestamp="20170809 03:52:48.485">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status starttime="20170809 03:52:48.366" status="PASS" endtime="20170809 03:52:48.485"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:48.486">Length is 81</msg>
<msg level="FAIL" timestamp="20170809 03:52:48.486">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status starttime="20170809 03:52:48.485" status="FAIL" endtime="20170809 03:52:48.486"></status>
</kw>
<status starttime="20170809 03:52:48.365" status="FAIL" endtime="20170809 03:52:48.486"></status>
</kw>
<status starttime="20170809 03:52:48.365" status="FAIL" endtime="20170809 03:52:48.486"></status>
</kw>
<status starttime="20170809 03:52:48.365" status="PASS" endtime="20170809 03:52:48.486"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:48.908">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 03:52:48.908">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 03:52:49.679">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170809 03:52:49.680">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 03:52:49.756">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 03:52:49.767">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 03:52:49.767">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 03:52:49.767">${rc} = 0</msg>
<status starttime="20170809 03:52:48.487" status="PASS" endtime="20170809 03:52:49.767"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:49.768">Length is 0</msg>
<status starttime="20170809 03:52:49.768" status="PASS" endtime="20170809 03:52:49.768"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:49.768">Length is 11</msg>
<status starttime="20170809 03:52:49.768" status="PASS" endtime="20170809 03:52:49.768"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:49.769">${bmc_model} = Witherspoon</msg>
<status starttime="20170809 03:52:48.487" status="PASS" endtime="20170809 03:52:49.769"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:49.769">BMC Model=Witherspoon</msg>
<status starttime="20170809 03:52:49.769" status="PASS" endtime="20170809 03:52:49.769"></status>
</kw>
<status starttime="20170809 03:52:48.487" status="PASS" endtime="20170809 03:52:49.769"></status>
</kw>
<status starttime="20170809 03:52:48.487" status="PASS" endtime="20170809 03:52:49.769"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:52:49.772">Dictionary does not contain key 'host'.</msg>
<status starttime="20170809 03:52:49.771" status="FAIL" endtime="20170809 03:52:49.772"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:49.772">${has_host} = False</msg>
<status starttime="20170809 03:52:49.771" status="PASS" endtime="20170809 03:52:49.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170809 03:52:49.774" status="PASS" endtime="20170809 03:52:49.774"></status>
</kw>
<status starttime="20170809 03:52:49.773" status="PASS" endtime="20170809 03:52:49.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:49.777">${port_num} = 22</msg>
<status starttime="20170809 03:52:49.776" status="PASS" endtime="20170809 03:52:49.777"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:49.777">${SSH_PORT} = 22</msg>
<status starttime="20170809 03:52:49.777" status="PASS" endtime="20170809 03:52:49.777"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:49.778">${https_num} = 443</msg>
<status starttime="20170809 03:52:49.777" status="PASS" endtime="20170809 03:52:49.778"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:49.778">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170809 03:52:49.778" status="PASS" endtime="20170809 03:52:49.778"></status>
</kw>
<status starttime="20170809 03:52:49.776" status="PASS" endtime="20170809 03:52:49.778"></status>
</kw>
<status starttime="20170809 03:52:49.775" status="PASS" endtime="20170809 03:52:49.779"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:52:49.779">Dictionary does not contain key 'port'.</msg>
<status starttime="20170809 03:52:49.779" status="FAIL" endtime="20170809 03:52:49.780"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:49.780">${has_port} = False</msg>
<status starttime="20170809 03:52:49.779" status="PASS" endtime="20170809 03:52:49.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170809 03:52:49.781" status="PASS" endtime="20170809 03:52:49.781"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170809 03:52:49.782" status="PASS" endtime="20170809 03:52:49.782"></status>
</kw>
<status starttime="20170809 03:52:49.781" status="PASS" endtime="20170809 03:52:49.782"></status>
</kw>
<status starttime="20170809 03:52:49.780" status="PASS" endtime="20170809 03:52:49.782"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:49.782">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 03:52:51.461">Read output: root@witherspoon:~#</msg>
<status starttime="20170809 03:52:49.782" status="PASS" endtime="20170809 03:52:51.461"></status>
</kw>
<status starttime="20170809 03:52:49.770" status="PASS" endtime="20170809 03:52:51.461"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:51.462">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170809 03:52:51.569">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 03:52:51.569">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170809 03:52:51.569">${stderr} = </msg>
<status starttime="20170809 03:52:51.462" status="PASS" endtime="20170809 03:52:51.569"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:51.570">Length is 0</msg>
<status starttime="20170809 03:52:51.570" status="PASS" endtime="20170809 03:52:51.570"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:51.570">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170809 03:52:51.461" status="PASS" endtime="20170809 03:52:51.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170809 03:52:51.570" status="PASS" endtime="20170809 03:52:51.571"></status>
</kw>
<status starttime="20170809 03:52:49.770" status="PASS" endtime="20170809 03:52:51.571"></status>
</kw>
<status starttime="20170809 03:52:49.770" status="PASS" endtime="20170809 03:52:51.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170809 03:52:51.571" status="PASS" endtime="20170809 03:52:51.572"></status>
</kw>
<status starttime="20170809 03:52:46.489" status="PASS" endtime="20170809 03:52:51.572"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/26435/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/26435/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:51.654">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:52:51.654" status="PASS" endtime="20170809 03:52:51.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:51.655">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:52:51.655" status="PASS" endtime="20170809 03:52:51.655"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:51.656">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:52:51.656" status="PASS" endtime="20170809 03:52:51.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:51.657">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:52:51.656" status="PASS" endtime="20170809 03:52:51.657"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:51.860">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:52:51.657" status="PASS" endtime="20170809 03:52:51.860"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:51.861">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:52:51.861">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:51.657" status="PASS" endtime="20170809 03:52:51.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:51.861">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:51.861" status="PASS" endtime="20170809 03:52:51.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:51.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:51.862" status="PASS" endtime="20170809 03:52:51.862"></status>
</kw>
<status starttime="20170809 03:52:51.653" status="PASS" endtime="20170809 03:52:51.863"></status>
</kw>
<status starttime="20170809 03:52:51.653" status="PASS" endtime="20170809 03:52:51.863"></status>
</kw>
<status starttime="20170809 03:52:51.652" status="PASS" endtime="20170809 03:52:51.863"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:51.868">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:52:51.868" status="PASS" endtime="20170809 03:52:51.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:51.869">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:52:51.869" status="PASS" endtime="20170809 03:52:51.869"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:51.870">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:52:51.869" status="PASS" endtime="20170809 03:52:51.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:51.870">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:52:51.870" status="PASS" endtime="20170809 03:52:51.870"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.054">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:52:51.871" status="PASS" endtime="20170809 03:52:52.054"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.054">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:52:52.054">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:51.871" status="PASS" endtime="20170809 03:52:52.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.055">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:52.054" status="PASS" endtime="20170809 03:52:52.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:52.055" status="PASS" endtime="20170809 03:52:52.056"></status>
</kw>
<status starttime="20170809 03:52:51.867" status="PASS" endtime="20170809 03:52:52.056"></status>
</kw>
<status starttime="20170809 03:52:51.866" status="PASS" endtime="20170809 03:52:52.056"></status>
</kw>
<status starttime="20170809 03:52:51.866" status="PASS" endtime="20170809 03:52:52.056"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.056">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:52:52.056" status="PASS" endtime="20170809 03:52:52.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.059">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:52:52.058" status="PASS" endtime="20170809 03:52:52.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.059">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:52:52.059" status="PASS" endtime="20170809 03:52:52.060"></status>
</kw>
<status starttime="20170809 03:52:52.059" status="PASS" endtime="20170809 03:52:52.060"></status>
</kw>
<status starttime="20170809 03:52:52.057" status="PASS" endtime="20170809 03:52:52.060"></status>
</kw>
<status starttime="20170809 03:52:52.057" status="PASS" endtime="20170809 03:52:52.060"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.147">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:52:52.147">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:52.060" status="PASS" endtime="20170809 03:52:52.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.150">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:52:52.149" status="PASS" endtime="20170809 03:52:52.150"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.151">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:52:52.151" status="PASS" endtime="20170809 03:52:52.151"></status>
</kw>
<status starttime="20170809 03:52:52.150" status="PASS" endtime="20170809 03:52:52.151"></status>
</kw>
<status starttime="20170809 03:52:52.148" status="PASS" endtime="20170809 03:52:52.151"></status>
</kw>
<status starttime="20170809 03:52:52.148" status="PASS" endtime="20170809 03:52:52.151"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:52:52.152">Delete All Sessions</msg>
<status starttime="20170809 03:52:52.151" status="PASS" endtime="20170809 03:52:52.152"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.152">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:51.865" status="PASS" endtime="20170809 03:52:52.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:52.152" status="PASS" endtime="20170809 03:52:52.153"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.154">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:52:52.154">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:52:52.154">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:52:52.154" status="PASS" endtime="20170809 03:52:52.154"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.155">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170809 03:52:51.865" status="PASS" endtime="20170809 03:52:52.155"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.155">${host_state} = Off</msg>
<status starttime="20170809 03:52:51.864" status="PASS" endtime="20170809 03:52:52.155"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:52:52.156">Off != Quiesced</msg>
<status starttime="20170809 03:52:52.156" status="FAIL" endtime="20170809 03:52:52.156"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.156">${status} = False</msg>
<status starttime="20170809 03:52:52.155" status="PASS" endtime="20170809 03:52:52.156"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.156">${status} = False</msg>
<status starttime="20170809 03:52:51.864" status="PASS" endtime="20170809 03:52:52.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170809 03:52:52.157" status="PASS" endtime="20170809 03:52:52.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170809 03:52:52.157" status="PASS" endtime="20170809 03:52:52.158"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.169">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170809 03:52:52.158" status="PASS" endtime="20170809 03:52:52.169"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.183">${FFDC_DIR_PATH} = </msg>
<status starttime="20170809 03:52:52.170" status="PASS" endtime="20170809 03:52:52.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.186">${cur_time} = 2017-08-09 03:52:52:186007</msg>
<status starttime="20170809 03:52:52.186" status="PASS" endtime="20170809 03:52:52.186"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.187">${cur_time} = 20170809035252186007</msg>
<status starttime="20170809 03:52:52.187" status="PASS" endtime="20170809 03:52:52.187"></status>
</kw>
<status starttime="20170809 03:52:52.185" status="PASS" endtime="20170809 03:52:52.188"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.195">${FFDC_TIME} = 20170809035252186007</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.197">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170809 03:52:52.196" status="PASS" endtime="20170809 03:52:52.197"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.197">${suite_name} = 20170809035252186007_TestsSecurityTestSsl</msg>
<status starttime="20170809 03:52:52.197" status="PASS" endtime="20170809 03:52:52.197"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.198">${test_name} = TestSSLConnection</msg>
<status starttime="20170809 03:52:52.198" status="PASS" endtime="20170809 03:52:52.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.198">${test_name} = 20170809035252186007_TestSSLConnection</msg>
<status starttime="20170809 03:52:52.198" status="PASS" endtime="20170809 03:52:52.199"></status>
</kw>
<status starttime="20170809 03:52:52.196" status="PASS" endtime="20170809 03:52:52.199"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.199">${FFDC_DIR_PATH} = /tmp/fspcibld/26435/obmc-robot/logs/20170809035252186007_TestsSecurityTestSsl/20170809035252186007_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170809 03:52:52.203">${FFDC_PREFIX} = 20170809035252186007_</msg>
<status starttime="20170809 03:52:52.185" status="PASS" endtime="20170809 03:52:52.204"></status>
</kw>
<status starttime="20170809 03:52:52.184" status="PASS" endtime="20170809 03:52:52.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170809 03:52:52.204" status="PASS" endtime="20170809 03:52:52.204"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.205" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs"&gt;/tmp/fspcibld/26435/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170809 03:52:52.204" status="PASS" endtime="20170809 03:52:52.205"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:52:52.206">File '/tmp/fspcibld/26435/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170809 03:52:52.206" status="FAIL" endtime="20170809 03:52:52.206"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.206">${exist} = False</msg>
<status starttime="20170809 03:52:52.205" status="PASS" endtime="20170809 03:52:52.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.208" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:52:52.207" status="PASS" endtime="20170809 03:52:52.208"></status>
</kw>
<status starttime="20170809 03:52:52.207" status="PASS" endtime="20170809 03:52:52.208"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170809 03:52:52.208" status="PASS" endtime="20170809 03:52:52.208"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.209">${cur_time} = 2017-08-09 03:52:52:209057</msg>
<status starttime="20170809 03:52:52.209" status="PASS" endtime="20170809 03:52:52.209"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.210">${cur_time} = 20170809035252209057</msg>
<status starttime="20170809 03:52:52.209" status="PASS" endtime="20170809 03:52:52.210"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.210">${cur_time} = 20170809035252209057</msg>
<status starttime="20170809 03:52:52.208" status="PASS" endtime="20170809 03:52:52.210"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.211" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 03:52:52.210" status="PASS" endtime="20170809 03:52:52.211"></status>
</kw>
<status starttime="20170809 03:52:52.158" status="PASS" endtime="20170809 03:52:52.211"></status>
</kw>
<status starttime="20170809 03:52:51.863" status="PASS" endtime="20170809 03:52:52.211"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170809 03:52:51.651" critical="yes" status="PASS" endtime="20170809 03:52:52.211"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:52:52.213">Delete All Sessions</msg>
<status starttime="20170809 03:52:52.212" status="PASS" endtime="20170809 03:52:52.213"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170809 03:52:51.574" status="PASS" endtime="20170809 03:52:52.213"></status>
</suite>
<status starttime="20170809 03:52:51.572" status="PASS" endtime="20170809 03:52:52.215"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/26435/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.255">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:52:52.254" status="PASS" endtime="20170809 03:52:52.255"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.256">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:52:52.255" status="PASS" endtime="20170809 03:52:52.256"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.256">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:52:52.254" status="PASS" endtime="20170809 03:52:52.256"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.258">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:52:52.257" status="PASS" endtime="20170809 03:52:52.258"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.258">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:52:52.258" status="PASS" endtime="20170809 03:52:52.258"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.259">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 03:52:52.257" status="PASS" endtime="20170809 03:52:52.259"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.260">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170809 03:52:52.259" status="PASS" endtime="20170809 03:52:52.260"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:52:52.260" status="PASS" endtime="20170809 03:52:52.260"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.264">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:52:52.267">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:52:52.267">${output} = /tmp/fspcibld/26435/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170809 03:52:52.260" status="PASS" endtime="20170809 03:52:52.267"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 03:52:52.270" status="PASS" endtime="20170809 03:52:52.270"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170809 03:52:52.271" status="PASS" endtime="20170809 03:52:52.271"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.272">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:52:52.272" status="PASS" endtime="20170809 03:52:52.272"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.273">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:52:52.259" status="PASS" endtime="20170809 03:52:52.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.273">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170809 03:52:52.273" status="PASS" endtime="20170809 03:52:52.273"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:52:52.273" status="PASS" endtime="20170809 03:52:52.274"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.277">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:52:52.289">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:52:52.289">${os_con_pid} = </msg>
<status starttime="20170809 03:52:52.274" status="PASS" endtime="20170809 03:52:52.289"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170809 03:52:52.291" status="PASS" endtime="20170809 03:52:52.292"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.293">${cmd_buf} = kill -9 </msg>
<status starttime="20170809 03:52:52.293" status="PASS" endtime="20170809 03:52:52.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:52:52.294" status="PASS" endtime="20170809 03:52:52.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.295">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 03:52:52.295">${output} = None</msg>
<status starttime="20170809 03:52:52.295" status="PASS" endtime="20170809 03:52:52.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 03:52:52.296" status="PASS" endtime="20170809 03:52:52.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:52:52.305">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status starttime="20170809 03:52:52.298" status="FAIL" endtime="20170809 03:52:52.305"></status>
</kw>
<status starttime="20170809 03:52:52.298" status="PASS" endtime="20170809 03:52:52.305"></status>
</kw>
<status starttime="20170809 03:52:52.297" status="PASS" endtime="20170809 03:52:52.305"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.305">${output} = </msg>
<status starttime="20170809 03:52:52.305" status="PASS" endtime="20170809 03:52:52.305"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.306">${loc_quiet} = 1</msg>
<status starttime="20170809 03:52:52.306" status="PASS" endtime="20170809 03:52:52.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170809 03:52:52.307" status="PASS" endtime="20170809 03:52:52.369"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.369">${rc} = 1</msg>
<msg level="INFO" timestamp="20170809 03:52:52.369">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170809 03:52:52.306" status="PASS" endtime="20170809 03:52:52.369"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.370">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170809 03:52:52.256" status="PASS" endtime="20170809 03:52:52.370"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.373" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170809 03:52:52.371" status="PASS" endtime="20170809 03:52:52.373"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.374">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170809 03:52:52.374" status="PASS" endtime="20170809 03:52:52.374"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:52:52.374" status="PASS" endtime="20170809 03:52:52.375"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.378">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 03:52:52.381">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:52:52.381">${output} = /tmp/fspcibld/26435/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170809 03:52:52.375" status="PASS" endtime="20170809 03:52:52.381"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 03:52:52.383" status="PASS" endtime="20170809 03:52:52.385"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170809 03:52:52.386" status="PASS" endtime="20170809 03:52:52.386"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.387">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:52:52.386" status="PASS" endtime="20170809 03:52:52.387"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.387">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 03:52:52.373" status="PASS" endtime="20170809 03:52:52.387"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.388">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170809 03:52:52.388" status="PASS" endtime="20170809 03:52:52.388"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 03:52:52.389" status="PASS" endtime="20170809 03:52:52.389"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.392">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170809 03:52:52.396">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 03:52:52.396">${output} = </msg>
<status starttime="20170809 03:52:52.389" status="PASS" endtime="20170809 03:52:52.396"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170809 03:52:52.398" status="PASS" endtime="20170809 03:52:52.399"></status>
</kw>
<status starttime="20170809 03:52:52.253" status="PASS" endtime="20170809 03:52:52.399"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.400">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.402">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170809 03:52:52.401" status="PASS" endtime="20170809 03:52:52.402"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.403">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170809 03:52:52.403" status="PASS" endtime="20170809 03:52:52.403"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.408">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:52:52.407" status="PASS" endtime="20170809 03:52:52.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.410">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:52:52.410" status="PASS" endtime="20170809 03:52:52.410"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.411">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:52:52.411" status="PASS" endtime="20170809 03:52:52.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.412">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:52:52.411" status="PASS" endtime="20170809 03:52:52.412"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.950">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:52:52.412" status="PASS" endtime="20170809 03:52:52.950"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:52.950">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:52:52.950">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:52.412" status="PASS" endtime="20170809 03:52:52.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.951">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:52.951" status="PASS" endtime="20170809 03:52:52.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.952">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:52.951" status="PASS" endtime="20170809 03:52:52.952"></status>
</kw>
<status starttime="20170809 03:52:52.407" status="PASS" endtime="20170809 03:52:52.952"></status>
</kw>
<status starttime="20170809 03:52:52.406" status="PASS" endtime="20170809 03:52:52.952"></status>
</kw>
<status starttime="20170809 03:52:52.404" status="PASS" endtime="20170809 03:52:52.952"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.953">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170809 03:52:52.952" status="PASS" endtime="20170809 03:52:52.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.954">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:52:52.953" status="PASS" endtime="20170809 03:52:52.954"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170809 03:52:52.954" status="PASS" endtime="20170809 03:52:52.954"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:52.956">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20170809 03:52:52.955" status="PASS" endtime="20170809 03:52:52.956"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:52.957">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170809 03:52:52.956" status="PASS" endtime="20170809 03:52:52.957"></status>
</kw>
<status starttime="20170809 03:52:52.956" status="PASS" endtime="20170809 03:52:52.957"></status>
</kw>
<status starttime="20170809 03:52:52.954" status="PASS" endtime="20170809 03:52:52.957"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:53.443">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 03:52:53.443">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:52.957" status="PASS" endtime="20170809 03:52:53.443"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:53.445">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:52:53.444" status="PASS" endtime="20170809 03:52:53.445"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:53.446">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:52:53.446" status="PASS" endtime="20170809 03:52:53.446"></status>
</kw>
<status starttime="20170809 03:52:53.445" status="PASS" endtime="20170809 03:52:53.446"></status>
</kw>
<status starttime="20170809 03:52:53.444" status="PASS" endtime="20170809 03:52:53.446"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:52:53.447">Delete All Sessions</msg>
<status starttime="20170809 03:52:53.447" status="PASS" endtime="20170809 03:52:53.447"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:53.447">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:52.404" status="PASS" endtime="20170809 03:52:53.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:53.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:53.447" status="PASS" endtime="20170809 03:52:53.448"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:53.448">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:52:53.448">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:52:53.448">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:52:53.448" status="PASS" endtime="20170809 03:52:53.448"></status>
</kw>
<status starttime="20170809 03:52:52.402" status="PASS" endtime="20170809 03:52:53.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170809 03:52:53.449" status="PASS" endtime="20170809 03:52:53.449"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:53.455">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:52:53.455" status="PASS" endtime="20170809 03:52:53.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:53.456">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:52:53.456" status="PASS" endtime="20170809 03:52:53.456"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:53.457">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:52:53.456" status="PASS" endtime="20170809 03:52:53.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:53.457">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:52:53.457" status="PASS" endtime="20170809 03:52:53.458"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:55.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:52:53.459" status="PASS" endtime="20170809 03:52:55.050"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:55.050">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:52:55.050">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:53.458" status="PASS" endtime="20170809 03:52:55.050"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:55.051">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:55.050" status="PASS" endtime="20170809 03:52:55.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:55.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:55.051" status="PASS" endtime="20170809 03:52:55.051"></status>
</kw>
<status starttime="20170809 03:52:53.454" status="PASS" endtime="20170809 03:52:55.052"></status>
</kw>
<status starttime="20170809 03:52:53.454" status="PASS" endtime="20170809 03:52:55.052"></status>
</kw>
<status starttime="20170809 03:52:53.453" status="PASS" endtime="20170809 03:52:55.052"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:55.053">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:52:55.052" status="PASS" endtime="20170809 03:52:55.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:55.055">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:52:55.054" status="PASS" endtime="20170809 03:52:55.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:55.056">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:52:55.055" status="PASS" endtime="20170809 03:52:55.056"></status>
</kw>
<status starttime="20170809 03:52:55.055" status="PASS" endtime="20170809 03:52:55.056"></status>
</kw>
<status starttime="20170809 03:52:55.053" status="PASS" endtime="20170809 03:52:55.056"></status>
</kw>
<status starttime="20170809 03:52:55.053" status="PASS" endtime="20170809 03:52:55.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:59.336">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:52:59.336">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:55.056" status="PASS" endtime="20170809 03:52:59.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:59.338">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:52:59.337" status="PASS" endtime="20170809 03:52:59.338"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:59.339">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:52:59.339" status="PASS" endtime="20170809 03:52:59.339"></status>
</kw>
<status starttime="20170809 03:52:59.338" status="PASS" endtime="20170809 03:52:59.339"></status>
</kw>
<status starttime="20170809 03:52:59.337" status="PASS" endtime="20170809 03:52:59.339"></status>
</kw>
<status starttime="20170809 03:52:59.336" status="PASS" endtime="20170809 03:52:59.339"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:52:59.340">Delete All Sessions</msg>
<status starttime="20170809 03:52:59.340" status="PASS" endtime="20170809 03:52:59.340"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:59.340">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:53.452" status="PASS" endtime="20170809 03:52:59.340"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:59.341">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:59.340" status="PASS" endtime="20170809 03:52:59.341"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:59.341">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:52:59.341">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:52:59.341">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:52:59.341" status="PASS" endtime="20170809 03:52:59.342"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:59.342">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 03:52:53.451" status="PASS" endtime="20170809 03:52:59.342"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:59.342">${power_state} = Off</msg>
<status starttime="20170809 03:52:53.451" status="PASS" endtime="20170809 03:52:59.342"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:52:59.342" status="PASS" endtime="20170809 03:52:59.343"></status>
</kw>
<status starttime="20170809 03:52:53.450" status="PASS" endtime="20170809 03:52:59.343"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:59.347">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:52:59.347" status="PASS" endtime="20170809 03:52:59.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:59.348">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:52:59.348" status="PASS" endtime="20170809 03:52:59.348"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:59.349">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:52:59.348" status="PASS" endtime="20170809 03:52:59.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:59.349">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:52:59.349" status="PASS" endtime="20170809 03:52:59.349"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:59.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:52:59.350" status="PASS" endtime="20170809 03:52:59.728"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:52:59.728">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:52:59.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:59.350" status="PASS" endtime="20170809 03:52:59.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:59.729">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:59.728" status="PASS" endtime="20170809 03:52:59.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:59.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:52:59.729" status="PASS" endtime="20170809 03:52:59.729"></status>
</kw>
<status starttime="20170809 03:52:59.346" status="PASS" endtime="20170809 03:52:59.729"></status>
</kw>
<status starttime="20170809 03:52:59.345" status="PASS" endtime="20170809 03:52:59.730"></status>
</kw>
<status starttime="20170809 03:52:59.345" status="PASS" endtime="20170809 03:52:59.730"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:59.730">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:52:59.730" status="PASS" endtime="20170809 03:52:59.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:52:59.732">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:52:59.732" status="PASS" endtime="20170809 03:52:59.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:52:59.733">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:52:59.733" status="PASS" endtime="20170809 03:52:59.733"></status>
</kw>
<status starttime="20170809 03:52:59.733" status="PASS" endtime="20170809 03:52:59.733"></status>
</kw>
<status starttime="20170809 03:52:59.731" status="PASS" endtime="20170809 03:52:59.734"></status>
</kw>
<status starttime="20170809 03:52:59.731" status="PASS" endtime="20170809 03:52:59.734"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.097">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:00.098">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:59.734" status="PASS" endtime="20170809 03:53:00.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.100">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:00.099" status="PASS" endtime="20170809 03:53:00.100"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:00.101">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:00.101" status="PASS" endtime="20170809 03:53:00.101"></status>
</kw>
<status starttime="20170809 03:53:00.100" status="PASS" endtime="20170809 03:53:00.101"></status>
</kw>
<status starttime="20170809 03:53:00.099" status="PASS" endtime="20170809 03:53:00.101"></status>
</kw>
<status starttime="20170809 03:53:00.098" status="PASS" endtime="20170809 03:53:00.101"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:00.102">Delete All Sessions</msg>
<status starttime="20170809 03:53:00.102" status="PASS" endtime="20170809 03:53:00.102"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:00.102">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:52:59.344" status="PASS" endtime="20170809 03:53:00.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:00.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:00.102" status="PASS" endtime="20170809 03:53:00.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.103">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:00.103">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:00.103">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:00.103" status="PASS" endtime="20170809 03:53:00.103"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:00.104">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170809 03:52:59.344" status="PASS" endtime="20170809 03:53:00.104"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:00.104">${host_state} = Off</msg>
<status starttime="20170809 03:52:59.343" status="PASS" endtime="20170809 03:53:00.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:53:00.104" status="PASS" endtime="20170809 03:53:00.104"></status>
</kw>
<status starttime="20170809 03:52:53.450" status="PASS" endtime="20170809 03:53:00.105"></status>
</kw>
<status starttime="20170809 03:52:53.449" status="PASS" endtime="20170809 03:53:00.105"></status>
</kw>
<status starttime="20170809 03:52:52.401" status="PASS" endtime="20170809 03:53:00.105"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.106">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170809 03:53:00.106" status="PASS" endtime="20170809 03:53:00.106"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.107">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170809 03:53:00.107" status="PASS" endtime="20170809 03:53:00.108"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:00.110">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:00.110" status="PASS" endtime="20170809 03:53:00.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.111">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:00.111" status="PASS" endtime="20170809 03:53:00.111"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.112">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:00.111" status="PASS" endtime="20170809 03:53:00.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.112">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:00.112" status="PASS" endtime="20170809 03:53:00.113"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:00.526">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:00.113" status="PASS" endtime="20170809 03:53:00.527"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:00.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:00.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:00.113" status="PASS" endtime="20170809 03:53:00.527"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:00.528">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:00.527" status="PASS" endtime="20170809 03:53:00.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:00.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:00.528" status="PASS" endtime="20170809 03:53:00.529"></status>
</kw>
<status starttime="20170809 03:53:00.109" status="PASS" endtime="20170809 03:53:00.529"></status>
</kw>
<status starttime="20170809 03:53:00.109" status="PASS" endtime="20170809 03:53:00.529"></status>
</kw>
<status starttime="20170809 03:53:00.108" status="PASS" endtime="20170809 03:53:00.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.530">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170809 03:53:00.529" status="PASS" endtime="20170809 03:53:00.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.530">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:00.530" status="PASS" endtime="20170809 03:53:00.530"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170809 03:53:00.530" status="PASS" endtime="20170809 03:53:00.531"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:00.533">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20170809 03:53:00.532" status="PASS" endtime="20170809 03:53:00.533"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:00.534">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170809 03:53:00.533" status="PASS" endtime="20170809 03:53:00.534"></status>
</kw>
<status starttime="20170809 03:53:00.533" status="PASS" endtime="20170809 03:53:00.534"></status>
</kw>
<status starttime="20170809 03:53:00.531" status="PASS" endtime="20170809 03:53:00.534"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:01.047">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 03:53:01.048">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:00.534" status="PASS" endtime="20170809 03:53:01.048"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:01.049">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:01.048" status="PASS" endtime="20170809 03:53:01.049"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:01.050">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:01.050" status="PASS" endtime="20170809 03:53:01.050"></status>
</kw>
<status starttime="20170809 03:53:01.049" status="PASS" endtime="20170809 03:53:01.050"></status>
</kw>
<status starttime="20170809 03:53:01.048" status="PASS" endtime="20170809 03:53:01.050"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:01.051">Delete All Sessions</msg>
<status starttime="20170809 03:53:01.050" status="PASS" endtime="20170809 03:53:01.051"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:01.051">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:00.108" status="PASS" endtime="20170809 03:53:01.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:01.052">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:01.051" status="PASS" endtime="20170809 03:53:01.052"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:01.053">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:01.053">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:01.053">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:01.052" status="PASS" endtime="20170809 03:53:01.053"></status>
</kw>
<status starttime="20170809 03:53:00.106" status="PASS" endtime="20170809 03:53:01.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170809 03:53:01.053" status="PASS" endtime="20170809 03:53:01.053"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:01.058">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:01.058" status="PASS" endtime="20170809 03:53:01.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:01.059">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:01.059" status="PASS" endtime="20170809 03:53:01.059"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:01.060">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:01.060" status="PASS" endtime="20170809 03:53:01.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:01.061">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:01.060" status="PASS" endtime="20170809 03:53:01.061"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:03.654">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:01.061" status="PASS" endtime="20170809 03:53:03.654"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:03.654">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:03.654">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:01.061" status="PASS" endtime="20170809 03:53:03.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:03.655">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:03.655" status="PASS" endtime="20170809 03:53:03.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:03.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:03.655" status="PASS" endtime="20170809 03:53:03.656"></status>
</kw>
<status starttime="20170809 03:53:01.057" status="PASS" endtime="20170809 03:53:03.656"></status>
</kw>
<status starttime="20170809 03:53:01.057" status="PASS" endtime="20170809 03:53:03.656"></status>
</kw>
<status starttime="20170809 03:53:01.056" status="PASS" endtime="20170809 03:53:03.656"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:03.657">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:53:03.656" status="PASS" endtime="20170809 03:53:03.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:03.659">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:03.658" status="PASS" endtime="20170809 03:53:03.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:03.660">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:03.660" status="PASS" endtime="20170809 03:53:03.660"></status>
</kw>
<status starttime="20170809 03:53:03.659" status="PASS" endtime="20170809 03:53:03.660"></status>
</kw>
<status starttime="20170809 03:53:03.658" status="PASS" endtime="20170809 03:53:03.660"></status>
</kw>
<status starttime="20170809 03:53:03.657" status="PASS" endtime="20170809 03:53:03.660"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:06.981">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:06.982">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:03.661" status="PASS" endtime="20170809 03:53:06.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:06.984">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:06.983" status="PASS" endtime="20170809 03:53:06.984"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:06.985">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:06.984" status="PASS" endtime="20170809 03:53:06.985"></status>
</kw>
<status starttime="20170809 03:53:06.984" status="PASS" endtime="20170809 03:53:06.985"></status>
</kw>
<status starttime="20170809 03:53:06.983" status="PASS" endtime="20170809 03:53:06.985"></status>
</kw>
<status starttime="20170809 03:53:06.982" status="PASS" endtime="20170809 03:53:06.985"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:06.985">Delete All Sessions</msg>
<status starttime="20170809 03:53:06.985" status="PASS" endtime="20170809 03:53:06.985"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:06.986">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:01.056" status="PASS" endtime="20170809 03:53:06.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:06.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:06.986" status="PASS" endtime="20170809 03:53:06.986"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:06.987">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:06.987">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:06.987">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:06.987" status="PASS" endtime="20170809 03:53:06.987"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:06.987">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 03:53:01.055" status="PASS" endtime="20170809 03:53:06.987"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:06.988">${power_state} = Off</msg>
<status starttime="20170809 03:53:01.055" status="PASS" endtime="20170809 03:53:06.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:53:06.988">On != Off</msg>
<status starttime="20170809 03:53:06.988" status="FAIL" endtime="20170809 03:53:06.988"></status>
</kw>
<status starttime="20170809 03:53:01.054" status="FAIL" endtime="20170809 03:53:06.989"></status>
</kw>
<status starttime="20170809 03:53:01.054" status="FAIL" endtime="20170809 03:53:06.989"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:16.996">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:16.995" status="PASS" endtime="20170809 03:53:16.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:16.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:16.996" status="PASS" endtime="20170809 03:53:16.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:16.997">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:16.997" status="PASS" endtime="20170809 03:53:16.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:16.998">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:16.998" status="PASS" endtime="20170809 03:53:16.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:17.561">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:16.999" status="PASS" endtime="20170809 03:53:17.561"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:17.561">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:17.561">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:16.999" status="PASS" endtime="20170809 03:53:17.561"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:17.562">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:17.562" status="PASS" endtime="20170809 03:53:17.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:17.563">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:17.562" status="PASS" endtime="20170809 03:53:17.563"></status>
</kw>
<status starttime="20170809 03:53:16.994" status="PASS" endtime="20170809 03:53:17.563"></status>
</kw>
<status starttime="20170809 03:53:16.994" status="PASS" endtime="20170809 03:53:17.563"></status>
</kw>
<status starttime="20170809 03:53:16.993" status="PASS" endtime="20170809 03:53:17.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:17.564">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:53:17.563" status="PASS" endtime="20170809 03:53:17.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:17.566">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:17.565" status="PASS" endtime="20170809 03:53:17.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:17.567">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:17.567" status="PASS" endtime="20170809 03:53:17.567"></status>
</kw>
<status starttime="20170809 03:53:17.566" status="PASS" endtime="20170809 03:53:17.567"></status>
</kw>
<status starttime="20170809 03:53:17.564" status="PASS" endtime="20170809 03:53:17.567"></status>
</kw>
<status starttime="20170809 03:53:17.564" status="PASS" endtime="20170809 03:53:17.567"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.201">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:18.201">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:17.568" status="PASS" endtime="20170809 03:53:18.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.203">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:18.202" status="PASS" endtime="20170809 03:53:18.203"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.204">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:18.204" status="PASS" endtime="20170809 03:53:18.204"></status>
</kw>
<status starttime="20170809 03:53:18.203" status="PASS" endtime="20170809 03:53:18.204"></status>
</kw>
<status starttime="20170809 03:53:18.202" status="PASS" endtime="20170809 03:53:18.204"></status>
</kw>
<status starttime="20170809 03:53:18.201" status="PASS" endtime="20170809 03:53:18.204"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:18.205">Delete All Sessions</msg>
<status starttime="20170809 03:53:18.205" status="PASS" endtime="20170809 03:53:18.205"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.205">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:16.992" status="PASS" endtime="20170809 03:53:18.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:18.205" status="PASS" endtime="20170809 03:53:18.206"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.206">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:18.206">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:18.207">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:18.206" status="PASS" endtime="20170809 03:53:18.207"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.207">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:53:16.991" status="PASS" endtime="20170809 03:53:18.207"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.207">${power_state} = On</msg>
<status starttime="20170809 03:53:16.991" status="PASS" endtime="20170809 03:53:18.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:53:18.207" status="PASS" endtime="20170809 03:53:18.208"></status>
</kw>
<status starttime="20170809 03:53:16.990" status="PASS" endtime="20170809 03:53:18.208"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.212">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:18.211" status="PASS" endtime="20170809 03:53:18.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.212">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:18.212" status="PASS" endtime="20170809 03:53:18.212"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.213">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:18.213" status="PASS" endtime="20170809 03:53:18.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.214">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:18.213" status="PASS" endtime="20170809 03:53:18.214"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.518">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:18.214" status="PASS" endtime="20170809 03:53:18.518"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.519">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:18.519">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:18.214" status="PASS" endtime="20170809 03:53:18.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.519">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:18.519" status="PASS" endtime="20170809 03:53:18.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:18.520" status="PASS" endtime="20170809 03:53:18.520"></status>
</kw>
<status starttime="20170809 03:53:18.211" status="PASS" endtime="20170809 03:53:18.520"></status>
</kw>
<status starttime="20170809 03:53:18.210" status="PASS" endtime="20170809 03:53:18.520"></status>
</kw>
<status starttime="20170809 03:53:18.210" status="PASS" endtime="20170809 03:53:18.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.521">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:53:18.521" status="PASS" endtime="20170809 03:53:18.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.523">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:18.522" status="PASS" endtime="20170809 03:53:18.523"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.524">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:18.524" status="PASS" endtime="20170809 03:53:18.524"></status>
</kw>
<status starttime="20170809 03:53:18.523" status="PASS" endtime="20170809 03:53:18.524"></status>
</kw>
<status starttime="20170809 03:53:18.522" status="PASS" endtime="20170809 03:53:18.524"></status>
</kw>
<status starttime="20170809 03:53:18.521" status="PASS" endtime="20170809 03:53:18.524"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:18.613">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:18.525" status="PASS" endtime="20170809 03:53:18.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.615">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:18.614" status="PASS" endtime="20170809 03:53:18.615"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.616">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:18.616" status="PASS" endtime="20170809 03:53:18.616"></status>
</kw>
<status starttime="20170809 03:53:18.615" status="PASS" endtime="20170809 03:53:18.616"></status>
</kw>
<status starttime="20170809 03:53:18.614" status="PASS" endtime="20170809 03:53:18.616"></status>
</kw>
<status starttime="20170809 03:53:18.613" status="PASS" endtime="20170809 03:53:18.616"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:18.617">Delete All Sessions</msg>
<status starttime="20170809 03:53:18.616" status="PASS" endtime="20170809 03:53:18.617"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.617">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:18.209" status="PASS" endtime="20170809 03:53:18.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:18.617" status="PASS" endtime="20170809 03:53:18.618"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.618">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:18.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:18.618">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:18.618" status="PASS" endtime="20170809 03:53:18.618"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.619">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:53:18.208" status="PASS" endtime="20170809 03:53:18.619"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.619">${host_state} = Running</msg>
<status starttime="20170809 03:53:18.208" status="PASS" endtime="20170809 03:53:18.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:53:18.619" status="PASS" endtime="20170809 03:53:18.619"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.624">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:18.623" status="PASS" endtime="20170809 03:53:18.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:18.624" status="PASS" endtime="20170809 03:53:18.625"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.625">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:18.625" status="PASS" endtime="20170809 03:53:18.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:18.626" status="PASS" endtime="20170809 03:53:18.626"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.820">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:18.627" status="PASS" endtime="20170809 03:53:18.820"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.820">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:18.821">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:18.626" status="PASS" endtime="20170809 03:53:18.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.821">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:18.821" status="PASS" endtime="20170809 03:53:18.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:18.822" status="PASS" endtime="20170809 03:53:18.822"></status>
</kw>
<status starttime="20170809 03:53:18.623" status="PASS" endtime="20170809 03:53:18.822"></status>
</kw>
<status starttime="20170809 03:53:18.622" status="PASS" endtime="20170809 03:53:18.822"></status>
</kw>
<status starttime="20170809 03:53:18.621" status="PASS" endtime="20170809 03:53:18.822"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.823">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:53:18.823" status="PASS" endtime="20170809 03:53:18.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.825">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:53:18.824" status="PASS" endtime="20170809 03:53:18.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.826">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:53:18.826" status="PASS" endtime="20170809 03:53:18.826"></status>
</kw>
<status starttime="20170809 03:53:18.825" status="PASS" endtime="20170809 03:53:18.826"></status>
</kw>
<status starttime="20170809 03:53:18.824" status="PASS" endtime="20170809 03:53:18.826"></status>
</kw>
<status starttime="20170809 03:53:18.823" status="PASS" endtime="20170809 03:53:18.826"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.924">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:18.924">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:18.826" status="PASS" endtime="20170809 03:53:18.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.926">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:18.925" status="PASS" endtime="20170809 03:53:18.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.929">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:18.926" status="PASS" endtime="20170809 03:53:18.929"></status>
</kw>
<status starttime="20170809 03:53:18.926" status="PASS" endtime="20170809 03:53:18.930"></status>
</kw>
<status starttime="20170809 03:53:18.925" status="PASS" endtime="20170809 03:53:18.930"></status>
</kw>
<status starttime="20170809 03:53:18.924" status="PASS" endtime="20170809 03:53:18.930"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:18.930">Delete All Sessions</msg>
<status starttime="20170809 03:53:18.930" status="PASS" endtime="20170809 03:53:18.930"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.931">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:18.621" status="PASS" endtime="20170809 03:53:18.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:18.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:18.931" status="PASS" endtime="20170809 03:53:18.932"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:18.932">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:18.932">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:18.932">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:18.932" status="PASS" endtime="20170809 03:53:18.932"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.933">${state} = Off</msg>
<status starttime="20170809 03:53:18.620" status="PASS" endtime="20170809 03:53:18.933"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:18.933">${boot_progress} = Off</msg>
<status starttime="20170809 03:53:18.620" status="PASS" endtime="20170809 03:53:18.933"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:53:18.934">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 03:53:18.933" status="FAIL" endtime="20170809 03:53:18.934"></status>
</kw>
<status starttime="20170809 03:53:18.620" status="FAIL" endtime="20170809 03:53:18.934"></status>
</kw>
<status starttime="20170809 03:53:16.989" status="FAIL" endtime="20170809 03:53:18.934"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:28.939">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:28.939" status="PASS" endtime="20170809 03:53:28.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:28.940">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:28.940" status="PASS" endtime="20170809 03:53:28.940"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:28.941">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:28.940" status="PASS" endtime="20170809 03:53:28.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:28.941">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:28.941" status="PASS" endtime="20170809 03:53:28.941"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.383">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:28.942" status="PASS" endtime="20170809 03:53:29.383"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:29.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:29.383">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:28.942" status="PASS" endtime="20170809 03:53:29.383"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.384">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:29.384" status="PASS" endtime="20170809 03:53:29.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:29.385" status="PASS" endtime="20170809 03:53:29.385"></status>
</kw>
<status starttime="20170809 03:53:28.938" status="PASS" endtime="20170809 03:53:29.385"></status>
</kw>
<status starttime="20170809 03:53:28.938" status="PASS" endtime="20170809 03:53:29.385"></status>
</kw>
<status starttime="20170809 03:53:28.937" status="PASS" endtime="20170809 03:53:29.385"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.386">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:53:29.386" status="PASS" endtime="20170809 03:53:29.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.388">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:29.387" status="PASS" endtime="20170809 03:53:29.388"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.389">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:29.389" status="PASS" endtime="20170809 03:53:29.389"></status>
</kw>
<status starttime="20170809 03:53:29.388" status="PASS" endtime="20170809 03:53:29.389"></status>
</kw>
<status starttime="20170809 03:53:29.387" status="PASS" endtime="20170809 03:53:29.389"></status>
</kw>
<status starttime="20170809 03:53:29.386" status="PASS" endtime="20170809 03:53:29.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.575">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:29.575">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:29.390" status="PASS" endtime="20170809 03:53:29.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.577">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:29.576" status="PASS" endtime="20170809 03:53:29.577"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.578">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:29.578" status="PASS" endtime="20170809 03:53:29.578"></status>
</kw>
<status starttime="20170809 03:53:29.577" status="PASS" endtime="20170809 03:53:29.578"></status>
</kw>
<status starttime="20170809 03:53:29.576" status="PASS" endtime="20170809 03:53:29.578"></status>
</kw>
<status starttime="20170809 03:53:29.575" status="PASS" endtime="20170809 03:53:29.578"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:29.579">Delete All Sessions</msg>
<status starttime="20170809 03:53:29.578" status="PASS" endtime="20170809 03:53:29.579"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:29.579">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:28.936" status="PASS" endtime="20170809 03:53:29.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:29.579" status="PASS" endtime="20170809 03:53:29.580"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.580">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:29.580">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:29.580">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:29.580" status="PASS" endtime="20170809 03:53:29.580"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:29.581">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:53:28.936" status="PASS" endtime="20170809 03:53:29.581"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:29.581">${power_state} = On</msg>
<status starttime="20170809 03:53:28.935" status="PASS" endtime="20170809 03:53:29.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:53:29.581" status="PASS" endtime="20170809 03:53:29.582"></status>
</kw>
<status starttime="20170809 03:53:28.935" status="PASS" endtime="20170809 03:53:29.582"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.585">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:29.585" status="PASS" endtime="20170809 03:53:29.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.587">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:29.586" status="PASS" endtime="20170809 03:53:29.587"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.587">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:29.587" status="PASS" endtime="20170809 03:53:29.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.588">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:29.588" status="PASS" endtime="20170809 03:53:29.588"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.888">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:29.589" status="PASS" endtime="20170809 03:53:29.888"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:29.888">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:29.888">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:29.588" status="PASS" endtime="20170809 03:53:29.888"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.889">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:29.889" status="PASS" endtime="20170809 03:53:29.889"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.890">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:29.889" status="PASS" endtime="20170809 03:53:29.890"></status>
</kw>
<status starttime="20170809 03:53:29.585" status="PASS" endtime="20170809 03:53:29.890"></status>
</kw>
<status starttime="20170809 03:53:29.584" status="PASS" endtime="20170809 03:53:29.890"></status>
</kw>
<status starttime="20170809 03:53:29.583" status="PASS" endtime="20170809 03:53:29.890"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.891">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:53:29.890" status="PASS" endtime="20170809 03:53:29.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:29.893">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:29.892" status="PASS" endtime="20170809 03:53:29.893"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:29.894">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:29.893" status="PASS" endtime="20170809 03:53:29.894"></status>
</kw>
<status starttime="20170809 03:53:29.893" status="PASS" endtime="20170809 03:53:29.894"></status>
</kw>
<status starttime="20170809 03:53:29.891" status="PASS" endtime="20170809 03:53:29.894"></status>
</kw>
<status starttime="20170809 03:53:29.891" status="PASS" endtime="20170809 03:53:29.894"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:30.159">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:30.160">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:29.894" status="PASS" endtime="20170809 03:53:30.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:30.162">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:30.161" status="PASS" endtime="20170809 03:53:30.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:30.163">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:30.163" status="PASS" endtime="20170809 03:53:30.163"></status>
</kw>
<status starttime="20170809 03:53:30.162" status="PASS" endtime="20170809 03:53:30.163"></status>
</kw>
<status starttime="20170809 03:53:30.161" status="PASS" endtime="20170809 03:53:30.163"></status>
</kw>
<status starttime="20170809 03:53:30.160" status="PASS" endtime="20170809 03:53:30.163"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:30.164">Delete All Sessions</msg>
<status starttime="20170809 03:53:30.163" status="PASS" endtime="20170809 03:53:30.164"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:30.164">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:29.583" status="PASS" endtime="20170809 03:53:30.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:30.164">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:30.164" status="PASS" endtime="20170809 03:53:30.165"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:30.165">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:30.165">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:30.165">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:30.165" status="PASS" endtime="20170809 03:53:30.165"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:30.166">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:53:29.582" status="PASS" endtime="20170809 03:53:30.166"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:30.166">${host_state} = Running</msg>
<status starttime="20170809 03:53:29.582" status="PASS" endtime="20170809 03:53:30.166"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:53:30.166" status="PASS" endtime="20170809 03:53:30.166"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:30.171">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:30.170" status="PASS" endtime="20170809 03:53:30.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:30.171">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:30.171" status="PASS" endtime="20170809 03:53:30.172"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:30.172">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:30.172" status="PASS" endtime="20170809 03:53:30.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:30.173">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:30.172" status="PASS" endtime="20170809 03:53:30.173"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:30.949">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:30.173" status="PASS" endtime="20170809 03:53:30.949"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:30.949">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:30.949">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:30.173" status="PASS" endtime="20170809 03:53:30.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:30.950">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:30.950" status="PASS" endtime="20170809 03:53:30.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:30.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:30.950" status="PASS" endtime="20170809 03:53:30.951"></status>
</kw>
<status starttime="20170809 03:53:30.170" status="PASS" endtime="20170809 03:53:30.951"></status>
</kw>
<status starttime="20170809 03:53:30.169" status="PASS" endtime="20170809 03:53:30.951"></status>
</kw>
<status starttime="20170809 03:53:30.169" status="PASS" endtime="20170809 03:53:30.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:30.952">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:53:30.951" status="PASS" endtime="20170809 03:53:30.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:30.954">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:53:30.953" status="PASS" endtime="20170809 03:53:30.954"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:30.955">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:53:30.955" status="PASS" endtime="20170809 03:53:30.955"></status>
</kw>
<status starttime="20170809 03:53:30.954" status="PASS" endtime="20170809 03:53:30.955"></status>
</kw>
<status starttime="20170809 03:53:30.953" status="PASS" endtime="20170809 03:53:30.955"></status>
</kw>
<status starttime="20170809 03:53:30.952" status="PASS" endtime="20170809 03:53:30.955"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:31.260">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:31.261">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:30.955" status="PASS" endtime="20170809 03:53:31.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:31.263">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:31.262" status="PASS" endtime="20170809 03:53:31.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:31.264">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:31.264" status="PASS" endtime="20170809 03:53:31.264"></status>
</kw>
<status starttime="20170809 03:53:31.263" status="PASS" endtime="20170809 03:53:31.264"></status>
</kw>
<status starttime="20170809 03:53:31.262" status="PASS" endtime="20170809 03:53:31.264"></status>
</kw>
<status starttime="20170809 03:53:31.261" status="PASS" endtime="20170809 03:53:31.264"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:31.265">Delete All Sessions</msg>
<status starttime="20170809 03:53:31.264" status="PASS" endtime="20170809 03:53:31.265"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:31.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:30.168" status="PASS" endtime="20170809 03:53:31.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:31.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:31.265" status="PASS" endtime="20170809 03:53:31.266"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:31.266">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:31.266">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:31.266">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:31.266" status="PASS" endtime="20170809 03:53:31.266"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:31.266">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:53:30.167" status="PASS" endtime="20170809 03:53:31.267"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:31.267">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:53:30.167" status="PASS" endtime="20170809 03:53:31.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:53:31.267">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:53:31.267" status="FAIL" endtime="20170809 03:53:31.268"></status>
</kw>
<status starttime="20170809 03:53:30.167" status="FAIL" endtime="20170809 03:53:31.268"></status>
</kw>
<status starttime="20170809 03:53:28.934" status="FAIL" endtime="20170809 03:53:31.268"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.273">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:41.273" status="PASS" endtime="20170809 03:53:41.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.274">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:41.274" status="PASS" endtime="20170809 03:53:41.274"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.275">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:41.274" status="PASS" endtime="20170809 03:53:41.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.275">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:41.275" status="PASS" endtime="20170809 03:53:41.275"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.478">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:41.276" status="PASS" endtime="20170809 03:53:41.478"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:41.478">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:41.478">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:41.275" status="PASS" endtime="20170809 03:53:41.478"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.479">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:41.478" status="PASS" endtime="20170809 03:53:41.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.479">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:41.479" status="PASS" endtime="20170809 03:53:41.480"></status>
</kw>
<status starttime="20170809 03:53:41.272" status="PASS" endtime="20170809 03:53:41.480"></status>
</kw>
<status starttime="20170809 03:53:41.272" status="PASS" endtime="20170809 03:53:41.480"></status>
</kw>
<status starttime="20170809 03:53:41.271" status="PASS" endtime="20170809 03:53:41.480"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.480">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:53:41.480" status="PASS" endtime="20170809 03:53:41.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.483">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:41.482" status="PASS" endtime="20170809 03:53:41.483"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.483">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:41.483" status="PASS" endtime="20170809 03:53:41.484"></status>
</kw>
<status starttime="20170809 03:53:41.483" status="PASS" endtime="20170809 03:53:41.484"></status>
</kw>
<status starttime="20170809 03:53:41.481" status="PASS" endtime="20170809 03:53:41.484"></status>
</kw>
<status starttime="20170809 03:53:41.481" status="PASS" endtime="20170809 03:53:41.484"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.547">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:41.547">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:41.484" status="PASS" endtime="20170809 03:53:41.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.549">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:41.548" status="PASS" endtime="20170809 03:53:41.549"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.550">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:41.550" status="PASS" endtime="20170809 03:53:41.550"></status>
</kw>
<status starttime="20170809 03:53:41.549" status="PASS" endtime="20170809 03:53:41.550"></status>
</kw>
<status starttime="20170809 03:53:41.548" status="PASS" endtime="20170809 03:53:41.550"></status>
</kw>
<status starttime="20170809 03:53:41.547" status="PASS" endtime="20170809 03:53:41.550"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:41.551">Delete All Sessions</msg>
<status starttime="20170809 03:53:41.550" status="PASS" endtime="20170809 03:53:41.551"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:41.551">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:41.270" status="PASS" endtime="20170809 03:53:41.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:41.551" status="PASS" endtime="20170809 03:53:41.552"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.552">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:41.552">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:41.552">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:41.552" status="PASS" endtime="20170809 03:53:41.552"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:41.552">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:53:41.270" status="PASS" endtime="20170809 03:53:41.553"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:41.553">${power_state} = On</msg>
<status starttime="20170809 03:53:41.269" status="PASS" endtime="20170809 03:53:41.553"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:53:41.553" status="PASS" endtime="20170809 03:53:41.553"></status>
</kw>
<status starttime="20170809 03:53:41.269" status="PASS" endtime="20170809 03:53:41.553"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.557">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:41.557" status="PASS" endtime="20170809 03:53:41.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.558">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:41.558" status="PASS" endtime="20170809 03:53:41.558"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.559">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:41.559" status="PASS" endtime="20170809 03:53:41.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.560">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:41.559" status="PASS" endtime="20170809 03:53:41.560"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.742">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:41.561" status="PASS" endtime="20170809 03:53:41.743"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:41.743">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:41.743">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:41.560" status="PASS" endtime="20170809 03:53:41.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.743">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:41.743" status="PASS" endtime="20170809 03:53:41.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:41.744" status="PASS" endtime="20170809 03:53:41.744"></status>
</kw>
<status starttime="20170809 03:53:41.556" status="PASS" endtime="20170809 03:53:41.744"></status>
</kw>
<status starttime="20170809 03:53:41.556" status="PASS" endtime="20170809 03:53:41.744"></status>
</kw>
<status starttime="20170809 03:53:41.555" status="PASS" endtime="20170809 03:53:41.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.745">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:53:41.745" status="PASS" endtime="20170809 03:53:41.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.747">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:41.746" status="PASS" endtime="20170809 03:53:41.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.748">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:41.748" status="PASS" endtime="20170809 03:53:41.748"></status>
</kw>
<status starttime="20170809 03:53:41.747" status="PASS" endtime="20170809 03:53:41.749"></status>
</kw>
<status starttime="20170809 03:53:41.746" status="PASS" endtime="20170809 03:53:41.749"></status>
</kw>
<status starttime="20170809 03:53:41.745" status="PASS" endtime="20170809 03:53:41.749"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.853">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:41.853">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:41.749" status="PASS" endtime="20170809 03:53:41.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.855">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:41.854" status="PASS" endtime="20170809 03:53:41.855"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.856">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:41.855" status="PASS" endtime="20170809 03:53:41.856"></status>
</kw>
<status starttime="20170809 03:53:41.855" status="PASS" endtime="20170809 03:53:41.856"></status>
</kw>
<status starttime="20170809 03:53:41.854" status="PASS" endtime="20170809 03:53:41.856"></status>
</kw>
<status starttime="20170809 03:53:41.853" status="PASS" endtime="20170809 03:53:41.856"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:41.856">Delete All Sessions</msg>
<status starttime="20170809 03:53:41.856" status="PASS" endtime="20170809 03:53:41.856"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:41.857">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:41.555" status="PASS" endtime="20170809 03:53:41.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:41.857" status="PASS" endtime="20170809 03:53:41.857"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.858">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:41.858">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:41.858">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:41.858" status="PASS" endtime="20170809 03:53:41.858"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:41.858">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:53:41.554" status="PASS" endtime="20170809 03:53:41.858"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:41.859">${host_state} = Running</msg>
<status starttime="20170809 03:53:41.554" status="PASS" endtime="20170809 03:53:41.859"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:53:41.859" status="PASS" endtime="20170809 03:53:41.859"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:41.864">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:41.864" status="PASS" endtime="20170809 03:53:41.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.865">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:41.865" status="PASS" endtime="20170809 03:53:41.865"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.866">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:41.865" status="PASS" endtime="20170809 03:53:41.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:41.866">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:41.866" status="PASS" endtime="20170809 03:53:41.866"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:42.091">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:41.867" status="PASS" endtime="20170809 03:53:42.092"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:42.092">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:42.092">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:41.867" status="PASS" endtime="20170809 03:53:42.092"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:42.092">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:42.092" status="PASS" endtime="20170809 03:53:42.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:42.093">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:42.093" status="PASS" endtime="20170809 03:53:42.093"></status>
</kw>
<status starttime="20170809 03:53:41.863" status="PASS" endtime="20170809 03:53:42.093"></status>
</kw>
<status starttime="20170809 03:53:41.863" status="PASS" endtime="20170809 03:53:42.093"></status>
</kw>
<status starttime="20170809 03:53:41.862" status="PASS" endtime="20170809 03:53:42.094"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:42.094">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:53:42.094" status="PASS" endtime="20170809 03:53:42.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:42.096">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:53:42.095" status="PASS" endtime="20170809 03:53:42.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:42.097">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:53:42.097" status="PASS" endtime="20170809 03:53:42.097"></status>
</kw>
<status starttime="20170809 03:53:42.096" status="PASS" endtime="20170809 03:53:42.097"></status>
</kw>
<status starttime="20170809 03:53:42.095" status="PASS" endtime="20170809 03:53:42.098"></status>
</kw>
<status starttime="20170809 03:53:42.094" status="PASS" endtime="20170809 03:53:42.098"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:42.208">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:42.208">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:42.098" status="PASS" endtime="20170809 03:53:42.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:42.210">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:42.209" status="PASS" endtime="20170809 03:53:42.210"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:42.211">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:42.211" status="PASS" endtime="20170809 03:53:42.211"></status>
</kw>
<status starttime="20170809 03:53:42.210" status="PASS" endtime="20170809 03:53:42.211"></status>
</kw>
<status starttime="20170809 03:53:42.209" status="PASS" endtime="20170809 03:53:42.211"></status>
</kw>
<status starttime="20170809 03:53:42.208" status="PASS" endtime="20170809 03:53:42.211"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:42.212">Delete All Sessions</msg>
<status starttime="20170809 03:53:42.211" status="PASS" endtime="20170809 03:53:42.212"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:42.212">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:41.861" status="PASS" endtime="20170809 03:53:42.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:42.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:42.212" status="PASS" endtime="20170809 03:53:42.213"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:42.213">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:42.213">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:42.213">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:42.213" status="PASS" endtime="20170809 03:53:42.213"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:42.214">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:53:41.860" status="PASS" endtime="20170809 03:53:42.214"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:42.214">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:53:41.860" status="PASS" endtime="20170809 03:53:42.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:53:42.214">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:53:42.214" status="FAIL" endtime="20170809 03:53:42.215"></status>
</kw>
<status starttime="20170809 03:53:41.860" status="FAIL" endtime="20170809 03:53:42.215"></status>
</kw>
<status starttime="20170809 03:53:41.268" status="FAIL" endtime="20170809 03:53:42.215"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.220">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:52.220" status="PASS" endtime="20170809 03:53:52.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.221">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:52.221" status="PASS" endtime="20170809 03:53:52.221"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.222">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:52.221" status="PASS" endtime="20170809 03:53:52.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.222">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:52.222" status="PASS" endtime="20170809 03:53:52.222"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:52.223" status="PASS" endtime="20170809 03:53:52.404"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:52.405">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:52.405">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:52.223" status="PASS" endtime="20170809 03:53:52.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.405">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:52.405" status="PASS" endtime="20170809 03:53:52.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:52.406" status="PASS" endtime="20170809 03:53:52.406"></status>
</kw>
<status starttime="20170809 03:53:52.219" status="PASS" endtime="20170809 03:53:52.406"></status>
</kw>
<status starttime="20170809 03:53:52.219" status="PASS" endtime="20170809 03:53:52.406"></status>
</kw>
<status starttime="20170809 03:53:52.218" status="PASS" endtime="20170809 03:53:52.406"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.407">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:53:52.407" status="PASS" endtime="20170809 03:53:52.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.409">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:52.408" status="PASS" endtime="20170809 03:53:52.409"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.410">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:52.410" status="PASS" endtime="20170809 03:53:52.410"></status>
</kw>
<status starttime="20170809 03:53:52.409" status="PASS" endtime="20170809 03:53:52.410"></status>
</kw>
<status starttime="20170809 03:53:52.408" status="PASS" endtime="20170809 03:53:52.410"></status>
</kw>
<status starttime="20170809 03:53:52.407" status="PASS" endtime="20170809 03:53:52.411"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.475">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:52.475">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:52.411" status="PASS" endtime="20170809 03:53:52.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.477">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:52.476" status="PASS" endtime="20170809 03:53:52.477"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.478">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:52.478" status="PASS" endtime="20170809 03:53:52.478"></status>
</kw>
<status starttime="20170809 03:53:52.477" status="PASS" endtime="20170809 03:53:52.478"></status>
</kw>
<status starttime="20170809 03:53:52.476" status="PASS" endtime="20170809 03:53:52.478"></status>
</kw>
<status starttime="20170809 03:53:52.475" status="PASS" endtime="20170809 03:53:52.478"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:52.479">Delete All Sessions</msg>
<status starttime="20170809 03:53:52.479" status="PASS" endtime="20170809 03:53:52.479"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:52.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:52.217" status="PASS" endtime="20170809 03:53:52.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:52.479" status="PASS" endtime="20170809 03:53:52.480"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.480">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:52.480">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:52.480">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:52.480" status="PASS" endtime="20170809 03:53:52.481"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:52.481">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:53:52.217" status="PASS" endtime="20170809 03:53:52.481"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:52.481">${power_state} = On</msg>
<status starttime="20170809 03:53:52.216" status="PASS" endtime="20170809 03:53:52.481"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:53:52.481" status="PASS" endtime="20170809 03:53:52.482"></status>
</kw>
<status starttime="20170809 03:53:52.216" status="PASS" endtime="20170809 03:53:52.482"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.486">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:52.486" status="PASS" endtime="20170809 03:53:52.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.487">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:52.487" status="PASS" endtime="20170809 03:53:52.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.488">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:52.488" status="PASS" endtime="20170809 03:53:52.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.489">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:52.488" status="PASS" endtime="20170809 03:53:52.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:52.490" status="PASS" endtime="20170809 03:53:52.679"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:52.679">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:52.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:52.489" status="PASS" endtime="20170809 03:53:52.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.680">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:52.680" status="PASS" endtime="20170809 03:53:52.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:52.680" status="PASS" endtime="20170809 03:53:52.681"></status>
</kw>
<status starttime="20170809 03:53:52.485" status="PASS" endtime="20170809 03:53:52.681"></status>
</kw>
<status starttime="20170809 03:53:52.485" status="PASS" endtime="20170809 03:53:52.681"></status>
</kw>
<status starttime="20170809 03:53:52.484" status="PASS" endtime="20170809 03:53:52.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.682">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:53:52.681" status="PASS" endtime="20170809 03:53:52.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.685">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:52.684" status="PASS" endtime="20170809 03:53:52.685"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.685">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:53:52.685" status="PASS" endtime="20170809 03:53:52.686"></status>
</kw>
<status starttime="20170809 03:53:52.685" status="PASS" endtime="20170809 03:53:52.686"></status>
</kw>
<status starttime="20170809 03:53:52.683" status="PASS" endtime="20170809 03:53:52.686"></status>
</kw>
<status starttime="20170809 03:53:52.682" status="PASS" endtime="20170809 03:53:52.686"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.803">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:52.803">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:52.686" status="PASS" endtime="20170809 03:53:52.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.805">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:52.804" status="PASS" endtime="20170809 03:53:52.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.806">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:52.806" status="PASS" endtime="20170809 03:53:52.806"></status>
</kw>
<status starttime="20170809 03:53:52.805" status="PASS" endtime="20170809 03:53:52.806"></status>
</kw>
<status starttime="20170809 03:53:52.804" status="PASS" endtime="20170809 03:53:52.806"></status>
</kw>
<status starttime="20170809 03:53:52.803" status="PASS" endtime="20170809 03:53:52.807"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:52.807">Delete All Sessions</msg>
<status starttime="20170809 03:53:52.807" status="PASS" endtime="20170809 03:53:52.807"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:52.807">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:52.483" status="PASS" endtime="20170809 03:53:52.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.808">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:52.807" status="PASS" endtime="20170809 03:53:52.808"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.808">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:52.808">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:52.809">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:52.808" status="PASS" endtime="20170809 03:53:52.809"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:52.809">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:53:52.483" status="PASS" endtime="20170809 03:53:52.809"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:52.809">${host_state} = Running</msg>
<status starttime="20170809 03:53:52.482" status="PASS" endtime="20170809 03:53:52.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:53:52.810" status="PASS" endtime="20170809 03:53:52.810"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:52.814">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:53:52.814" status="PASS" endtime="20170809 03:53:52.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.815">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:53:52.815" status="PASS" endtime="20170809 03:53:52.815"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.816">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:53:52.815" status="PASS" endtime="20170809 03:53:52.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:52.816">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:53:52.816" status="PASS" endtime="20170809 03:53:52.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:53.064">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:53:52.817" status="PASS" endtime="20170809 03:53:53.064"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:53.065">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:53:53.065">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:52.817" status="PASS" endtime="20170809 03:53:53.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:53.065">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:53.065" status="PASS" endtime="20170809 03:53:53.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:53.066">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:53.066" status="PASS" endtime="20170809 03:53:53.066"></status>
</kw>
<status starttime="20170809 03:53:52.813" status="PASS" endtime="20170809 03:53:53.066"></status>
</kw>
<status starttime="20170809 03:53:52.813" status="PASS" endtime="20170809 03:53:53.066"></status>
</kw>
<status starttime="20170809 03:53:52.812" status="PASS" endtime="20170809 03:53:53.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:53.067">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:53:53.067" status="PASS" endtime="20170809 03:53:53.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:53.069">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:53:53.068" status="PASS" endtime="20170809 03:53:53.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:53.073">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:53:53.070" status="PASS" endtime="20170809 03:53:53.074"></status>
</kw>
<status starttime="20170809 03:53:53.069" status="PASS" endtime="20170809 03:53:53.074"></status>
</kw>
<status starttime="20170809 03:53:53.068" status="PASS" endtime="20170809 03:53:53.074"></status>
</kw>
<status starttime="20170809 03:53:53.067" status="PASS" endtime="20170809 03:53:53.074"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:53.174">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:53:53.175">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:53.074" status="PASS" endtime="20170809 03:53:53.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:53.177">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:53.177" status="PASS" endtime="20170809 03:53:53.177"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:53.179">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:53:53.178" status="PASS" endtime="20170809 03:53:53.179"></status>
</kw>
<status starttime="20170809 03:53:53.178" status="PASS" endtime="20170809 03:53:53.179"></status>
</kw>
<status starttime="20170809 03:53:53.176" status="PASS" endtime="20170809 03:53:53.179"></status>
</kw>
<status starttime="20170809 03:53:53.175" status="PASS" endtime="20170809 03:53:53.179"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:53:53.180">Delete All Sessions</msg>
<status starttime="20170809 03:53:53.179" status="PASS" endtime="20170809 03:53:53.180"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:53.180">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:53:52.812" status="PASS" endtime="20170809 03:53:53.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:53:53.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:53:53.180" status="PASS" endtime="20170809 03:53:53.181"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:53:53.181">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:53:53.181">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:53:53.181">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:53:53.181" status="PASS" endtime="20170809 03:53:53.181"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:53.182">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:53:52.811" status="PASS" endtime="20170809 03:53:53.182"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:53:53.182">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:53:52.810" status="PASS" endtime="20170809 03:53:53.182"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:53:53.183">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:53:53.182" status="FAIL" endtime="20170809 03:53:53.183"></status>
</kw>
<status starttime="20170809 03:53:52.810" status="FAIL" endtime="20170809 03:53:53.183"></status>
</kw>
<status starttime="20170809 03:53:52.215" status="FAIL" endtime="20170809 03:53:53.183"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.188">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:03.188" status="PASS" endtime="20170809 03:54:03.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.189">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:03.189" status="PASS" endtime="20170809 03:54:03.189"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.190">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:03.189" status="PASS" endtime="20170809 03:54:03.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.190">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:03.190" status="PASS" endtime="20170809 03:54:03.190"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.474">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:03.191" status="PASS" endtime="20170809 03:54:03.474"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:03.475">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:03.475">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:03.191" status="PASS" endtime="20170809 03:54:03.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.475">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:03.475" status="PASS" endtime="20170809 03:54:03.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.476">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:03.476" status="PASS" endtime="20170809 03:54:03.476"></status>
</kw>
<status starttime="20170809 03:54:03.187" status="PASS" endtime="20170809 03:54:03.476"></status>
</kw>
<status starttime="20170809 03:54:03.187" status="PASS" endtime="20170809 03:54:03.476"></status>
</kw>
<status starttime="20170809 03:54:03.186" status="PASS" endtime="20170809 03:54:03.477"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.477">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:54:03.477" status="PASS" endtime="20170809 03:54:03.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.479">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:03.479" status="PASS" endtime="20170809 03:54:03.479"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.480">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:03.480" status="PASS" endtime="20170809 03:54:03.480"></status>
</kw>
<status starttime="20170809 03:54:03.479" status="PASS" endtime="20170809 03:54:03.480"></status>
</kw>
<status starttime="20170809 03:54:03.478" status="PASS" endtime="20170809 03:54:03.481"></status>
</kw>
<status starttime="20170809 03:54:03.477" status="PASS" endtime="20170809 03:54:03.481"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.544">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:03.544">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:03.481" status="PASS" endtime="20170809 03:54:03.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.546">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:03.546" status="PASS" endtime="20170809 03:54:03.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.547">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:03.547" status="PASS" endtime="20170809 03:54:03.547"></status>
</kw>
<status starttime="20170809 03:54:03.546" status="PASS" endtime="20170809 03:54:03.547"></status>
</kw>
<status starttime="20170809 03:54:03.545" status="PASS" endtime="20170809 03:54:03.547"></status>
</kw>
<status starttime="20170809 03:54:03.545" status="PASS" endtime="20170809 03:54:03.548"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:03.548">Delete All Sessions</msg>
<status starttime="20170809 03:54:03.548" status="PASS" endtime="20170809 03:54:03.548"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:03.548">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:03.185" status="PASS" endtime="20170809 03:54:03.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:03.548" status="PASS" endtime="20170809 03:54:03.549"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.550">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:03.550">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:03.550">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:03.549" status="PASS" endtime="20170809 03:54:03.550"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:03.550">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:54:03.185" status="PASS" endtime="20170809 03:54:03.550"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:03.550">${power_state} = On</msg>
<status starttime="20170809 03:54:03.185" status="PASS" endtime="20170809 03:54:03.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:54:03.551" status="PASS" endtime="20170809 03:54:03.551"></status>
</kw>
<status starttime="20170809 03:54:03.184" status="PASS" endtime="20170809 03:54:03.551"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.555">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:03.555" status="PASS" endtime="20170809 03:54:03.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.556">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:03.556" status="PASS" endtime="20170809 03:54:03.556"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.557">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:03.557" status="PASS" endtime="20170809 03:54:03.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.558">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:03.557" status="PASS" endtime="20170809 03:54:03.558"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.766">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:03.558" status="PASS" endtime="20170809 03:54:03.766"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:03.766">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:03.766">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:03.558" status="PASS" endtime="20170809 03:54:03.766"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.767">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:03.767" status="PASS" endtime="20170809 03:54:03.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.768">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:03.767" status="PASS" endtime="20170809 03:54:03.768"></status>
</kw>
<status starttime="20170809 03:54:03.554" status="PASS" endtime="20170809 03:54:03.768"></status>
</kw>
<status starttime="20170809 03:54:03.554" status="PASS" endtime="20170809 03:54:03.768"></status>
</kw>
<status starttime="20170809 03:54:03.553" status="PASS" endtime="20170809 03:54:03.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.769">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:54:03.768" status="PASS" endtime="20170809 03:54:03.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.771">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:03.770" status="PASS" endtime="20170809 03:54:03.771"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.772">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:03.771" status="PASS" endtime="20170809 03:54:03.772"></status>
</kw>
<status starttime="20170809 03:54:03.771" status="PASS" endtime="20170809 03:54:03.772"></status>
</kw>
<status starttime="20170809 03:54:03.769" status="PASS" endtime="20170809 03:54:03.772"></status>
</kw>
<status starttime="20170809 03:54:03.769" status="PASS" endtime="20170809 03:54:03.772"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.879">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:03.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:03.772" status="PASS" endtime="20170809 03:54:03.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.882">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:03.881" status="PASS" endtime="20170809 03:54:03.882"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.882">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:03.882" status="PASS" endtime="20170809 03:54:03.883"></status>
</kw>
<status starttime="20170809 03:54:03.882" status="PASS" endtime="20170809 03:54:03.883"></status>
</kw>
<status starttime="20170809 03:54:03.880" status="PASS" endtime="20170809 03:54:03.883"></status>
</kw>
<status starttime="20170809 03:54:03.879" status="PASS" endtime="20170809 03:54:03.883"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:03.883">Delete All Sessions</msg>
<status starttime="20170809 03:54:03.883" status="PASS" endtime="20170809 03:54:03.883"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:03.883">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:03.552" status="PASS" endtime="20170809 03:54:03.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.884">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:03.884" status="PASS" endtime="20170809 03:54:03.884"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.885">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:03.885">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:03.885">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:03.884" status="PASS" endtime="20170809 03:54:03.885"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:03.885">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:54:03.552" status="PASS" endtime="20170809 03:54:03.885"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:03.886">${host_state} = Running</msg>
<status starttime="20170809 03:54:03.551" status="PASS" endtime="20170809 03:54:03.886"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:54:03.886" status="PASS" endtime="20170809 03:54:03.886"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:03.890">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:03.890" status="PASS" endtime="20170809 03:54:03.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.891">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:03.891" status="PASS" endtime="20170809 03:54:03.891"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.892">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:03.892" status="PASS" endtime="20170809 03:54:03.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:03.893">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:03.892" status="PASS" endtime="20170809 03:54:03.893"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:04.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:03.893" status="PASS" endtime="20170809 03:54:04.179"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:04.179">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:04.180">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:03.893" status="PASS" endtime="20170809 03:54:04.180"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:04.180">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:04.180" status="PASS" endtime="20170809 03:54:04.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:04.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:04.181" status="PASS" endtime="20170809 03:54:04.181"></status>
</kw>
<status starttime="20170809 03:54:03.889" status="PASS" endtime="20170809 03:54:04.181"></status>
</kw>
<status starttime="20170809 03:54:03.889" status="PASS" endtime="20170809 03:54:04.181"></status>
</kw>
<status starttime="20170809 03:54:03.888" status="PASS" endtime="20170809 03:54:04.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:04.182">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:54:04.182" status="PASS" endtime="20170809 03:54:04.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:04.184">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:04.183" status="PASS" endtime="20170809 03:54:04.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:04.185">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:04.185" status="PASS" endtime="20170809 03:54:04.185"></status>
</kw>
<status starttime="20170809 03:54:04.184" status="PASS" endtime="20170809 03:54:04.185"></status>
</kw>
<status starttime="20170809 03:54:04.183" status="PASS" endtime="20170809 03:54:04.185"></status>
</kw>
<status starttime="20170809 03:54:04.182" status="PASS" endtime="20170809 03:54:04.185"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:04.290">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:04.290">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:04.186" status="PASS" endtime="20170809 03:54:04.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:04.292">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:04.292" status="PASS" endtime="20170809 03:54:04.292"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:04.293">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:04.293" status="PASS" endtime="20170809 03:54:04.293"></status>
</kw>
<status starttime="20170809 03:54:04.292" status="PASS" endtime="20170809 03:54:04.294"></status>
</kw>
<status starttime="20170809 03:54:04.291" status="PASS" endtime="20170809 03:54:04.294"></status>
</kw>
<status starttime="20170809 03:54:04.291" status="PASS" endtime="20170809 03:54:04.294"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:04.294">Delete All Sessions</msg>
<status starttime="20170809 03:54:04.294" status="PASS" endtime="20170809 03:54:04.294"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:04.294">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:03.887" status="PASS" endtime="20170809 03:54:04.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:04.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:04.295" status="PASS" endtime="20170809 03:54:04.295"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:04.296">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:04.296">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:04.296">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:04.295" status="PASS" endtime="20170809 03:54:04.296"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:04.296">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:03.887" status="PASS" endtime="20170809 03:54:04.296"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:04.296">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:03.887" status="PASS" endtime="20170809 03:54:04.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:54:04.297">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:54:04.297" status="FAIL" endtime="20170809 03:54:04.297"></status>
</kw>
<status starttime="20170809 03:54:03.886" status="FAIL" endtime="20170809 03:54:04.297"></status>
</kw>
<status starttime="20170809 03:54:03.183" status="FAIL" endtime="20170809 03:54:04.297"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.303">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:14.303" status="PASS" endtime="20170809 03:54:14.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.304">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:14.303" status="PASS" endtime="20170809 03:54:14.304"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.304">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:14.304" status="PASS" endtime="20170809 03:54:14.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.305">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:14.305" status="PASS" endtime="20170809 03:54:14.305"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.485">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:14.306" status="PASS" endtime="20170809 03:54:14.485"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:14.485">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:14.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:14.306" status="PASS" endtime="20170809 03:54:14.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.486">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:14.486" status="PASS" endtime="20170809 03:54:14.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:14.487" status="PASS" endtime="20170809 03:54:14.487"></status>
</kw>
<status starttime="20170809 03:54:14.302" status="PASS" endtime="20170809 03:54:14.487"></status>
</kw>
<status starttime="20170809 03:54:14.301" status="PASS" endtime="20170809 03:54:14.487"></status>
</kw>
<status starttime="20170809 03:54:14.301" status="PASS" endtime="20170809 03:54:14.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.488">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:54:14.488" status="PASS" endtime="20170809 03:54:14.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.490">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:14.489" status="PASS" endtime="20170809 03:54:14.490"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.491">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:14.491" status="PASS" endtime="20170809 03:54:14.491"></status>
</kw>
<status starttime="20170809 03:54:14.490" status="PASS" endtime="20170809 03:54:14.491"></status>
</kw>
<status starttime="20170809 03:54:14.489" status="PASS" endtime="20170809 03:54:14.491"></status>
</kw>
<status starttime="20170809 03:54:14.488" status="PASS" endtime="20170809 03:54:14.491"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.555">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:14.555">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:14.492" status="PASS" endtime="20170809 03:54:14.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.557">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:14.556" status="PASS" endtime="20170809 03:54:14.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.558">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:14.558" status="PASS" endtime="20170809 03:54:14.558"></status>
</kw>
<status starttime="20170809 03:54:14.557" status="PASS" endtime="20170809 03:54:14.558"></status>
</kw>
<status starttime="20170809 03:54:14.556" status="PASS" endtime="20170809 03:54:14.558"></status>
</kw>
<status starttime="20170809 03:54:14.555" status="PASS" endtime="20170809 03:54:14.558"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:14.559">Delete All Sessions</msg>
<status starttime="20170809 03:54:14.559" status="PASS" endtime="20170809 03:54:14.559"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:14.559">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:14.300" status="PASS" endtime="20170809 03:54:14.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:14.559" status="PASS" endtime="20170809 03:54:14.560"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.560">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:14.560">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:14.560">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:14.560" status="PASS" endtime="20170809 03:54:14.560"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:14.561">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:54:14.299" status="PASS" endtime="20170809 03:54:14.561"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:14.561">${power_state} = On</msg>
<status starttime="20170809 03:54:14.299" status="PASS" endtime="20170809 03:54:14.561"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:54:14.561" status="PASS" endtime="20170809 03:54:14.562"></status>
</kw>
<status starttime="20170809 03:54:14.299" status="PASS" endtime="20170809 03:54:14.562"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.565">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:14.565" status="PASS" endtime="20170809 03:54:14.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.566">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:14.566" status="PASS" endtime="20170809 03:54:14.566"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.567">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:14.566" status="PASS" endtime="20170809 03:54:14.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.567">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:14.567" status="PASS" endtime="20170809 03:54:14.567"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.783">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:14.568" status="PASS" endtime="20170809 03:54:14.783"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:14.783">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:14.783">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:14.568" status="PASS" endtime="20170809 03:54:14.784"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.784">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:14.784" status="PASS" endtime="20170809 03:54:14.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:14.784" status="PASS" endtime="20170809 03:54:14.785"></status>
</kw>
<status starttime="20170809 03:54:14.564" status="PASS" endtime="20170809 03:54:14.785"></status>
</kw>
<status starttime="20170809 03:54:14.564" status="PASS" endtime="20170809 03:54:14.785"></status>
</kw>
<status starttime="20170809 03:54:14.563" status="PASS" endtime="20170809 03:54:14.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.786">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:54:14.785" status="PASS" endtime="20170809 03:54:14.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.788">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:14.787" status="PASS" endtime="20170809 03:54:14.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.789">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:14.789" status="PASS" endtime="20170809 03:54:14.789"></status>
</kw>
<status starttime="20170809 03:54:14.788" status="PASS" endtime="20170809 03:54:14.789"></status>
</kw>
<status starttime="20170809 03:54:14.787" status="PASS" endtime="20170809 03:54:14.789"></status>
</kw>
<status starttime="20170809 03:54:14.786" status="PASS" endtime="20170809 03:54:14.790"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.895">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:14.896">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:14.790" status="PASS" endtime="20170809 03:54:14.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.897">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:14.897" status="PASS" endtime="20170809 03:54:14.898"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.898">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:14.898" status="PASS" endtime="20170809 03:54:14.899"></status>
</kw>
<status starttime="20170809 03:54:14.898" status="PASS" endtime="20170809 03:54:14.899"></status>
</kw>
<status starttime="20170809 03:54:14.897" status="PASS" endtime="20170809 03:54:14.899"></status>
</kw>
<status starttime="20170809 03:54:14.896" status="PASS" endtime="20170809 03:54:14.899"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:14.899">Delete All Sessions</msg>
<status starttime="20170809 03:54:14.899" status="PASS" endtime="20170809 03:54:14.899"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:14.899">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:14.563" status="PASS" endtime="20170809 03:54:14.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:14.900" status="PASS" endtime="20170809 03:54:14.900"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.901">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:14.901">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:14.901">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:14.900" status="PASS" endtime="20170809 03:54:14.901"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:14.901">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:54:14.562" status="PASS" endtime="20170809 03:54:14.901"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:14.902">${host_state} = Running</msg>
<status starttime="20170809 03:54:14.562" status="PASS" endtime="20170809 03:54:14.902"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:54:14.902" status="PASS" endtime="20170809 03:54:14.902"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:14.906">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:14.906" status="PASS" endtime="20170809 03:54:14.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.907">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:14.907" status="PASS" endtime="20170809 03:54:14.907"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.907">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:14.907" status="PASS" endtime="20170809 03:54:14.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:14.908">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:14.908" status="PASS" endtime="20170809 03:54:14.909"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:15.147">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:14.909" status="PASS" endtime="20170809 03:54:15.148"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:15.148">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:15.148">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:14.909" status="PASS" endtime="20170809 03:54:15.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:15.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:15.148" status="PASS" endtime="20170809 03:54:15.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:15.149">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:15.149" status="PASS" endtime="20170809 03:54:15.149"></status>
</kw>
<status starttime="20170809 03:54:14.905" status="PASS" endtime="20170809 03:54:15.150"></status>
</kw>
<status starttime="20170809 03:54:14.905" status="PASS" endtime="20170809 03:54:15.150"></status>
</kw>
<status starttime="20170809 03:54:14.904" status="PASS" endtime="20170809 03:54:15.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:15.150">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:54:15.150" status="PASS" endtime="20170809 03:54:15.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:15.152">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:15.152" status="PASS" endtime="20170809 03:54:15.153"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:15.154">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:15.153" status="PASS" endtime="20170809 03:54:15.154"></status>
</kw>
<status starttime="20170809 03:54:15.153" status="PASS" endtime="20170809 03:54:15.154"></status>
</kw>
<status starttime="20170809 03:54:15.151" status="PASS" endtime="20170809 03:54:15.154"></status>
</kw>
<status starttime="20170809 03:54:15.151" status="PASS" endtime="20170809 03:54:15.154"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:15.221">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:15.221">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:15.155" status="PASS" endtime="20170809 03:54:15.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:15.223">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:15.222" status="PASS" endtime="20170809 03:54:15.223"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:15.224">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:15.223" status="PASS" endtime="20170809 03:54:15.224"></status>
</kw>
<status starttime="20170809 03:54:15.223" status="PASS" endtime="20170809 03:54:15.224"></status>
</kw>
<status starttime="20170809 03:54:15.222" status="PASS" endtime="20170809 03:54:15.224"></status>
</kw>
<status starttime="20170809 03:54:15.221" status="PASS" endtime="20170809 03:54:15.224"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:15.224">Delete All Sessions</msg>
<status starttime="20170809 03:54:15.224" status="PASS" endtime="20170809 03:54:15.224"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:15.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:14.904" status="PASS" endtime="20170809 03:54:15.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:15.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:15.225" status="PASS" endtime="20170809 03:54:15.225"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:15.226">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:15.226">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:15.226">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:15.226" status="PASS" endtime="20170809 03:54:15.226"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:15.226">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:14.903" status="PASS" endtime="20170809 03:54:15.226"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:15.227">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:14.903" status="PASS" endtime="20170809 03:54:15.227"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:54:15.227">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:54:15.227" status="FAIL" endtime="20170809 03:54:15.227"></status>
</kw>
<status starttime="20170809 03:54:14.902" status="FAIL" endtime="20170809 03:54:15.227"></status>
</kw>
<status starttime="20170809 03:54:14.298" status="FAIL" endtime="20170809 03:54:15.228"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.233">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:25.233" status="PASS" endtime="20170809 03:54:25.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.234">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:25.234" status="PASS" endtime="20170809 03:54:25.234"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.235">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:25.234" status="PASS" endtime="20170809 03:54:25.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.235">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:25.235" status="PASS" endtime="20170809 03:54:25.235"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.420">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:25.236" status="PASS" endtime="20170809 03:54:25.421"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:25.421">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:25.421">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:25.235" status="PASS" endtime="20170809 03:54:25.421"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.422">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:25.421" status="PASS" endtime="20170809 03:54:25.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:25.422" status="PASS" endtime="20170809 03:54:25.422"></status>
</kw>
<status starttime="20170809 03:54:25.232" status="PASS" endtime="20170809 03:54:25.423"></status>
</kw>
<status starttime="20170809 03:54:25.232" status="PASS" endtime="20170809 03:54:25.423"></status>
</kw>
<status starttime="20170809 03:54:25.231" status="PASS" endtime="20170809 03:54:25.423"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.423">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:54:25.423" status="PASS" endtime="20170809 03:54:25.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.425">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:25.425" status="PASS" endtime="20170809 03:54:25.425"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.426">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:25.426" status="PASS" endtime="20170809 03:54:25.426"></status>
</kw>
<status starttime="20170809 03:54:25.426" status="PASS" endtime="20170809 03:54:25.427"></status>
</kw>
<status starttime="20170809 03:54:25.424" status="PASS" endtime="20170809 03:54:25.427"></status>
</kw>
<status starttime="20170809 03:54:25.424" status="PASS" endtime="20170809 03:54:25.427"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.491">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:25.491">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:25.427" status="PASS" endtime="20170809 03:54:25.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.493">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:25.493" status="PASS" endtime="20170809 03:54:25.493"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.494">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:25.494" status="PASS" endtime="20170809 03:54:25.494"></status>
</kw>
<status starttime="20170809 03:54:25.493" status="PASS" endtime="20170809 03:54:25.494"></status>
</kw>
<status starttime="20170809 03:54:25.492" status="PASS" endtime="20170809 03:54:25.494"></status>
</kw>
<status starttime="20170809 03:54:25.492" status="PASS" endtime="20170809 03:54:25.495"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:25.495">Delete All Sessions</msg>
<status starttime="20170809 03:54:25.495" status="PASS" endtime="20170809 03:54:25.495"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:25.495">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:25.230" status="PASS" endtime="20170809 03:54:25.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:25.496" status="PASS" endtime="20170809 03:54:25.496"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.496">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:25.497">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:25.497">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:25.496" status="PASS" endtime="20170809 03:54:25.497"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:25.497">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:54:25.229" status="PASS" endtime="20170809 03:54:25.497"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:25.497">${power_state} = On</msg>
<status starttime="20170809 03:54:25.229" status="PASS" endtime="20170809 03:54:25.497"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:54:25.498" status="PASS" endtime="20170809 03:54:25.498"></status>
</kw>
<status starttime="20170809 03:54:25.229" status="PASS" endtime="20170809 03:54:25.498"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.502">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:25.501" status="PASS" endtime="20170809 03:54:25.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.503">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:25.502" status="PASS" endtime="20170809 03:54:25.503"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.503">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:25.503" status="PASS" endtime="20170809 03:54:25.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.504">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:25.504" status="PASS" endtime="20170809 03:54:25.504"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.788">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:25.505" status="PASS" endtime="20170809 03:54:25.788"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:25.788">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:25.788">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:25.504" status="PASS" endtime="20170809 03:54:25.788"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.789">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:25.788" status="PASS" endtime="20170809 03:54:25.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.789">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:25.789" status="PASS" endtime="20170809 03:54:25.789"></status>
</kw>
<status starttime="20170809 03:54:25.501" status="PASS" endtime="20170809 03:54:25.789"></status>
</kw>
<status starttime="20170809 03:54:25.500" status="PASS" endtime="20170809 03:54:25.790"></status>
</kw>
<status starttime="20170809 03:54:25.500" status="PASS" endtime="20170809 03:54:25.790"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.790">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:54:25.790" status="PASS" endtime="20170809 03:54:25.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.793">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:25.792" status="PASS" endtime="20170809 03:54:25.793"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.793">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:25.793" status="PASS" endtime="20170809 03:54:25.794"></status>
</kw>
<status starttime="20170809 03:54:25.793" status="PASS" endtime="20170809 03:54:25.794"></status>
</kw>
<status starttime="20170809 03:54:25.791" status="PASS" endtime="20170809 03:54:25.794"></status>
</kw>
<status starttime="20170809 03:54:25.791" status="PASS" endtime="20170809 03:54:25.794"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.882">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:25.883">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:25.794" status="PASS" endtime="20170809 03:54:25.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.885">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:25.884" status="PASS" endtime="20170809 03:54:25.885"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.886">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:25.886" status="PASS" endtime="20170809 03:54:25.886"></status>
</kw>
<status starttime="20170809 03:54:25.885" status="PASS" endtime="20170809 03:54:25.886"></status>
</kw>
<status starttime="20170809 03:54:25.883" status="PASS" endtime="20170809 03:54:25.886"></status>
</kw>
<status starttime="20170809 03:54:25.883" status="PASS" endtime="20170809 03:54:25.886"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:25.887">Delete All Sessions</msg>
<status starttime="20170809 03:54:25.887" status="PASS" endtime="20170809 03:54:25.887"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:25.887">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:25.499" status="PASS" endtime="20170809 03:54:25.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:25.887" status="PASS" endtime="20170809 03:54:25.888"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.888">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:25.888">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:25.889">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:25.888" status="PASS" endtime="20170809 03:54:25.889"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:25.889">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:54:25.498" status="PASS" endtime="20170809 03:54:25.889"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:25.889">${host_state} = Running</msg>
<status starttime="20170809 03:54:25.498" status="PASS" endtime="20170809 03:54:25.889"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:54:25.889" status="PASS" endtime="20170809 03:54:25.890"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:25.894">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:25.894" status="PASS" endtime="20170809 03:54:25.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.895">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:25.895" status="PASS" endtime="20170809 03:54:25.895"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.896">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:25.896" status="PASS" endtime="20170809 03:54:25.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:25.897">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:25.896" status="PASS" endtime="20170809 03:54:25.897"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:26.098">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:25.897" status="PASS" endtime="20170809 03:54:26.098"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:26.098">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:26.098">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:25.897" status="PASS" endtime="20170809 03:54:26.098"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:26.099">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:26.098" status="PASS" endtime="20170809 03:54:26.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:26.100">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:26.099" status="PASS" endtime="20170809 03:54:26.100"></status>
</kw>
<status starttime="20170809 03:54:25.893" status="PASS" endtime="20170809 03:54:26.100"></status>
</kw>
<status starttime="20170809 03:54:25.892" status="PASS" endtime="20170809 03:54:26.100"></status>
</kw>
<status starttime="20170809 03:54:25.892" status="PASS" endtime="20170809 03:54:26.100"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:26.101">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:54:26.100" status="PASS" endtime="20170809 03:54:26.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:26.103">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:26.102" status="PASS" endtime="20170809 03:54:26.103"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:26.104">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:26.103" status="PASS" endtime="20170809 03:54:26.104"></status>
</kw>
<status starttime="20170809 03:54:26.103" status="PASS" endtime="20170809 03:54:26.104"></status>
</kw>
<status starttime="20170809 03:54:26.101" status="PASS" endtime="20170809 03:54:26.104"></status>
</kw>
<status starttime="20170809 03:54:26.101" status="PASS" endtime="20170809 03:54:26.104"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:26.170">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:26.170">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:26.104" status="PASS" endtime="20170809 03:54:26.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:26.172">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:26.172" status="PASS" endtime="20170809 03:54:26.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:26.176">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:26.175" status="PASS" endtime="20170809 03:54:26.176"></status>
</kw>
<status starttime="20170809 03:54:26.172" status="PASS" endtime="20170809 03:54:26.176"></status>
</kw>
<status starttime="20170809 03:54:26.171" status="PASS" endtime="20170809 03:54:26.176"></status>
</kw>
<status starttime="20170809 03:54:26.171" status="PASS" endtime="20170809 03:54:26.176"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:26.177">Delete All Sessions</msg>
<status starttime="20170809 03:54:26.177" status="PASS" endtime="20170809 03:54:26.177"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:26.177">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:25.891" status="PASS" endtime="20170809 03:54:26.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:26.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:26.177" status="PASS" endtime="20170809 03:54:26.178"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:26.178">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:26.178">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:26.178">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:26.178" status="PASS" endtime="20170809 03:54:26.178"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:26.179">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:25.891" status="PASS" endtime="20170809 03:54:26.179"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:26.179">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:25.890" status="PASS" endtime="20170809 03:54:26.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:54:26.180">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:54:26.179" status="FAIL" endtime="20170809 03:54:26.180"></status>
</kw>
<status starttime="20170809 03:54:25.890" status="FAIL" endtime="20170809 03:54:26.180"></status>
</kw>
<status starttime="20170809 03:54:25.228" status="FAIL" endtime="20170809 03:54:26.180"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.185">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:36.185" status="PASS" endtime="20170809 03:54:36.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.186">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:36.186" status="PASS" endtime="20170809 03:54:36.186"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.187">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:36.186" status="PASS" endtime="20170809 03:54:36.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.188">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:36.187" status="PASS" endtime="20170809 03:54:36.188"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.366">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:36.188" status="PASS" endtime="20170809 03:54:36.366"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:36.367">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:36.367">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:36.188" status="PASS" endtime="20170809 03:54:36.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.367">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:36.367" status="PASS" endtime="20170809 03:54:36.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:36.368" status="PASS" endtime="20170809 03:54:36.368"></status>
</kw>
<status starttime="20170809 03:54:36.184" status="PASS" endtime="20170809 03:54:36.368"></status>
</kw>
<status starttime="20170809 03:54:36.184" status="PASS" endtime="20170809 03:54:36.368"></status>
</kw>
<status starttime="20170809 03:54:36.183" status="PASS" endtime="20170809 03:54:36.369"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.369">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:54:36.369" status="PASS" endtime="20170809 03:54:36.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.371">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:36.371" status="PASS" endtime="20170809 03:54:36.371"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.372">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:36.372" status="PASS" endtime="20170809 03:54:36.373"></status>
</kw>
<status starttime="20170809 03:54:36.371" status="PASS" endtime="20170809 03:54:36.373"></status>
</kw>
<status starttime="20170809 03:54:36.370" status="PASS" endtime="20170809 03:54:36.373"></status>
</kw>
<status starttime="20170809 03:54:36.369" status="PASS" endtime="20170809 03:54:36.373"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.436">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:36.436">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:36.373" status="PASS" endtime="20170809 03:54:36.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.437">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:36.437" status="PASS" endtime="20170809 03:54:36.437"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.438">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:36.438" status="PASS" endtime="20170809 03:54:36.438"></status>
</kw>
<status starttime="20170809 03:54:36.438" status="PASS" endtime="20170809 03:54:36.439"></status>
</kw>
<status starttime="20170809 03:54:36.436" status="PASS" endtime="20170809 03:54:36.439"></status>
</kw>
<status starttime="20170809 03:54:36.436" status="PASS" endtime="20170809 03:54:36.439"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:36.439">Delete All Sessions</msg>
<status starttime="20170809 03:54:36.439" status="PASS" endtime="20170809 03:54:36.439"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:36.439">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:36.183" status="PASS" endtime="20170809 03:54:36.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:36.440" status="PASS" endtime="20170809 03:54:36.440"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.441">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:36.441">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:36.441">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:36.440" status="PASS" endtime="20170809 03:54:36.441"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:36.441">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:54:36.182" status="PASS" endtime="20170809 03:54:36.441"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:36.441">${power_state} = On</msg>
<status starttime="20170809 03:54:36.182" status="PASS" endtime="20170809 03:54:36.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:54:36.442" status="PASS" endtime="20170809 03:54:36.442"></status>
</kw>
<status starttime="20170809 03:54:36.181" status="PASS" endtime="20170809 03:54:36.442"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.446">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:36.445" status="PASS" endtime="20170809 03:54:36.446"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:36.447" status="PASS" endtime="20170809 03:54:36.447"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.448">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:36.447" status="PASS" endtime="20170809 03:54:36.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:36.448" status="PASS" endtime="20170809 03:54:36.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.659">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:36.449" status="PASS" endtime="20170809 03:54:36.659"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:36.659">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:36.659">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:36.449" status="PASS" endtime="20170809 03:54:36.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.660">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:36.659" status="PASS" endtime="20170809 03:54:36.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.660">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:36.660" status="PASS" endtime="20170809 03:54:36.660"></status>
</kw>
<status starttime="20170809 03:54:36.445" status="PASS" endtime="20170809 03:54:36.661"></status>
</kw>
<status starttime="20170809 03:54:36.444" status="PASS" endtime="20170809 03:54:36.661"></status>
</kw>
<status starttime="20170809 03:54:36.444" status="PASS" endtime="20170809 03:54:36.661"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.661">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:54:36.661" status="PASS" endtime="20170809 03:54:36.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.664">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:36.663" status="PASS" endtime="20170809 03:54:36.664"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.665">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:36.665" status="PASS" endtime="20170809 03:54:36.665"></status>
</kw>
<status starttime="20170809 03:54:36.664" status="PASS" endtime="20170809 03:54:36.665"></status>
</kw>
<status starttime="20170809 03:54:36.662" status="PASS" endtime="20170809 03:54:36.665"></status>
</kw>
<status starttime="20170809 03:54:36.662" status="PASS" endtime="20170809 03:54:36.665"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.763">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:36.763">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:36.666" status="PASS" endtime="20170809 03:54:36.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.765">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:36.764" status="PASS" endtime="20170809 03:54:36.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.766">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:36.765" status="PASS" endtime="20170809 03:54:36.766"></status>
</kw>
<status starttime="20170809 03:54:36.765" status="PASS" endtime="20170809 03:54:36.766"></status>
</kw>
<status starttime="20170809 03:54:36.764" status="PASS" endtime="20170809 03:54:36.766"></status>
</kw>
<status starttime="20170809 03:54:36.763" status="PASS" endtime="20170809 03:54:36.766"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:36.766">Delete All Sessions</msg>
<status starttime="20170809 03:54:36.766" status="PASS" endtime="20170809 03:54:36.766"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:36.767">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:36.443" status="PASS" endtime="20170809 03:54:36.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.767">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:36.767" status="PASS" endtime="20170809 03:54:36.768"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.768">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:36.768">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:36.768">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:36.768" status="PASS" endtime="20170809 03:54:36.769"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:36.769">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:54:36.443" status="PASS" endtime="20170809 03:54:36.769"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:36.769">${host_state} = Running</msg>
<status starttime="20170809 03:54:36.442" status="PASS" endtime="20170809 03:54:36.769"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:54:36.769" status="PASS" endtime="20170809 03:54:36.770"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.774">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:36.774" status="PASS" endtime="20170809 03:54:36.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.775">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:36.775" status="PASS" endtime="20170809 03:54:36.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.776">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:36.775" status="PASS" endtime="20170809 03:54:36.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:36.776">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:36.776" status="PASS" endtime="20170809 03:54:36.776"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.998">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:36.777" status="PASS" endtime="20170809 03:54:36.998"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:36.998">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:36.998">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:36.777" status="PASS" endtime="20170809 03:54:36.998"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:36.999">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:36.998" status="PASS" endtime="20170809 03:54:36.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:37.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:36.999" status="PASS" endtime="20170809 03:54:37.000"></status>
</kw>
<status starttime="20170809 03:54:36.773" status="PASS" endtime="20170809 03:54:37.001"></status>
</kw>
<status starttime="20170809 03:54:36.773" status="PASS" endtime="20170809 03:54:37.001"></status>
</kw>
<status starttime="20170809 03:54:36.772" status="PASS" endtime="20170809 03:54:37.001"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:37.001">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:54:37.001" status="PASS" endtime="20170809 03:54:37.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:37.003">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:37.003" status="PASS" endtime="20170809 03:54:37.004"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:37.004">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:37.004" status="PASS" endtime="20170809 03:54:37.004"></status>
</kw>
<status starttime="20170809 03:54:37.004" status="PASS" endtime="20170809 03:54:37.005"></status>
</kw>
<status starttime="20170809 03:54:37.002" status="PASS" endtime="20170809 03:54:37.005"></status>
</kw>
<status starttime="20170809 03:54:37.002" status="PASS" endtime="20170809 03:54:37.005"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:37.146">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:37.147">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:37.005" status="PASS" endtime="20170809 03:54:37.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:37.149">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:37.148" status="PASS" endtime="20170809 03:54:37.149"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:37.149">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:37.149" status="PASS" endtime="20170809 03:54:37.150"></status>
</kw>
<status starttime="20170809 03:54:37.149" status="PASS" endtime="20170809 03:54:37.150"></status>
</kw>
<status starttime="20170809 03:54:37.147" status="PASS" endtime="20170809 03:54:37.150"></status>
</kw>
<status starttime="20170809 03:54:37.147" status="PASS" endtime="20170809 03:54:37.150"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:37.150">Delete All Sessions</msg>
<status starttime="20170809 03:54:37.150" status="PASS" endtime="20170809 03:54:37.150"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:37.151">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:36.771" status="PASS" endtime="20170809 03:54:37.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:37.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:37.151" status="PASS" endtime="20170809 03:54:37.151"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:37.152">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:37.152">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:37.152">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:37.152" status="PASS" endtime="20170809 03:54:37.152"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:37.152">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:36.771" status="PASS" endtime="20170809 03:54:37.152"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:37.153">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:36.770" status="PASS" endtime="20170809 03:54:37.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:54:37.153">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:54:37.153" status="FAIL" endtime="20170809 03:54:37.153"></status>
</kw>
<status starttime="20170809 03:54:36.770" status="FAIL" endtime="20170809 03:54:37.153"></status>
</kw>
<status starttime="20170809 03:54:36.181" status="FAIL" endtime="20170809 03:54:37.154"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.159">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:47.158" status="PASS" endtime="20170809 03:54:47.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:47.159" status="PASS" endtime="20170809 03:54:47.160"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.160">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:47.160" status="PASS" endtime="20170809 03:54:47.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:47.161" status="PASS" endtime="20170809 03:54:47.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.340">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:47.162" status="PASS" endtime="20170809 03:54:47.340"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:47.340">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:47.340">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:47.161" status="PASS" endtime="20170809 03:54:47.340"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.341">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:47.341" status="PASS" endtime="20170809 03:54:47.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.342">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:47.341" status="PASS" endtime="20170809 03:54:47.342"></status>
</kw>
<status starttime="20170809 03:54:47.158" status="PASS" endtime="20170809 03:54:47.342"></status>
</kw>
<status starttime="20170809 03:54:47.157" status="PASS" endtime="20170809 03:54:47.342"></status>
</kw>
<status starttime="20170809 03:54:47.157" status="PASS" endtime="20170809 03:54:47.342"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.343">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:54:47.342" status="PASS" endtime="20170809 03:54:47.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.345">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:47.344" status="PASS" endtime="20170809 03:54:47.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.346">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:47.346" status="PASS" endtime="20170809 03:54:47.346"></status>
</kw>
<status starttime="20170809 03:54:47.345" status="PASS" endtime="20170809 03:54:47.346"></status>
</kw>
<status starttime="20170809 03:54:47.344" status="PASS" endtime="20170809 03:54:47.346"></status>
</kw>
<status starttime="20170809 03:54:47.343" status="PASS" endtime="20170809 03:54:47.346"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.409">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:47.409">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:47.346" status="PASS" endtime="20170809 03:54:47.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.411">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:47.411" status="PASS" endtime="20170809 03:54:47.411"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.412">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:47.412" status="PASS" endtime="20170809 03:54:47.412"></status>
</kw>
<status starttime="20170809 03:54:47.411" status="PASS" endtime="20170809 03:54:47.412"></status>
</kw>
<status starttime="20170809 03:54:47.410" status="PASS" endtime="20170809 03:54:47.413"></status>
</kw>
<status starttime="20170809 03:54:47.410" status="PASS" endtime="20170809 03:54:47.413"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:47.413">Delete All Sessions</msg>
<status starttime="20170809 03:54:47.413" status="PASS" endtime="20170809 03:54:47.413"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:47.414">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:47.156" status="PASS" endtime="20170809 03:54:47.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.414">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:47.414" status="PASS" endtime="20170809 03:54:47.414"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.415">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:47.415">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:47.415">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:47.415" status="PASS" endtime="20170809 03:54:47.415"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:47.415">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:54:47.156" status="PASS" endtime="20170809 03:54:47.416"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:47.416">${power_state} = On</msg>
<status starttime="20170809 03:54:47.155" status="PASS" endtime="20170809 03:54:47.416"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:54:47.416" status="PASS" endtime="20170809 03:54:47.416"></status>
</kw>
<status starttime="20170809 03:54:47.155" status="PASS" endtime="20170809 03:54:47.417"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.420">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:47.420" status="PASS" endtime="20170809 03:54:47.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.421">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:47.421" status="PASS" endtime="20170809 03:54:47.422"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.422">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:47.422" status="PASS" endtime="20170809 03:54:47.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.423">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:47.422" status="PASS" endtime="20170809 03:54:47.423"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.598">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:47.423" status="PASS" endtime="20170809 03:54:47.598"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:47.598">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:47.598">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:47.423" status="PASS" endtime="20170809 03:54:47.598"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.599">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:47.598" status="PASS" endtime="20170809 03:54:47.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.599">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:47.599" status="PASS" endtime="20170809 03:54:47.600"></status>
</kw>
<status starttime="20170809 03:54:47.419" status="PASS" endtime="20170809 03:54:47.600"></status>
</kw>
<status starttime="20170809 03:54:47.419" status="PASS" endtime="20170809 03:54:47.600"></status>
</kw>
<status starttime="20170809 03:54:47.418" status="PASS" endtime="20170809 03:54:47.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.601">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:54:47.600" status="PASS" endtime="20170809 03:54:47.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.603">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:47.602" status="PASS" endtime="20170809 03:54:47.603"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.604">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:47.603" status="PASS" endtime="20170809 03:54:47.604"></status>
</kw>
<status starttime="20170809 03:54:47.603" status="PASS" endtime="20170809 03:54:47.604"></status>
</kw>
<status starttime="20170809 03:54:47.601" status="PASS" endtime="20170809 03:54:47.604"></status>
</kw>
<status starttime="20170809 03:54:47.601" status="PASS" endtime="20170809 03:54:47.604"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.707">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:47.707">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:47.604" status="PASS" endtime="20170809 03:54:47.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.709">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:47.708" status="PASS" endtime="20170809 03:54:47.709"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.710">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:47.710" status="PASS" endtime="20170809 03:54:47.710"></status>
</kw>
<status starttime="20170809 03:54:47.709" status="PASS" endtime="20170809 03:54:47.710"></status>
</kw>
<status starttime="20170809 03:54:47.708" status="PASS" endtime="20170809 03:54:47.710"></status>
</kw>
<status starttime="20170809 03:54:47.707" status="PASS" endtime="20170809 03:54:47.710"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:47.711">Delete All Sessions</msg>
<status starttime="20170809 03:54:47.710" status="PASS" endtime="20170809 03:54:47.711"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:47.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:47.418" status="PASS" endtime="20170809 03:54:47.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:47.711" status="PASS" endtime="20170809 03:54:47.712"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.712">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:47.712">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:47.712">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:47.712" status="PASS" endtime="20170809 03:54:47.712"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:47.713">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:54:47.417" status="PASS" endtime="20170809 03:54:47.713"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:47.713">${host_state} = Running</msg>
<status starttime="20170809 03:54:47.417" status="PASS" endtime="20170809 03:54:47.713"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:54:47.713" status="PASS" endtime="20170809 03:54:47.714"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:47.718">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:47.718" status="PASS" endtime="20170809 03:54:47.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.719">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:47.719" status="PASS" endtime="20170809 03:54:47.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.720">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:47.719" status="PASS" endtime="20170809 03:54:47.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:47.720">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:47.720" status="PASS" endtime="20170809 03:54:47.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:48.020">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:47.721" status="PASS" endtime="20170809 03:54:48.020"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:48.020">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:48.020">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:47.721" status="PASS" endtime="20170809 03:54:48.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:48.021">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:48.021" status="PASS" endtime="20170809 03:54:48.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:48.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:48.021" status="PASS" endtime="20170809 03:54:48.022"></status>
</kw>
<status starttime="20170809 03:54:47.717" status="PASS" endtime="20170809 03:54:48.022"></status>
</kw>
<status starttime="20170809 03:54:47.717" status="PASS" endtime="20170809 03:54:48.022"></status>
</kw>
<status starttime="20170809 03:54:47.716" status="PASS" endtime="20170809 03:54:48.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:48.023">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:54:48.022" status="PASS" endtime="20170809 03:54:48.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:48.025">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:48.024" status="PASS" endtime="20170809 03:54:48.025"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:48.026">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:48.025" status="PASS" endtime="20170809 03:54:48.026"></status>
</kw>
<status starttime="20170809 03:54:48.025" status="PASS" endtime="20170809 03:54:48.026"></status>
</kw>
<status starttime="20170809 03:54:48.023" status="PASS" endtime="20170809 03:54:48.026"></status>
</kw>
<status starttime="20170809 03:54:48.023" status="PASS" endtime="20170809 03:54:48.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:48.100">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:48.100">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:48.026" status="PASS" endtime="20170809 03:54:48.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:48.102">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:48.101" status="PASS" endtime="20170809 03:54:48.102"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:48.103">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:48.103" status="PASS" endtime="20170809 03:54:48.103"></status>
</kw>
<status starttime="20170809 03:54:48.102" status="PASS" endtime="20170809 03:54:48.103"></status>
</kw>
<status starttime="20170809 03:54:48.101" status="PASS" endtime="20170809 03:54:48.104"></status>
</kw>
<status starttime="20170809 03:54:48.100" status="PASS" endtime="20170809 03:54:48.104"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:48.104">Delete All Sessions</msg>
<status starttime="20170809 03:54:48.104" status="PASS" endtime="20170809 03:54:48.104"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:48.104">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:47.715" status="PASS" endtime="20170809 03:54:48.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:48.105">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:48.105" status="PASS" endtime="20170809 03:54:48.105"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:48.106">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:48.106">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:48.106">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:48.105" status="PASS" endtime="20170809 03:54:48.106"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:48.106">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:47.715" status="PASS" endtime="20170809 03:54:48.106"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:48.106">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:47.714" status="PASS" endtime="20170809 03:54:48.106"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:54:48.107">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:54:48.107" status="FAIL" endtime="20170809 03:54:48.107"></status>
</kw>
<status starttime="20170809 03:54:47.714" status="FAIL" endtime="20170809 03:54:48.107"></status>
</kw>
<status starttime="20170809 03:54:47.154" status="FAIL" endtime="20170809 03:54:48.107"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.113">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:58.112" status="PASS" endtime="20170809 03:54:58.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.114">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:58.113" status="PASS" endtime="20170809 03:54:58.114"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.114">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:58.114" status="PASS" endtime="20170809 03:54:58.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.115">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:58.115" status="PASS" endtime="20170809 03:54:58.115"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.313">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:58.116" status="PASS" endtime="20170809 03:54:58.313"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:58.313">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:58.313">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:58.115" status="PASS" endtime="20170809 03:54:58.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.314">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:58.314" status="PASS" endtime="20170809 03:54:58.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:58.314" status="PASS" endtime="20170809 03:54:58.315"></status>
</kw>
<status starttime="20170809 03:54:58.112" status="PASS" endtime="20170809 03:54:58.315"></status>
</kw>
<status starttime="20170809 03:54:58.111" status="PASS" endtime="20170809 03:54:58.315"></status>
</kw>
<status starttime="20170809 03:54:58.111" status="PASS" endtime="20170809 03:54:58.315"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.316">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:54:58.315" status="PASS" endtime="20170809 03:54:58.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.318">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:58.317" status="PASS" endtime="20170809 03:54:58.318"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.319">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:58.318" status="PASS" endtime="20170809 03:54:58.319"></status>
</kw>
<status starttime="20170809 03:54:58.318" status="PASS" endtime="20170809 03:54:58.319"></status>
</kw>
<status starttime="20170809 03:54:58.316" status="PASS" endtime="20170809 03:54:58.319"></status>
</kw>
<status starttime="20170809 03:54:58.316" status="PASS" endtime="20170809 03:54:58.319"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.408">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:58.408">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:58.319" status="PASS" endtime="20170809 03:54:58.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.410">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:58.409" status="PASS" endtime="20170809 03:54:58.410"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.411">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:58.411" status="PASS" endtime="20170809 03:54:58.411"></status>
</kw>
<status starttime="20170809 03:54:58.410" status="PASS" endtime="20170809 03:54:58.411"></status>
</kw>
<status starttime="20170809 03:54:58.409" status="PASS" endtime="20170809 03:54:58.411"></status>
</kw>
<status starttime="20170809 03:54:58.408" status="PASS" endtime="20170809 03:54:58.411"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:58.412">Delete All Sessions</msg>
<status starttime="20170809 03:54:58.411" status="PASS" endtime="20170809 03:54:58.412"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:58.412">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:58.110" status="PASS" endtime="20170809 03:54:58.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:58.412" status="PASS" endtime="20170809 03:54:58.413"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.413">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:58.413">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:58.414">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:58.413" status="PASS" endtime="20170809 03:54:58.414"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:58.414">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:54:58.109" status="PASS" endtime="20170809 03:54:58.414"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:58.414">${power_state} = On</msg>
<status starttime="20170809 03:54:58.109" status="PASS" endtime="20170809 03:54:58.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:54:58.414" status="PASS" endtime="20170809 03:54:58.415"></status>
</kw>
<status starttime="20170809 03:54:58.109" status="PASS" endtime="20170809 03:54:58.415"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.419">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:58.418" status="PASS" endtime="20170809 03:54:58.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.420">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:58.419" status="PASS" endtime="20170809 03:54:58.420"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.420">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:58.420" status="PASS" endtime="20170809 03:54:58.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.421">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:58.421" status="PASS" endtime="20170809 03:54:58.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.614">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:58.422" status="PASS" endtime="20170809 03:54:58.614"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:58.614">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:58.614">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:58.421" status="PASS" endtime="20170809 03:54:58.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.615">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:58.615" status="PASS" endtime="20170809 03:54:58.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.616">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:58.616" status="PASS" endtime="20170809 03:54:58.616"></status>
</kw>
<status starttime="20170809 03:54:58.417" status="PASS" endtime="20170809 03:54:58.616"></status>
</kw>
<status starttime="20170809 03:54:58.417" status="PASS" endtime="20170809 03:54:58.616"></status>
</kw>
<status starttime="20170809 03:54:58.417" status="PASS" endtime="20170809 03:54:58.616"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.617">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:54:58.617" status="PASS" endtime="20170809 03:54:58.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.619">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:58.618" status="PASS" endtime="20170809 03:54:58.619"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.620">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:54:58.620" status="PASS" endtime="20170809 03:54:58.620"></status>
</kw>
<status starttime="20170809 03:54:58.619" status="PASS" endtime="20170809 03:54:58.620"></status>
</kw>
<status starttime="20170809 03:54:58.618" status="PASS" endtime="20170809 03:54:58.620"></status>
</kw>
<status starttime="20170809 03:54:58.617" status="PASS" endtime="20170809 03:54:58.621"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.743">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:58.743">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:58.621" status="PASS" endtime="20170809 03:54:58.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.745">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:58.745" status="PASS" endtime="20170809 03:54:58.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.746">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:58.746" status="PASS" endtime="20170809 03:54:58.746"></status>
</kw>
<status starttime="20170809 03:54:58.745" status="PASS" endtime="20170809 03:54:58.747"></status>
</kw>
<status starttime="20170809 03:54:58.744" status="PASS" endtime="20170809 03:54:58.747"></status>
</kw>
<status starttime="20170809 03:54:58.744" status="PASS" endtime="20170809 03:54:58.747"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:58.747">Delete All Sessions</msg>
<status starttime="20170809 03:54:58.747" status="PASS" endtime="20170809 03:54:58.748"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:58.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:58.416" status="PASS" endtime="20170809 03:54:58.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:58.748" status="PASS" endtime="20170809 03:54:58.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.749">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:58.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:58.749">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:58.749" status="PASS" endtime="20170809 03:54:58.749"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:58.749">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:54:58.415" status="PASS" endtime="20170809 03:54:58.749"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:58.750">${host_state} = Running</msg>
<status starttime="20170809 03:54:58.415" status="PASS" endtime="20170809 03:54:58.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:54:58.750" status="PASS" endtime="20170809 03:54:58.750"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.754">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:54:58.754" status="PASS" endtime="20170809 03:54:58.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:54:58.755" status="PASS" endtime="20170809 03:54:58.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.756">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:54:58.756" status="PASS" endtime="20170809 03:54:58.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.757">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:54:58.756" status="PASS" endtime="20170809 03:54:58.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.985">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:54:58.757" status="PASS" endtime="20170809 03:54:58.985"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:58.985">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:54:58.985">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:58.757" status="PASS" endtime="20170809 03:54:58.985"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.986">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:58.986" status="PASS" endtime="20170809 03:54:58.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:58.986" status="PASS" endtime="20170809 03:54:58.987"></status>
</kw>
<status starttime="20170809 03:54:58.754" status="PASS" endtime="20170809 03:54:58.987"></status>
</kw>
<status starttime="20170809 03:54:58.753" status="PASS" endtime="20170809 03:54:58.987"></status>
</kw>
<status starttime="20170809 03:54:58.753" status="PASS" endtime="20170809 03:54:58.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.988">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:54:58.987" status="PASS" endtime="20170809 03:54:58.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:58.993">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:58.989" status="PASS" endtime="20170809 03:54:58.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:58.994">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:54:58.994" status="PASS" endtime="20170809 03:54:58.994"></status>
</kw>
<status starttime="20170809 03:54:58.993" status="PASS" endtime="20170809 03:54:58.994"></status>
</kw>
<status starttime="20170809 03:54:58.988" status="PASS" endtime="20170809 03:54:58.995"></status>
</kw>
<status starttime="20170809 03:54:58.988" status="PASS" endtime="20170809 03:54:58.995"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:59.079">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:54:59.079">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:58.995" status="PASS" endtime="20170809 03:54:59.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:59.081">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:59.081" status="PASS" endtime="20170809 03:54:59.081"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:59.082">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:54:59.082" status="PASS" endtime="20170809 03:54:59.082"></status>
</kw>
<status starttime="20170809 03:54:59.082" status="PASS" endtime="20170809 03:54:59.083"></status>
</kw>
<status starttime="20170809 03:54:59.080" status="PASS" endtime="20170809 03:54:59.083"></status>
</kw>
<status starttime="20170809 03:54:59.080" status="PASS" endtime="20170809 03:54:59.083"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:54:59.083">Delete All Sessions</msg>
<status starttime="20170809 03:54:59.083" status="PASS" endtime="20170809 03:54:59.083"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:59.084">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:54:58.752" status="PASS" endtime="20170809 03:54:59.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:54:59.084">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:54:59.084" status="PASS" endtime="20170809 03:54:59.084"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:54:59.085">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:54:59.085">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:54:59.085">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:54:59.084" status="PASS" endtime="20170809 03:54:59.085"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:59.085">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:58.751" status="PASS" endtime="20170809 03:54:59.085"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:54:59.085">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:54:58.751" status="PASS" endtime="20170809 03:54:59.086"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:54:59.086">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:54:59.086" status="FAIL" endtime="20170809 03:54:59.086"></status>
</kw>
<status starttime="20170809 03:54:58.750" status="FAIL" endtime="20170809 03:54:59.086"></status>
</kw>
<status starttime="20170809 03:54:58.108" status="FAIL" endtime="20170809 03:54:59.087"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.092">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:09.091" status="PASS" endtime="20170809 03:55:09.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:09.092" status="PASS" endtime="20170809 03:55:09.093"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.094">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:09.093" status="PASS" endtime="20170809 03:55:09.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.095">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:09.094" status="PASS" endtime="20170809 03:55:09.095"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.276">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:09.096" status="PASS" endtime="20170809 03:55:09.276"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:09.276">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:09.276">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:09.095" status="PASS" endtime="20170809 03:55:09.276"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.277">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:09.277" status="PASS" endtime="20170809 03:55:09.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:09.277" status="PASS" endtime="20170809 03:55:09.278"></status>
</kw>
<status starttime="20170809 03:55:09.091" status="PASS" endtime="20170809 03:55:09.278"></status>
</kw>
<status starttime="20170809 03:55:09.090" status="PASS" endtime="20170809 03:55:09.278"></status>
</kw>
<status starttime="20170809 03:55:09.090" status="PASS" endtime="20170809 03:55:09.278"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.279">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:55:09.278" status="PASS" endtime="20170809 03:55:09.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.281">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:09.280" status="PASS" endtime="20170809 03:55:09.281"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.282">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:09.282" status="PASS" endtime="20170809 03:55:09.282"></status>
</kw>
<status starttime="20170809 03:55:09.281" status="PASS" endtime="20170809 03:55:09.282"></status>
</kw>
<status starttime="20170809 03:55:09.280" status="PASS" endtime="20170809 03:55:09.282"></status>
</kw>
<status starttime="20170809 03:55:09.279" status="PASS" endtime="20170809 03:55:09.282"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.345">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:09.346">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:09.283" status="PASS" endtime="20170809 03:55:09.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.349">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:09.347" status="PASS" endtime="20170809 03:55:09.349"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.350">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:09.349" status="PASS" endtime="20170809 03:55:09.350"></status>
</kw>
<status starttime="20170809 03:55:09.349" status="PASS" endtime="20170809 03:55:09.350"></status>
</kw>
<status starttime="20170809 03:55:09.347" status="PASS" endtime="20170809 03:55:09.350"></status>
</kw>
<status starttime="20170809 03:55:09.346" status="PASS" endtime="20170809 03:55:09.350"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:09.350">Delete All Sessions</msg>
<status starttime="20170809 03:55:09.350" status="PASS" endtime="20170809 03:55:09.351"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:09.351">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:09.089" status="PASS" endtime="20170809 03:55:09.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:09.351" status="PASS" endtime="20170809 03:55:09.352"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.352">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:09.352">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:09.352">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:09.352" status="PASS" endtime="20170809 03:55:09.352"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:09.353">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:55:09.088" status="PASS" endtime="20170809 03:55:09.353"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:09.353">${power_state} = On</msg>
<status starttime="20170809 03:55:09.088" status="PASS" endtime="20170809 03:55:09.353"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:55:09.353" status="PASS" endtime="20170809 03:55:09.353"></status>
</kw>
<status starttime="20170809 03:55:09.088" status="PASS" endtime="20170809 03:55:09.354"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.358">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:09.357" status="PASS" endtime="20170809 03:55:09.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.358">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:09.358" status="PASS" endtime="20170809 03:55:09.358"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.359">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:09.359" status="PASS" endtime="20170809 03:55:09.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.360">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:09.359" status="PASS" endtime="20170809 03:55:09.360"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.535">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:09.360" status="PASS" endtime="20170809 03:55:09.535"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:09.535">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:09.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:09.360" status="PASS" endtime="20170809 03:55:09.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.536">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:09.536" status="PASS" endtime="20170809 03:55:09.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:09.536" status="PASS" endtime="20170809 03:55:09.537"></status>
</kw>
<status starttime="20170809 03:55:09.356" status="PASS" endtime="20170809 03:55:09.537"></status>
</kw>
<status starttime="20170809 03:55:09.356" status="PASS" endtime="20170809 03:55:09.537"></status>
</kw>
<status starttime="20170809 03:55:09.355" status="PASS" endtime="20170809 03:55:09.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.538">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:55:09.537" status="PASS" endtime="20170809 03:55:09.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.540">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:09.539" status="PASS" endtime="20170809 03:55:09.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.541">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:09.540" status="PASS" endtime="20170809 03:55:09.541"></status>
</kw>
<status starttime="20170809 03:55:09.540" status="PASS" endtime="20170809 03:55:09.541"></status>
</kw>
<status starttime="20170809 03:55:09.538" status="PASS" endtime="20170809 03:55:09.541"></status>
</kw>
<status starttime="20170809 03:55:09.538" status="PASS" endtime="20170809 03:55:09.541"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.656">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:09.656">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:09.542" status="PASS" endtime="20170809 03:55:09.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.658">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:09.657" status="PASS" endtime="20170809 03:55:09.658"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.659">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:09.659" status="PASS" endtime="20170809 03:55:09.659"></status>
</kw>
<status starttime="20170809 03:55:09.658" status="PASS" endtime="20170809 03:55:09.659"></status>
</kw>
<status starttime="20170809 03:55:09.657" status="PASS" endtime="20170809 03:55:09.659"></status>
</kw>
<status starttime="20170809 03:55:09.656" status="PASS" endtime="20170809 03:55:09.659"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:09.660">Delete All Sessions</msg>
<status starttime="20170809 03:55:09.660" status="PASS" endtime="20170809 03:55:09.660"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:09.660">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:09.355" status="PASS" endtime="20170809 03:55:09.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:09.660" status="PASS" endtime="20170809 03:55:09.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.661">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:09.661">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:09.662">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:09.661" status="PASS" endtime="20170809 03:55:09.662"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:09.662">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:55:09.354" status="PASS" endtime="20170809 03:55:09.662"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:09.662">${host_state} = Running</msg>
<status starttime="20170809 03:55:09.354" status="PASS" endtime="20170809 03:55:09.662"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:55:09.662" status="PASS" endtime="20170809 03:55:09.663"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.667">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:09.667" status="PASS" endtime="20170809 03:55:09.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:09.667" status="PASS" endtime="20170809 03:55:09.668"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.668">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:09.668" status="PASS" endtime="20170809 03:55:09.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.669">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:09.669" status="PASS" endtime="20170809 03:55:09.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.957">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:09.670" status="PASS" endtime="20170809 03:55:09.958"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:09.958">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:09.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:09.669" status="PASS" endtime="20170809 03:55:09.958"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.959">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:09.958" status="PASS" endtime="20170809 03:55:09.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:09.959" status="PASS" endtime="20170809 03:55:09.959"></status>
</kw>
<status starttime="20170809 03:55:09.666" status="PASS" endtime="20170809 03:55:09.960"></status>
</kw>
<status starttime="20170809 03:55:09.666" status="PASS" endtime="20170809 03:55:09.960"></status>
</kw>
<status starttime="20170809 03:55:09.665" status="PASS" endtime="20170809 03:55:09.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.960">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:55:09.960" status="PASS" endtime="20170809 03:55:09.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:09.963">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:55:09.962" status="PASS" endtime="20170809 03:55:09.963"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:09.964">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:55:09.963" status="PASS" endtime="20170809 03:55:09.964"></status>
</kw>
<status starttime="20170809 03:55:09.963" status="PASS" endtime="20170809 03:55:09.964"></status>
</kw>
<status starttime="20170809 03:55:09.961" status="PASS" endtime="20170809 03:55:09.964"></status>
</kw>
<status starttime="20170809 03:55:09.961" status="PASS" endtime="20170809 03:55:09.964"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:10.030">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:10.030">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:09.964" status="PASS" endtime="20170809 03:55:10.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:10.032">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:10.032" status="PASS" endtime="20170809 03:55:10.032"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:10.033">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:10.033" status="PASS" endtime="20170809 03:55:10.033"></status>
</kw>
<status starttime="20170809 03:55:10.032" status="PASS" endtime="20170809 03:55:10.033"></status>
</kw>
<status starttime="20170809 03:55:10.031" status="PASS" endtime="20170809 03:55:10.034"></status>
</kw>
<status starttime="20170809 03:55:10.031" status="PASS" endtime="20170809 03:55:10.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:10.034">Delete All Sessions</msg>
<status starttime="20170809 03:55:10.034" status="PASS" endtime="20170809 03:55:10.034"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:10.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:09.664" status="PASS" endtime="20170809 03:55:10.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:10.035">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:10.035" status="PASS" endtime="20170809 03:55:10.035"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:10.035">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:10.036">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:10.036">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:10.035" status="PASS" endtime="20170809 03:55:10.036"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:10.036">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:55:09.664" status="PASS" endtime="20170809 03:55:10.036"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:10.036">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:55:09.663" status="PASS" endtime="20170809 03:55:10.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:55:10.037">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:55:10.036" status="FAIL" endtime="20170809 03:55:10.037"></status>
</kw>
<status starttime="20170809 03:55:09.663" status="FAIL" endtime="20170809 03:55:10.037"></status>
</kw>
<status starttime="20170809 03:55:09.087" status="FAIL" endtime="20170809 03:55:10.037"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.042">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:20.042" status="PASS" endtime="20170809 03:55:20.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.043">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:20.043" status="PASS" endtime="20170809 03:55:20.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.044">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:20.044" status="PASS" endtime="20170809 03:55:20.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.045">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:20.044" status="PASS" endtime="20170809 03:55:20.045"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.250">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:20.045" status="PASS" endtime="20170809 03:55:20.251"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:20.251">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:20.251">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:20.045" status="PASS" endtime="20170809 03:55:20.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.252">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:20.251" status="PASS" endtime="20170809 03:55:20.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:20.252" status="PASS" endtime="20170809 03:55:20.252"></status>
</kw>
<status starttime="20170809 03:55:20.041" status="PASS" endtime="20170809 03:55:20.252"></status>
</kw>
<status starttime="20170809 03:55:20.041" status="PASS" endtime="20170809 03:55:20.253"></status>
</kw>
<status starttime="20170809 03:55:20.040" status="PASS" endtime="20170809 03:55:20.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.253">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:55:20.253" status="PASS" endtime="20170809 03:55:20.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.255">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:20.255" status="PASS" endtime="20170809 03:55:20.255"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.256">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:20.256" status="PASS" endtime="20170809 03:55:20.256"></status>
</kw>
<status starttime="20170809 03:55:20.255" status="PASS" endtime="20170809 03:55:20.256"></status>
</kw>
<status starttime="20170809 03:55:20.254" status="PASS" endtime="20170809 03:55:20.257"></status>
</kw>
<status starttime="20170809 03:55:20.254" status="PASS" endtime="20170809 03:55:20.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.358">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:20.358">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:20.257" status="PASS" endtime="20170809 03:55:20.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.360">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:20.360" status="PASS" endtime="20170809 03:55:20.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.361">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:20.361" status="PASS" endtime="20170809 03:55:20.362"></status>
</kw>
<status starttime="20170809 03:55:20.361" status="PASS" endtime="20170809 03:55:20.362"></status>
</kw>
<status starttime="20170809 03:55:20.359" status="PASS" endtime="20170809 03:55:20.362"></status>
</kw>
<status starttime="20170809 03:55:20.359" status="PASS" endtime="20170809 03:55:20.362"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:20.362">Delete All Sessions</msg>
<status starttime="20170809 03:55:20.362" status="PASS" endtime="20170809 03:55:20.362"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:20.362">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:20.040" status="PASS" endtime="20170809 03:55:20.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.363">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:20.363" status="PASS" endtime="20170809 03:55:20.363"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.364">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:20.364">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:20.364">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:20.363" status="PASS" endtime="20170809 03:55:20.364"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:20.364">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:55:20.039" status="PASS" endtime="20170809 03:55:20.364"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:20.364">${power_state} = On</msg>
<status starttime="20170809 03:55:20.039" status="PASS" endtime="20170809 03:55:20.365"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:55:20.365" status="PASS" endtime="20170809 03:55:20.365"></status>
</kw>
<status starttime="20170809 03:55:20.038" status="PASS" endtime="20170809 03:55:20.365"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.369">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:20.369" status="PASS" endtime="20170809 03:55:20.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.370">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:20.370" status="PASS" endtime="20170809 03:55:20.370"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.371">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:20.371" status="PASS" endtime="20170809 03:55:20.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.372">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:20.371" status="PASS" endtime="20170809 03:55:20.372"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.654">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:20.373" status="PASS" endtime="20170809 03:55:20.654"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:20.654">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:20.654">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:20.372" status="PASS" endtime="20170809 03:55:20.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.655">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:20.655" status="PASS" endtime="20170809 03:55:20.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:20.655" status="PASS" endtime="20170809 03:55:20.656"></status>
</kw>
<status starttime="20170809 03:55:20.368" status="PASS" endtime="20170809 03:55:20.656"></status>
</kw>
<status starttime="20170809 03:55:20.368" status="PASS" endtime="20170809 03:55:20.656"></status>
</kw>
<status starttime="20170809 03:55:20.367" status="PASS" endtime="20170809 03:55:20.656"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.657">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:55:20.656" status="PASS" endtime="20170809 03:55:20.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.659">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:20.658" status="PASS" endtime="20170809 03:55:20.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.660">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:20.659" status="PASS" endtime="20170809 03:55:20.660"></status>
</kw>
<status starttime="20170809 03:55:20.659" status="PASS" endtime="20170809 03:55:20.660"></status>
</kw>
<status starttime="20170809 03:55:20.657" status="PASS" endtime="20170809 03:55:20.660"></status>
</kw>
<status starttime="20170809 03:55:20.657" status="PASS" endtime="20170809 03:55:20.660"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.750">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:20.750">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:20.660" status="PASS" endtime="20170809 03:55:20.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.752">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:20.751" status="PASS" endtime="20170809 03:55:20.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.753">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:20.753" status="PASS" endtime="20170809 03:55:20.753"></status>
</kw>
<status starttime="20170809 03:55:20.752" status="PASS" endtime="20170809 03:55:20.753"></status>
</kw>
<status starttime="20170809 03:55:20.751" status="PASS" endtime="20170809 03:55:20.753"></status>
</kw>
<status starttime="20170809 03:55:20.750" status="PASS" endtime="20170809 03:55:20.753"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:20.754">Delete All Sessions</msg>
<status starttime="20170809 03:55:20.754" status="PASS" endtime="20170809 03:55:20.754"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:20.754">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:20.367" status="PASS" endtime="20170809 03:55:20.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:20.754" status="PASS" endtime="20170809 03:55:20.755"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.755">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:20.755">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:20.755">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:20.755" status="PASS" endtime="20170809 03:55:20.755"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:20.756">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:55:20.366" status="PASS" endtime="20170809 03:55:20.756"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:20.756">${host_state} = Running</msg>
<status starttime="20170809 03:55:20.365" status="PASS" endtime="20170809 03:55:20.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:55:20.756" status="PASS" endtime="20170809 03:55:20.757"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.761">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:20.760" status="PASS" endtime="20170809 03:55:20.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:20.761" status="PASS" endtime="20170809 03:55:20.762"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.762">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:20.762" status="PASS" endtime="20170809 03:55:20.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:20.763" status="PASS" endtime="20170809 03:55:20.763"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.940">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:20.764" status="PASS" endtime="20170809 03:55:20.941"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:20.941">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:20.941">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:20.763" status="PASS" endtime="20170809 03:55:20.941"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.942">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:20.942" status="PASS" endtime="20170809 03:55:20.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.944">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:20.943" status="PASS" endtime="20170809 03:55:20.944"></status>
</kw>
<status starttime="20170809 03:55:20.760" status="PASS" endtime="20170809 03:55:20.945"></status>
</kw>
<status starttime="20170809 03:55:20.760" status="PASS" endtime="20170809 03:55:20.945"></status>
</kw>
<status starttime="20170809 03:55:20.759" status="PASS" endtime="20170809 03:55:20.945"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.945">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:55:20.945" status="PASS" endtime="20170809 03:55:20.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:20.948">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:55:20.947" status="PASS" endtime="20170809 03:55:20.948"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:20.949">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:55:20.949" status="PASS" endtime="20170809 03:55:20.949"></status>
</kw>
<status starttime="20170809 03:55:20.948" status="PASS" endtime="20170809 03:55:20.949"></status>
</kw>
<status starttime="20170809 03:55:20.946" status="PASS" endtime="20170809 03:55:20.949"></status>
</kw>
<status starttime="20170809 03:55:20.946" status="PASS" endtime="20170809 03:55:20.949"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:21.017">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:21.017">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:20.950" status="PASS" endtime="20170809 03:55:21.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:21.019">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:21.018" status="PASS" endtime="20170809 03:55:21.019"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:21.020">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:21.020" status="PASS" endtime="20170809 03:55:21.020"></status>
</kw>
<status starttime="20170809 03:55:21.019" status="PASS" endtime="20170809 03:55:21.020"></status>
</kw>
<status starttime="20170809 03:55:21.018" status="PASS" endtime="20170809 03:55:21.020"></status>
</kw>
<status starttime="20170809 03:55:21.017" status="PASS" endtime="20170809 03:55:21.020"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:21.021">Delete All Sessions</msg>
<status starttime="20170809 03:55:21.020" status="PASS" endtime="20170809 03:55:21.021"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:21.021">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:20.758" status="PASS" endtime="20170809 03:55:21.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:21.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:21.021" status="PASS" endtime="20170809 03:55:21.022"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:21.023">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:21.023">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:21.023">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:21.022" status="PASS" endtime="20170809 03:55:21.023"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:21.023">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:55:20.758" status="PASS" endtime="20170809 03:55:21.023"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:21.023">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:55:20.757" status="PASS" endtime="20170809 03:55:21.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:55:21.024">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:55:21.024" status="FAIL" endtime="20170809 03:55:21.024"></status>
</kw>
<status starttime="20170809 03:55:20.757" status="FAIL" endtime="20170809 03:55:21.024"></status>
</kw>
<status starttime="20170809 03:55:20.038" status="FAIL" endtime="20170809 03:55:21.024"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:31.030">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:31.029" status="PASS" endtime="20170809 03:55:31.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:31.031">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:31.030" status="PASS" endtime="20170809 03:55:31.031"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:31.031">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:31.031" status="PASS" endtime="20170809 03:55:31.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:31.032">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:31.031" status="PASS" endtime="20170809 03:55:31.032"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:31.924">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:31.033" status="PASS" endtime="20170809 03:55:31.924"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:31.924">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:31.924">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:31.032" status="PASS" endtime="20170809 03:55:31.924"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:31.925">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:31.925" status="PASS" endtime="20170809 03:55:31.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:31.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:31.925" status="PASS" endtime="20170809 03:55:31.926"></status>
</kw>
<status starttime="20170809 03:55:31.029" status="PASS" endtime="20170809 03:55:31.926"></status>
</kw>
<status starttime="20170809 03:55:31.028" status="PASS" endtime="20170809 03:55:31.926"></status>
</kw>
<status starttime="20170809 03:55:31.028" status="PASS" endtime="20170809 03:55:31.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:31.927">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:55:31.926" status="PASS" endtime="20170809 03:55:31.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:31.929">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:31.928" status="PASS" endtime="20170809 03:55:31.929"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:31.930">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:31.930" status="PASS" endtime="20170809 03:55:31.930"></status>
</kw>
<status starttime="20170809 03:55:31.929" status="PASS" endtime="20170809 03:55:31.930"></status>
</kw>
<status starttime="20170809 03:55:31.928" status="PASS" endtime="20170809 03:55:31.930"></status>
</kw>
<status starttime="20170809 03:55:31.927" status="PASS" endtime="20170809 03:55:31.930"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:35.997">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:35.997">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:31.930" status="PASS" endtime="20170809 03:55:35.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:35.999">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:35.998" status="PASS" endtime="20170809 03:55:35.999"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:36.000">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:36.000" status="PASS" endtime="20170809 03:55:36.000"></status>
</kw>
<status starttime="20170809 03:55:35.999" status="PASS" endtime="20170809 03:55:36.000"></status>
</kw>
<status starttime="20170809 03:55:35.998" status="PASS" endtime="20170809 03:55:36.000"></status>
</kw>
<status starttime="20170809 03:55:35.997" status="PASS" endtime="20170809 03:55:36.000"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:36.001">Delete All Sessions</msg>
<status starttime="20170809 03:55:36.001" status="PASS" endtime="20170809 03:55:36.001"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:36.001">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:31.027" status="PASS" endtime="20170809 03:55:36.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:36.002">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:36.001" status="PASS" endtime="20170809 03:55:36.002"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:36.002">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:36.002">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:36.003">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:36.002" status="PASS" endtime="20170809 03:55:36.003"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:36.003">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:55:31.026" status="PASS" endtime="20170809 03:55:36.003"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:36.003">${power_state} = On</msg>
<status starttime="20170809 03:55:31.026" status="PASS" endtime="20170809 03:55:36.003"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:55:36.003" status="PASS" endtime="20170809 03:55:36.004"></status>
</kw>
<status starttime="20170809 03:55:31.026" status="PASS" endtime="20170809 03:55:36.004"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:36.008">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:36.007" status="PASS" endtime="20170809 03:55:36.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:36.009">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:36.008" status="PASS" endtime="20170809 03:55:36.009"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:36.009">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:36.009" status="PASS" endtime="20170809 03:55:36.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:36.010">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:36.010" status="PASS" endtime="20170809 03:55:36.010"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:36.186">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:36.011" status="PASS" endtime="20170809 03:55:36.186"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:36.187">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:36.187">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:36.010" status="PASS" endtime="20170809 03:55:36.187"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:36.187">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:36.187" status="PASS" endtime="20170809 03:55:36.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:36.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:36.188" status="PASS" endtime="20170809 03:55:36.188"></status>
</kw>
<status starttime="20170809 03:55:36.006" status="PASS" endtime="20170809 03:55:36.188"></status>
</kw>
<status starttime="20170809 03:55:36.006" status="PASS" endtime="20170809 03:55:36.188"></status>
</kw>
<status starttime="20170809 03:55:36.006" status="PASS" endtime="20170809 03:55:36.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:36.189">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:55:36.189" status="PASS" endtime="20170809 03:55:36.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:36.191">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:36.190" status="PASS" endtime="20170809 03:55:36.191"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:36.192">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:36.192" status="PASS" endtime="20170809 03:55:36.192"></status>
</kw>
<status starttime="20170809 03:55:36.191" status="PASS" endtime="20170809 03:55:36.192"></status>
</kw>
<status starttime="20170809 03:55:36.190" status="PASS" endtime="20170809 03:55:36.193"></status>
</kw>
<status starttime="20170809 03:55:36.189" status="PASS" endtime="20170809 03:55:36.193"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:37.050">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:37.051">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:36.193" status="PASS" endtime="20170809 03:55:37.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:37.053">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:37.052" status="PASS" endtime="20170809 03:55:37.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:37.055">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:37.054" status="PASS" endtime="20170809 03:55:37.055"></status>
</kw>
<status starttime="20170809 03:55:37.053" status="PASS" endtime="20170809 03:55:37.055"></status>
</kw>
<status starttime="20170809 03:55:37.052" status="PASS" endtime="20170809 03:55:37.055"></status>
</kw>
<status starttime="20170809 03:55:37.051" status="PASS" endtime="20170809 03:55:37.055"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:37.056">Delete All Sessions</msg>
<status starttime="20170809 03:55:37.056" status="PASS" endtime="20170809 03:55:37.056"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:37.056">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:36.005" status="PASS" endtime="20170809 03:55:37.056"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:37.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:37.056" status="PASS" endtime="20170809 03:55:37.057"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:37.057">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:37.057">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:37.057">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:37.057" status="PASS" endtime="20170809 03:55:37.057"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:37.058">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:55:36.004" status="PASS" endtime="20170809 03:55:37.058"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:37.058">${host_state} = Running</msg>
<status starttime="20170809 03:55:36.004" status="PASS" endtime="20170809 03:55:37.058"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:55:37.058" status="PASS" endtime="20170809 03:55:37.059"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:37.062">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:37.062" status="PASS" endtime="20170809 03:55:37.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:37.063">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:37.063" status="PASS" endtime="20170809 03:55:37.063"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:37.064">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:37.064" status="PASS" endtime="20170809 03:55:37.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:37.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:37.064" status="PASS" endtime="20170809 03:55:37.065"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:37.423">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:37.065" status="PASS" endtime="20170809 03:55:37.423"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:37.423">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:37.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:37.065" status="PASS" endtime="20170809 03:55:37.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:37.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:37.423" status="PASS" endtime="20170809 03:55:37.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:37.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:37.424" status="PASS" endtime="20170809 03:55:37.425"></status>
</kw>
<status starttime="20170809 03:55:37.062" status="PASS" endtime="20170809 03:55:37.425"></status>
</kw>
<status starttime="20170809 03:55:37.061" status="PASS" endtime="20170809 03:55:37.425"></status>
</kw>
<status starttime="20170809 03:55:37.061" status="PASS" endtime="20170809 03:55:37.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:37.426">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:55:37.425" status="PASS" endtime="20170809 03:55:37.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:37.428">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:55:37.427" status="PASS" endtime="20170809 03:55:37.428"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:37.429">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:55:37.428" status="PASS" endtime="20170809 03:55:37.429"></status>
</kw>
<status starttime="20170809 03:55:37.428" status="PASS" endtime="20170809 03:55:37.429"></status>
</kw>
<status starttime="20170809 03:55:37.426" status="PASS" endtime="20170809 03:55:37.429"></status>
</kw>
<status starttime="20170809 03:55:37.426" status="PASS" endtime="20170809 03:55:37.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:38.467">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:38.468">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:37.429" status="PASS" endtime="20170809 03:55:38.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:38.470">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:38.469" status="PASS" endtime="20170809 03:55:38.470"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:38.470">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:38.470" status="PASS" endtime="20170809 03:55:38.471"></status>
</kw>
<status starttime="20170809 03:55:38.470" status="PASS" endtime="20170809 03:55:38.471"></status>
</kw>
<status starttime="20170809 03:55:38.469" status="PASS" endtime="20170809 03:55:38.471"></status>
</kw>
<status starttime="20170809 03:55:38.468" status="PASS" endtime="20170809 03:55:38.471"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:38.471">Delete All Sessions</msg>
<status starttime="20170809 03:55:38.471" status="PASS" endtime="20170809 03:55:38.471"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:38.472">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:37.060" status="PASS" endtime="20170809 03:55:38.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:38.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:38.472" status="PASS" endtime="20170809 03:55:38.472"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:38.473">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:38.473">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:38.473">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:38.473" status="PASS" endtime="20170809 03:55:38.473"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:38.473">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:55:37.059" status="PASS" endtime="20170809 03:55:38.473"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:38.474">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:55:37.059" status="PASS" endtime="20170809 03:55:38.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:55:38.474">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:55:38.474" status="FAIL" endtime="20170809 03:55:38.474"></status>
</kw>
<status starttime="20170809 03:55:37.059" status="FAIL" endtime="20170809 03:55:38.475"></status>
</kw>
<status starttime="20170809 03:55:31.025" status="FAIL" endtime="20170809 03:55:38.475"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:48.480">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:55:48.480" status="PASS" endtime="20170809 03:55:48.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:48.481">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:55:48.481" status="PASS" endtime="20170809 03:55:48.481"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:48.482">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:55:48.481" status="PASS" endtime="20170809 03:55:48.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:48.482">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:55:48.482" status="PASS" endtime="20170809 03:55:48.482"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:49.089">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:55:48.483" status="PASS" endtime="20170809 03:55:49.089"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:49.089">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:55:49.089">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:48.483" status="PASS" endtime="20170809 03:55:49.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:49.090">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:49.089" status="PASS" endtime="20170809 03:55:49.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:49.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:49.090" status="PASS" endtime="20170809 03:55:49.091"></status>
</kw>
<status starttime="20170809 03:55:48.479" status="PASS" endtime="20170809 03:55:49.091"></status>
</kw>
<status starttime="20170809 03:55:48.478" status="PASS" endtime="20170809 03:55:49.091"></status>
</kw>
<status starttime="20170809 03:55:48.478" status="PASS" endtime="20170809 03:55:49.091"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:49.091">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:55:49.091" status="PASS" endtime="20170809 03:55:49.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:49.094">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:49.093" status="PASS" endtime="20170809 03:55:49.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:49.095">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:55:49.094" status="PASS" endtime="20170809 03:55:49.095"></status>
</kw>
<status starttime="20170809 03:55:49.094" status="PASS" endtime="20170809 03:55:49.095"></status>
</kw>
<status starttime="20170809 03:55:49.092" status="PASS" endtime="20170809 03:55:49.095"></status>
</kw>
<status starttime="20170809 03:55:49.092" status="PASS" endtime="20170809 03:55:49.095"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:53.809">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:55:53.809">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:49.095" status="PASS" endtime="20170809 03:55:53.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:53.811">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:53.810" status="PASS" endtime="20170809 03:55:53.811"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:53.812">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:55:53.812" status="PASS" endtime="20170809 03:55:53.813"></status>
</kw>
<status starttime="20170809 03:55:53.811" status="PASS" endtime="20170809 03:55:53.813"></status>
</kw>
<status starttime="20170809 03:55:53.810" status="PASS" endtime="20170809 03:55:53.813"></status>
</kw>
<status starttime="20170809 03:55:53.809" status="PASS" endtime="20170809 03:55:53.813"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:55:53.813">Delete All Sessions</msg>
<status starttime="20170809 03:55:53.813" status="PASS" endtime="20170809 03:55:53.813"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:53.813">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:55:48.477" status="PASS" endtime="20170809 03:55:53.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:55:53.814">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:55:53.814" status="PASS" endtime="20170809 03:55:53.814"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:55:53.815">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:55:53.815">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:55:53.815">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:55:53.814" status="PASS" endtime="20170809 03:55:53.815"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:53.815">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 03:55:48.477" status="PASS" endtime="20170809 03:55:53.815"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:55:53.815">${power_state} = Off</msg>
<status starttime="20170809 03:55:48.476" status="PASS" endtime="20170809 03:55:53.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:55:53.816">On != Off</msg>
<status starttime="20170809 03:55:53.816" status="FAIL" endtime="20170809 03:55:53.816"></status>
</kw>
<status starttime="20170809 03:55:48.476" status="FAIL" endtime="20170809 03:55:53.816"></status>
</kw>
<status starttime="20170809 03:55:48.475" status="FAIL" endtime="20170809 03:55:53.817"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:03.822">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:03.821" status="PASS" endtime="20170809 03:56:03.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:03.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:03.822" status="PASS" endtime="20170809 03:56:03.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:03.823">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:03.823" status="PASS" endtime="20170809 03:56:03.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:03.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:03.824" status="PASS" endtime="20170809 03:56:03.824"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:04.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:03.825" status="PASS" endtime="20170809 03:56:04.325"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:04.325">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:04.325">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:03.824" status="PASS" endtime="20170809 03:56:04.325"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:04.326">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:04.325" status="PASS" endtime="20170809 03:56:04.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:04.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:04.326" status="PASS" endtime="20170809 03:56:04.327"></status>
</kw>
<status starttime="20170809 03:56:03.821" status="PASS" endtime="20170809 03:56:04.327"></status>
</kw>
<status starttime="20170809 03:56:03.820" status="PASS" endtime="20170809 03:56:04.327"></status>
</kw>
<status starttime="20170809 03:56:03.820" status="PASS" endtime="20170809 03:56:04.327"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:04.327">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:56:04.327" status="PASS" endtime="20170809 03:56:04.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:04.329">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:04.329" status="PASS" endtime="20170809 03:56:04.329"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:04.330">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:04.330" status="PASS" endtime="20170809 03:56:04.330"></status>
</kw>
<status starttime="20170809 03:56:04.330" status="PASS" endtime="20170809 03:56:04.331"></status>
</kw>
<status starttime="20170809 03:56:04.328" status="PASS" endtime="20170809 03:56:04.331"></status>
</kw>
<status starttime="20170809 03:56:04.328" status="PASS" endtime="20170809 03:56:04.331"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:04.929">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:04.929">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:04.331" status="PASS" endtime="20170809 03:56:04.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:04.931">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:04.930" status="PASS" endtime="20170809 03:56:04.931"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:04.932">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:04.931" status="PASS" endtime="20170809 03:56:04.932"></status>
</kw>
<status starttime="20170809 03:56:04.931" status="PASS" endtime="20170809 03:56:04.932"></status>
</kw>
<status starttime="20170809 03:56:04.930" status="PASS" endtime="20170809 03:56:04.932"></status>
</kw>
<status starttime="20170809 03:56:04.929" status="PASS" endtime="20170809 03:56:04.932"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:04.933">Delete All Sessions</msg>
<status starttime="20170809 03:56:04.932" status="PASS" endtime="20170809 03:56:04.933"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:04.933">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:03.819" status="PASS" endtime="20170809 03:56:04.933"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:04.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:04.933" status="PASS" endtime="20170809 03:56:04.934"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:04.935">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:04.935">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:04.935">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:04.934" status="PASS" endtime="20170809 03:56:04.935"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:04.935">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:56:03.818" status="PASS" endtime="20170809 03:56:04.935"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:04.935">${power_state} = On</msg>
<status starttime="20170809 03:56:03.818" status="PASS" endtime="20170809 03:56:04.936"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:56:04.936" status="PASS" endtime="20170809 03:56:04.936"></status>
</kw>
<status starttime="20170809 03:56:03.818" status="PASS" endtime="20170809 03:56:04.936"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:04.940">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:04.939" status="PASS" endtime="20170809 03:56:04.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:04.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:04.941" status="PASS" endtime="20170809 03:56:04.941"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:04.942">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:04.941" status="PASS" endtime="20170809 03:56:04.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:04.942">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:04.942" status="PASS" endtime="20170809 03:56:04.943"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.333">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:04.943" status="PASS" endtime="20170809 03:56:05.333"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:05.333">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:05.333">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:04.943" status="PASS" endtime="20170809 03:56:05.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.334">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:05.334" status="PASS" endtime="20170809 03:56:05.335"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:05.335" status="PASS" endtime="20170809 03:56:05.336"></status>
</kw>
<status starttime="20170809 03:56:04.939" status="PASS" endtime="20170809 03:56:05.336"></status>
</kw>
<status starttime="20170809 03:56:04.938" status="PASS" endtime="20170809 03:56:05.336"></status>
</kw>
<status starttime="20170809 03:56:04.938" status="PASS" endtime="20170809 03:56:05.336"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.336">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:56:05.336" status="PASS" endtime="20170809 03:56:05.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.339">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:05.338" status="PASS" endtime="20170809 03:56:05.339"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.339">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:05.339" status="PASS" endtime="20170809 03:56:05.340"></status>
</kw>
<status starttime="20170809 03:56:05.339" status="PASS" endtime="20170809 03:56:05.340"></status>
</kw>
<status starttime="20170809 03:56:05.337" status="PASS" endtime="20170809 03:56:05.340"></status>
</kw>
<status starttime="20170809 03:56:05.337" status="PASS" endtime="20170809 03:56:05.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.461">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:05.461">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:05.340" status="PASS" endtime="20170809 03:56:05.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.463">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:05.462" status="PASS" endtime="20170809 03:56:05.463"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.464">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:05.464" status="PASS" endtime="20170809 03:56:05.464"></status>
</kw>
<status starttime="20170809 03:56:05.463" status="PASS" endtime="20170809 03:56:05.464"></status>
</kw>
<status starttime="20170809 03:56:05.462" status="PASS" endtime="20170809 03:56:05.464"></status>
</kw>
<status starttime="20170809 03:56:05.461" status="PASS" endtime="20170809 03:56:05.464"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:05.465">Delete All Sessions</msg>
<status starttime="20170809 03:56:05.465" status="PASS" endtime="20170809 03:56:05.465"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:05.465">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:04.937" status="PASS" endtime="20170809 03:56:05.465"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:05.465" status="PASS" endtime="20170809 03:56:05.466"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.466">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:05.466">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:05.466">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:05.466" status="PASS" endtime="20170809 03:56:05.466"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:05.467">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:56:04.937" status="PASS" endtime="20170809 03:56:05.467"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:05.467">${host_state} = Running</msg>
<status starttime="20170809 03:56:04.936" status="PASS" endtime="20170809 03:56:05.467"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:56:05.467" status="PASS" endtime="20170809 03:56:05.468"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.472">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:05.471" status="PASS" endtime="20170809 03:56:05.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:05.473" status="PASS" endtime="20170809 03:56:05.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.474">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:05.473" status="PASS" endtime="20170809 03:56:05.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.474">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:05.474" status="PASS" endtime="20170809 03:56:05.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.728">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:05.475" status="PASS" endtime="20170809 03:56:05.728"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:05.728">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:05.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:05.475" status="PASS" endtime="20170809 03:56:05.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.729">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:05.728" status="PASS" endtime="20170809 03:56:05.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:05.729" status="PASS" endtime="20170809 03:56:05.729"></status>
</kw>
<status starttime="20170809 03:56:05.471" status="PASS" endtime="20170809 03:56:05.730"></status>
</kw>
<status starttime="20170809 03:56:05.471" status="PASS" endtime="20170809 03:56:05.730"></status>
</kw>
<status starttime="20170809 03:56:05.470" status="PASS" endtime="20170809 03:56:05.730"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.730">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:56:05.730" status="PASS" endtime="20170809 03:56:05.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.732">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:05.732" status="PASS" endtime="20170809 03:56:05.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.733">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:05.733" status="PASS" endtime="20170809 03:56:05.733"></status>
</kw>
<status starttime="20170809 03:56:05.733" status="PASS" endtime="20170809 03:56:05.734"></status>
</kw>
<status starttime="20170809 03:56:05.731" status="PASS" endtime="20170809 03:56:05.734"></status>
</kw>
<status starttime="20170809 03:56:05.731" status="PASS" endtime="20170809 03:56:05.734"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.802">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:05.803">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:05.734" status="PASS" endtime="20170809 03:56:05.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.805">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:05.804" status="PASS" endtime="20170809 03:56:05.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.806">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:05.805" status="PASS" endtime="20170809 03:56:05.806"></status>
</kw>
<status starttime="20170809 03:56:05.805" status="PASS" endtime="20170809 03:56:05.806"></status>
</kw>
<status starttime="20170809 03:56:05.804" status="PASS" endtime="20170809 03:56:05.806"></status>
</kw>
<status starttime="20170809 03:56:05.803" status="PASS" endtime="20170809 03:56:05.806"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:05.806">Delete All Sessions</msg>
<status starttime="20170809 03:56:05.806" status="PASS" endtime="20170809 03:56:05.806"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:05.807">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:05.469" status="PASS" endtime="20170809 03:56:05.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:05.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:05.807" status="PASS" endtime="20170809 03:56:05.807"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:05.808">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:05.808">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:05.808">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:05.808" status="PASS" endtime="20170809 03:56:05.808"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:05.808">${state} = Off</msg>
<status starttime="20170809 03:56:05.468" status="PASS" endtime="20170809 03:56:05.808"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:05.809">${boot_progress} = Off</msg>
<status starttime="20170809 03:56:05.468" status="PASS" endtime="20170809 03:56:05.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:56:05.809">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 03:56:05.809" status="FAIL" endtime="20170809 03:56:05.809"></status>
</kw>
<status starttime="20170809 03:56:05.468" status="FAIL" endtime="20170809 03:56:05.809"></status>
</kw>
<status starttime="20170809 03:56:03.817" status="FAIL" endtime="20170809 03:56:05.810"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:15.815">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:15.814" status="PASS" endtime="20170809 03:56:15.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:15.816">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:15.815" status="PASS" endtime="20170809 03:56:15.816"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:15.816">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:15.816" status="PASS" endtime="20170809 03:56:15.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:15.817">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:15.816" status="PASS" endtime="20170809 03:56:15.817"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.051">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:15.818" status="PASS" endtime="20170809 03:56:16.051"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.051">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:16.051">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:15.817" status="PASS" endtime="20170809 03:56:16.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.052">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:16.051" status="PASS" endtime="20170809 03:56:16.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.052">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:16.052" status="PASS" endtime="20170809 03:56:16.053"></status>
</kw>
<status starttime="20170809 03:56:15.814" status="PASS" endtime="20170809 03:56:16.053"></status>
</kw>
<status starttime="20170809 03:56:15.813" status="PASS" endtime="20170809 03:56:16.053"></status>
</kw>
<status starttime="20170809 03:56:15.813" status="PASS" endtime="20170809 03:56:16.053"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.053">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:56:16.053" status="PASS" endtime="20170809 03:56:16.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.056">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:16.055" status="PASS" endtime="20170809 03:56:16.056"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.056">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:16.056" status="PASS" endtime="20170809 03:56:16.057"></status>
</kw>
<status starttime="20170809 03:56:16.056" status="PASS" endtime="20170809 03:56:16.057"></status>
</kw>
<status starttime="20170809 03:56:16.054" status="PASS" endtime="20170809 03:56:16.057"></status>
</kw>
<status starttime="20170809 03:56:16.054" status="PASS" endtime="20170809 03:56:16.057"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.174">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:16.174">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:16.057" status="PASS" endtime="20170809 03:56:16.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.176">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:16.175" status="PASS" endtime="20170809 03:56:16.176"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.177">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:16.177" status="PASS" endtime="20170809 03:56:16.177"></status>
</kw>
<status starttime="20170809 03:56:16.176" status="PASS" endtime="20170809 03:56:16.177"></status>
</kw>
<status starttime="20170809 03:56:16.175" status="PASS" endtime="20170809 03:56:16.177"></status>
</kw>
<status starttime="20170809 03:56:16.174" status="PASS" endtime="20170809 03:56:16.177"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:16.178">Delete All Sessions</msg>
<status starttime="20170809 03:56:16.177" status="PASS" endtime="20170809 03:56:16.178"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.178">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:15.812" status="PASS" endtime="20170809 03:56:16.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:16.178" status="PASS" endtime="20170809 03:56:16.179"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.179">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:16.179">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:16.179">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:16.179" status="PASS" endtime="20170809 03:56:16.179"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.180">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:56:15.811" status="PASS" endtime="20170809 03:56:16.180"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.180">${power_state} = On</msg>
<status starttime="20170809 03:56:15.811" status="PASS" endtime="20170809 03:56:16.180"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:56:16.180" status="PASS" endtime="20170809 03:56:16.180"></status>
</kw>
<status starttime="20170809 03:56:15.811" status="PASS" endtime="20170809 03:56:16.181"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.184">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:16.184" status="PASS" endtime="20170809 03:56:16.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.185">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:16.185" status="PASS" endtime="20170809 03:56:16.186"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.186">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:16.186" status="PASS" endtime="20170809 03:56:16.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.187">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:16.186" status="PASS" endtime="20170809 03:56:16.187"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.427">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:16.188" status="PASS" endtime="20170809 03:56:16.427"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.427">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:16.427">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:16.187" status="PASS" endtime="20170809 03:56:16.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.428">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:16.428" status="PASS" endtime="20170809 03:56:16.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.429">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:16.428" status="PASS" endtime="20170809 03:56:16.429"></status>
</kw>
<status starttime="20170809 03:56:16.183" status="PASS" endtime="20170809 03:56:16.429"></status>
</kw>
<status starttime="20170809 03:56:16.183" status="PASS" endtime="20170809 03:56:16.429"></status>
</kw>
<status starttime="20170809 03:56:16.182" status="PASS" endtime="20170809 03:56:16.429"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.430">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:56:16.429" status="PASS" endtime="20170809 03:56:16.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.432">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:16.431" status="PASS" endtime="20170809 03:56:16.432"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.433">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:16.433" status="PASS" endtime="20170809 03:56:16.433"></status>
</kw>
<status starttime="20170809 03:56:16.432" status="PASS" endtime="20170809 03:56:16.433"></status>
</kw>
<status starttime="20170809 03:56:16.430" status="PASS" endtime="20170809 03:56:16.433"></status>
</kw>
<status starttime="20170809 03:56:16.430" status="PASS" endtime="20170809 03:56:16.433"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.528">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:16.529">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:16.434" status="PASS" endtime="20170809 03:56:16.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.531">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:16.530" status="PASS" endtime="20170809 03:56:16.531"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.531">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:16.531" status="PASS" endtime="20170809 03:56:16.532"></status>
</kw>
<status starttime="20170809 03:56:16.531" status="PASS" endtime="20170809 03:56:16.532"></status>
</kw>
<status starttime="20170809 03:56:16.530" status="PASS" endtime="20170809 03:56:16.532"></status>
</kw>
<status starttime="20170809 03:56:16.529" status="PASS" endtime="20170809 03:56:16.532"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:16.532">Delete All Sessions</msg>
<status starttime="20170809 03:56:16.532" status="PASS" endtime="20170809 03:56:16.532"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.533">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:16.182" status="PASS" endtime="20170809 03:56:16.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:16.533" status="PASS" endtime="20170809 03:56:16.533"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.534">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:16.534">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:16.534">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:16.534" status="PASS" endtime="20170809 03:56:16.534"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.534">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:56:16.181" status="PASS" endtime="20170809 03:56:16.534"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.535">${host_state} = Running</msg>
<status starttime="20170809 03:56:16.181" status="PASS" endtime="20170809 03:56:16.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:56:16.535" status="PASS" endtime="20170809 03:56:16.535"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.540">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:16.539" status="PASS" endtime="20170809 03:56:16.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.541">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:16.540" status="PASS" endtime="20170809 03:56:16.541"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.541">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:16.541" status="PASS" endtime="20170809 03:56:16.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:16.542" status="PASS" endtime="20170809 03:56:16.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.759">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:16.543" status="PASS" endtime="20170809 03:56:16.759"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.759">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:16.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:16.542" status="PASS" endtime="20170809 03:56:16.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.760">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:16.760" status="PASS" endtime="20170809 03:56:16.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:16.760" status="PASS" endtime="20170809 03:56:16.761"></status>
</kw>
<status starttime="20170809 03:56:16.539" status="PASS" endtime="20170809 03:56:16.761"></status>
</kw>
<status starttime="20170809 03:56:16.539" status="PASS" endtime="20170809 03:56:16.761"></status>
</kw>
<status starttime="20170809 03:56:16.538" status="PASS" endtime="20170809 03:56:16.761"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.762">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:56:16.761" status="PASS" endtime="20170809 03:56:16.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.764">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:16.763" status="PASS" endtime="20170809 03:56:16.764"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.765">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:16.765" status="PASS" endtime="20170809 03:56:16.765"></status>
</kw>
<status starttime="20170809 03:56:16.764" status="PASS" endtime="20170809 03:56:16.765"></status>
</kw>
<status starttime="20170809 03:56:16.762" status="PASS" endtime="20170809 03:56:16.765"></status>
</kw>
<status starttime="20170809 03:56:16.762" status="PASS" endtime="20170809 03:56:16.765"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.858">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:16.859">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:16.765" status="PASS" endtime="20170809 03:56:16.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.860">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:16.860" status="PASS" endtime="20170809 03:56:16.861"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.861">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:16.861" status="PASS" endtime="20170809 03:56:16.862"></status>
</kw>
<status starttime="20170809 03:56:16.861" status="PASS" endtime="20170809 03:56:16.862"></status>
</kw>
<status starttime="20170809 03:56:16.859" status="PASS" endtime="20170809 03:56:16.862"></status>
</kw>
<status starttime="20170809 03:56:16.859" status="PASS" endtime="20170809 03:56:16.862"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:16.862">Delete All Sessions</msg>
<status starttime="20170809 03:56:16.862" status="PASS" endtime="20170809 03:56:16.862"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.863">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:16.537" status="PASS" endtime="20170809 03:56:16.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:16.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:16.863" status="PASS" endtime="20170809 03:56:16.863"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:16.864">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:16.864">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:16.864">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:16.864" status="PASS" endtime="20170809 03:56:16.864"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.865">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:56:16.536" status="PASS" endtime="20170809 03:56:16.865"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:16.865">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:56:16.536" status="PASS" endtime="20170809 03:56:16.865"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:56:16.866">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:56:16.865" status="FAIL" endtime="20170809 03:56:16.866"></status>
</kw>
<status starttime="20170809 03:56:16.535" status="FAIL" endtime="20170809 03:56:16.866"></status>
</kw>
<status starttime="20170809 03:56:15.810" status="FAIL" endtime="20170809 03:56:16.866"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:26.871">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:26.871" status="PASS" endtime="20170809 03:56:26.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:26.872">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:26.872" status="PASS" endtime="20170809 03:56:26.872"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:26.873">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:26.872" status="PASS" endtime="20170809 03:56:26.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:26.874">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:26.873" status="PASS" endtime="20170809 03:56:26.874"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.051">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:26.874" status="PASS" endtime="20170809 03:56:27.052"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.052">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:27.052">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:26.874" status="PASS" endtime="20170809 03:56:27.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.053">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:27.052" status="PASS" endtime="20170809 03:56:27.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:27.053" status="PASS" endtime="20170809 03:56:27.053"></status>
</kw>
<status starttime="20170809 03:56:26.870" status="PASS" endtime="20170809 03:56:27.054"></status>
</kw>
<status starttime="20170809 03:56:26.870" status="PASS" endtime="20170809 03:56:27.054"></status>
</kw>
<status starttime="20170809 03:56:26.869" status="PASS" endtime="20170809 03:56:27.054"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.054">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:56:27.054" status="PASS" endtime="20170809 03:56:27.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.056">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:27.056" status="PASS" endtime="20170809 03:56:27.057"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.058">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:27.057" status="PASS" endtime="20170809 03:56:27.058"></status>
</kw>
<status starttime="20170809 03:56:27.057" status="PASS" endtime="20170809 03:56:27.058"></status>
</kw>
<status starttime="20170809 03:56:27.055" status="PASS" endtime="20170809 03:56:27.058"></status>
</kw>
<status starttime="20170809 03:56:27.055" status="PASS" endtime="20170809 03:56:27.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.122">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:27.122">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:27.058" status="PASS" endtime="20170809 03:56:27.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.124">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:27.124" status="PASS" endtime="20170809 03:56:27.124"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.125">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:27.125" status="PASS" endtime="20170809 03:56:27.125"></status>
</kw>
<status starttime="20170809 03:56:27.125" status="PASS" endtime="20170809 03:56:27.126"></status>
</kw>
<status starttime="20170809 03:56:27.123" status="PASS" endtime="20170809 03:56:27.126"></status>
</kw>
<status starttime="20170809 03:56:27.123" status="PASS" endtime="20170809 03:56:27.126"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:27.126">Delete All Sessions</msg>
<status starttime="20170809 03:56:27.126" status="PASS" endtime="20170809 03:56:27.126"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:26.868" status="PASS" endtime="20170809 03:56:27.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:27.127" status="PASS" endtime="20170809 03:56:27.127"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.128">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:27.128">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:27.128">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:27.127" status="PASS" endtime="20170809 03:56:27.128"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.128">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:56:26.868" status="PASS" endtime="20170809 03:56:27.128"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.128">${power_state} = On</msg>
<status starttime="20170809 03:56:26.867" status="PASS" endtime="20170809 03:56:27.129"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:56:27.129" status="PASS" endtime="20170809 03:56:27.129"></status>
</kw>
<status starttime="20170809 03:56:26.867" status="PASS" endtime="20170809 03:56:27.129"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.133">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:27.132" status="PASS" endtime="20170809 03:56:27.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.137">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:27.137" status="PASS" endtime="20170809 03:56:27.137"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.138">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:27.137" status="PASS" endtime="20170809 03:56:27.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.139">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:27.138" status="PASS" endtime="20170809 03:56:27.139"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.354">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:27.139" status="PASS" endtime="20170809 03:56:27.354"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.354">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:27.354">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:27.139" status="PASS" endtime="20170809 03:56:27.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.355">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:27.355" status="PASS" endtime="20170809 03:56:27.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:27.355" status="PASS" endtime="20170809 03:56:27.356"></status>
</kw>
<status starttime="20170809 03:56:27.132" status="PASS" endtime="20170809 03:56:27.356"></status>
</kw>
<status starttime="20170809 03:56:27.131" status="PASS" endtime="20170809 03:56:27.356"></status>
</kw>
<status starttime="20170809 03:56:27.131" status="PASS" endtime="20170809 03:56:27.356"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.357">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:56:27.356" status="PASS" endtime="20170809 03:56:27.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.359">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:27.358" status="PASS" endtime="20170809 03:56:27.359"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.360">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:27.360" status="PASS" endtime="20170809 03:56:27.360"></status>
</kw>
<status starttime="20170809 03:56:27.359" status="PASS" endtime="20170809 03:56:27.360"></status>
</kw>
<status starttime="20170809 03:56:27.358" status="PASS" endtime="20170809 03:56:27.360"></status>
</kw>
<status starttime="20170809 03:56:27.357" status="PASS" endtime="20170809 03:56:27.360"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.466">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:27.466">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:27.361" status="PASS" endtime="20170809 03:56:27.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.468">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:27.468" status="PASS" endtime="20170809 03:56:27.468"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.469">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:27.469" status="PASS" endtime="20170809 03:56:27.469"></status>
</kw>
<status starttime="20170809 03:56:27.468" status="PASS" endtime="20170809 03:56:27.469"></status>
</kw>
<status starttime="20170809 03:56:27.467" status="PASS" endtime="20170809 03:56:27.470"></status>
</kw>
<status starttime="20170809 03:56:27.467" status="PASS" endtime="20170809 03:56:27.470"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:27.470">Delete All Sessions</msg>
<status starttime="20170809 03:56:27.470" status="PASS" endtime="20170809 03:56:27.470"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.470">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:27.130" status="PASS" endtime="20170809 03:56:27.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:27.471" status="PASS" endtime="20170809 03:56:27.471"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.472">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:27.472">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:27.472">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:27.471" status="PASS" endtime="20170809 03:56:27.472"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.472">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:56:27.130" status="PASS" endtime="20170809 03:56:27.472"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.472">${host_state} = Running</msg>
<status starttime="20170809 03:56:27.129" status="PASS" endtime="20170809 03:56:27.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:56:27.473" status="PASS" endtime="20170809 03:56:27.473"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.477">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:27.477" status="PASS" endtime="20170809 03:56:27.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:27.478" status="PASS" endtime="20170809 03:56:27.478"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.479">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:27.478" status="PASS" endtime="20170809 03:56:27.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:27.479" status="PASS" endtime="20170809 03:56:27.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.683">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:27.480" status="PASS" endtime="20170809 03:56:27.683"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.683">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:27.683">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:27.480" status="PASS" endtime="20170809 03:56:27.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.684">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:27.684" status="PASS" endtime="20170809 03:56:27.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:27.684" status="PASS" endtime="20170809 03:56:27.685"></status>
</kw>
<status starttime="20170809 03:56:27.476" status="PASS" endtime="20170809 03:56:27.685"></status>
</kw>
<status starttime="20170809 03:56:27.476" status="PASS" endtime="20170809 03:56:27.685"></status>
</kw>
<status starttime="20170809 03:56:27.475" status="PASS" endtime="20170809 03:56:27.685"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.686">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:56:27.685" status="PASS" endtime="20170809 03:56:27.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.688">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:27.687" status="PASS" endtime="20170809 03:56:27.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.689">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:27.688" status="PASS" endtime="20170809 03:56:27.689"></status>
</kw>
<status starttime="20170809 03:56:27.688" status="PASS" endtime="20170809 03:56:27.689"></status>
</kw>
<status starttime="20170809 03:56:27.686" status="PASS" endtime="20170809 03:56:27.689"></status>
</kw>
<status starttime="20170809 03:56:27.686" status="PASS" endtime="20170809 03:56:27.689"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.755">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:27.756">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:27.690" status="PASS" endtime="20170809 03:56:27.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.757">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:27.757" status="PASS" endtime="20170809 03:56:27.757"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.758">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:27.758" status="PASS" endtime="20170809 03:56:27.758"></status>
</kw>
<status starttime="20170809 03:56:27.758" status="PASS" endtime="20170809 03:56:27.759"></status>
</kw>
<status starttime="20170809 03:56:27.756" status="PASS" endtime="20170809 03:56:27.759"></status>
</kw>
<status starttime="20170809 03:56:27.756" status="PASS" endtime="20170809 03:56:27.759"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:27.759">Delete All Sessions</msg>
<status starttime="20170809 03:56:27.759" status="PASS" endtime="20170809 03:56:27.759"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:27.475" status="PASS" endtime="20170809 03:56:27.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:27.760">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:27.760" status="PASS" endtime="20170809 03:56:27.760"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:27.761">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:27.761">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:27.761">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:27.760" status="PASS" endtime="20170809 03:56:27.761"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.761">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:56:27.474" status="PASS" endtime="20170809 03:56:27.761"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:27.761">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:56:27.474" status="PASS" endtime="20170809 03:56:27.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:56:27.762">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:56:27.762" status="FAIL" endtime="20170809 03:56:27.762"></status>
</kw>
<status starttime="20170809 03:56:27.473" status="FAIL" endtime="20170809 03:56:27.762"></status>
</kw>
<status starttime="20170809 03:56:26.866" status="FAIL" endtime="20170809 03:56:27.762"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:37.768">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:37.767" status="PASS" endtime="20170809 03:56:37.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:37.769">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:37.769" status="PASS" endtime="20170809 03:56:37.769"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:37.770">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:37.769" status="PASS" endtime="20170809 03:56:37.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:37.770">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:37.770" status="PASS" endtime="20170809 03:56:37.770"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:37.984">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:37.771" status="PASS" endtime="20170809 03:56:37.984"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:37.984">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:37.984">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:37.771" status="PASS" endtime="20170809 03:56:37.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:37.985">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:37.985" status="PASS" endtime="20170809 03:56:37.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:37.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:37.985" status="PASS" endtime="20170809 03:56:37.986"></status>
</kw>
<status starttime="20170809 03:56:37.767" status="PASS" endtime="20170809 03:56:37.986"></status>
</kw>
<status starttime="20170809 03:56:37.766" status="PASS" endtime="20170809 03:56:37.986"></status>
</kw>
<status starttime="20170809 03:56:37.766" status="PASS" endtime="20170809 03:56:37.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:37.987">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:56:37.986" status="PASS" endtime="20170809 03:56:37.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:37.989">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:37.988" status="PASS" endtime="20170809 03:56:37.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:37.990">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:37.990" status="PASS" endtime="20170809 03:56:37.990"></status>
</kw>
<status starttime="20170809 03:56:37.989" status="PASS" endtime="20170809 03:56:37.990"></status>
</kw>
<status starttime="20170809 03:56:37.988" status="PASS" endtime="20170809 03:56:37.990"></status>
</kw>
<status starttime="20170809 03:56:37.987" status="PASS" endtime="20170809 03:56:37.990"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.054">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:38.054">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:37.991" status="PASS" endtime="20170809 03:56:38.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.056">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:38.056" status="PASS" endtime="20170809 03:56:38.056"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.057">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:38.057" status="PASS" endtime="20170809 03:56:38.057"></status>
</kw>
<status starttime="20170809 03:56:38.057" status="PASS" endtime="20170809 03:56:38.058"></status>
</kw>
<status starttime="20170809 03:56:38.055" status="PASS" endtime="20170809 03:56:38.058"></status>
</kw>
<status starttime="20170809 03:56:38.055" status="PASS" endtime="20170809 03:56:38.058"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:38.058">Delete All Sessions</msg>
<status starttime="20170809 03:56:38.058" status="PASS" endtime="20170809 03:56:38.058"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.058">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:37.765" status="PASS" endtime="20170809 03:56:38.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:38.059" status="PASS" endtime="20170809 03:56:38.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.060">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:38.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:38.060">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:38.060" status="PASS" endtime="20170809 03:56:38.060"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.060">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:56:37.764" status="PASS" endtime="20170809 03:56:38.060"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.061">${power_state} = On</msg>
<status starttime="20170809 03:56:37.764" status="PASS" endtime="20170809 03:56:38.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:56:38.061" status="PASS" endtime="20170809 03:56:38.061"></status>
</kw>
<status starttime="20170809 03:56:37.764" status="PASS" endtime="20170809 03:56:38.061"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.065">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:38.065" status="PASS" endtime="20170809 03:56:38.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:38.066" status="PASS" endtime="20170809 03:56:38.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.067">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:38.067" status="PASS" endtime="20170809 03:56:38.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.068">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:38.067" status="PASS" endtime="20170809 03:56:38.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.254">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:38.068" status="PASS" endtime="20170809 03:56:38.254"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.254">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:38.254">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:38.068" status="PASS" endtime="20170809 03:56:38.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.255">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:38.254" status="PASS" endtime="20170809 03:56:38.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.255">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:38.255" status="PASS" endtime="20170809 03:56:38.255"></status>
</kw>
<status starttime="20170809 03:56:38.064" status="PASS" endtime="20170809 03:56:38.256"></status>
</kw>
<status starttime="20170809 03:56:38.064" status="PASS" endtime="20170809 03:56:38.256"></status>
</kw>
<status starttime="20170809 03:56:38.063" status="PASS" endtime="20170809 03:56:38.256"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.256">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:56:38.256" status="PASS" endtime="20170809 03:56:38.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.259">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:38.258" status="PASS" endtime="20170809 03:56:38.259"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.259">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:38.259" status="PASS" endtime="20170809 03:56:38.260"></status>
</kw>
<status starttime="20170809 03:56:38.259" status="PASS" endtime="20170809 03:56:38.260"></status>
</kw>
<status starttime="20170809 03:56:38.257" status="PASS" endtime="20170809 03:56:38.260"></status>
</kw>
<status starttime="20170809 03:56:38.257" status="PASS" endtime="20170809 03:56:38.260"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.349">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:38.349">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:38.260" status="PASS" endtime="20170809 03:56:38.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.351">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:38.350" status="PASS" endtime="20170809 03:56:38.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.352">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:38.352" status="PASS" endtime="20170809 03:56:38.352"></status>
</kw>
<status starttime="20170809 03:56:38.351" status="PASS" endtime="20170809 03:56:38.352"></status>
</kw>
<status starttime="20170809 03:56:38.350" status="PASS" endtime="20170809 03:56:38.352"></status>
</kw>
<status starttime="20170809 03:56:38.349" status="PASS" endtime="20170809 03:56:38.352"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:38.353">Delete All Sessions</msg>
<status starttime="20170809 03:56:38.353" status="PASS" endtime="20170809 03:56:38.353"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.353">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:38.062" status="PASS" endtime="20170809 03:56:38.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:38.353" status="PASS" endtime="20170809 03:56:38.354"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.354">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:38.354">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:38.354">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:38.354" status="PASS" endtime="20170809 03:56:38.354"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.355">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:56:38.062" status="PASS" endtime="20170809 03:56:38.355"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.355">${host_state} = Running</msg>
<status starttime="20170809 03:56:38.061" status="PASS" endtime="20170809 03:56:38.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:56:38.355" status="PASS" endtime="20170809 03:56:38.356"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.360">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:38.360" status="PASS" endtime="20170809 03:56:38.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.361">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:38.361" status="PASS" endtime="20170809 03:56:38.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.361">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:38.361" status="PASS" endtime="20170809 03:56:38.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.362">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:38.362" status="PASS" endtime="20170809 03:56:38.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.553">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:38.363" status="PASS" endtime="20170809 03:56:38.553"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.553">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:38.553">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:38.363" status="PASS" endtime="20170809 03:56:38.553"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.554">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:38.554" status="PASS" endtime="20170809 03:56:38.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:38.554" status="PASS" endtime="20170809 03:56:38.555"></status>
</kw>
<status starttime="20170809 03:56:38.359" status="PASS" endtime="20170809 03:56:38.555"></status>
</kw>
<status starttime="20170809 03:56:38.359" status="PASS" endtime="20170809 03:56:38.555"></status>
</kw>
<status starttime="20170809 03:56:38.358" status="PASS" endtime="20170809 03:56:38.555"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.556">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:56:38.555" status="PASS" endtime="20170809 03:56:38.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.558">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:38.557" status="PASS" endtime="20170809 03:56:38.558"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.559">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:38.559" status="PASS" endtime="20170809 03:56:38.559"></status>
</kw>
<status starttime="20170809 03:56:38.558" status="PASS" endtime="20170809 03:56:38.559"></status>
</kw>
<status starttime="20170809 03:56:38.556" status="PASS" endtime="20170809 03:56:38.559"></status>
</kw>
<status starttime="20170809 03:56:38.556" status="PASS" endtime="20170809 03:56:38.559"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.634">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:38.634">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:38.560" status="PASS" endtime="20170809 03:56:38.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.636">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:38.636" status="PASS" endtime="20170809 03:56:38.636"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.637">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:38.637" status="PASS" endtime="20170809 03:56:38.637"></status>
</kw>
<status starttime="20170809 03:56:38.637" status="PASS" endtime="20170809 03:56:38.638"></status>
</kw>
<status starttime="20170809 03:56:38.635" status="PASS" endtime="20170809 03:56:38.638"></status>
</kw>
<status starttime="20170809 03:56:38.635" status="PASS" endtime="20170809 03:56:38.638"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:38.638">Delete All Sessions</msg>
<status starttime="20170809 03:56:38.638" status="PASS" endtime="20170809 03:56:38.638"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.638">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:38.357" status="PASS" endtime="20170809 03:56:38.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:38.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:38.639" status="PASS" endtime="20170809 03:56:38.639"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:38.640">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:38.640">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:38.640">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:38.640" status="PASS" endtime="20170809 03:56:38.640"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.641">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:56:38.357" status="PASS" endtime="20170809 03:56:38.641"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:38.641">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:56:38.356" status="PASS" endtime="20170809 03:56:38.641"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:56:38.642">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:56:38.642" status="FAIL" endtime="20170809 03:56:38.642"></status>
</kw>
<status starttime="20170809 03:56:38.356" status="FAIL" endtime="20170809 03:56:38.642"></status>
</kw>
<status starttime="20170809 03:56:37.763" status="FAIL" endtime="20170809 03:56:38.643"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:48.648">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:48.647" status="PASS" endtime="20170809 03:56:48.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:48.648" status="PASS" endtime="20170809 03:56:48.649"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.649">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:48.649" status="PASS" endtime="20170809 03:56:48.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.650">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:48.650" status="PASS" endtime="20170809 03:56:48.650"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:48.828">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:48.651" status="PASS" endtime="20170809 03:56:48.828"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:48.829">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:48.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:48.650" status="PASS" endtime="20170809 03:56:48.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:48.829">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:48.829" status="PASS" endtime="20170809 03:56:48.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:48.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:48.830" status="PASS" endtime="20170809 03:56:48.830"></status>
</kw>
<status starttime="20170809 03:56:48.647" status="PASS" endtime="20170809 03:56:48.830"></status>
</kw>
<status starttime="20170809 03:56:48.646" status="PASS" endtime="20170809 03:56:48.830"></status>
</kw>
<status starttime="20170809 03:56:48.646" status="PASS" endtime="20170809 03:56:48.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.831">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:56:48.831" status="PASS" endtime="20170809 03:56:48.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.833">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:48.833" status="PASS" endtime="20170809 03:56:48.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:48.834">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:48.834" status="PASS" endtime="20170809 03:56:48.834"></status>
</kw>
<status starttime="20170809 03:56:48.834" status="PASS" endtime="20170809 03:56:48.834"></status>
</kw>
<status starttime="20170809 03:56:48.832" status="PASS" endtime="20170809 03:56:48.835"></status>
</kw>
<status starttime="20170809 03:56:48.831" status="PASS" endtime="20170809 03:56:48.835"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.897">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:48.898">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:48.835" status="PASS" endtime="20170809 03:56:48.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.900">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:48.899" status="PASS" endtime="20170809 03:56:48.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:48.901">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:48.901" status="PASS" endtime="20170809 03:56:48.901"></status>
</kw>
<status starttime="20170809 03:56:48.900" status="PASS" endtime="20170809 03:56:48.901"></status>
</kw>
<status starttime="20170809 03:56:48.899" status="PASS" endtime="20170809 03:56:48.901"></status>
</kw>
<status starttime="20170809 03:56:48.898" status="PASS" endtime="20170809 03:56:48.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:48.902">Delete All Sessions</msg>
<status starttime="20170809 03:56:48.902" status="PASS" endtime="20170809 03:56:48.902"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:48.902">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:48.645" status="PASS" endtime="20170809 03:56:48.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:48.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:48.902" status="PASS" endtime="20170809 03:56:48.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.903">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:48.903">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:48.903">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:48.903" status="PASS" endtime="20170809 03:56:48.903"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:48.904">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:56:48.645" status="PASS" endtime="20170809 03:56:48.904"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:48.904">${power_state} = On</msg>
<status starttime="20170809 03:56:48.644" status="PASS" endtime="20170809 03:56:48.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:56:48.904" status="PASS" endtime="20170809 03:56:48.905"></status>
</kw>
<status starttime="20170809 03:56:48.644" status="PASS" endtime="20170809 03:56:48.905"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:48.909">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:48.908" status="PASS" endtime="20170809 03:56:48.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:48.909" status="PASS" endtime="20170809 03:56:48.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.910">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:48.910" status="PASS" endtime="20170809 03:56:48.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:48.911">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:48.911" status="PASS" endtime="20170809 03:56:48.911"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.115">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:48.912" status="PASS" endtime="20170809 03:56:49.115"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:49.115">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:49.115">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:48.911" status="PASS" endtime="20170809 03:56:49.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.116">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:49.116" status="PASS" endtime="20170809 03:56:49.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.117">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:49.116" status="PASS" endtime="20170809 03:56:49.117"></status>
</kw>
<status starttime="20170809 03:56:48.907" status="PASS" endtime="20170809 03:56:49.117"></status>
</kw>
<status starttime="20170809 03:56:48.907" status="PASS" endtime="20170809 03:56:49.117"></status>
</kw>
<status starttime="20170809 03:56:48.907" status="PASS" endtime="20170809 03:56:49.117"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.118">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:56:49.117" status="PASS" endtime="20170809 03:56:49.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.120">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:49.119" status="PASS" endtime="20170809 03:56:49.120"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.121">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:49.120" status="PASS" endtime="20170809 03:56:49.121"></status>
</kw>
<status starttime="20170809 03:56:49.120" status="PASS" endtime="20170809 03:56:49.121"></status>
</kw>
<status starttime="20170809 03:56:49.118" status="PASS" endtime="20170809 03:56:49.121"></status>
</kw>
<status starttime="20170809 03:56:49.118" status="PASS" endtime="20170809 03:56:49.121"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.225">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:49.225">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:49.121" status="PASS" endtime="20170809 03:56:49.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.227">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:49.227" status="PASS" endtime="20170809 03:56:49.227"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.228">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:49.228" status="PASS" endtime="20170809 03:56:49.229"></status>
</kw>
<status starttime="20170809 03:56:49.228" status="PASS" endtime="20170809 03:56:49.229"></status>
</kw>
<status starttime="20170809 03:56:49.226" status="PASS" endtime="20170809 03:56:49.229"></status>
</kw>
<status starttime="20170809 03:56:49.226" status="PASS" endtime="20170809 03:56:49.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:49.229">Delete All Sessions</msg>
<status starttime="20170809 03:56:49.229" status="PASS" endtime="20170809 03:56:49.229"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:49.229">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:48.906" status="PASS" endtime="20170809 03:56:49.230"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:49.230" status="PASS" endtime="20170809 03:56:49.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.231">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:49.231">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:49.231">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:49.230" status="PASS" endtime="20170809 03:56:49.231"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:49.231">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:56:48.905" status="PASS" endtime="20170809 03:56:49.231"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:49.231">${host_state} = Running</msg>
<status starttime="20170809 03:56:48.905" status="PASS" endtime="20170809 03:56:49.232"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:56:49.232" status="PASS" endtime="20170809 03:56:49.232"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.236">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:49.236" status="PASS" endtime="20170809 03:56:49.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:49.237" status="PASS" endtime="20170809 03:56:49.237"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.238">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:49.237" status="PASS" endtime="20170809 03:56:49.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.239">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:49.239" status="PASS" endtime="20170809 03:56:49.239"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.424">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:49.240" status="PASS" endtime="20170809 03:56:49.424"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:49.425">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:49.425">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:49.239" status="PASS" endtime="20170809 03:56:49.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.425">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:49.425" status="PASS" endtime="20170809 03:56:49.425"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:49.426" status="PASS" endtime="20170809 03:56:49.426"></status>
</kw>
<status starttime="20170809 03:56:49.235" status="PASS" endtime="20170809 03:56:49.426"></status>
</kw>
<status starttime="20170809 03:56:49.235" status="PASS" endtime="20170809 03:56:49.426"></status>
</kw>
<status starttime="20170809 03:56:49.234" status="PASS" endtime="20170809 03:56:49.426"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.427">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:56:49.427" status="PASS" endtime="20170809 03:56:49.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.429">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:49.428" status="PASS" endtime="20170809 03:56:49.429"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.430">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:56:49.430" status="PASS" endtime="20170809 03:56:49.430"></status>
</kw>
<status starttime="20170809 03:56:49.429" status="PASS" endtime="20170809 03:56:49.431"></status>
</kw>
<status starttime="20170809 03:56:49.428" status="PASS" endtime="20170809 03:56:49.431"></status>
</kw>
<status starttime="20170809 03:56:49.427" status="PASS" endtime="20170809 03:56:49.431"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.505">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:49.505">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:49.431" status="PASS" endtime="20170809 03:56:49.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.507">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:49.506" status="PASS" endtime="20170809 03:56:49.507"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.508">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:49.508" status="PASS" endtime="20170809 03:56:49.508"></status>
</kw>
<status starttime="20170809 03:56:49.507" status="PASS" endtime="20170809 03:56:49.508"></status>
</kw>
<status starttime="20170809 03:56:49.506" status="PASS" endtime="20170809 03:56:49.508"></status>
</kw>
<status starttime="20170809 03:56:49.505" status="PASS" endtime="20170809 03:56:49.508"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:49.509">Delete All Sessions</msg>
<status starttime="20170809 03:56:49.508" status="PASS" endtime="20170809 03:56:49.509"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:49.509">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:49.234" status="PASS" endtime="20170809 03:56:49.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:49.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:49.509" status="PASS" endtime="20170809 03:56:49.510"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:49.510">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:49.510">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:49.510">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:49.510" status="PASS" endtime="20170809 03:56:49.510"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:49.511">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:56:49.233" status="PASS" endtime="20170809 03:56:49.511"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:49.511">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:56:49.233" status="PASS" endtime="20170809 03:56:49.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:56:49.512">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:56:49.511" status="FAIL" endtime="20170809 03:56:49.512"></status>
</kw>
<status starttime="20170809 03:56:49.232" status="FAIL" endtime="20170809 03:56:49.512"></status>
</kw>
<status starttime="20170809 03:56:48.643" status="FAIL" endtime="20170809 03:56:49.512"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:59.517">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:59.517" status="PASS" endtime="20170809 03:56:59.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.518">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:59.518" status="PASS" endtime="20170809 03:56:59.518"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.519">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:59.519" status="PASS" endtime="20170809 03:56:59.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.520">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:59.519" status="PASS" endtime="20170809 03:56:59.520"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:59.724">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:59.520" status="PASS" endtime="20170809 03:56:59.725"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:59.725">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:56:59.725">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:59.520" status="PASS" endtime="20170809 03:56:59.725"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:59.726">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:59.725" status="PASS" endtime="20170809 03:56:59.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:59.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:59.726" status="PASS" endtime="20170809 03:56:59.726"></status>
</kw>
<status starttime="20170809 03:56:59.517" status="PASS" endtime="20170809 03:56:59.726"></status>
</kw>
<status starttime="20170809 03:56:59.516" status="PASS" endtime="20170809 03:56:59.727"></status>
</kw>
<status starttime="20170809 03:56:59.515" status="PASS" endtime="20170809 03:56:59.727"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.727">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:56:59.727" status="PASS" endtime="20170809 03:56:59.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.729">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:59.729" status="PASS" endtime="20170809 03:56:59.729"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:59.730">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:56:59.730" status="PASS" endtime="20170809 03:56:59.730"></status>
</kw>
<status starttime="20170809 03:56:59.730" status="PASS" endtime="20170809 03:56:59.731"></status>
</kw>
<status starttime="20170809 03:56:59.728" status="PASS" endtime="20170809 03:56:59.731"></status>
</kw>
<status starttime="20170809 03:56:59.728" status="PASS" endtime="20170809 03:56:59.731"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.821">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:56:59.821">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:59.731" status="PASS" endtime="20170809 03:56:59.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.823">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:59.823" status="PASS" endtime="20170809 03:56:59.823"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:59.824">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:56:59.824" status="PASS" endtime="20170809 03:56:59.825"></status>
</kw>
<status starttime="20170809 03:56:59.824" status="PASS" endtime="20170809 03:56:59.825"></status>
</kw>
<status starttime="20170809 03:56:59.822" status="PASS" endtime="20170809 03:56:59.825"></status>
</kw>
<status starttime="20170809 03:56:59.822" status="PASS" endtime="20170809 03:56:59.825"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:56:59.825">Delete All Sessions</msg>
<status starttime="20170809 03:56:59.825" status="PASS" endtime="20170809 03:56:59.825"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:59.825">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:59.515" status="PASS" endtime="20170809 03:56:59.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:59.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:56:59.826" status="PASS" endtime="20170809 03:56:59.826"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.827">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:56:59.827">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:56:59.827">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:56:59.826" status="PASS" endtime="20170809 03:56:59.827"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:59.827">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:56:59.514" status="PASS" endtime="20170809 03:56:59.827"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:56:59.828">${power_state} = On</msg>
<status starttime="20170809 03:56:59.513" status="PASS" endtime="20170809 03:56:59.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:56:59.828" status="PASS" endtime="20170809 03:56:59.828"></status>
</kw>
<status starttime="20170809 03:56:59.513" status="PASS" endtime="20170809 03:56:59.828"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:56:59.835">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:56:59.835" status="PASS" endtime="20170809 03:56:59.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.836">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:56:59.836" status="PASS" endtime="20170809 03:56:59.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.837">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:56:59.837" status="PASS" endtime="20170809 03:56:59.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:56:59.838">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:56:59.837" status="PASS" endtime="20170809 03:56:59.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.122">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:56:59.839" status="PASS" endtime="20170809 03:57:00.122"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:00.123">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:00.123">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:59.838" status="PASS" endtime="20170809 03:57:00.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.123">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:00.123" status="PASS" endtime="20170809 03:57:00.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.124">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:00.124" status="PASS" endtime="20170809 03:57:00.124"></status>
</kw>
<status starttime="20170809 03:56:59.831" status="PASS" endtime="20170809 03:57:00.124"></status>
</kw>
<status starttime="20170809 03:56:59.830" status="PASS" endtime="20170809 03:57:00.125"></status>
</kw>
<status starttime="20170809 03:56:59.830" status="PASS" endtime="20170809 03:57:00.125"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.125">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:57:00.125" status="PASS" endtime="20170809 03:57:00.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.127">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:00.127" status="PASS" endtime="20170809 03:57:00.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.128">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:00.128" status="PASS" endtime="20170809 03:57:00.128"></status>
</kw>
<status starttime="20170809 03:57:00.128" status="PASS" endtime="20170809 03:57:00.128"></status>
</kw>
<status starttime="20170809 03:57:00.126" status="PASS" endtime="20170809 03:57:00.129"></status>
</kw>
<status starttime="20170809 03:57:00.126" status="PASS" endtime="20170809 03:57:00.129"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.218">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:00.218">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:00.129" status="PASS" endtime="20170809 03:57:00.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.220">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:00.219" status="PASS" endtime="20170809 03:57:00.220"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.221">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:00.221" status="PASS" endtime="20170809 03:57:00.222"></status>
</kw>
<status starttime="20170809 03:57:00.220" status="PASS" endtime="20170809 03:57:00.222"></status>
</kw>
<status starttime="20170809 03:57:00.219" status="PASS" endtime="20170809 03:57:00.222"></status>
</kw>
<status starttime="20170809 03:57:00.218" status="PASS" endtime="20170809 03:57:00.222"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:00.222">Delete All Sessions</msg>
<status starttime="20170809 03:57:00.222" status="PASS" endtime="20170809 03:57:00.222"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:00.223">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:56:59.829" status="PASS" endtime="20170809 03:57:00.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:00.223" status="PASS" endtime="20170809 03:57:00.223"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.224">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:00.224">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:00.224">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:00.224" status="PASS" endtime="20170809 03:57:00.224"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:00.225">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:56:59.829" status="PASS" endtime="20170809 03:57:00.225"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:00.225">${host_state} = Running</msg>
<status starttime="20170809 03:56:59.828" status="PASS" endtime="20170809 03:57:00.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:57:00.225" status="PASS" endtime="20170809 03:57:00.226"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.229">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:00.229" status="PASS" endtime="20170809 03:57:00.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.230">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:00.230" status="PASS" endtime="20170809 03:57:00.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.231">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:00.231" status="PASS" endtime="20170809 03:57:00.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.232">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:00.231" status="PASS" endtime="20170809 03:57:00.232"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.419">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:00.232" status="PASS" endtime="20170809 03:57:00.419"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:00.419">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:00.419">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:00.232" status="PASS" endtime="20170809 03:57:00.419"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.420">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:00.420" status="PASS" endtime="20170809 03:57:00.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:00.420" status="PASS" endtime="20170809 03:57:00.421"></status>
</kw>
<status starttime="20170809 03:57:00.229" status="PASS" endtime="20170809 03:57:00.422"></status>
</kw>
<status starttime="20170809 03:57:00.228" status="PASS" endtime="20170809 03:57:00.422"></status>
</kw>
<status starttime="20170809 03:57:00.228" status="PASS" endtime="20170809 03:57:00.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.423">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:57:00.422" status="PASS" endtime="20170809 03:57:00.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.425">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:00.424" status="PASS" endtime="20170809 03:57:00.425"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.426">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:00.426" status="PASS" endtime="20170809 03:57:00.426"></status>
</kw>
<status starttime="20170809 03:57:00.425" status="PASS" endtime="20170809 03:57:00.426"></status>
</kw>
<status starttime="20170809 03:57:00.423" status="PASS" endtime="20170809 03:57:00.426"></status>
</kw>
<status starttime="20170809 03:57:00.423" status="PASS" endtime="20170809 03:57:00.426"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.499">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:00.500">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:00.427" status="PASS" endtime="20170809 03:57:00.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.501">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:00.501" status="PASS" endtime="20170809 03:57:00.501"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.502">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:00.502" status="PASS" endtime="20170809 03:57:00.502"></status>
</kw>
<status starttime="20170809 03:57:00.502" status="PASS" endtime="20170809 03:57:00.502"></status>
</kw>
<status starttime="20170809 03:57:00.500" status="PASS" endtime="20170809 03:57:00.503"></status>
</kw>
<status starttime="20170809 03:57:00.500" status="PASS" endtime="20170809 03:57:00.503"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:00.503">Delete All Sessions</msg>
<status starttime="20170809 03:57:00.503" status="PASS" endtime="20170809 03:57:00.503"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:00.503">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:00.227" status="PASS" endtime="20170809 03:57:00.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:00.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:00.504" status="PASS" endtime="20170809 03:57:00.504"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:00.505">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:00.505">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:00.505">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:00.504" status="PASS" endtime="20170809 03:57:00.505"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:00.505">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:00.226" status="PASS" endtime="20170809 03:57:00.505"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:00.505">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:00.226" status="PASS" endtime="20170809 03:57:00.505"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:57:00.506">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:57:00.506" status="FAIL" endtime="20170809 03:57:00.506"></status>
</kw>
<status starttime="20170809 03:57:00.226" status="FAIL" endtime="20170809 03:57:00.506"></status>
</kw>
<status starttime="20170809 03:56:59.512" status="FAIL" endtime="20170809 03:57:00.507"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:10.512">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:10.512" status="PASS" endtime="20170809 03:57:10.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.513">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:10.513" status="PASS" endtime="20170809 03:57:10.513"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.514">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:10.513" status="PASS" endtime="20170809 03:57:10.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.515">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:10.514" status="PASS" endtime="20170809 03:57:10.515"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:10.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:10.515" status="PASS" endtime="20170809 03:57:10.794"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:10.794">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:10.794">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:10.515" status="PASS" endtime="20170809 03:57:10.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:10.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:10.794" status="PASS" endtime="20170809 03:57:10.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:10.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:10.795" status="PASS" endtime="20170809 03:57:10.796"></status>
</kw>
<status starttime="20170809 03:57:10.511" status="PASS" endtime="20170809 03:57:10.796"></status>
</kw>
<status starttime="20170809 03:57:10.510" status="PASS" endtime="20170809 03:57:10.796"></status>
</kw>
<status starttime="20170809 03:57:10.510" status="PASS" endtime="20170809 03:57:10.796"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.797">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:57:10.796" status="PASS" endtime="20170809 03:57:10.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.799">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:10.798" status="PASS" endtime="20170809 03:57:10.799"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:10.800">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:10.799" status="PASS" endtime="20170809 03:57:10.800"></status>
</kw>
<status starttime="20170809 03:57:10.799" status="PASS" endtime="20170809 03:57:10.800"></status>
</kw>
<status starttime="20170809 03:57:10.797" status="PASS" endtime="20170809 03:57:10.800"></status>
</kw>
<status starttime="20170809 03:57:10.797" status="PASS" endtime="20170809 03:57:10.800"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.862">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:10.863">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:10.800" status="PASS" endtime="20170809 03:57:10.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.865">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:10.864" status="PASS" endtime="20170809 03:57:10.865"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:10.866">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:10.865" status="PASS" endtime="20170809 03:57:10.866"></status>
</kw>
<status starttime="20170809 03:57:10.865" status="PASS" endtime="20170809 03:57:10.866"></status>
</kw>
<status starttime="20170809 03:57:10.863" status="PASS" endtime="20170809 03:57:10.866"></status>
</kw>
<status starttime="20170809 03:57:10.863" status="PASS" endtime="20170809 03:57:10.866"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:10.867">Delete All Sessions</msg>
<status starttime="20170809 03:57:10.867" status="PASS" endtime="20170809 03:57:10.867"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:10.867">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:10.509" status="PASS" endtime="20170809 03:57:10.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:10.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:10.867" status="PASS" endtime="20170809 03:57:10.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.869">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:10.869">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:10.869">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:10.868" status="PASS" endtime="20170809 03:57:10.869"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:10.870">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:57:10.508" status="PASS" endtime="20170809 03:57:10.870"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:10.870">${power_state} = On</msg>
<status starttime="20170809 03:57:10.508" status="PASS" endtime="20170809 03:57:10.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:57:10.870" status="PASS" endtime="20170809 03:57:10.870"></status>
</kw>
<status starttime="20170809 03:57:10.508" status="PASS" endtime="20170809 03:57:10.871"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:10.874">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:10.874" status="PASS" endtime="20170809 03:57:10.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:10.875" status="PASS" endtime="20170809 03:57:10.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.876">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:10.875" status="PASS" endtime="20170809 03:57:10.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:10.876">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:10.876" status="PASS" endtime="20170809 03:57:10.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.079">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:10.877" status="PASS" endtime="20170809 03:57:11.079"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:11.079">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:11.079">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:10.877" status="PASS" endtime="20170809 03:57:11.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.080">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:11.080" status="PASS" endtime="20170809 03:57:11.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:11.080" status="PASS" endtime="20170809 03:57:11.081"></status>
</kw>
<status starttime="20170809 03:57:10.873" status="PASS" endtime="20170809 03:57:11.081"></status>
</kw>
<status starttime="20170809 03:57:10.873" status="PASS" endtime="20170809 03:57:11.081"></status>
</kw>
<status starttime="20170809 03:57:10.872" status="PASS" endtime="20170809 03:57:11.081"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.082">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:57:11.081" status="PASS" endtime="20170809 03:57:11.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.084">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:11.083" status="PASS" endtime="20170809 03:57:11.084"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.085">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:11.085" status="PASS" endtime="20170809 03:57:11.085"></status>
</kw>
<status starttime="20170809 03:57:11.085" status="PASS" endtime="20170809 03:57:11.086"></status>
</kw>
<status starttime="20170809 03:57:11.083" status="PASS" endtime="20170809 03:57:11.086"></status>
</kw>
<status starttime="20170809 03:57:11.082" status="PASS" endtime="20170809 03:57:11.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.188">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:11.188">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:11.086" status="PASS" endtime="20170809 03:57:11.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.190">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:11.189" status="PASS" endtime="20170809 03:57:11.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.191">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:11.191" status="PASS" endtime="20170809 03:57:11.191"></status>
</kw>
<status starttime="20170809 03:57:11.190" status="PASS" endtime="20170809 03:57:11.191"></status>
</kw>
<status starttime="20170809 03:57:11.189" status="PASS" endtime="20170809 03:57:11.191"></status>
</kw>
<status starttime="20170809 03:57:11.188" status="PASS" endtime="20170809 03:57:11.191"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:11.192">Delete All Sessions</msg>
<status starttime="20170809 03:57:11.192" status="PASS" endtime="20170809 03:57:11.192"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:11.192">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:10.872" status="PASS" endtime="20170809 03:57:11.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:11.192" status="PASS" endtime="20170809 03:57:11.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.193">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:11.193">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:11.193">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:11.193" status="PASS" endtime="20170809 03:57:11.193"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:11.194">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:57:10.871" status="PASS" endtime="20170809 03:57:11.194"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:11.194">${host_state} = Running</msg>
<status starttime="20170809 03:57:10.871" status="PASS" endtime="20170809 03:57:11.194"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:57:11.194" status="PASS" endtime="20170809 03:57:11.195"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.199">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:11.198" status="PASS" endtime="20170809 03:57:11.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:11.199" status="PASS" endtime="20170809 03:57:11.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.200">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:11.200" status="PASS" endtime="20170809 03:57:11.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:11.200" status="PASS" endtime="20170809 03:57:11.201"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:11.201" status="PASS" endtime="20170809 03:57:11.377"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:11.377">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:11.377">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:11.201" status="PASS" endtime="20170809 03:57:11.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.378">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:11.378" status="PASS" endtime="20170809 03:57:11.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:11.378" status="PASS" endtime="20170809 03:57:11.379"></status>
</kw>
<status starttime="20170809 03:57:11.198" status="PASS" endtime="20170809 03:57:11.379"></status>
</kw>
<status starttime="20170809 03:57:11.197" status="PASS" endtime="20170809 03:57:11.379"></status>
</kw>
<status starttime="20170809 03:57:11.197" status="PASS" endtime="20170809 03:57:11.379"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.380">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:57:11.379" status="PASS" endtime="20170809 03:57:11.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.382">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:11.381" status="PASS" endtime="20170809 03:57:11.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.383">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:11.382" status="PASS" endtime="20170809 03:57:11.383"></status>
</kw>
<status starttime="20170809 03:57:11.382" status="PASS" endtime="20170809 03:57:11.383"></status>
</kw>
<status starttime="20170809 03:57:11.380" status="PASS" endtime="20170809 03:57:11.383"></status>
</kw>
<status starttime="20170809 03:57:11.380" status="PASS" endtime="20170809 03:57:11.383"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.450">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:11.450">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:11.383" status="PASS" endtime="20170809 03:57:11.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.452">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:11.452" status="PASS" endtime="20170809 03:57:11.452"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.453">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:11.453" status="PASS" endtime="20170809 03:57:11.453"></status>
</kw>
<status starttime="20170809 03:57:11.453" status="PASS" endtime="20170809 03:57:11.453"></status>
</kw>
<status starttime="20170809 03:57:11.451" status="PASS" endtime="20170809 03:57:11.454"></status>
</kw>
<status starttime="20170809 03:57:11.451" status="PASS" endtime="20170809 03:57:11.454"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:11.454">Delete All Sessions</msg>
<status starttime="20170809 03:57:11.454" status="PASS" endtime="20170809 03:57:11.454"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:11.454">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:11.196" status="PASS" endtime="20170809 03:57:11.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:11.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:11.455" status="PASS" endtime="20170809 03:57:11.455"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:11.456">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:11.456">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:11.456">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:11.455" status="PASS" endtime="20170809 03:57:11.456"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:11.456">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:11.195" status="PASS" endtime="20170809 03:57:11.456"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:11.456">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:11.195" status="PASS" endtime="20170809 03:57:11.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:57:11.457">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:57:11.457" status="FAIL" endtime="20170809 03:57:11.457"></status>
</kw>
<status starttime="20170809 03:57:11.195" status="FAIL" endtime="20170809 03:57:11.457"></status>
</kw>
<status starttime="20170809 03:57:10.507" status="FAIL" endtime="20170809 03:57:11.457"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:21.463">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:21.463" status="PASS" endtime="20170809 03:57:21.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.464">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:21.464" status="PASS" endtime="20170809 03:57:21.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.465">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:21.464" status="PASS" endtime="20170809 03:57:21.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.465">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:21.465" status="PASS" endtime="20170809 03:57:21.465"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:21.768">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:21.466" status="PASS" endtime="20170809 03:57:21.768"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:21.768">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:21.768">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:21.466" status="PASS" endtime="20170809 03:57:21.768"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:21.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:21.769" status="PASS" endtime="20170809 03:57:21.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:21.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:21.769" status="PASS" endtime="20170809 03:57:21.770"></status>
</kw>
<status starttime="20170809 03:57:21.462" status="PASS" endtime="20170809 03:57:21.770"></status>
</kw>
<status starttime="20170809 03:57:21.461" status="PASS" endtime="20170809 03:57:21.770"></status>
</kw>
<status starttime="20170809 03:57:21.460" status="PASS" endtime="20170809 03:57:21.770"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.771">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:57:21.770" status="PASS" endtime="20170809 03:57:21.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.773">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:21.772" status="PASS" endtime="20170809 03:57:21.773"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:21.774">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:21.774" status="PASS" endtime="20170809 03:57:21.774"></status>
</kw>
<status starttime="20170809 03:57:21.773" status="PASS" endtime="20170809 03:57:21.774"></status>
</kw>
<status starttime="20170809 03:57:21.771" status="PASS" endtime="20170809 03:57:21.774"></status>
</kw>
<status starttime="20170809 03:57:21.771" status="PASS" endtime="20170809 03:57:21.774"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.924">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:21.924">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:21.774" status="PASS" endtime="20170809 03:57:21.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.926">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:21.925" status="PASS" endtime="20170809 03:57:21.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:21.927">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:21.927" status="PASS" endtime="20170809 03:57:21.927"></status>
</kw>
<status starttime="20170809 03:57:21.927" status="PASS" endtime="20170809 03:57:21.928"></status>
</kw>
<status starttime="20170809 03:57:21.925" status="PASS" endtime="20170809 03:57:21.928"></status>
</kw>
<status starttime="20170809 03:57:21.924" status="PASS" endtime="20170809 03:57:21.928"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:21.928">Delete All Sessions</msg>
<status starttime="20170809 03:57:21.928" status="PASS" endtime="20170809 03:57:21.928"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:21.928">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:21.460" status="PASS" endtime="20170809 03:57:21.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:21.929">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:21.929" status="PASS" endtime="20170809 03:57:21.929"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.930">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:21.930">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:21.930">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:21.929" status="PASS" endtime="20170809 03:57:21.930"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:21.930">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:57:21.459" status="PASS" endtime="20170809 03:57:21.930"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:21.930">${power_state} = On</msg>
<status starttime="20170809 03:57:21.459" status="PASS" endtime="20170809 03:57:21.930"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:57:21.931" status="PASS" endtime="20170809 03:57:21.931"></status>
</kw>
<status starttime="20170809 03:57:21.458" status="PASS" endtime="20170809 03:57:21.931"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:21.935">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:21.934" status="PASS" endtime="20170809 03:57:21.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:21.936" status="PASS" endtime="20170809 03:57:21.936"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.937">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:21.937" status="PASS" endtime="20170809 03:57:21.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:21.938">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:21.938" status="PASS" endtime="20170809 03:57:21.938"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:21.939" status="PASS" endtime="20170809 03:57:22.140"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:22.140">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:22.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:21.939" status="PASS" endtime="20170809 03:57:22.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.141">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:22.140" status="PASS" endtime="20170809 03:57:22.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:22.141" status="PASS" endtime="20170809 03:57:22.142"></status>
</kw>
<status starttime="20170809 03:57:21.934" status="PASS" endtime="20170809 03:57:22.142"></status>
</kw>
<status starttime="20170809 03:57:21.933" status="PASS" endtime="20170809 03:57:22.142"></status>
</kw>
<status starttime="20170809 03:57:21.933" status="PASS" endtime="20170809 03:57:22.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.143">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:57:22.143" status="PASS" endtime="20170809 03:57:22.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.147">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:22.145" status="PASS" endtime="20170809 03:57:22.147"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.148">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:22.148" status="PASS" endtime="20170809 03:57:22.148"></status>
</kw>
<status starttime="20170809 03:57:22.147" status="PASS" endtime="20170809 03:57:22.148"></status>
</kw>
<status starttime="20170809 03:57:22.144" status="PASS" endtime="20170809 03:57:22.149"></status>
</kw>
<status starttime="20170809 03:57:22.144" status="PASS" endtime="20170809 03:57:22.149"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.237">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:22.237">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:22.149" status="PASS" endtime="20170809 03:57:22.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.239">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:22.238" status="PASS" endtime="20170809 03:57:22.239"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.240">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:22.239" status="PASS" endtime="20170809 03:57:22.240"></status>
</kw>
<status starttime="20170809 03:57:22.239" status="PASS" endtime="20170809 03:57:22.240"></status>
</kw>
<status starttime="20170809 03:57:22.238" status="PASS" endtime="20170809 03:57:22.240"></status>
</kw>
<status starttime="20170809 03:57:22.237" status="PASS" endtime="20170809 03:57:22.240"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:22.241">Delete All Sessions</msg>
<status starttime="20170809 03:57:22.240" status="PASS" endtime="20170809 03:57:22.241"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:22.241">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:21.932" status="PASS" endtime="20170809 03:57:22.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.241">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:22.241" status="PASS" endtime="20170809 03:57:22.242"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.242">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:22.242">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:22.242">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:22.242" status="PASS" endtime="20170809 03:57:22.242"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:22.243">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:57:21.932" status="PASS" endtime="20170809 03:57:22.243"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:22.243">${host_state} = Running</msg>
<status starttime="20170809 03:57:21.931" status="PASS" endtime="20170809 03:57:22.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:57:22.243" status="PASS" endtime="20170809 03:57:22.243"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.247">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:22.247" status="PASS" endtime="20170809 03:57:22.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:22.248" status="PASS" endtime="20170809 03:57:22.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.249">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:22.249" status="PASS" endtime="20170809 03:57:22.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:22.250" status="PASS" endtime="20170809 03:57:22.250"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.450">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:22.251" status="PASS" endtime="20170809 03:57:22.450"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:22.450">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:22.450">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:22.251" status="PASS" endtime="20170809 03:57:22.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.451">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:22.451" status="PASS" endtime="20170809 03:57:22.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:22.451" status="PASS" endtime="20170809 03:57:22.452"></status>
</kw>
<status starttime="20170809 03:57:22.247" status="PASS" endtime="20170809 03:57:22.452"></status>
</kw>
<status starttime="20170809 03:57:22.246" status="PASS" endtime="20170809 03:57:22.452"></status>
</kw>
<status starttime="20170809 03:57:22.246" status="PASS" endtime="20170809 03:57:22.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.453">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:57:22.452" status="PASS" endtime="20170809 03:57:22.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.456">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:22.455" status="PASS" endtime="20170809 03:57:22.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.457">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:22.457" status="PASS" endtime="20170809 03:57:22.457"></status>
</kw>
<status starttime="20170809 03:57:22.456" status="PASS" endtime="20170809 03:57:22.457"></status>
</kw>
<status starttime="20170809 03:57:22.454" status="PASS" endtime="20170809 03:57:22.457"></status>
</kw>
<status starttime="20170809 03:57:22.453" status="PASS" endtime="20170809 03:57:22.458"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.534">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:22.534">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:22.458" status="PASS" endtime="20170809 03:57:22.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.536">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:22.535" status="PASS" endtime="20170809 03:57:22.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.537">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:22.537" status="PASS" endtime="20170809 03:57:22.537"></status>
</kw>
<status starttime="20170809 03:57:22.536" status="PASS" endtime="20170809 03:57:22.537"></status>
</kw>
<status starttime="20170809 03:57:22.535" status="PASS" endtime="20170809 03:57:22.537"></status>
</kw>
<status starttime="20170809 03:57:22.534" status="PASS" endtime="20170809 03:57:22.537"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:22.538">Delete All Sessions</msg>
<status starttime="20170809 03:57:22.538" status="PASS" endtime="20170809 03:57:22.538"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:22.538">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:22.245" status="PASS" endtime="20170809 03:57:22.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:22.539">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:22.538" status="PASS" endtime="20170809 03:57:22.539"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:22.539">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:22.539">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:22.540">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:22.539" status="PASS" endtime="20170809 03:57:22.540"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:22.540">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:22.244" status="PASS" endtime="20170809 03:57:22.540"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:22.540">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:22.244" status="PASS" endtime="20170809 03:57:22.540"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:57:22.541">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:57:22.540" status="FAIL" endtime="20170809 03:57:22.541"></status>
</kw>
<status starttime="20170809 03:57:22.244" status="FAIL" endtime="20170809 03:57:22.541"></status>
</kw>
<status starttime="20170809 03:57:21.458" status="FAIL" endtime="20170809 03:57:22.541"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:32.547">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:32.547" status="PASS" endtime="20170809 03:57:32.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.548">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:32.548" status="PASS" endtime="20170809 03:57:32.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.549">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:32.549" status="PASS" endtime="20170809 03:57:32.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.550">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:32.549" status="PASS" endtime="20170809 03:57:32.550"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:32.731">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:32.550" status="PASS" endtime="20170809 03:57:32.731"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:32.731">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:32.731">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:32.550" status="PASS" endtime="20170809 03:57:32.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:32.732">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:32.731" status="PASS" endtime="20170809 03:57:32.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:32.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:32.732" status="PASS" endtime="20170809 03:57:32.733"></status>
</kw>
<status starttime="20170809 03:57:32.546" status="PASS" endtime="20170809 03:57:32.733"></status>
</kw>
<status starttime="20170809 03:57:32.545" status="PASS" endtime="20170809 03:57:32.733"></status>
</kw>
<status starttime="20170809 03:57:32.545" status="PASS" endtime="20170809 03:57:32.733"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.733">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:57:32.733" status="PASS" endtime="20170809 03:57:32.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.736">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:32.735" status="PASS" endtime="20170809 03:57:32.736"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:32.736">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:32.736" status="PASS" endtime="20170809 03:57:32.737"></status>
</kw>
<status starttime="20170809 03:57:32.736" status="PASS" endtime="20170809 03:57:32.737"></status>
</kw>
<status starttime="20170809 03:57:32.734" status="PASS" endtime="20170809 03:57:32.737"></status>
</kw>
<status starttime="20170809 03:57:32.734" status="PASS" endtime="20170809 03:57:32.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.800">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:32.800">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:32.737" status="PASS" endtime="20170809 03:57:32.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.805">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:32.802" status="PASS" endtime="20170809 03:57:32.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:32.806">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:32.806" status="PASS" endtime="20170809 03:57:32.807"></status>
</kw>
<status starttime="20170809 03:57:32.806" status="PASS" endtime="20170809 03:57:32.807"></status>
</kw>
<status starttime="20170809 03:57:32.801" status="PASS" endtime="20170809 03:57:32.807"></status>
</kw>
<status starttime="20170809 03:57:32.801" status="PASS" endtime="20170809 03:57:32.807"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:32.807">Delete All Sessions</msg>
<status starttime="20170809 03:57:32.807" status="PASS" endtime="20170809 03:57:32.807"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:32.808">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:32.544" status="PASS" endtime="20170809 03:57:32.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:32.808">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:32.808" status="PASS" endtime="20170809 03:57:32.808"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.809">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:32.809">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:32.809">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:32.808" status="PASS" endtime="20170809 03:57:32.809"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:32.809">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:57:32.543" status="PASS" endtime="20170809 03:57:32.809"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:32.810">${power_state} = On</msg>
<status starttime="20170809 03:57:32.543" status="PASS" endtime="20170809 03:57:32.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:57:32.810" status="PASS" endtime="20170809 03:57:32.810"></status>
</kw>
<status starttime="20170809 03:57:32.543" status="PASS" endtime="20170809 03:57:32.810"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:32.814">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:32.814" status="PASS" endtime="20170809 03:57:32.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.815">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:32.815" status="PASS" endtime="20170809 03:57:32.815"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.816">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:32.816" status="PASS" endtime="20170809 03:57:32.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:32.817">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:32.816" status="PASS" endtime="20170809 03:57:32.817"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.038">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:32.817" status="PASS" endtime="20170809 03:57:33.039"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:33.039">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:33.039">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:32.817" status="PASS" endtime="20170809 03:57:33.039"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.039">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:33.039" status="PASS" endtime="20170809 03:57:33.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:33.040" status="PASS" endtime="20170809 03:57:33.040"></status>
</kw>
<status starttime="20170809 03:57:32.813" status="PASS" endtime="20170809 03:57:33.041"></status>
</kw>
<status starttime="20170809 03:57:32.813" status="PASS" endtime="20170809 03:57:33.041"></status>
</kw>
<status starttime="20170809 03:57:32.812" status="PASS" endtime="20170809 03:57:33.041"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.041">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:57:33.041" status="PASS" endtime="20170809 03:57:33.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.044">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:33.043" status="PASS" endtime="20170809 03:57:33.044"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.045">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:33.045" status="PASS" endtime="20170809 03:57:33.045"></status>
</kw>
<status starttime="20170809 03:57:33.044" status="PASS" endtime="20170809 03:57:33.045"></status>
</kw>
<status starttime="20170809 03:57:33.042" status="PASS" endtime="20170809 03:57:33.045"></status>
</kw>
<status starttime="20170809 03:57:33.042" status="PASS" endtime="20170809 03:57:33.045"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.134">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:33.134">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:33.046" status="PASS" endtime="20170809 03:57:33.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.136">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:33.136" status="PASS" endtime="20170809 03:57:33.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.137">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:33.137" status="PASS" endtime="20170809 03:57:33.137"></status>
</kw>
<status starttime="20170809 03:57:33.136" status="PASS" endtime="20170809 03:57:33.137"></status>
</kw>
<status starttime="20170809 03:57:33.135" status="PASS" endtime="20170809 03:57:33.138"></status>
</kw>
<status starttime="20170809 03:57:33.135" status="PASS" endtime="20170809 03:57:33.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:33.138">Delete All Sessions</msg>
<status starttime="20170809 03:57:33.138" status="PASS" endtime="20170809 03:57:33.138"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:33.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:32.811" status="PASS" endtime="20170809 03:57:33.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:33.139" status="PASS" endtime="20170809 03:57:33.139"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.140">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:33.140">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:33.140">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:33.139" status="PASS" endtime="20170809 03:57:33.140"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:33.140">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:57:32.811" status="PASS" endtime="20170809 03:57:33.140"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:33.141">${host_state} = Running</msg>
<status starttime="20170809 03:57:32.811" status="PASS" endtime="20170809 03:57:33.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:57:33.141" status="PASS" endtime="20170809 03:57:33.141"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.145">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:33.145" status="PASS" endtime="20170809 03:57:33.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.146">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:33.146" status="PASS" endtime="20170809 03:57:33.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.147">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:33.146" status="PASS" endtime="20170809 03:57:33.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.147">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:33.147" status="PASS" endtime="20170809 03:57:33.147"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.343">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:33.148" status="PASS" endtime="20170809 03:57:33.343"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:33.343">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:33.343">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:33.148" status="PASS" endtime="20170809 03:57:33.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.344">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:33.343" status="PASS" endtime="20170809 03:57:33.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:33.344" status="PASS" endtime="20170809 03:57:33.344"></status>
</kw>
<status starttime="20170809 03:57:33.144" status="PASS" endtime="20170809 03:57:33.345"></status>
</kw>
<status starttime="20170809 03:57:33.144" status="PASS" endtime="20170809 03:57:33.345"></status>
</kw>
<status starttime="20170809 03:57:33.143" status="PASS" endtime="20170809 03:57:33.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.345">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:57:33.345" status="PASS" endtime="20170809 03:57:33.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.348">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:33.347" status="PASS" endtime="20170809 03:57:33.348"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.349">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:33.348" status="PASS" endtime="20170809 03:57:33.349"></status>
</kw>
<status starttime="20170809 03:57:33.348" status="PASS" endtime="20170809 03:57:33.349"></status>
</kw>
<status starttime="20170809 03:57:33.346" status="PASS" endtime="20170809 03:57:33.349"></status>
</kw>
<status starttime="20170809 03:57:33.346" status="PASS" endtime="20170809 03:57:33.349"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.416">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:33.416">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:33.349" status="PASS" endtime="20170809 03:57:33.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.418">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:33.417" status="PASS" endtime="20170809 03:57:33.418"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.419">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:33.419" status="PASS" endtime="20170809 03:57:33.419"></status>
</kw>
<status starttime="20170809 03:57:33.418" status="PASS" endtime="20170809 03:57:33.419"></status>
</kw>
<status starttime="20170809 03:57:33.417" status="PASS" endtime="20170809 03:57:33.419"></status>
</kw>
<status starttime="20170809 03:57:33.416" status="PASS" endtime="20170809 03:57:33.419"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:33.420">Delete All Sessions</msg>
<status starttime="20170809 03:57:33.420" status="PASS" endtime="20170809 03:57:33.420"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:33.420">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:33.143" status="PASS" endtime="20170809 03:57:33.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:33.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:33.421" status="PASS" endtime="20170809 03:57:33.421"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:33.422">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:33.422">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:33.422">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:33.422" status="PASS" endtime="20170809 03:57:33.422"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:33.423">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:33.142" status="PASS" endtime="20170809 03:57:33.423"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:33.423">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:33.142" status="PASS" endtime="20170809 03:57:33.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:57:33.424">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:57:33.423" status="FAIL" endtime="20170809 03:57:33.424"></status>
</kw>
<status starttime="20170809 03:57:33.141" status="FAIL" endtime="20170809 03:57:33.424"></status>
</kw>
<status starttime="20170809 03:57:32.542" status="FAIL" endtime="20170809 03:57:33.425"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.430">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:43.430" status="PASS" endtime="20170809 03:57:43.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.431">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:43.431" status="PASS" endtime="20170809 03:57:43.431"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.432">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:43.432" status="PASS" endtime="20170809 03:57:43.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.433">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:43.432" status="PASS" endtime="20170809 03:57:43.433"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.615">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:43.433" status="PASS" endtime="20170809 03:57:43.615"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:43.615">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:43.615">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:43.433" status="PASS" endtime="20170809 03:57:43.615"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.616">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:43.615" status="PASS" endtime="20170809 03:57:43.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:43.616" status="PASS" endtime="20170809 03:57:43.617"></status>
</kw>
<status starttime="20170809 03:57:43.429" status="PASS" endtime="20170809 03:57:43.617"></status>
</kw>
<status starttime="20170809 03:57:43.428" status="PASS" endtime="20170809 03:57:43.617"></status>
</kw>
<status starttime="20170809 03:57:43.428" status="PASS" endtime="20170809 03:57:43.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.618">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:57:43.617" status="PASS" endtime="20170809 03:57:43.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.620">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:43.619" status="PASS" endtime="20170809 03:57:43.620"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.621">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:43.620" status="PASS" endtime="20170809 03:57:43.621"></status>
</kw>
<status starttime="20170809 03:57:43.620" status="PASS" endtime="20170809 03:57:43.621"></status>
</kw>
<status starttime="20170809 03:57:43.618" status="PASS" endtime="20170809 03:57:43.621"></status>
</kw>
<status starttime="20170809 03:57:43.618" status="PASS" endtime="20170809 03:57:43.621"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.683">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:43.684">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:43.621" status="PASS" endtime="20170809 03:57:43.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.686">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:43.685" status="PASS" endtime="20170809 03:57:43.686"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.687">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:43.687" status="PASS" endtime="20170809 03:57:43.688"></status>
</kw>
<status starttime="20170809 03:57:43.686" status="PASS" endtime="20170809 03:57:43.688"></status>
</kw>
<status starttime="20170809 03:57:43.685" status="PASS" endtime="20170809 03:57:43.688"></status>
</kw>
<status starttime="20170809 03:57:43.684" status="PASS" endtime="20170809 03:57:43.688"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:43.688">Delete All Sessions</msg>
<status starttime="20170809 03:57:43.688" status="PASS" endtime="20170809 03:57:43.689"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:43.689">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:43.427" status="PASS" endtime="20170809 03:57:43.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:43.689" status="PASS" endtime="20170809 03:57:43.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.690">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:43.690">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:43.690">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:43.690" status="PASS" endtime="20170809 03:57:43.690"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:43.690">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:57:43.427" status="PASS" endtime="20170809 03:57:43.690"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:43.691">${power_state} = On</msg>
<status starttime="20170809 03:57:43.426" status="PASS" endtime="20170809 03:57:43.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:57:43.691" status="PASS" endtime="20170809 03:57:43.691"></status>
</kw>
<status starttime="20170809 03:57:43.426" status="PASS" endtime="20170809 03:57:43.691"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.695">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:43.695" status="PASS" endtime="20170809 03:57:43.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.696">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:43.696" status="PASS" endtime="20170809 03:57:43.696"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.696">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:43.696" status="PASS" endtime="20170809 03:57:43.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.697">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:43.697" status="PASS" endtime="20170809 03:57:43.697"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.889">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:43.698" status="PASS" endtime="20170809 03:57:43.889"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:43.889">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:43.889">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:43.697" status="PASS" endtime="20170809 03:57:43.889"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.890">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:43.890" status="PASS" endtime="20170809 03:57:43.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:43.891" status="PASS" endtime="20170809 03:57:43.891"></status>
</kw>
<status starttime="20170809 03:57:43.694" status="PASS" endtime="20170809 03:57:43.891"></status>
</kw>
<status starttime="20170809 03:57:43.694" status="PASS" endtime="20170809 03:57:43.892"></status>
</kw>
<status starttime="20170809 03:57:43.693" status="PASS" endtime="20170809 03:57:43.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.893">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:57:43.892" status="PASS" endtime="20170809 03:57:43.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.895">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:43.894" status="PASS" endtime="20170809 03:57:43.895"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.896">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:43.896" status="PASS" endtime="20170809 03:57:43.896"></status>
</kw>
<status starttime="20170809 03:57:43.895" status="PASS" endtime="20170809 03:57:43.897"></status>
</kw>
<status starttime="20170809 03:57:43.893" status="PASS" endtime="20170809 03:57:43.897"></status>
</kw>
<status starttime="20170809 03:57:43.893" status="PASS" endtime="20170809 03:57:43.897"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.986">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:43.986">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:43.897" status="PASS" endtime="20170809 03:57:43.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.988">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:43.988" status="PASS" endtime="20170809 03:57:43.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.989">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:43.989" status="PASS" endtime="20170809 03:57:43.989"></status>
</kw>
<status starttime="20170809 03:57:43.988" status="PASS" endtime="20170809 03:57:43.989"></status>
</kw>
<status starttime="20170809 03:57:43.987" status="PASS" endtime="20170809 03:57:43.990"></status>
</kw>
<status starttime="20170809 03:57:43.987" status="PASS" endtime="20170809 03:57:43.990"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:43.990">Delete All Sessions</msg>
<status starttime="20170809 03:57:43.990" status="PASS" endtime="20170809 03:57:43.990"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:43.990">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:43.692" status="PASS" endtime="20170809 03:57:43.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:43.991" status="PASS" endtime="20170809 03:57:43.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.991">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:43.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:43.992">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:43.991" status="PASS" endtime="20170809 03:57:43.992"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:43.992">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:57:43.692" status="PASS" endtime="20170809 03:57:43.992"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:43.992">${host_state} = Running</msg>
<status starttime="20170809 03:57:43.692" status="PASS" endtime="20170809 03:57:43.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:57:43.993" status="PASS" endtime="20170809 03:57:43.993"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:43.997">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:43.996" status="PASS" endtime="20170809 03:57:43.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:43.997" status="PASS" endtime="20170809 03:57:43.998"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.998">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:43.998" status="PASS" endtime="20170809 03:57:43.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:43.999">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:43.999" status="PASS" endtime="20170809 03:57:43.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:44.190">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:44.000" status="PASS" endtime="20170809 03:57:44.190"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:44.190">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:44.190">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:43.999" status="PASS" endtime="20170809 03:57:44.191"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:44.191">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:44.191" status="PASS" endtime="20170809 03:57:44.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:44.192">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:44.192" status="PASS" endtime="20170809 03:57:44.192"></status>
</kw>
<status starttime="20170809 03:57:43.996" status="PASS" endtime="20170809 03:57:44.192"></status>
</kw>
<status starttime="20170809 03:57:43.996" status="PASS" endtime="20170809 03:57:44.192"></status>
</kw>
<status starttime="20170809 03:57:43.995" status="PASS" endtime="20170809 03:57:44.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:44.193">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:57:44.193" status="PASS" endtime="20170809 03:57:44.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:44.196">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:44.195" status="PASS" endtime="20170809 03:57:44.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:44.197">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:44.197" status="PASS" endtime="20170809 03:57:44.197"></status>
</kw>
<status starttime="20170809 03:57:44.196" status="PASS" endtime="20170809 03:57:44.197"></status>
</kw>
<status starttime="20170809 03:57:44.194" status="PASS" endtime="20170809 03:57:44.197"></status>
</kw>
<status starttime="20170809 03:57:44.193" status="PASS" endtime="20170809 03:57:44.197"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:44.283">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:44.283">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:44.198" status="PASS" endtime="20170809 03:57:44.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:44.285">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:44.284" status="PASS" endtime="20170809 03:57:44.285"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:44.286">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:44.286" status="PASS" endtime="20170809 03:57:44.286"></status>
</kw>
<status starttime="20170809 03:57:44.285" status="PASS" endtime="20170809 03:57:44.286"></status>
</kw>
<status starttime="20170809 03:57:44.284" status="PASS" endtime="20170809 03:57:44.286"></status>
</kw>
<status starttime="20170809 03:57:44.283" status="PASS" endtime="20170809 03:57:44.286"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:44.287">Delete All Sessions</msg>
<status starttime="20170809 03:57:44.286" status="PASS" endtime="20170809 03:57:44.287"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:44.287">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:43.994" status="PASS" endtime="20170809 03:57:44.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:44.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:44.287" status="PASS" endtime="20170809 03:57:44.288"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:44.288">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:44.288">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:44.288">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:44.288" status="PASS" endtime="20170809 03:57:44.288"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:44.289">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:43.994" status="PASS" endtime="20170809 03:57:44.289"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:44.289">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:43.993" status="PASS" endtime="20170809 03:57:44.289"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:57:44.289">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:57:44.289" status="FAIL" endtime="20170809 03:57:44.290"></status>
</kw>
<status starttime="20170809 03:57:43.993" status="FAIL" endtime="20170809 03:57:44.290"></status>
</kw>
<status starttime="20170809 03:57:43.425" status="FAIL" endtime="20170809 03:57:44.290"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.296">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:54.295" status="PASS" endtime="20170809 03:57:54.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.297">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:54.297" status="PASS" endtime="20170809 03:57:54.297"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.297">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:54.297" status="PASS" endtime="20170809 03:57:54.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.298">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:54.298" status="PASS" endtime="20170809 03:57:54.298"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.479">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:54.299" status="PASS" endtime="20170809 03:57:54.480"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:54.480">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:54.480">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:54.298" status="PASS" endtime="20170809 03:57:54.480"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.481">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:54.480" status="PASS" endtime="20170809 03:57:54.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:54.481" status="PASS" endtime="20170809 03:57:54.482"></status>
</kw>
<status starttime="20170809 03:57:54.295" status="PASS" endtime="20170809 03:57:54.482"></status>
</kw>
<status starttime="20170809 03:57:54.294" status="PASS" endtime="20170809 03:57:54.482"></status>
</kw>
<status starttime="20170809 03:57:54.293" status="PASS" endtime="20170809 03:57:54.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.482">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:57:54.482" status="PASS" endtime="20170809 03:57:54.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.485">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:54.484" status="PASS" endtime="20170809 03:57:54.485"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.486">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:54.486" status="PASS" endtime="20170809 03:57:54.486"></status>
</kw>
<status starttime="20170809 03:57:54.485" status="PASS" endtime="20170809 03:57:54.486"></status>
</kw>
<status starttime="20170809 03:57:54.483" status="PASS" endtime="20170809 03:57:54.486"></status>
</kw>
<status starttime="20170809 03:57:54.483" status="PASS" endtime="20170809 03:57:54.486"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.549">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:54.549">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:54.486" status="PASS" endtime="20170809 03:57:54.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.552">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:54.551" status="PASS" endtime="20170809 03:57:54.552"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.553">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:54.553" status="PASS" endtime="20170809 03:57:54.553"></status>
</kw>
<status starttime="20170809 03:57:54.552" status="PASS" endtime="20170809 03:57:54.553"></status>
</kw>
<status starttime="20170809 03:57:54.550" status="PASS" endtime="20170809 03:57:54.553"></status>
</kw>
<status starttime="20170809 03:57:54.550" status="PASS" endtime="20170809 03:57:54.553"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:54.554">Delete All Sessions</msg>
<status starttime="20170809 03:57:54.553" status="PASS" endtime="20170809 03:57:54.554"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:54.554">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:54.292" status="PASS" endtime="20170809 03:57:54.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:54.554" status="PASS" endtime="20170809 03:57:54.555"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.555">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:54.555">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:54.555">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:54.555" status="PASS" endtime="20170809 03:57:54.555"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:54.556">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:57:54.292" status="PASS" endtime="20170809 03:57:54.556"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:54.556">${power_state} = On</msg>
<status starttime="20170809 03:57:54.291" status="PASS" endtime="20170809 03:57:54.556"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:57:54.556" status="PASS" endtime="20170809 03:57:54.557"></status>
</kw>
<status starttime="20170809 03:57:54.291" status="PASS" endtime="20170809 03:57:54.557"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.560">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:54.560" status="PASS" endtime="20170809 03:57:54.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.561">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:54.561" status="PASS" endtime="20170809 03:57:54.561"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.562">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:54.562" status="PASS" endtime="20170809 03:57:54.562"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.563">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:54.562" status="PASS" endtime="20170809 03:57:54.563"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.763">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:54.563" status="PASS" endtime="20170809 03:57:54.763"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:54.763">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:54.763">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:54.563" status="PASS" endtime="20170809 03:57:54.763"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.764">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:54.764" status="PASS" endtime="20170809 03:57:54.764"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:54.765" status="PASS" endtime="20170809 03:57:54.765"></status>
</kw>
<status starttime="20170809 03:57:54.559" status="PASS" endtime="20170809 03:57:54.765"></status>
</kw>
<status starttime="20170809 03:57:54.559" status="PASS" endtime="20170809 03:57:54.765"></status>
</kw>
<status starttime="20170809 03:57:54.558" status="PASS" endtime="20170809 03:57:54.765"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.766">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:57:54.766" status="PASS" endtime="20170809 03:57:54.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.769">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:54.767" status="PASS" endtime="20170809 03:57:54.769"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.769">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:57:54.769" status="PASS" endtime="20170809 03:57:54.770"></status>
</kw>
<status starttime="20170809 03:57:54.769" status="PASS" endtime="20170809 03:57:54.770"></status>
</kw>
<status starttime="20170809 03:57:54.767" status="PASS" endtime="20170809 03:57:54.770"></status>
</kw>
<status starttime="20170809 03:57:54.766" status="PASS" endtime="20170809 03:57:54.770"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.890">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:54.890">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:54.770" status="PASS" endtime="20170809 03:57:54.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.892">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:54.892" status="PASS" endtime="20170809 03:57:54.892"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.893">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:54.893" status="PASS" endtime="20170809 03:57:54.893"></status>
</kw>
<status starttime="20170809 03:57:54.892" status="PASS" endtime="20170809 03:57:54.893"></status>
</kw>
<status starttime="20170809 03:57:54.891" status="PASS" endtime="20170809 03:57:54.893"></status>
</kw>
<status starttime="20170809 03:57:54.890" status="PASS" endtime="20170809 03:57:54.893"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:54.894">Delete All Sessions</msg>
<status starttime="20170809 03:57:54.894" status="PASS" endtime="20170809 03:57:54.894"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:54.894">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:54.558" status="PASS" endtime="20170809 03:57:54.894"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.895">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:54.894" status="PASS" endtime="20170809 03:57:54.895"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.895">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:54.895">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:54.896">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:54.895" status="PASS" endtime="20170809 03:57:54.896"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:54.896">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:57:54.557" status="PASS" endtime="20170809 03:57:54.896"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:54.896">${host_state} = Running</msg>
<status starttime="20170809 03:57:54.557" status="PASS" endtime="20170809 03:57:54.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:57:54.896" status="PASS" endtime="20170809 03:57:54.897"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:54.901">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:57:54.900" status="PASS" endtime="20170809 03:57:54.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.902">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:57:54.901" status="PASS" endtime="20170809 03:57:54.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.902">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:57:54.902" status="PASS" endtime="20170809 03:57:54.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:54.903">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:57:54.903" status="PASS" endtime="20170809 03:57:54.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:55.095">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:57:54.904" status="PASS" endtime="20170809 03:57:55.096"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:55.096">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:57:55.096">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:54.903" status="PASS" endtime="20170809 03:57:55.096"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:55.097">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:55.096" status="PASS" endtime="20170809 03:57:55.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:55.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:55.097" status="PASS" endtime="20170809 03:57:55.097"></status>
</kw>
<status starttime="20170809 03:57:54.900" status="PASS" endtime="20170809 03:57:55.097"></status>
</kw>
<status starttime="20170809 03:57:54.899" status="PASS" endtime="20170809 03:57:55.098"></status>
</kw>
<status starttime="20170809 03:57:54.899" status="PASS" endtime="20170809 03:57:55.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:55.098">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:57:55.098" status="PASS" endtime="20170809 03:57:55.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:55.100">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:55.100" status="PASS" endtime="20170809 03:57:55.100"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:55.101">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:57:55.101" status="PASS" endtime="20170809 03:57:55.102"></status>
</kw>
<status starttime="20170809 03:57:55.101" status="PASS" endtime="20170809 03:57:55.102"></status>
</kw>
<status starttime="20170809 03:57:55.099" status="PASS" endtime="20170809 03:57:55.102"></status>
</kw>
<status starttime="20170809 03:57:55.099" status="PASS" endtime="20170809 03:57:55.102"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:55.181">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:57:55.181">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:55.102" status="PASS" endtime="20170809 03:57:55.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:55.183">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:55.182" status="PASS" endtime="20170809 03:57:55.183"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:55.184">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:57:55.184" status="PASS" endtime="20170809 03:57:55.184"></status>
</kw>
<status starttime="20170809 03:57:55.183" status="PASS" endtime="20170809 03:57:55.184"></status>
</kw>
<status starttime="20170809 03:57:55.182" status="PASS" endtime="20170809 03:57:55.184"></status>
</kw>
<status starttime="20170809 03:57:55.181" status="PASS" endtime="20170809 03:57:55.184"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:57:55.185">Delete All Sessions</msg>
<status starttime="20170809 03:57:55.185" status="PASS" endtime="20170809 03:57:55.185"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:55.185">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:57:54.898" status="PASS" endtime="20170809 03:57:55.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:57:55.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:57:55.186" status="PASS" endtime="20170809 03:57:55.186"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:57:55.186">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:57:55.187">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:57:55.187">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:57:55.186" status="PASS" endtime="20170809 03:57:55.187"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:55.187">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:54.898" status="PASS" endtime="20170809 03:57:55.187"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:57:55.187">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:57:54.897" status="PASS" endtime="20170809 03:57:55.187"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:57:55.188">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:57:55.188" status="FAIL" endtime="20170809 03:57:55.188"></status>
</kw>
<status starttime="20170809 03:57:54.897" status="FAIL" endtime="20170809 03:57:55.188"></status>
</kw>
<status starttime="20170809 03:57:54.290" status="FAIL" endtime="20170809 03:57:55.188"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.194">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:05.194" status="PASS" endtime="20170809 03:58:05.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:05.195" status="PASS" endtime="20170809 03:58:05.195"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.196">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:05.195" status="PASS" endtime="20170809 03:58:05.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.196">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:05.196" status="PASS" endtime="20170809 03:58:05.196"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.381">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:05.197" status="PASS" endtime="20170809 03:58:05.381"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:05.381">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:05.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:05.197" status="PASS" endtime="20170809 03:58:05.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.382">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:05.382" status="PASS" endtime="20170809 03:58:05.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:05.383" status="PASS" endtime="20170809 03:58:05.383"></status>
</kw>
<status starttime="20170809 03:58:05.193" status="PASS" endtime="20170809 03:58:05.383"></status>
</kw>
<status starttime="20170809 03:58:05.193" status="PASS" endtime="20170809 03:58:05.383"></status>
</kw>
<status starttime="20170809 03:58:05.192" status="PASS" endtime="20170809 03:58:05.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.384">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:58:05.384" status="PASS" endtime="20170809 03:58:05.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.386">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:05.386" status="PASS" endtime="20170809 03:58:05.386"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.387">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:05.387" status="PASS" endtime="20170809 03:58:05.387"></status>
</kw>
<status starttime="20170809 03:58:05.387" status="PASS" endtime="20170809 03:58:05.388"></status>
</kw>
<status starttime="20170809 03:58:05.385" status="PASS" endtime="20170809 03:58:05.388"></status>
</kw>
<status starttime="20170809 03:58:05.384" status="PASS" endtime="20170809 03:58:05.388"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.453">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:05.453">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:05.388" status="PASS" endtime="20170809 03:58:05.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.458">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:05.457" status="PASS" endtime="20170809 03:58:05.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.459">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:05.459" status="PASS" endtime="20170809 03:58:05.459"></status>
</kw>
<status starttime="20170809 03:58:05.458" status="PASS" endtime="20170809 03:58:05.459"></status>
</kw>
<status starttime="20170809 03:58:05.454" status="PASS" endtime="20170809 03:58:05.459"></status>
</kw>
<status starttime="20170809 03:58:05.453" status="PASS" endtime="20170809 03:58:05.459"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:05.460">Delete All Sessions</msg>
<status starttime="20170809 03:58:05.460" status="PASS" endtime="20170809 03:58:05.460"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:05.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:05.191" status="PASS" endtime="20170809 03:58:05.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:05.460" status="PASS" endtime="20170809 03:58:05.461"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.461">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:05.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:05.462">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:05.461" status="PASS" endtime="20170809 03:58:05.462"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:05.462">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:58:05.190" status="PASS" endtime="20170809 03:58:05.462"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:05.462">${power_state} = On</msg>
<status starttime="20170809 03:58:05.190" status="PASS" endtime="20170809 03:58:05.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:58:05.463" status="PASS" endtime="20170809 03:58:05.463"></status>
</kw>
<status starttime="20170809 03:58:05.190" status="PASS" endtime="20170809 03:58:05.463"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.467">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:05.466" status="PASS" endtime="20170809 03:58:05.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.468">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:05.468" status="PASS" endtime="20170809 03:58:05.468"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.469">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:05.468" status="PASS" endtime="20170809 03:58:05.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.469">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:05.469" status="PASS" endtime="20170809 03:58:05.470"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.739">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:05.470" status="PASS" endtime="20170809 03:58:05.739"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:05.739">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:05.739">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:05.470" status="PASS" endtime="20170809 03:58:05.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.740">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:05.740" status="PASS" endtime="20170809 03:58:05.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:05.741" status="PASS" endtime="20170809 03:58:05.741"></status>
</kw>
<status starttime="20170809 03:58:05.466" status="PASS" endtime="20170809 03:58:05.741"></status>
</kw>
<status starttime="20170809 03:58:05.466" status="PASS" endtime="20170809 03:58:05.741"></status>
</kw>
<status starttime="20170809 03:58:05.465" status="PASS" endtime="20170809 03:58:05.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.743">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:58:05.742" status="PASS" endtime="20170809 03:58:05.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.745">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:05.744" status="PASS" endtime="20170809 03:58:05.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.746">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:05.746" status="PASS" endtime="20170809 03:58:05.746"></status>
</kw>
<status starttime="20170809 03:58:05.746" status="PASS" endtime="20170809 03:58:05.747"></status>
</kw>
<status starttime="20170809 03:58:05.743" status="PASS" endtime="20170809 03:58:05.747"></status>
</kw>
<status starttime="20170809 03:58:05.743" status="PASS" endtime="20170809 03:58:05.747"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.837">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:05.838">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:05.747" status="PASS" endtime="20170809 03:58:05.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.840">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:05.839" status="PASS" endtime="20170809 03:58:05.840"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.841">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:05.841" status="PASS" endtime="20170809 03:58:05.841"></status>
</kw>
<status starttime="20170809 03:58:05.840" status="PASS" endtime="20170809 03:58:05.841"></status>
</kw>
<status starttime="20170809 03:58:05.839" status="PASS" endtime="20170809 03:58:05.841"></status>
</kw>
<status starttime="20170809 03:58:05.838" status="PASS" endtime="20170809 03:58:05.841"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:05.842">Delete All Sessions</msg>
<status starttime="20170809 03:58:05.842" status="PASS" endtime="20170809 03:58:05.842"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:05.842">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:05.464" status="PASS" endtime="20170809 03:58:05.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.843">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:05.843" status="PASS" endtime="20170809 03:58:05.844"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.844">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:05.844">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:05.844">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:05.844" status="PASS" endtime="20170809 03:58:05.844"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:05.845">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:58:05.464" status="PASS" endtime="20170809 03:58:05.845"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:05.845">${host_state} = Running</msg>
<status starttime="20170809 03:58:05.463" status="PASS" endtime="20170809 03:58:05.845"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:58:05.845" status="PASS" endtime="20170809 03:58:05.846"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:05.850">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:05.849" status="PASS" endtime="20170809 03:58:05.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.851">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:05.850" status="PASS" endtime="20170809 03:58:05.851"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.851">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:05.851" status="PASS" endtime="20170809 03:58:05.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:05.852">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:05.851" status="PASS" endtime="20170809 03:58:05.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:06.053">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:05.853" status="PASS" endtime="20170809 03:58:06.053"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:06.053">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:06.053">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:05.852" status="PASS" endtime="20170809 03:58:06.053"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:06.054">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:06.053" status="PASS" endtime="20170809 03:58:06.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:06.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:06.054" status="PASS" endtime="20170809 03:58:06.054"></status>
</kw>
<status starttime="20170809 03:58:05.849" status="PASS" endtime="20170809 03:58:06.055"></status>
</kw>
<status starttime="20170809 03:58:05.848" status="PASS" endtime="20170809 03:58:06.055"></status>
</kw>
<status starttime="20170809 03:58:05.848" status="PASS" endtime="20170809 03:58:06.055"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:06.055">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:58:06.055" status="PASS" endtime="20170809 03:58:06.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:06.058">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:58:06.057" status="PASS" endtime="20170809 03:58:06.058"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:06.059">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:58:06.058" status="PASS" endtime="20170809 03:58:06.059"></status>
</kw>
<status starttime="20170809 03:58:06.058" status="PASS" endtime="20170809 03:58:06.059"></status>
</kw>
<status starttime="20170809 03:58:06.056" status="PASS" endtime="20170809 03:58:06.059"></status>
</kw>
<status starttime="20170809 03:58:06.056" status="PASS" endtime="20170809 03:58:06.059"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:06.162">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:06.162">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:06.059" status="PASS" endtime="20170809 03:58:06.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:06.164">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:06.163" status="PASS" endtime="20170809 03:58:06.164"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:06.165">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:06.165" status="PASS" endtime="20170809 03:58:06.165"></status>
</kw>
<status starttime="20170809 03:58:06.164" status="PASS" endtime="20170809 03:58:06.165"></status>
</kw>
<status starttime="20170809 03:58:06.163" status="PASS" endtime="20170809 03:58:06.165"></status>
</kw>
<status starttime="20170809 03:58:06.162" status="PASS" endtime="20170809 03:58:06.165"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:06.166">Delete All Sessions</msg>
<status starttime="20170809 03:58:06.166" status="PASS" endtime="20170809 03:58:06.166"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:06.166">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:05.847" status="PASS" endtime="20170809 03:58:06.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:06.167">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:06.166" status="PASS" endtime="20170809 03:58:06.167"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:06.167">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:06.167">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:06.167">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:06.167" status="PASS" endtime="20170809 03:58:06.167"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:06.168">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:58:05.847" status="PASS" endtime="20170809 03:58:06.168"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:06.168">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:58:05.846" status="PASS" endtime="20170809 03:58:06.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:58:06.169">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:58:06.168" status="FAIL" endtime="20170809 03:58:06.169"></status>
</kw>
<status starttime="20170809 03:58:05.846" status="FAIL" endtime="20170809 03:58:06.169"></status>
</kw>
<status starttime="20170809 03:58:05.189" status="FAIL" endtime="20170809 03:58:06.169"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:16.175">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:16.174" status="PASS" endtime="20170809 03:58:16.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:16.176">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:16.175" status="PASS" endtime="20170809 03:58:16.176"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:16.176">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:16.176" status="PASS" endtime="20170809 03:58:16.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:16.177">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:16.177" status="PASS" endtime="20170809 03:58:16.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:17.760">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:16.178" status="PASS" endtime="20170809 03:58:17.761"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:17.761">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:17.761">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:16.177" status="PASS" endtime="20170809 03:58:17.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:17.762">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:17.761" status="PASS" endtime="20170809 03:58:17.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:17.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:17.762" status="PASS" endtime="20170809 03:58:17.762"></status>
</kw>
<status starttime="20170809 03:58:16.174" status="PASS" endtime="20170809 03:58:17.763"></status>
</kw>
<status starttime="20170809 03:58:16.173" status="PASS" endtime="20170809 03:58:17.763"></status>
</kw>
<status starttime="20170809 03:58:16.172" status="PASS" endtime="20170809 03:58:17.763"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:17.763">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:58:17.763" status="PASS" endtime="20170809 03:58:17.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:17.766">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:17.765" status="PASS" endtime="20170809 03:58:17.766"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:17.766">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:17.766" status="PASS" endtime="20170809 03:58:17.767"></status>
</kw>
<status starttime="20170809 03:58:17.766" status="PASS" endtime="20170809 03:58:17.767"></status>
</kw>
<status starttime="20170809 03:58:17.764" status="PASS" endtime="20170809 03:58:17.767"></status>
</kw>
<status starttime="20170809 03:58:17.764" status="PASS" endtime="20170809 03:58:17.767"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:22.685">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:22.685">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:17.767" status="PASS" endtime="20170809 03:58:22.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:22.687">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:22.687" status="PASS" endtime="20170809 03:58:22.687"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:22.688">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:22.688" status="PASS" endtime="20170809 03:58:22.688"></status>
</kw>
<status starttime="20170809 03:58:22.688" status="PASS" endtime="20170809 03:58:22.689"></status>
</kw>
<status starttime="20170809 03:58:22.686" status="PASS" endtime="20170809 03:58:22.689"></status>
</kw>
<status starttime="20170809 03:58:22.685" status="PASS" endtime="20170809 03:58:22.689"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:22.689">Delete All Sessions</msg>
<status starttime="20170809 03:58:22.689" status="PASS" endtime="20170809 03:58:22.689"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:22.690">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:16.171" status="PASS" endtime="20170809 03:58:22.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:22.690">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:22.690" status="PASS" endtime="20170809 03:58:22.690"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:22.691">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:22.691">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:22.691">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:22.690" status="PASS" endtime="20170809 03:58:22.691"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:22.691">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:58:16.171" status="PASS" endtime="20170809 03:58:22.691"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:22.692">${power_state} = On</msg>
<status starttime="20170809 03:58:16.171" status="PASS" endtime="20170809 03:58:22.692"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:58:22.692" status="PASS" endtime="20170809 03:58:22.693"></status>
</kw>
<status starttime="20170809 03:58:16.170" status="PASS" endtime="20170809 03:58:22.693"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:22.697">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:22.697" status="PASS" endtime="20170809 03:58:22.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:22.698">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:22.698" status="PASS" endtime="20170809 03:58:22.698"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:22.699">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:22.699" status="PASS" endtime="20170809 03:58:22.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:22.700">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:22.699" status="PASS" endtime="20170809 03:58:22.700"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:22.883">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:22.700" status="PASS" endtime="20170809 03:58:22.883"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:22.883">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:22.884">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:22.700" status="PASS" endtime="20170809 03:58:22.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:22.884">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:22.884" status="PASS" endtime="20170809 03:58:22.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:22.885">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:22.885" status="PASS" endtime="20170809 03:58:22.885"></status>
</kw>
<status starttime="20170809 03:58:22.697" status="PASS" endtime="20170809 03:58:22.885"></status>
</kw>
<status starttime="20170809 03:58:22.696" status="PASS" endtime="20170809 03:58:22.885"></status>
</kw>
<status starttime="20170809 03:58:22.695" status="PASS" endtime="20170809 03:58:22.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:22.886">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:58:22.886" status="PASS" endtime="20170809 03:58:22.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:22.889">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:22.887" status="PASS" endtime="20170809 03:58:22.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:22.890">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:22.889" status="PASS" endtime="20170809 03:58:22.890"></status>
</kw>
<status starttime="20170809 03:58:22.889" status="PASS" endtime="20170809 03:58:22.890"></status>
</kw>
<status starttime="20170809 03:58:22.887" status="PASS" endtime="20170809 03:58:22.890"></status>
</kw>
<status starttime="20170809 03:58:22.886" status="PASS" endtime="20170809 03:58:22.890"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:23.596">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:23.596">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:22.890" status="PASS" endtime="20170809 03:58:23.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:23.599">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:23.598" status="PASS" endtime="20170809 03:58:23.599"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:23.600">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:23.600" status="PASS" endtime="20170809 03:58:23.600"></status>
</kw>
<status starttime="20170809 03:58:23.599" status="PASS" endtime="20170809 03:58:23.600"></status>
</kw>
<status starttime="20170809 03:58:23.597" status="PASS" endtime="20170809 03:58:23.600"></status>
</kw>
<status starttime="20170809 03:58:23.597" status="PASS" endtime="20170809 03:58:23.600"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:23.601">Delete All Sessions</msg>
<status starttime="20170809 03:58:23.601" status="PASS" endtime="20170809 03:58:23.601"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:23.601">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:22.694" status="PASS" endtime="20170809 03:58:23.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:23.602">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:23.601" status="PASS" endtime="20170809 03:58:23.602"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:23.602">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:23.602">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:23.602">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:23.602" status="PASS" endtime="20170809 03:58:23.603"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:23.603">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:58:22.694" status="PASS" endtime="20170809 03:58:23.603"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:23.603">${host_state} = Running</msg>
<status starttime="20170809 03:58:22.693" status="PASS" endtime="20170809 03:58:23.603"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:58:23.603" status="PASS" endtime="20170809 03:58:23.604"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:23.607">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:23.607" status="PASS" endtime="20170809 03:58:23.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:23.609">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:23.608" status="PASS" endtime="20170809 03:58:23.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:23.609">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:23.609" status="PASS" endtime="20170809 03:58:23.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:23.610">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:23.609" status="PASS" endtime="20170809 03:58:23.610"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:23.996">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:23.610" status="PASS" endtime="20170809 03:58:23.996"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:23.996">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:23.996">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:23.610" status="PASS" endtime="20170809 03:58:23.996"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:23.997">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:23.996" status="PASS" endtime="20170809 03:58:23.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:23.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:23.997" status="PASS" endtime="20170809 03:58:23.998"></status>
</kw>
<status starttime="20170809 03:58:23.607" status="PASS" endtime="20170809 03:58:23.998"></status>
</kw>
<status starttime="20170809 03:58:23.606" status="PASS" endtime="20170809 03:58:23.998"></status>
</kw>
<status starttime="20170809 03:58:23.606" status="PASS" endtime="20170809 03:58:23.998"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:23.998">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:58:23.998" status="PASS" endtime="20170809 03:58:23.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:24.001">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:58:24.000" status="PASS" endtime="20170809 03:58:24.001"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:24.002">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:58:24.002" status="PASS" endtime="20170809 03:58:24.002"></status>
</kw>
<status starttime="20170809 03:58:24.001" status="PASS" endtime="20170809 03:58:24.002"></status>
</kw>
<status starttime="20170809 03:58:23.999" status="PASS" endtime="20170809 03:58:24.002"></status>
</kw>
<status starttime="20170809 03:58:23.999" status="PASS" endtime="20170809 03:58:24.002"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:25.125">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:25.126">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:24.003" status="PASS" endtime="20170809 03:58:25.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:25.128">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:25.127" status="PASS" endtime="20170809 03:58:25.128"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:25.129">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:25.129" status="PASS" endtime="20170809 03:58:25.129"></status>
</kw>
<status starttime="20170809 03:58:25.128" status="PASS" endtime="20170809 03:58:25.129"></status>
</kw>
<status starttime="20170809 03:58:25.127" status="PASS" endtime="20170809 03:58:25.129"></status>
</kw>
<status starttime="20170809 03:58:25.126" status="PASS" endtime="20170809 03:58:25.129"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:25.130">Delete All Sessions</msg>
<status starttime="20170809 03:58:25.130" status="PASS" endtime="20170809 03:58:25.130"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:25.130">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:23.605" status="PASS" endtime="20170809 03:58:25.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:25.131">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:25.130" status="PASS" endtime="20170809 03:58:25.131"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:25.131">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:25.131">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:25.131">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:25.131" status="PASS" endtime="20170809 03:58:25.131"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:25.132">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:58:23.604" status="PASS" endtime="20170809 03:58:25.132"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:25.132">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:58:23.604" status="PASS" endtime="20170809 03:58:25.132"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:58:25.133">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:58:25.132" status="FAIL" endtime="20170809 03:58:25.133"></status>
</kw>
<status starttime="20170809 03:58:23.604" status="FAIL" endtime="20170809 03:58:25.133"></status>
</kw>
<status starttime="20170809 03:58:16.170" status="FAIL" endtime="20170809 03:58:25.133"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:35.139">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:35.138" status="PASS" endtime="20170809 03:58:35.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:35.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:35.139" status="PASS" endtime="20170809 03:58:35.140"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:35.140">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:35.140" status="PASS" endtime="20170809 03:58:35.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:35.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:35.141" status="PASS" endtime="20170809 03:58:35.141"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:35.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:35.142" status="PASS" endtime="20170809 03:58:35.736"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:35.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:35.736">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:35.141" status="PASS" endtime="20170809 03:58:35.736"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:35.737">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:35.737" status="PASS" endtime="20170809 03:58:35.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:35.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:35.738" status="PASS" endtime="20170809 03:58:35.738"></status>
</kw>
<status starttime="20170809 03:58:35.138" status="PASS" endtime="20170809 03:58:35.738"></status>
</kw>
<status starttime="20170809 03:58:35.137" status="PASS" endtime="20170809 03:58:35.738"></status>
</kw>
<status starttime="20170809 03:58:35.136" status="PASS" endtime="20170809 03:58:35.738"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:35.739">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:58:35.739" status="PASS" endtime="20170809 03:58:35.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:35.741">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:35.740" status="PASS" endtime="20170809 03:58:35.741"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:35.742">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:35.742" status="PASS" endtime="20170809 03:58:35.742"></status>
</kw>
<status starttime="20170809 03:58:35.741" status="PASS" endtime="20170809 03:58:35.742"></status>
</kw>
<status starttime="20170809 03:58:35.740" status="PASS" endtime="20170809 03:58:35.742"></status>
</kw>
<status starttime="20170809 03:58:35.739" status="PASS" endtime="20170809 03:58:35.742"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:39.777">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:39.777">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:35.743" status="PASS" endtime="20170809 03:58:39.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:39.780">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:39.779" status="PASS" endtime="20170809 03:58:39.780"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:39.781">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:39.781" status="PASS" endtime="20170809 03:58:39.781"></status>
</kw>
<status starttime="20170809 03:58:39.780" status="PASS" endtime="20170809 03:58:39.781"></status>
</kw>
<status starttime="20170809 03:58:39.778" status="PASS" endtime="20170809 03:58:39.781"></status>
</kw>
<status starttime="20170809 03:58:39.778" status="PASS" endtime="20170809 03:58:39.781"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:39.782">Delete All Sessions</msg>
<status starttime="20170809 03:58:39.781" status="PASS" endtime="20170809 03:58:39.782"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:39.782">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:35.135" status="PASS" endtime="20170809 03:58:39.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:39.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:39.782" status="PASS" endtime="20170809 03:58:39.783"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:39.783">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:39.783">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:39.783">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:39.783" status="PASS" endtime="20170809 03:58:39.783"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:39.784">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 03:58:35.135" status="PASS" endtime="20170809 03:58:39.784"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:39.784">${power_state} = Off</msg>
<status starttime="20170809 03:58:35.134" status="PASS" endtime="20170809 03:58:39.784"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:58:39.785">On != Off</msg>
<status starttime="20170809 03:58:39.784" status="FAIL" endtime="20170809 03:58:39.785"></status>
</kw>
<status starttime="20170809 03:58:35.134" status="FAIL" endtime="20170809 03:58:39.785"></status>
</kw>
<status starttime="20170809 03:58:35.133" status="FAIL" endtime="20170809 03:58:39.785"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:49.790">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:49.790" status="PASS" endtime="20170809 03:58:49.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:49.791">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:49.791" status="PASS" endtime="20170809 03:58:49.792"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:49.792">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:49.792" status="PASS" endtime="20170809 03:58:49.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:49.793">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:49.792" status="PASS" endtime="20170809 03:58:49.793"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.104">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:49.793" status="PASS" endtime="20170809 03:58:50.104"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:50.104">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:50.104">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:49.793" status="PASS" endtime="20170809 03:58:50.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.105">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:50.105" status="PASS" endtime="20170809 03:58:50.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:50.105" status="PASS" endtime="20170809 03:58:50.106"></status>
</kw>
<status starttime="20170809 03:58:49.789" status="PASS" endtime="20170809 03:58:50.106"></status>
</kw>
<status starttime="20170809 03:58:49.789" status="PASS" endtime="20170809 03:58:50.106"></status>
</kw>
<status starttime="20170809 03:58:49.788" status="PASS" endtime="20170809 03:58:50.106"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.107">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:58:50.106" status="PASS" endtime="20170809 03:58:50.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.109">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:50.108" status="PASS" endtime="20170809 03:58:50.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.110">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:50.109" status="PASS" endtime="20170809 03:58:50.110"></status>
</kw>
<status starttime="20170809 03:58:50.109" status="PASS" endtime="20170809 03:58:50.110"></status>
</kw>
<status starttime="20170809 03:58:50.107" status="PASS" endtime="20170809 03:58:50.110"></status>
</kw>
<status starttime="20170809 03:58:50.107" status="PASS" endtime="20170809 03:58:50.110"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.584">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:50.584">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:50.110" status="PASS" endtime="20170809 03:58:50.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.586">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:50.585" status="PASS" endtime="20170809 03:58:50.586"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.588">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:50.587" status="PASS" endtime="20170809 03:58:50.588"></status>
</kw>
<status starttime="20170809 03:58:50.587" status="PASS" endtime="20170809 03:58:50.588"></status>
</kw>
<status starttime="20170809 03:58:50.585" status="PASS" endtime="20170809 03:58:50.588"></status>
</kw>
<status starttime="20170809 03:58:50.584" status="PASS" endtime="20170809 03:58:50.588"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:50.588">Delete All Sessions</msg>
<status starttime="20170809 03:58:50.588" status="PASS" endtime="20170809 03:58:50.589"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:50.589">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:49.788" status="PASS" endtime="20170809 03:58:50.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.589">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:50.589" status="PASS" endtime="20170809 03:58:50.589"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.590">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:50.590">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:50.590">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:50.590" status="PASS" endtime="20170809 03:58:50.590"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:50.590">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:58:49.787" status="PASS" endtime="20170809 03:58:50.591"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:50.591">${power_state} = On</msg>
<status starttime="20170809 03:58:49.787" status="PASS" endtime="20170809 03:58:50.591"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:58:50.591" status="PASS" endtime="20170809 03:58:50.591"></status>
</kw>
<status starttime="20170809 03:58:49.786" status="PASS" endtime="20170809 03:58:50.591"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.595">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:50.595" status="PASS" endtime="20170809 03:58:50.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:50.596" status="PASS" endtime="20170809 03:58:50.596"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.597">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:50.597" status="PASS" endtime="20170809 03:58:50.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.598">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:50.597" status="PASS" endtime="20170809 03:58:50.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.934">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:50.598" status="PASS" endtime="20170809 03:58:50.934"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:50.935">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:50.935">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:50.598" status="PASS" endtime="20170809 03:58:50.935"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.936">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:50.935" status="PASS" endtime="20170809 03:58:50.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:50.936" status="PASS" endtime="20170809 03:58:50.937"></status>
</kw>
<status starttime="20170809 03:58:50.594" status="PASS" endtime="20170809 03:58:50.937"></status>
</kw>
<status starttime="20170809 03:58:50.594" status="PASS" endtime="20170809 03:58:50.937"></status>
</kw>
<status starttime="20170809 03:58:50.593" status="PASS" endtime="20170809 03:58:50.937"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.938">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:58:50.937" status="PASS" endtime="20170809 03:58:50.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:50.940">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:50.939" status="PASS" endtime="20170809 03:58:50.940"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:50.941">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:58:50.940" status="PASS" endtime="20170809 03:58:50.941"></status>
</kw>
<status starttime="20170809 03:58:50.940" status="PASS" endtime="20170809 03:58:50.941"></status>
</kw>
<status starttime="20170809 03:58:50.938" status="PASS" endtime="20170809 03:58:50.941"></status>
</kw>
<status starttime="20170809 03:58:50.938" status="PASS" endtime="20170809 03:58:50.941"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.279">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:51.279">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:50.941" status="PASS" endtime="20170809 03:58:51.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.281">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:51.280" status="PASS" endtime="20170809 03:58:51.281"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:51.282">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:51.282" status="PASS" endtime="20170809 03:58:51.282"></status>
</kw>
<status starttime="20170809 03:58:51.281" status="PASS" endtime="20170809 03:58:51.282"></status>
</kw>
<status starttime="20170809 03:58:51.280" status="PASS" endtime="20170809 03:58:51.282"></status>
</kw>
<status starttime="20170809 03:58:51.279" status="PASS" endtime="20170809 03:58:51.282"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:51.283">Delete All Sessions</msg>
<status starttime="20170809 03:58:51.282" status="PASS" endtime="20170809 03:58:51.283"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:51.283">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:50.593" status="PASS" endtime="20170809 03:58:51.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:51.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:51.283" status="PASS" endtime="20170809 03:58:51.284"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.284">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:51.284">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:51.284">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:51.284" status="PASS" endtime="20170809 03:58:51.284"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:51.285">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:58:50.592" status="PASS" endtime="20170809 03:58:51.285"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:51.285">${host_state} = Running</msg>
<status starttime="20170809 03:58:50.592" status="PASS" endtime="20170809 03:58:51.285"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:58:51.285" status="PASS" endtime="20170809 03:58:51.286"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:51.291">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:58:51.290" status="PASS" endtime="20170809 03:58:51.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:58:51.292" status="PASS" endtime="20170809 03:58:51.292"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.293">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:58:51.293" status="PASS" endtime="20170809 03:58:51.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.294">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:58:51.294" status="PASS" endtime="20170809 03:58:51.294"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:51.479">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:58:51.295" status="PASS" endtime="20170809 03:58:51.479"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:51.479">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:58:51.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:51.295" status="PASS" endtime="20170809 03:58:51.480"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:51.480">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:51.480" status="PASS" endtime="20170809 03:58:51.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:51.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:51.481" status="PASS" endtime="20170809 03:58:51.481"></status>
</kw>
<status starttime="20170809 03:58:51.290" status="PASS" endtime="20170809 03:58:51.481"></status>
</kw>
<status starttime="20170809 03:58:51.289" status="PASS" endtime="20170809 03:58:51.481"></status>
</kw>
<status starttime="20170809 03:58:51.288" status="PASS" endtime="20170809 03:58:51.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.482">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:58:51.482" status="PASS" endtime="20170809 03:58:51.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.484">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:58:51.484" status="PASS" endtime="20170809 03:58:51.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:51.485">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:58:51.485" status="PASS" endtime="20170809 03:58:51.485"></status>
</kw>
<status starttime="20170809 03:58:51.484" status="PASS" endtime="20170809 03:58:51.485"></status>
</kw>
<status starttime="20170809 03:58:51.483" status="PASS" endtime="20170809 03:58:51.485"></status>
</kw>
<status starttime="20170809 03:58:51.482" status="PASS" endtime="20170809 03:58:51.486"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.583">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:58:51.583">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:51.486" status="PASS" endtime="20170809 03:58:51.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.585">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:51.584" status="PASS" endtime="20170809 03:58:51.585"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:51.586">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:58:51.586" status="PASS" endtime="20170809 03:58:51.586"></status>
</kw>
<status starttime="20170809 03:58:51.585" status="PASS" endtime="20170809 03:58:51.586"></status>
</kw>
<status starttime="20170809 03:58:51.584" status="PASS" endtime="20170809 03:58:51.586"></status>
</kw>
<status starttime="20170809 03:58:51.583" status="PASS" endtime="20170809 03:58:51.586"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:58:51.587">Delete All Sessions</msg>
<status starttime="20170809 03:58:51.587" status="PASS" endtime="20170809 03:58:51.587"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:51.587">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:58:51.287" status="PASS" endtime="20170809 03:58:51.587"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:58:51.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:58:51.587" status="PASS" endtime="20170809 03:58:51.588"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:58:51.588">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:58:51.588">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:58:51.588">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:58:51.588" status="PASS" endtime="20170809 03:58:51.588"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:51.589">${state} = Off</msg>
<status starttime="20170809 03:58:51.287" status="PASS" endtime="20170809 03:58:51.589"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:58:51.589">${boot_progress} = Off</msg>
<status starttime="20170809 03:58:51.286" status="PASS" endtime="20170809 03:58:51.589"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:58:51.590">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 03:58:51.589" status="FAIL" endtime="20170809 03:58:51.590"></status>
</kw>
<status starttime="20170809 03:58:51.286" status="FAIL" endtime="20170809 03:58:51.590"></status>
</kw>
<status starttime="20170809 03:58:49.786" status="FAIL" endtime="20170809 03:58:51.590"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:01.595">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:01.595" status="PASS" endtime="20170809 03:59:01.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:01.596" status="PASS" endtime="20170809 03:59:01.596"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.597">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:01.597" status="PASS" endtime="20170809 03:59:01.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.598">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:01.597" status="PASS" endtime="20170809 03:59:01.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:01.810">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:01.598" status="PASS" endtime="20170809 03:59:01.810"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:01.810">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:01.811">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:01.598" status="PASS" endtime="20170809 03:59:01.811"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:01.812">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:01.811" status="PASS" endtime="20170809 03:59:01.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:01.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:01.812" status="PASS" endtime="20170809 03:59:01.813"></status>
</kw>
<status starttime="20170809 03:59:01.594" status="PASS" endtime="20170809 03:59:01.813"></status>
</kw>
<status starttime="20170809 03:59:01.594" status="PASS" endtime="20170809 03:59:01.813"></status>
</kw>
<status starttime="20170809 03:59:01.593" status="PASS" endtime="20170809 03:59:01.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.814">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:59:01.814" status="PASS" endtime="20170809 03:59:01.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.818">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:01.816" status="PASS" endtime="20170809 03:59:01.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:01.819">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:01.819" status="PASS" endtime="20170809 03:59:01.819"></status>
</kw>
<status starttime="20170809 03:59:01.818" status="PASS" endtime="20170809 03:59:01.820"></status>
</kw>
<status starttime="20170809 03:59:01.815" status="PASS" endtime="20170809 03:59:01.820"></status>
</kw>
<status starttime="20170809 03:59:01.815" status="PASS" endtime="20170809 03:59:01.820"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.891">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:01.892">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:01.820" status="PASS" endtime="20170809 03:59:01.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.893">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:01.893" status="PASS" endtime="20170809 03:59:01.893"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:01.894">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:01.894" status="PASS" endtime="20170809 03:59:01.894"></status>
</kw>
<status starttime="20170809 03:59:01.894" status="PASS" endtime="20170809 03:59:01.895"></status>
</kw>
<status starttime="20170809 03:59:01.892" status="PASS" endtime="20170809 03:59:01.895"></status>
</kw>
<status starttime="20170809 03:59:01.892" status="PASS" endtime="20170809 03:59:01.895"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:01.895">Delete All Sessions</msg>
<status starttime="20170809 03:59:01.895" status="PASS" endtime="20170809 03:59:01.895"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:01.895">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:01.593" status="PASS" endtime="20170809 03:59:01.895"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:01.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:01.896" status="PASS" endtime="20170809 03:59:01.896"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.897">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:01.897">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:01.897">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:01.896" status="PASS" endtime="20170809 03:59:01.897"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:01.897">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:59:01.592" status="PASS" endtime="20170809 03:59:01.897"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:01.898">${power_state} = On</msg>
<status starttime="20170809 03:59:01.592" status="PASS" endtime="20170809 03:59:01.898"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:59:01.898" status="PASS" endtime="20170809 03:59:01.898"></status>
</kw>
<status starttime="20170809 03:59:01.591" status="PASS" endtime="20170809 03:59:01.898"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:01.902">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:01.902" status="PASS" endtime="20170809 03:59:01.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.903">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:01.903" status="PASS" endtime="20170809 03:59:01.903"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.904">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:01.903" status="PASS" endtime="20170809 03:59:01.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:01.904">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:01.904" status="PASS" endtime="20170809 03:59:01.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.112">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:01.905" status="PASS" endtime="20170809 03:59:02.112"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:02.112">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:02.113">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:01.905" status="PASS" endtime="20170809 03:59:02.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.114">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:02.113" status="PASS" endtime="20170809 03:59:02.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:02.114" status="PASS" endtime="20170809 03:59:02.115"></status>
</kw>
<status starttime="20170809 03:59:01.901" status="PASS" endtime="20170809 03:59:02.115"></status>
</kw>
<status starttime="20170809 03:59:01.901" status="PASS" endtime="20170809 03:59:02.115"></status>
</kw>
<status starttime="20170809 03:59:01.900" status="PASS" endtime="20170809 03:59:02.115"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.116">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:59:02.115" status="PASS" endtime="20170809 03:59:02.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.118">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:02.117" status="PASS" endtime="20170809 03:59:02.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.119">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:02.119" status="PASS" endtime="20170809 03:59:02.119"></status>
</kw>
<status starttime="20170809 03:59:02.118" status="PASS" endtime="20170809 03:59:02.119"></status>
</kw>
<status starttime="20170809 03:59:02.116" status="PASS" endtime="20170809 03:59:02.119"></status>
</kw>
<status starttime="20170809 03:59:02.116" status="PASS" endtime="20170809 03:59:02.119"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.242">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:02.243">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:02.119" status="PASS" endtime="20170809 03:59:02.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.244">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:02.244" status="PASS" endtime="20170809 03:59:02.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.245">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:02.245" status="PASS" endtime="20170809 03:59:02.245"></status>
</kw>
<status starttime="20170809 03:59:02.245" status="PASS" endtime="20170809 03:59:02.246"></status>
</kw>
<status starttime="20170809 03:59:02.243" status="PASS" endtime="20170809 03:59:02.246"></status>
</kw>
<status starttime="20170809 03:59:02.243" status="PASS" endtime="20170809 03:59:02.246"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:02.246">Delete All Sessions</msg>
<status starttime="20170809 03:59:02.246" status="PASS" endtime="20170809 03:59:02.246"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:02.247">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:01.899" status="PASS" endtime="20170809 03:59:02.247"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.247">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:02.247" status="PASS" endtime="20170809 03:59:02.247"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.248">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:02.248">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:02.248">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:02.247" status="PASS" endtime="20170809 03:59:02.248"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:02.248">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:59:01.899" status="PASS" endtime="20170809 03:59:02.248"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:02.249">${host_state} = Running</msg>
<status starttime="20170809 03:59:01.898" status="PASS" endtime="20170809 03:59:02.249"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:59:02.249" status="PASS" endtime="20170809 03:59:02.249"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.253">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:02.253" status="PASS" endtime="20170809 03:59:02.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.254">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:02.254" status="PASS" endtime="20170809 03:59:02.254"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.255">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:02.255" status="PASS" endtime="20170809 03:59:02.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.256">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:02.255" status="PASS" endtime="20170809 03:59:02.256"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.700">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:02.256" status="PASS" endtime="20170809 03:59:02.700"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:02.700">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:02.700">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:02.256" status="PASS" endtime="20170809 03:59:02.700"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.701">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:02.700" status="PASS" endtime="20170809 03:59:02.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:02.701" status="PASS" endtime="20170809 03:59:02.702"></status>
</kw>
<status starttime="20170809 03:59:02.252" status="PASS" endtime="20170809 03:59:02.702"></status>
</kw>
<status starttime="20170809 03:59:02.252" status="PASS" endtime="20170809 03:59:02.702"></status>
</kw>
<status starttime="20170809 03:59:02.252" status="PASS" endtime="20170809 03:59:02.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.703">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:59:02.702" status="PASS" endtime="20170809 03:59:02.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.705">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:02.704" status="PASS" endtime="20170809 03:59:02.705"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.706">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:02.705" status="PASS" endtime="20170809 03:59:02.706"></status>
</kw>
<status starttime="20170809 03:59:02.705" status="PASS" endtime="20170809 03:59:02.706"></status>
</kw>
<status starttime="20170809 03:59:02.703" status="PASS" endtime="20170809 03:59:02.706"></status>
</kw>
<status starttime="20170809 03:59:02.703" status="PASS" endtime="20170809 03:59:02.706"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.980">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:02.980">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:02.706" status="PASS" endtime="20170809 03:59:02.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.982">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:02.982" status="PASS" endtime="20170809 03:59:02.983"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.983">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:02.983" status="PASS" endtime="20170809 03:59:02.984"></status>
</kw>
<status starttime="20170809 03:59:02.983" status="PASS" endtime="20170809 03:59:02.984"></status>
</kw>
<status starttime="20170809 03:59:02.981" status="PASS" endtime="20170809 03:59:02.984"></status>
</kw>
<status starttime="20170809 03:59:02.981" status="PASS" endtime="20170809 03:59:02.984"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:02.984">Delete All Sessions</msg>
<status starttime="20170809 03:59:02.984" status="PASS" endtime="20170809 03:59:02.984"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:02.985">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:02.250" status="PASS" endtime="20170809 03:59:02.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:02.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:02.985" status="PASS" endtime="20170809 03:59:02.985"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:02.986">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:02.986">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:02.986">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:02.986" status="PASS" endtime="20170809 03:59:02.986"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:02.987">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:02.250" status="PASS" endtime="20170809 03:59:02.987"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:02.987">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:02.250" status="PASS" endtime="20170809 03:59:02.987"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:59:02.988">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:59:02.987" status="FAIL" endtime="20170809 03:59:02.988"></status>
</kw>
<status starttime="20170809 03:59:02.249" status="FAIL" endtime="20170809 03:59:02.988"></status>
</kw>
<status starttime="20170809 03:59:01.591" status="FAIL" endtime="20170809 03:59:02.988"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:12.993">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:12.993" status="PASS" endtime="20170809 03:59:12.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:12.994">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:12.994" status="PASS" endtime="20170809 03:59:12.994"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:12.995">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:12.995" status="PASS" endtime="20170809 03:59:12.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:12.996">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:12.995" status="PASS" endtime="20170809 03:59:12.996"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.258">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:12.996" status="PASS" endtime="20170809 03:59:13.259"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.259">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:13.259">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:12.996" status="PASS" endtime="20170809 03:59:13.259"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.260">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:13.259" status="PASS" endtime="20170809 03:59:13.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:13.260" status="PASS" endtime="20170809 03:59:13.260"></status>
</kw>
<status starttime="20170809 03:59:12.993" status="PASS" endtime="20170809 03:59:13.261"></status>
</kw>
<status starttime="20170809 03:59:12.992" status="PASS" endtime="20170809 03:59:13.261"></status>
</kw>
<status starttime="20170809 03:59:12.991" status="PASS" endtime="20170809 03:59:13.261"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.261">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:59:13.261" status="PASS" endtime="20170809 03:59:13.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.263">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:13.263" status="PASS" endtime="20170809 03:59:13.264"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.264">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:13.264" status="PASS" endtime="20170809 03:59:13.265"></status>
</kw>
<status starttime="20170809 03:59:13.264" status="PASS" endtime="20170809 03:59:13.265"></status>
</kw>
<status starttime="20170809 03:59:13.262" status="PASS" endtime="20170809 03:59:13.265"></status>
</kw>
<status starttime="20170809 03:59:13.262" status="PASS" endtime="20170809 03:59:13.265"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.342">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:13.343">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:13.265" status="PASS" endtime="20170809 03:59:13.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.344">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:13.344" status="PASS" endtime="20170809 03:59:13.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.345">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:13.345" status="PASS" endtime="20170809 03:59:13.345"></status>
</kw>
<status starttime="20170809 03:59:13.345" status="PASS" endtime="20170809 03:59:13.346"></status>
</kw>
<status starttime="20170809 03:59:13.343" status="PASS" endtime="20170809 03:59:13.346"></status>
</kw>
<status starttime="20170809 03:59:13.343" status="PASS" endtime="20170809 03:59:13.346"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:13.346">Delete All Sessions</msg>
<status starttime="20170809 03:59:13.346" status="PASS" endtime="20170809 03:59:13.346"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.346">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:12.991" status="PASS" endtime="20170809 03:59:13.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:13.347" status="PASS" endtime="20170809 03:59:13.347"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.348">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:13.348">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:13.348">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:13.347" status="PASS" endtime="20170809 03:59:13.348"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.348">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:59:12.990" status="PASS" endtime="20170809 03:59:13.348"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.349">${power_state} = On</msg>
<status starttime="20170809 03:59:12.990" status="PASS" endtime="20170809 03:59:13.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:59:13.349" status="PASS" endtime="20170809 03:59:13.349"></status>
</kw>
<status starttime="20170809 03:59:12.989" status="PASS" endtime="20170809 03:59:13.349"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.353">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:13.352" status="PASS" endtime="20170809 03:59:13.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.354">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:13.354" status="PASS" endtime="20170809 03:59:13.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.355">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:13.354" status="PASS" endtime="20170809 03:59:13.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.355">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:13.355" status="PASS" endtime="20170809 03:59:13.355"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.532">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:13.356" status="PASS" endtime="20170809 03:59:13.532"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.532">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:13.533">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:13.356" status="PASS" endtime="20170809 03:59:13.533"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.533">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:13.533" status="PASS" endtime="20170809 03:59:13.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:13.534" status="PASS" endtime="20170809 03:59:13.535"></status>
</kw>
<status starttime="20170809 03:59:13.352" status="PASS" endtime="20170809 03:59:13.535"></status>
</kw>
<status starttime="20170809 03:59:13.351" status="PASS" endtime="20170809 03:59:13.535"></status>
</kw>
<status starttime="20170809 03:59:13.351" status="PASS" endtime="20170809 03:59:13.535"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.536">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:59:13.536" status="PASS" endtime="20170809 03:59:13.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.538">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:13.538" status="PASS" endtime="20170809 03:59:13.538"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.539">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:13.539" status="PASS" endtime="20170809 03:59:13.539"></status>
</kw>
<status starttime="20170809 03:59:13.538" status="PASS" endtime="20170809 03:59:13.539"></status>
</kw>
<status starttime="20170809 03:59:13.537" status="PASS" endtime="20170809 03:59:13.540"></status>
</kw>
<status starttime="20170809 03:59:13.536" status="PASS" endtime="20170809 03:59:13.540"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.656">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:13.656">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:13.540" status="PASS" endtime="20170809 03:59:13.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.658">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:13.657" status="PASS" endtime="20170809 03:59:13.658"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.659">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:13.659" status="PASS" endtime="20170809 03:59:13.659"></status>
</kw>
<status starttime="20170809 03:59:13.658" status="PASS" endtime="20170809 03:59:13.659"></status>
</kw>
<status starttime="20170809 03:59:13.657" status="PASS" endtime="20170809 03:59:13.659"></status>
</kw>
<status starttime="20170809 03:59:13.656" status="PASS" endtime="20170809 03:59:13.659"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:13.660">Delete All Sessions</msg>
<status starttime="20170809 03:59:13.660" status="PASS" endtime="20170809 03:59:13.660"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.660">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:13.350" status="PASS" endtime="20170809 03:59:13.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:13.660" status="PASS" endtime="20170809 03:59:13.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.661">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:13.661">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:13.661">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:13.661" status="PASS" endtime="20170809 03:59:13.661"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.662">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:59:13.350" status="PASS" endtime="20170809 03:59:13.662"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.662">${host_state} = Running</msg>
<status starttime="20170809 03:59:13.349" status="PASS" endtime="20170809 03:59:13.662"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:59:13.662" status="PASS" endtime="20170809 03:59:13.663"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.667">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:13.666" status="PASS" endtime="20170809 03:59:13.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:13.668" status="PASS" endtime="20170809 03:59:13.668"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.668">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:13.668" status="PASS" endtime="20170809 03:59:13.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.669">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:13.669" status="PASS" endtime="20170809 03:59:13.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.862">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:13.670" status="PASS" endtime="20170809 03:59:13.862"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.862">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:13.862">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:13.669" status="PASS" endtime="20170809 03:59:13.862"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.863">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:13.863" status="PASS" endtime="20170809 03:59:13.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:13.863" status="PASS" endtime="20170809 03:59:13.864"></status>
</kw>
<status starttime="20170809 03:59:13.666" status="PASS" endtime="20170809 03:59:13.864"></status>
</kw>
<status starttime="20170809 03:59:13.666" status="PASS" endtime="20170809 03:59:13.864"></status>
</kw>
<status starttime="20170809 03:59:13.665" status="PASS" endtime="20170809 03:59:13.864"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.865">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:59:13.865" status="PASS" endtime="20170809 03:59:13.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.867">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:13.866" status="PASS" endtime="20170809 03:59:13.867"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.868">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:13.868" status="PASS" endtime="20170809 03:59:13.868"></status>
</kw>
<status starttime="20170809 03:59:13.867" status="PASS" endtime="20170809 03:59:13.868"></status>
</kw>
<status starttime="20170809 03:59:13.866" status="PASS" endtime="20170809 03:59:13.868"></status>
</kw>
<status starttime="20170809 03:59:13.865" status="PASS" endtime="20170809 03:59:13.868"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.951">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:13.951">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:13.869" status="PASS" endtime="20170809 03:59:13.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.953">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:13.952" status="PASS" endtime="20170809 03:59:13.953"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.954">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:13.954" status="PASS" endtime="20170809 03:59:13.954"></status>
</kw>
<status starttime="20170809 03:59:13.953" status="PASS" endtime="20170809 03:59:13.954"></status>
</kw>
<status starttime="20170809 03:59:13.952" status="PASS" endtime="20170809 03:59:13.954"></status>
</kw>
<status starttime="20170809 03:59:13.951" status="PASS" endtime="20170809 03:59:13.954"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:13.955">Delete All Sessions</msg>
<status starttime="20170809 03:59:13.954" status="PASS" endtime="20170809 03:59:13.955"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.955">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:13.664" status="PASS" endtime="20170809 03:59:13.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:13.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:13.955" status="PASS" endtime="20170809 03:59:13.956"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:13.956">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:13.956">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:13.956">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:13.956" status="PASS" endtime="20170809 03:59:13.956"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.957">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:13.663" status="PASS" endtime="20170809 03:59:13.957"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:13.957">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:13.663" status="PASS" endtime="20170809 03:59:13.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:59:13.958">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:59:13.957" status="FAIL" endtime="20170809 03:59:13.958"></status>
</kw>
<status starttime="20170809 03:59:13.663" status="FAIL" endtime="20170809 03:59:13.958"></status>
</kw>
<status starttime="20170809 03:59:12.989" status="FAIL" endtime="20170809 03:59:13.958"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:23.963">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:23.963" status="PASS" endtime="20170809 03:59:23.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:23.964">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:23.964" status="PASS" endtime="20170809 03:59:23.964"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:23.965">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:23.964" status="PASS" endtime="20170809 03:59:23.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:23.965">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:23.965" status="PASS" endtime="20170809 03:59:23.966"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.218">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:23.966" status="PASS" endtime="20170809 03:59:24.218"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.218">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:24.218">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:23.966" status="PASS" endtime="20170809 03:59:24.218"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.219">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:24.219" status="PASS" endtime="20170809 03:59:24.219"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.220">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:24.219" status="PASS" endtime="20170809 03:59:24.220"></status>
</kw>
<status starttime="20170809 03:59:23.962" status="PASS" endtime="20170809 03:59:24.220"></status>
</kw>
<status starttime="20170809 03:59:23.962" status="PASS" endtime="20170809 03:59:24.220"></status>
</kw>
<status starttime="20170809 03:59:23.961" status="PASS" endtime="20170809 03:59:24.220"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.221">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:59:24.220" status="PASS" endtime="20170809 03:59:24.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.223">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:24.222" status="PASS" endtime="20170809 03:59:24.223"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.224">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:24.223" status="PASS" endtime="20170809 03:59:24.224"></status>
</kw>
<status starttime="20170809 03:59:24.223" status="PASS" endtime="20170809 03:59:24.224"></status>
</kw>
<status starttime="20170809 03:59:24.221" status="PASS" endtime="20170809 03:59:24.224"></status>
</kw>
<status starttime="20170809 03:59:24.221" status="PASS" endtime="20170809 03:59:24.224"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.288">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:24.288">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:24.225" status="PASS" endtime="20170809 03:59:24.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.291">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:24.290" status="PASS" endtime="20170809 03:59:24.291"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.292">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:24.292" status="PASS" endtime="20170809 03:59:24.293"></status>
</kw>
<status starttime="20170809 03:59:24.291" status="PASS" endtime="20170809 03:59:24.293"></status>
</kw>
<status starttime="20170809 03:59:24.289" status="PASS" endtime="20170809 03:59:24.293"></status>
</kw>
<status starttime="20170809 03:59:24.289" status="PASS" endtime="20170809 03:59:24.293"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:24.293">Delete All Sessions</msg>
<status starttime="20170809 03:59:24.293" status="PASS" endtime="20170809 03:59:24.293"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.294">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:23.960" status="PASS" endtime="20170809 03:59:24.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:24.294" status="PASS" endtime="20170809 03:59:24.294"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.295">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:24.295">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:24.295">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:24.294" status="PASS" endtime="20170809 03:59:24.295"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.295">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:59:23.960" status="PASS" endtime="20170809 03:59:24.295"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.296">${power_state} = On</msg>
<status starttime="20170809 03:59:23.960" status="PASS" endtime="20170809 03:59:24.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:59:24.296" status="PASS" endtime="20170809 03:59:24.296"></status>
</kw>
<status starttime="20170809 03:59:23.959" status="PASS" endtime="20170809 03:59:24.296"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.300">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:24.300" status="PASS" endtime="20170809 03:59:24.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:24.301" status="PASS" endtime="20170809 03:59:24.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.302">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:24.302" status="PASS" endtime="20170809 03:59:24.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:24.302" status="PASS" endtime="20170809 03:59:24.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.485">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:24.303" status="PASS" endtime="20170809 03:59:24.485"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.485">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:24.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:24.303" status="PASS" endtime="20170809 03:59:24.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.486">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:24.486" status="PASS" endtime="20170809 03:59:24.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:24.487" status="PASS" endtime="20170809 03:59:24.487"></status>
</kw>
<status starttime="20170809 03:59:24.299" status="PASS" endtime="20170809 03:59:24.487"></status>
</kw>
<status starttime="20170809 03:59:24.299" status="PASS" endtime="20170809 03:59:24.487"></status>
</kw>
<status starttime="20170809 03:59:24.298" status="PASS" endtime="20170809 03:59:24.488"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.488">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:59:24.488" status="PASS" endtime="20170809 03:59:24.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.490">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:24.490" status="PASS" endtime="20170809 03:59:24.490"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.491">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:24.491" status="PASS" endtime="20170809 03:59:24.491"></status>
</kw>
<status starttime="20170809 03:59:24.490" status="PASS" endtime="20170809 03:59:24.491"></status>
</kw>
<status starttime="20170809 03:59:24.489" status="PASS" endtime="20170809 03:59:24.491"></status>
</kw>
<status starttime="20170809 03:59:24.488" status="PASS" endtime="20170809 03:59:24.492"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.581">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:24.581">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:24.492" status="PASS" endtime="20170809 03:59:24.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.583">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:24.583" status="PASS" endtime="20170809 03:59:24.583"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.584">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:24.584" status="PASS" endtime="20170809 03:59:24.584"></status>
</kw>
<status starttime="20170809 03:59:24.583" status="PASS" endtime="20170809 03:59:24.584"></status>
</kw>
<status starttime="20170809 03:59:24.582" status="PASS" endtime="20170809 03:59:24.584"></status>
</kw>
<status starttime="20170809 03:59:24.582" status="PASS" endtime="20170809 03:59:24.585"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:24.585">Delete All Sessions</msg>
<status starttime="20170809 03:59:24.585" status="PASS" endtime="20170809 03:59:24.585"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:24.298" status="PASS" endtime="20170809 03:59:24.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:24.586" status="PASS" endtime="20170809 03:59:24.586"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.586">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:24.587">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:24.587">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:24.586" status="PASS" endtime="20170809 03:59:24.587"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.587">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:59:24.297" status="PASS" endtime="20170809 03:59:24.587"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.587">${host_state} = Running</msg>
<status starttime="20170809 03:59:24.296" status="PASS" endtime="20170809 03:59:24.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:59:24.588" status="PASS" endtime="20170809 03:59:24.588"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.592">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:24.592" status="PASS" endtime="20170809 03:59:24.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.593">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:24.593" status="PASS" endtime="20170809 03:59:24.593"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.594">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:24.594" status="PASS" endtime="20170809 03:59:24.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.595">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:24.595" status="PASS" endtime="20170809 03:59:24.595"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.774">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:24.596" status="PASS" endtime="20170809 03:59:24.774"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.774">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:24.774">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:24.596" status="PASS" endtime="20170809 03:59:24.774"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.775">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:24.774" status="PASS" endtime="20170809 03:59:24.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:24.775" status="PASS" endtime="20170809 03:59:24.775"></status>
</kw>
<status starttime="20170809 03:59:24.591" status="PASS" endtime="20170809 03:59:24.776"></status>
</kw>
<status starttime="20170809 03:59:24.591" status="PASS" endtime="20170809 03:59:24.776"></status>
</kw>
<status starttime="20170809 03:59:24.590" status="PASS" endtime="20170809 03:59:24.776"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.776">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:59:24.776" status="PASS" endtime="20170809 03:59:24.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.779">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:24.778" status="PASS" endtime="20170809 03:59:24.779"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.783">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:24.779" status="PASS" endtime="20170809 03:59:24.783"></status>
</kw>
<status starttime="20170809 03:59:24.779" status="PASS" endtime="20170809 03:59:24.783"></status>
</kw>
<status starttime="20170809 03:59:24.777" status="PASS" endtime="20170809 03:59:24.783"></status>
</kw>
<status starttime="20170809 03:59:24.777" status="PASS" endtime="20170809 03:59:24.783"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.869">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:24.869">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:24.783" status="PASS" endtime="20170809 03:59:24.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.871">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:24.870" status="PASS" endtime="20170809 03:59:24.871"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.872">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:24.871" status="PASS" endtime="20170809 03:59:24.872"></status>
</kw>
<status starttime="20170809 03:59:24.871" status="PASS" endtime="20170809 03:59:24.872"></status>
</kw>
<status starttime="20170809 03:59:24.870" status="PASS" endtime="20170809 03:59:24.872"></status>
</kw>
<status starttime="20170809 03:59:24.869" status="PASS" endtime="20170809 03:59:24.872"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:24.872">Delete All Sessions</msg>
<status starttime="20170809 03:59:24.872" status="PASS" endtime="20170809 03:59:24.873"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.873">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:24.590" status="PASS" endtime="20170809 03:59:24.873"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:24.873">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:24.873" status="PASS" endtime="20170809 03:59:24.873"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:24.874">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:24.874">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:24.874">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:24.874" status="PASS" endtime="20170809 03:59:24.874"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.874">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:24.589" status="PASS" endtime="20170809 03:59:24.874"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:24.875">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:24.588" status="PASS" endtime="20170809 03:59:24.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:59:24.875">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:59:24.875" status="FAIL" endtime="20170809 03:59:24.875"></status>
</kw>
<status starttime="20170809 03:59:24.588" status="FAIL" endtime="20170809 03:59:24.876"></status>
</kw>
<status starttime="20170809 03:59:23.959" status="FAIL" endtime="20170809 03:59:24.876"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:34.882">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:34.881" status="PASS" endtime="20170809 03:59:34.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:34.883">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:34.882" status="PASS" endtime="20170809 03:59:34.883"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:34.883">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:34.883" status="PASS" endtime="20170809 03:59:34.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:34.884">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:34.884" status="PASS" endtime="20170809 03:59:34.884"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.066">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:34.885" status="PASS" endtime="20170809 03:59:35.066"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.066">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:35.066">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:34.884" status="PASS" endtime="20170809 03:59:35.066"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.067">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:35.067" status="PASS" endtime="20170809 03:59:35.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.068">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:35.067" status="PASS" endtime="20170809 03:59:35.068"></status>
</kw>
<status starttime="20170809 03:59:34.881" status="PASS" endtime="20170809 03:59:35.068"></status>
</kw>
<status starttime="20170809 03:59:34.880" status="PASS" endtime="20170809 03:59:35.068"></status>
</kw>
<status starttime="20170809 03:59:34.880" status="PASS" endtime="20170809 03:59:35.068"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.069">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:59:35.068" status="PASS" endtime="20170809 03:59:35.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.071">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:35.070" status="PASS" endtime="20170809 03:59:35.071"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.072">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:35.072" status="PASS" endtime="20170809 03:59:35.072"></status>
</kw>
<status starttime="20170809 03:59:35.071" status="PASS" endtime="20170809 03:59:35.072"></status>
</kw>
<status starttime="20170809 03:59:35.070" status="PASS" endtime="20170809 03:59:35.072"></status>
</kw>
<status starttime="20170809 03:59:35.069" status="PASS" endtime="20170809 03:59:35.072"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.136">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:35.136">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:35.072" status="PASS" endtime="20170809 03:59:35.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.138">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:35.137" status="PASS" endtime="20170809 03:59:35.138"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.139">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:35.138" status="PASS" endtime="20170809 03:59:35.139"></status>
</kw>
<status starttime="20170809 03:59:35.138" status="PASS" endtime="20170809 03:59:35.139"></status>
</kw>
<status starttime="20170809 03:59:35.137" status="PASS" endtime="20170809 03:59:35.139"></status>
</kw>
<status starttime="20170809 03:59:35.136" status="PASS" endtime="20170809 03:59:35.139"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:35.139">Delete All Sessions</msg>
<status starttime="20170809 03:59:35.139" status="PASS" endtime="20170809 03:59:35.140"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:34.879" status="PASS" endtime="20170809 03:59:35.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:35.140" status="PASS" endtime="20170809 03:59:35.141"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.141">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:35.141">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:35.141">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:35.141" status="PASS" endtime="20170809 03:59:35.141"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.142">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:59:34.878" status="PASS" endtime="20170809 03:59:35.142"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.142">${power_state} = On</msg>
<status starttime="20170809 03:59:34.878" status="PASS" endtime="20170809 03:59:35.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:59:35.142" status="PASS" endtime="20170809 03:59:35.142"></status>
</kw>
<status starttime="20170809 03:59:34.877" status="PASS" endtime="20170809 03:59:35.143"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.146">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:35.146" status="PASS" endtime="20170809 03:59:35.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.148">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:35.147" status="PASS" endtime="20170809 03:59:35.148"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.148">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:35.148" status="PASS" endtime="20170809 03:59:35.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.149">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:35.149" status="PASS" endtime="20170809 03:59:35.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.335">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:35.150" status="PASS" endtime="20170809 03:59:35.335"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.335">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:35.336">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:35.149" status="PASS" endtime="20170809 03:59:35.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.336">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:35.336" status="PASS" endtime="20170809 03:59:35.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:35.337" status="PASS" endtime="20170809 03:59:35.337"></status>
</kw>
<status starttime="20170809 03:59:35.145" status="PASS" endtime="20170809 03:59:35.337"></status>
</kw>
<status starttime="20170809 03:59:35.145" status="PASS" endtime="20170809 03:59:35.337"></status>
</kw>
<status starttime="20170809 03:59:35.144" status="PASS" endtime="20170809 03:59:35.337"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.338">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:59:35.338" status="PASS" endtime="20170809 03:59:35.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.340">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:35.339" status="PASS" endtime="20170809 03:59:35.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.341">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:35.341" status="PASS" endtime="20170809 03:59:35.341"></status>
</kw>
<status starttime="20170809 03:59:35.340" status="PASS" endtime="20170809 03:59:35.341"></status>
</kw>
<status starttime="20170809 03:59:35.339" status="PASS" endtime="20170809 03:59:35.341"></status>
</kw>
<status starttime="20170809 03:59:35.338" status="PASS" endtime="20170809 03:59:35.342"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.441">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:35.441">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:35.342" status="PASS" endtime="20170809 03:59:35.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.443">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:35.443" status="PASS" endtime="20170809 03:59:35.443"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.444">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:35.444" status="PASS" endtime="20170809 03:59:35.444"></status>
</kw>
<status starttime="20170809 03:59:35.443" status="PASS" endtime="20170809 03:59:35.444"></status>
</kw>
<status starttime="20170809 03:59:35.442" status="PASS" endtime="20170809 03:59:35.444"></status>
</kw>
<status starttime="20170809 03:59:35.442" status="PASS" endtime="20170809 03:59:35.444"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:35.445">Delete All Sessions</msg>
<status starttime="20170809 03:59:35.445" status="PASS" endtime="20170809 03:59:35.445"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:35.144" status="PASS" endtime="20170809 03:59:35.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:35.445" status="PASS" endtime="20170809 03:59:35.446"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.446">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:35.446">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:35.446">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:35.446" status="PASS" endtime="20170809 03:59:35.447"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.447">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:59:35.143" status="PASS" endtime="20170809 03:59:35.447"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.447">${host_state} = Running</msg>
<status starttime="20170809 03:59:35.143" status="PASS" endtime="20170809 03:59:35.447"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:59:35.447" status="PASS" endtime="20170809 03:59:35.448"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.452">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:35.452" status="PASS" endtime="20170809 03:59:35.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:35.453" status="PASS" endtime="20170809 03:59:35.453"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.453">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:35.453" status="PASS" endtime="20170809 03:59:35.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:35.454" status="PASS" endtime="20170809 03:59:35.454"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.660">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:35.455" status="PASS" endtime="20170809 03:59:35.660"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.660">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:35.660">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:35.454" status="PASS" endtime="20170809 03:59:35.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.661">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:35.661" status="PASS" endtime="20170809 03:59:35.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:35.661" status="PASS" endtime="20170809 03:59:35.662"></status>
</kw>
<status starttime="20170809 03:59:35.451" status="PASS" endtime="20170809 03:59:35.662"></status>
</kw>
<status starttime="20170809 03:59:35.451" status="PASS" endtime="20170809 03:59:35.662"></status>
</kw>
<status starttime="20170809 03:59:35.450" status="PASS" endtime="20170809 03:59:35.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.663">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:59:35.662" status="PASS" endtime="20170809 03:59:35.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.666">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:35.665" status="PASS" endtime="20170809 03:59:35.666"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.667">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:35.667" status="PASS" endtime="20170809 03:59:35.668"></status>
</kw>
<status starttime="20170809 03:59:35.666" status="PASS" endtime="20170809 03:59:35.668"></status>
</kw>
<status starttime="20170809 03:59:35.663" status="PASS" endtime="20170809 03:59:35.668"></status>
</kw>
<status starttime="20170809 03:59:35.663" status="PASS" endtime="20170809 03:59:35.668"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.734">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:35.734">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:35.668" status="PASS" endtime="20170809 03:59:35.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.736">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:35.735" status="PASS" endtime="20170809 03:59:35.736"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.737">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:35.736" status="PASS" endtime="20170809 03:59:35.737"></status>
</kw>
<status starttime="20170809 03:59:35.736" status="PASS" endtime="20170809 03:59:35.737"></status>
</kw>
<status starttime="20170809 03:59:35.735" status="PASS" endtime="20170809 03:59:35.737"></status>
</kw>
<status starttime="20170809 03:59:35.734" status="PASS" endtime="20170809 03:59:35.737"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:35.738">Delete All Sessions</msg>
<status starttime="20170809 03:59:35.737" status="PASS" endtime="20170809 03:59:35.738"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.738">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:35.449" status="PASS" endtime="20170809 03:59:35.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:35.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:35.738" status="PASS" endtime="20170809 03:59:35.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:35.739">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:35.739">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:35.739">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:35.739" status="PASS" endtime="20170809 03:59:35.739"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.740">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:35.449" status="PASS" endtime="20170809 03:59:35.740"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:35.740">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:35.448" status="PASS" endtime="20170809 03:59:35.740"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:59:35.741">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:59:35.740" status="FAIL" endtime="20170809 03:59:35.741"></status>
</kw>
<status starttime="20170809 03:59:35.448" status="FAIL" endtime="20170809 03:59:35.741"></status>
</kw>
<status starttime="20170809 03:59:34.876" status="FAIL" endtime="20170809 03:59:35.741"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:45.746">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:45.746" status="PASS" endtime="20170809 03:59:45.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:45.747">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:45.747" status="PASS" endtime="20170809 03:59:45.747"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:45.748">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:45.747" status="PASS" endtime="20170809 03:59:45.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:45.749">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:45.748" status="PASS" endtime="20170809 03:59:45.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.012">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:45.749" status="PASS" endtime="20170809 03:59:46.012"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.012">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:46.012">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:45.749" status="PASS" endtime="20170809 03:59:46.012"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.013">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:46.012" status="PASS" endtime="20170809 03:59:46.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:46.013" status="PASS" endtime="20170809 03:59:46.014"></status>
</kw>
<status starttime="20170809 03:59:45.745" status="PASS" endtime="20170809 03:59:46.014"></status>
</kw>
<status starttime="20170809 03:59:45.745" status="PASS" endtime="20170809 03:59:46.014"></status>
</kw>
<status starttime="20170809 03:59:45.744" status="PASS" endtime="20170809 03:59:46.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.014">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:59:46.014" status="PASS" endtime="20170809 03:59:46.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.017">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:46.016" status="PASS" endtime="20170809 03:59:46.017"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.018">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:46.018" status="PASS" endtime="20170809 03:59:46.018"></status>
</kw>
<status starttime="20170809 03:59:46.017" status="PASS" endtime="20170809 03:59:46.018"></status>
</kw>
<status starttime="20170809 03:59:46.015" status="PASS" endtime="20170809 03:59:46.018"></status>
</kw>
<status starttime="20170809 03:59:46.015" status="PASS" endtime="20170809 03:59:46.018"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.150">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:46.150">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:46.018" status="PASS" endtime="20170809 03:59:46.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.152">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:46.151" status="PASS" endtime="20170809 03:59:46.152"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.153">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:46.153" status="PASS" endtime="20170809 03:59:46.153"></status>
</kw>
<status starttime="20170809 03:59:46.152" status="PASS" endtime="20170809 03:59:46.153"></status>
</kw>
<status starttime="20170809 03:59:46.151" status="PASS" endtime="20170809 03:59:46.153"></status>
</kw>
<status starttime="20170809 03:59:46.150" status="PASS" endtime="20170809 03:59:46.153"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:46.154">Delete All Sessions</msg>
<status starttime="20170809 03:59:46.154" status="PASS" endtime="20170809 03:59:46.154"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.154">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:45.743" status="PASS" endtime="20170809 03:59:46.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:46.154" status="PASS" endtime="20170809 03:59:46.155"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.155">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:46.155">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:46.155">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:46.155" status="PASS" endtime="20170809 03:59:46.155"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.156">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:59:45.743" status="PASS" endtime="20170809 03:59:46.156"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.156">${power_state} = On</msg>
<status starttime="20170809 03:59:45.743" status="PASS" endtime="20170809 03:59:46.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:59:46.156" status="PASS" endtime="20170809 03:59:46.157"></status>
</kw>
<status starttime="20170809 03:59:45.742" status="PASS" endtime="20170809 03:59:46.157"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.161">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:46.160" status="PASS" endtime="20170809 03:59:46.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.162">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:46.161" status="PASS" endtime="20170809 03:59:46.162"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.162">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:46.162" status="PASS" endtime="20170809 03:59:46.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.163">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:46.163" status="PASS" endtime="20170809 03:59:46.163"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.350">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:46.164" status="PASS" endtime="20170809 03:59:46.351"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.351">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:46.351">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:46.163" status="PASS" endtime="20170809 03:59:46.351"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.352">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:46.351" status="PASS" endtime="20170809 03:59:46.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.352">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:46.352" status="PASS" endtime="20170809 03:59:46.352"></status>
</kw>
<status starttime="20170809 03:59:46.159" status="PASS" endtime="20170809 03:59:46.352"></status>
</kw>
<status starttime="20170809 03:59:46.159" status="PASS" endtime="20170809 03:59:46.353"></status>
</kw>
<status starttime="20170809 03:59:46.158" status="PASS" endtime="20170809 03:59:46.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.353">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:59:46.353" status="PASS" endtime="20170809 03:59:46.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.355">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:46.355" status="PASS" endtime="20170809 03:59:46.355"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.356">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:46.356" status="PASS" endtime="20170809 03:59:46.356"></status>
</kw>
<status starttime="20170809 03:59:46.356" status="PASS" endtime="20170809 03:59:46.356"></status>
</kw>
<status starttime="20170809 03:59:46.354" status="PASS" endtime="20170809 03:59:46.357"></status>
</kw>
<status starttime="20170809 03:59:46.354" status="PASS" endtime="20170809 03:59:46.357"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.446">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:46.447">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:46.357" status="PASS" endtime="20170809 03:59:46.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.449">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:46.448" status="PASS" endtime="20170809 03:59:46.449"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.449">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:46.449" status="PASS" endtime="20170809 03:59:46.450"></status>
</kw>
<status starttime="20170809 03:59:46.449" status="PASS" endtime="20170809 03:59:46.450"></status>
</kw>
<status starttime="20170809 03:59:46.447" status="PASS" endtime="20170809 03:59:46.450"></status>
</kw>
<status starttime="20170809 03:59:46.447" status="PASS" endtime="20170809 03:59:46.450"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:46.450">Delete All Sessions</msg>
<status starttime="20170809 03:59:46.450" status="PASS" endtime="20170809 03:59:46.450"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.451">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:46.158" status="PASS" endtime="20170809 03:59:46.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:46.451" status="PASS" endtime="20170809 03:59:46.451"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.452">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:46.452">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:46.452">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:46.452" status="PASS" endtime="20170809 03:59:46.452"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.452">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:59:46.157" status="PASS" endtime="20170809 03:59:46.452"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.453">${host_state} = Running</msg>
<status starttime="20170809 03:59:46.157" status="PASS" endtime="20170809 03:59:46.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:59:46.453" status="PASS" endtime="20170809 03:59:46.453"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.457">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:46.457" status="PASS" endtime="20170809 03:59:46.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.458">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:46.458" status="PASS" endtime="20170809 03:59:46.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.459">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:46.459" status="PASS" endtime="20170809 03:59:46.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.460">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:46.459" status="PASS" endtime="20170809 03:59:46.460"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.656">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:46.460" status="PASS" endtime="20170809 03:59:46.656"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.656">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:46.657">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:46.460" status="PASS" endtime="20170809 03:59:46.657"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.657">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:46.657" status="PASS" endtime="20170809 03:59:46.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:46.658" status="PASS" endtime="20170809 03:59:46.658"></status>
</kw>
<status starttime="20170809 03:59:46.456" status="PASS" endtime="20170809 03:59:46.658"></status>
</kw>
<status starttime="20170809 03:59:46.456" status="PASS" endtime="20170809 03:59:46.658"></status>
</kw>
<status starttime="20170809 03:59:46.456" status="PASS" endtime="20170809 03:59:46.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.659">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:59:46.659" status="PASS" endtime="20170809 03:59:46.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.661">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:46.660" status="PASS" endtime="20170809 03:59:46.661"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.662">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:46.662" status="PASS" endtime="20170809 03:59:46.662"></status>
</kw>
<status starttime="20170809 03:59:46.661" status="PASS" endtime="20170809 03:59:46.663"></status>
</kw>
<status starttime="20170809 03:59:46.660" status="PASS" endtime="20170809 03:59:46.663"></status>
</kw>
<status starttime="20170809 03:59:46.659" status="PASS" endtime="20170809 03:59:46.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.729">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:46.729">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:46.663" status="PASS" endtime="20170809 03:59:46.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.731">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:46.730" status="PASS" endtime="20170809 03:59:46.731"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.732">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:46.731" status="PASS" endtime="20170809 03:59:46.732"></status>
</kw>
<status starttime="20170809 03:59:46.731" status="PASS" endtime="20170809 03:59:46.732"></status>
</kw>
<status starttime="20170809 03:59:46.730" status="PASS" endtime="20170809 03:59:46.732"></status>
</kw>
<status starttime="20170809 03:59:46.729" status="PASS" endtime="20170809 03:59:46.732"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:46.732">Delete All Sessions</msg>
<status starttime="20170809 03:59:46.732" status="PASS" endtime="20170809 03:59:46.733"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.733">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:46.455" status="PASS" endtime="20170809 03:59:46.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:46.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:46.733" status="PASS" endtime="20170809 03:59:46.734"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:46.734">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:46.734">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:46.734">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:46.734" status="PASS" endtime="20170809 03:59:46.734"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.735">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:46.454" status="PASS" endtime="20170809 03:59:46.735"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:46.735">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:46.454" status="PASS" endtime="20170809 03:59:46.735"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:59:46.736">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:59:46.735" status="FAIL" endtime="20170809 03:59:46.736"></status>
</kw>
<status starttime="20170809 03:59:46.453" status="FAIL" endtime="20170809 03:59:46.736"></status>
</kw>
<status starttime="20170809 03:59:45.741" status="FAIL" endtime="20170809 03:59:46.736"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:56.742">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:56.741" status="PASS" endtime="20170809 03:59:56.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:56.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:56.743" status="PASS" endtime="20170809 03:59:56.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:56.744">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:56.743" status="PASS" endtime="20170809 03:59:56.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:56.745">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:56.744" status="PASS" endtime="20170809 03:59:56.745"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:56.981">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:56.745" status="PASS" endtime="20170809 03:59:56.981"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:56.981">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:56.981">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:56.745" status="PASS" endtime="20170809 03:59:56.981"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:56.982">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:56.982" status="PASS" endtime="20170809 03:59:56.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:56.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:56.982" status="PASS" endtime="20170809 03:59:56.983"></status>
</kw>
<status starttime="20170809 03:59:56.741" status="PASS" endtime="20170809 03:59:56.983"></status>
</kw>
<status starttime="20170809 03:59:56.740" status="PASS" endtime="20170809 03:59:56.983"></status>
</kw>
<status starttime="20170809 03:59:56.739" status="PASS" endtime="20170809 03:59:56.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:56.984">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 03:59:56.984" status="PASS" endtime="20170809 03:59:56.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:56.986">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:56.985" status="PASS" endtime="20170809 03:59:56.986"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:56.987">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:56.987" status="PASS" endtime="20170809 03:59:56.987"></status>
</kw>
<status starttime="20170809 03:59:56.986" status="PASS" endtime="20170809 03:59:56.987"></status>
</kw>
<status starttime="20170809 03:59:56.985" status="PASS" endtime="20170809 03:59:56.987"></status>
</kw>
<status starttime="20170809 03:59:56.984" status="PASS" endtime="20170809 03:59:56.987"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.050">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:57.051">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:56.988" status="PASS" endtime="20170809 03:59:57.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.053">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:57.052" status="PASS" endtime="20170809 03:59:57.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.053">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:57.053" status="PASS" endtime="20170809 03:59:57.054"></status>
</kw>
<status starttime="20170809 03:59:57.053" status="PASS" endtime="20170809 03:59:57.054"></status>
</kw>
<status starttime="20170809 03:59:57.051" status="PASS" endtime="20170809 03:59:57.054"></status>
</kw>
<status starttime="20170809 03:59:57.051" status="PASS" endtime="20170809 03:59:57.054"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:57.054">Delete All Sessions</msg>
<status starttime="20170809 03:59:57.054" status="PASS" endtime="20170809 03:59:57.054"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.054">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:56.739" status="PASS" endtime="20170809 03:59:57.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:57.055" status="PASS" endtime="20170809 03:59:57.055"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.056">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:57.056">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:57.056">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:57.055" status="PASS" endtime="20170809 03:59:57.056"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.056">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 03:59:56.738" status="PASS" endtime="20170809 03:59:57.056"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.057">${power_state} = On</msg>
<status starttime="20170809 03:59:56.738" status="PASS" endtime="20170809 03:59:57.057"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 03:59:57.057" status="PASS" endtime="20170809 03:59:57.057"></status>
</kw>
<status starttime="20170809 03:59:56.738" status="PASS" endtime="20170809 03:59:57.057"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.061">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:57.060" status="PASS" endtime="20170809 03:59:57.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.062">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:57.062" status="PASS" endtime="20170809 03:59:57.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.063">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:57.063" status="PASS" endtime="20170809 03:59:57.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.064">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:57.063" status="PASS" endtime="20170809 03:59:57.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:57.064" status="PASS" endtime="20170809 03:59:57.284"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.284">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:57.284">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:57.064" status="PASS" endtime="20170809 03:59:57.284"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.285">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:57.284" status="PASS" endtime="20170809 03:59:57.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:57.285" status="PASS" endtime="20170809 03:59:57.286"></status>
</kw>
<status starttime="20170809 03:59:57.060" status="PASS" endtime="20170809 03:59:57.286"></status>
</kw>
<status starttime="20170809 03:59:57.060" status="PASS" endtime="20170809 03:59:57.286"></status>
</kw>
<status starttime="20170809 03:59:57.059" status="PASS" endtime="20170809 03:59:57.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.287">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 03:59:57.287" status="PASS" endtime="20170809 03:59:57.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.290">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:57.289" status="PASS" endtime="20170809 03:59:57.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.291">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 03:59:57.290" status="PASS" endtime="20170809 03:59:57.291"></status>
</kw>
<status starttime="20170809 03:59:57.290" status="PASS" endtime="20170809 03:59:57.291"></status>
</kw>
<status starttime="20170809 03:59:57.288" status="PASS" endtime="20170809 03:59:57.291"></status>
</kw>
<status starttime="20170809 03:59:57.288" status="PASS" endtime="20170809 03:59:57.291"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.396">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:57.396">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:57.291" status="PASS" endtime="20170809 03:59:57.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.398">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:57.397" status="PASS" endtime="20170809 03:59:57.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.399">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:57.399" status="PASS" endtime="20170809 03:59:57.399"></status>
</kw>
<status starttime="20170809 03:59:57.398" status="PASS" endtime="20170809 03:59:57.399"></status>
</kw>
<status starttime="20170809 03:59:57.397" status="PASS" endtime="20170809 03:59:57.399"></status>
</kw>
<status starttime="20170809 03:59:57.396" status="PASS" endtime="20170809 03:59:57.399"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:57.400">Delete All Sessions</msg>
<status starttime="20170809 03:59:57.400" status="PASS" endtime="20170809 03:59:57.400"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.400">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:57.058" status="PASS" endtime="20170809 03:59:57.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:57.400" status="PASS" endtime="20170809 03:59:57.401"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.401">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:57.401">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:57.401">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:57.401" status="PASS" endtime="20170809 03:59:57.401"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.402">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 03:59:57.058" status="PASS" endtime="20170809 03:59:57.402"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.402">${host_state} = Running</msg>
<status starttime="20170809 03:59:57.057" status="PASS" endtime="20170809 03:59:57.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 03:59:57.402" status="PASS" endtime="20170809 03:59:57.403"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.407">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 03:59:57.406" status="PASS" endtime="20170809 03:59:57.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.408">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 03:59:57.408" status="PASS" endtime="20170809 03:59:57.408"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.409">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 03:59:57.408" status="PASS" endtime="20170809 03:59:57.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.409">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 03:59:57.409" status="PASS" endtime="20170809 03:59:57.409"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.586">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 03:59:57.410" status="PASS" endtime="20170809 03:59:57.586"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.587">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 03:59:57.587">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:57.410" status="PASS" endtime="20170809 03:59:57.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.587">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:57.587" status="PASS" endtime="20170809 03:59:57.587"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.589">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:57.588" status="PASS" endtime="20170809 03:59:57.589"></status>
</kw>
<status starttime="20170809 03:59:57.406" status="PASS" endtime="20170809 03:59:57.589"></status>
</kw>
<status starttime="20170809 03:59:57.406" status="PASS" endtime="20170809 03:59:57.589"></status>
</kw>
<status starttime="20170809 03:59:57.405" status="PASS" endtime="20170809 03:59:57.589"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.590">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 03:59:57.589" status="PASS" endtime="20170809 03:59:57.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.595">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:57.591" status="PASS" endtime="20170809 03:59:57.595"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.597">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 03:59:57.596" status="PASS" endtime="20170809 03:59:57.597"></status>
</kw>
<status starttime="20170809 03:59:57.596" status="PASS" endtime="20170809 03:59:57.597"></status>
</kw>
<status starttime="20170809 03:59:57.590" status="PASS" endtime="20170809 03:59:57.597"></status>
</kw>
<status starttime="20170809 03:59:57.590" status="PASS" endtime="20170809 03:59:57.597"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.681">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 03:59:57.681">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:57.598" status="PASS" endtime="20170809 03:59:57.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.683">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:57.683" status="PASS" endtime="20170809 03:59:57.683"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.684">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 03:59:57.684" status="PASS" endtime="20170809 03:59:57.684"></status>
</kw>
<status starttime="20170809 03:59:57.683" status="PASS" endtime="20170809 03:59:57.684"></status>
</kw>
<status starttime="20170809 03:59:57.682" status="PASS" endtime="20170809 03:59:57.685"></status>
</kw>
<status starttime="20170809 03:59:57.682" status="PASS" endtime="20170809 03:59:57.685"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 03:59:57.685">Delete All Sessions</msg>
<status starttime="20170809 03:59:57.685" status="PASS" endtime="20170809 03:59:57.685"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 03:59:57.404" status="PASS" endtime="20170809 03:59:57.685"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 03:59:57.686">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 03:59:57.686" status="PASS" endtime="20170809 03:59:57.686"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 03:59:57.687">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 03:59:57.687">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 03:59:57.687">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 03:59:57.686" status="PASS" endtime="20170809 03:59:57.687"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.687">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:57.404" status="PASS" endtime="20170809 03:59:57.687"></status>
</kw>
<msg level="INFO" timestamp="20170809 03:59:57.687">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 03:59:57.403" status="PASS" endtime="20170809 03:59:57.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 03:59:57.688">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:59:57.688" status="FAIL" endtime="20170809 03:59:57.688"></status>
</kw>
<status starttime="20170809 03:59:57.403" status="FAIL" endtime="20170809 03:59:57.688"></status>
</kw>
<status starttime="20170809 03:59:56.737" status="FAIL" endtime="20170809 03:59:57.689"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:07.694">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:07.693" status="PASS" endtime="20170809 04:00:07.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:07.695">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:07.694" status="PASS" endtime="20170809 04:00:07.695"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:07.695">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:07.695" status="PASS" endtime="20170809 04:00:07.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:07.696">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:07.696" status="PASS" endtime="20170809 04:00:07.696"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:07.984">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:07.697" status="PASS" endtime="20170809 04:00:07.984"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:07.985">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:07.985">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:07.696" status="PASS" endtime="20170809 04:00:07.985"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:07.985">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:07.985" status="PASS" endtime="20170809 04:00:07.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:07.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:07.986" status="PASS" endtime="20170809 04:00:07.986"></status>
</kw>
<status starttime="20170809 04:00:07.693" status="PASS" endtime="20170809 04:00:07.986"></status>
</kw>
<status starttime="20170809 04:00:07.692" status="PASS" endtime="20170809 04:00:07.986"></status>
</kw>
<status starttime="20170809 04:00:07.692" status="PASS" endtime="20170809 04:00:07.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:07.987">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:00:07.987" status="PASS" endtime="20170809 04:00:07.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:07.989">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:07.989" status="PASS" endtime="20170809 04:00:07.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:07.990">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:07.990" status="PASS" endtime="20170809 04:00:07.990"></status>
</kw>
<status starttime="20170809 04:00:07.990" status="PASS" endtime="20170809 04:00:07.990"></status>
</kw>
<status starttime="20170809 04:00:07.988" status="PASS" endtime="20170809 04:00:07.991"></status>
</kw>
<status starttime="20170809 04:00:07.987" status="PASS" endtime="20170809 04:00:07.991"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.054">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:08.055">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:07.991" status="PASS" endtime="20170809 04:00:08.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.057">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:08.056" status="PASS" endtime="20170809 04:00:08.057"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.058">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:08.057" status="PASS" endtime="20170809 04:00:08.058"></status>
</kw>
<status starttime="20170809 04:00:08.057" status="PASS" endtime="20170809 04:00:08.058"></status>
</kw>
<status starttime="20170809 04:00:08.056" status="PASS" endtime="20170809 04:00:08.058"></status>
</kw>
<status starttime="20170809 04:00:08.055" status="PASS" endtime="20170809 04:00:08.058"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:08.058">Delete All Sessions</msg>
<status starttime="20170809 04:00:08.058" status="PASS" endtime="20170809 04:00:08.059"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.059">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:07.691" status="PASS" endtime="20170809 04:00:08.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:08.059" status="PASS" endtime="20170809 04:00:08.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.060">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:08.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:08.060">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:08.060" status="PASS" endtime="20170809 04:00:08.060"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.061">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:00:07.690" status="PASS" endtime="20170809 04:00:08.061"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.061">${power_state} = On</msg>
<status starttime="20170809 04:00:07.690" status="PASS" endtime="20170809 04:00:08.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:00:08.061" status="PASS" endtime="20170809 04:00:08.061"></status>
</kw>
<status starttime="20170809 04:00:07.690" status="PASS" endtime="20170809 04:00:08.062"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.066">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:08.065" status="PASS" endtime="20170809 04:00:08.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.067">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:08.066" status="PASS" endtime="20170809 04:00:08.067"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.067">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:08.067" status="PASS" endtime="20170809 04:00:08.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.068">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:08.068" status="PASS" endtime="20170809 04:00:08.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.358">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:08.069" status="PASS" endtime="20170809 04:00:08.358"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.358">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:08.358">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:08.069" status="PASS" endtime="20170809 04:00:08.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.359">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:08.359" status="PASS" endtime="20170809 04:00:08.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:08.359" status="PASS" endtime="20170809 04:00:08.360"></status>
</kw>
<status starttime="20170809 04:00:08.065" status="PASS" endtime="20170809 04:00:08.360"></status>
</kw>
<status starttime="20170809 04:00:08.064" status="PASS" endtime="20170809 04:00:08.360"></status>
</kw>
<status starttime="20170809 04:00:08.064" status="PASS" endtime="20170809 04:00:08.360"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.361">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:00:08.361" status="PASS" endtime="20170809 04:00:08.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.363">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:08.362" status="PASS" endtime="20170809 04:00:08.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.364">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:08.364" status="PASS" endtime="20170809 04:00:08.365"></status>
</kw>
<status starttime="20170809 04:00:08.363" status="PASS" endtime="20170809 04:00:08.365"></status>
</kw>
<status starttime="20170809 04:00:08.362" status="PASS" endtime="20170809 04:00:08.365"></status>
</kw>
<status starttime="20170809 04:00:08.361" status="PASS" endtime="20170809 04:00:08.365"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.455">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:08.455">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:08.365" status="PASS" endtime="20170809 04:00:08.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.457">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:08.457" status="PASS" endtime="20170809 04:00:08.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.458">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:08.458" status="PASS" endtime="20170809 04:00:08.458"></status>
</kw>
<status starttime="20170809 04:00:08.457" status="PASS" endtime="20170809 04:00:08.458"></status>
</kw>
<status starttime="20170809 04:00:08.456" status="PASS" endtime="20170809 04:00:08.458"></status>
</kw>
<status starttime="20170809 04:00:08.456" status="PASS" endtime="20170809 04:00:08.459"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:08.459">Delete All Sessions</msg>
<status starttime="20170809 04:00:08.459" status="PASS" endtime="20170809 04:00:08.459"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.459">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:08.063" status="PASS" endtime="20170809 04:00:08.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:08.460" status="PASS" endtime="20170809 04:00:08.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.461">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:08.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:08.461">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:08.460" status="PASS" endtime="20170809 04:00:08.461"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.461">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:00:08.062" status="PASS" endtime="20170809 04:00:08.461"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.461">${host_state} = Running</msg>
<status starttime="20170809 04:00:08.062" status="PASS" endtime="20170809 04:00:08.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:00:08.462" status="PASS" endtime="20170809 04:00:08.462"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.467">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:08.467" status="PASS" endtime="20170809 04:00:08.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.469">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:08.468" status="PASS" endtime="20170809 04:00:08.469"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.469">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:08.469" status="PASS" endtime="20170809 04:00:08.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:08.470" status="PASS" endtime="20170809 04:00:08.471"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.650">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:08.471" status="PASS" endtime="20170809 04:00:08.651"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.651">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:08.651">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:08.471" status="PASS" endtime="20170809 04:00:08.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.652">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:08.651" status="PASS" endtime="20170809 04:00:08.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.652">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:08.652" status="PASS" endtime="20170809 04:00:08.652"></status>
</kw>
<status starttime="20170809 04:00:08.466" status="PASS" endtime="20170809 04:00:08.653"></status>
</kw>
<status starttime="20170809 04:00:08.465" status="PASS" endtime="20170809 04:00:08.653"></status>
</kw>
<status starttime="20170809 04:00:08.464" status="PASS" endtime="20170809 04:00:08.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.653">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:00:08.653" status="PASS" endtime="20170809 04:00:08.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.656">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:08.655" status="PASS" endtime="20170809 04:00:08.656"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.657">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:08.656" status="PASS" endtime="20170809 04:00:08.657"></status>
</kw>
<status starttime="20170809 04:00:08.656" status="PASS" endtime="20170809 04:00:08.657"></status>
</kw>
<status starttime="20170809 04:00:08.654" status="PASS" endtime="20170809 04:00:08.657"></status>
</kw>
<status starttime="20170809 04:00:08.654" status="PASS" endtime="20170809 04:00:08.657"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.764">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:08.764">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:08.657" status="PASS" endtime="20170809 04:00:08.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.766">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:08.765" status="PASS" endtime="20170809 04:00:08.766"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.767">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:08.767" status="PASS" endtime="20170809 04:00:08.767"></status>
</kw>
<status starttime="20170809 04:00:08.766" status="PASS" endtime="20170809 04:00:08.767"></status>
</kw>
<status starttime="20170809 04:00:08.765" status="PASS" endtime="20170809 04:00:08.767"></status>
</kw>
<status starttime="20170809 04:00:08.764" status="PASS" endtime="20170809 04:00:08.767"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:08.768">Delete All Sessions</msg>
<status starttime="20170809 04:00:08.767" status="PASS" endtime="20170809 04:00:08.768"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.768">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:08.464" status="PASS" endtime="20170809 04:00:08.768"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:08.769">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:08.768" status="PASS" endtime="20170809 04:00:08.769"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:08.769">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:08.769">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:08.769">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:08.769" status="PASS" endtime="20170809 04:00:08.769"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.770">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:08.463" status="PASS" endtime="20170809 04:00:08.770"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:08.770">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:08.462" status="PASS" endtime="20170809 04:00:08.770"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:00:08.771">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:00:08.770" status="FAIL" endtime="20170809 04:00:08.771"></status>
</kw>
<status starttime="20170809 04:00:08.462" status="FAIL" endtime="20170809 04:00:08.771"></status>
</kw>
<status starttime="20170809 04:00:07.689" status="FAIL" endtime="20170809 04:00:08.771"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:18.776">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:18.776" status="PASS" endtime="20170809 04:00:18.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:18.777">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:18.777" status="PASS" endtime="20170809 04:00:18.777"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:18.778">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:18.778" status="PASS" endtime="20170809 04:00:18.778"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:18.779">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:18.778" status="PASS" endtime="20170809 04:00:18.779"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:18.960">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:18.779" status="PASS" endtime="20170809 04:00:18.960"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:18.960">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:18.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:18.779" status="PASS" endtime="20170809 04:00:18.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:18.961">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:18.961" status="PASS" endtime="20170809 04:00:18.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:18.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:18.962" status="PASS" endtime="20170809 04:00:18.962"></status>
</kw>
<status starttime="20170809 04:00:18.775" status="PASS" endtime="20170809 04:00:18.962"></status>
</kw>
<status starttime="20170809 04:00:18.775" status="PASS" endtime="20170809 04:00:18.962"></status>
</kw>
<status starttime="20170809 04:00:18.774" status="PASS" endtime="20170809 04:00:18.962"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:18.963">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:00:18.963" status="PASS" endtime="20170809 04:00:18.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:18.965">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:18.964" status="PASS" endtime="20170809 04:00:18.965"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:18.966">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:18.966" status="PASS" endtime="20170809 04:00:18.966"></status>
</kw>
<status starttime="20170809 04:00:18.965" status="PASS" endtime="20170809 04:00:18.966"></status>
</kw>
<status starttime="20170809 04:00:18.964" status="PASS" endtime="20170809 04:00:18.966"></status>
</kw>
<status starttime="20170809 04:00:18.963" status="PASS" endtime="20170809 04:00:18.966"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.029">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:19.030">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:18.967" status="PASS" endtime="20170809 04:00:19.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.032">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:19.031" status="PASS" endtime="20170809 04:00:19.032"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.033">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:19.032" status="PASS" endtime="20170809 04:00:19.033"></status>
</kw>
<status starttime="20170809 04:00:19.032" status="PASS" endtime="20170809 04:00:19.033"></status>
</kw>
<status starttime="20170809 04:00:19.031" status="PASS" endtime="20170809 04:00:19.033"></status>
</kw>
<status starttime="20170809 04:00:19.030" status="PASS" endtime="20170809 04:00:19.033"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:19.033">Delete All Sessions</msg>
<status starttime="20170809 04:00:19.033" status="PASS" endtime="20170809 04:00:19.034"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:18.774" status="PASS" endtime="20170809 04:00:19.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:19.034" status="PASS" endtime="20170809 04:00:19.034"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.035">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:19.035">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:19.035">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:19.035" status="PASS" endtime="20170809 04:00:19.035"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.035">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:00:18.773" status="PASS" endtime="20170809 04:00:19.035"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.036">${power_state} = On</msg>
<status starttime="20170809 04:00:18.773" status="PASS" endtime="20170809 04:00:19.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:00:19.036" status="PASS" endtime="20170809 04:00:19.036"></status>
</kw>
<status starttime="20170809 04:00:18.772" status="PASS" endtime="20170809 04:00:19.036"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.041">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:19.040" status="PASS" endtime="20170809 04:00:19.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.042">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:19.041" status="PASS" endtime="20170809 04:00:19.042"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.042">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:19.042" status="PASS" endtime="20170809 04:00:19.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.043">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:19.042" status="PASS" endtime="20170809 04:00:19.043"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.271">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:19.044" status="PASS" endtime="20170809 04:00:19.271"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.271">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:19.271">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:19.043" status="PASS" endtime="20170809 04:00:19.271"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.272">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:19.272" status="PASS" endtime="20170809 04:00:19.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.273">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:19.272" status="PASS" endtime="20170809 04:00:19.273"></status>
</kw>
<status starttime="20170809 04:00:19.039" status="PASS" endtime="20170809 04:00:19.273"></status>
</kw>
<status starttime="20170809 04:00:19.039" status="PASS" endtime="20170809 04:00:19.273"></status>
</kw>
<status starttime="20170809 04:00:19.038" status="PASS" endtime="20170809 04:00:19.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.274">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:00:19.273" status="PASS" endtime="20170809 04:00:19.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.276">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:19.275" status="PASS" endtime="20170809 04:00:19.276"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.277">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:19.276" status="PASS" endtime="20170809 04:00:19.277"></status>
</kw>
<status starttime="20170809 04:00:19.276" status="PASS" endtime="20170809 04:00:19.277"></status>
</kw>
<status starttime="20170809 04:00:19.274" status="PASS" endtime="20170809 04:00:19.277"></status>
</kw>
<status starttime="20170809 04:00:19.274" status="PASS" endtime="20170809 04:00:19.277"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.375">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:19.375">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:19.277" status="PASS" endtime="20170809 04:00:19.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.377">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:19.376" status="PASS" endtime="20170809 04:00:19.377"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.378">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:19.377" status="PASS" endtime="20170809 04:00:19.378"></status>
</kw>
<status starttime="20170809 04:00:19.377" status="PASS" endtime="20170809 04:00:19.378"></status>
</kw>
<status starttime="20170809 04:00:19.376" status="PASS" endtime="20170809 04:00:19.378"></status>
</kw>
<status starttime="20170809 04:00:19.375" status="PASS" endtime="20170809 04:00:19.378"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:19.379">Delete All Sessions</msg>
<status starttime="20170809 04:00:19.378" status="PASS" endtime="20170809 04:00:19.379"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.379">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:19.037" status="PASS" endtime="20170809 04:00:19.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:19.379" status="PASS" endtime="20170809 04:00:19.380"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.380">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:19.380">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:19.380">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:19.380" status="PASS" endtime="20170809 04:00:19.380"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.381">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:00:19.037" status="PASS" endtime="20170809 04:00:19.381"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.381">${host_state} = Running</msg>
<status starttime="20170809 04:00:19.037" status="PASS" endtime="20170809 04:00:19.381"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:00:19.381" status="PASS" endtime="20170809 04:00:19.381"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.386">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:19.385" status="PASS" endtime="20170809 04:00:19.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.387">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:19.387" status="PASS" endtime="20170809 04:00:19.387"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.388">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:19.388" status="PASS" endtime="20170809 04:00:19.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.389">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:19.388" status="PASS" endtime="20170809 04:00:19.389"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.579">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:19.390" status="PASS" endtime="20170809 04:00:19.579"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.580">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:19.580">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:19.389" status="PASS" endtime="20170809 04:00:19.580"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.580">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:19.580" status="PASS" endtime="20170809 04:00:19.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.581">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:19.581" status="PASS" endtime="20170809 04:00:19.581"></status>
</kw>
<status starttime="20170809 04:00:19.385" status="PASS" endtime="20170809 04:00:19.581"></status>
</kw>
<status starttime="20170809 04:00:19.385" status="PASS" endtime="20170809 04:00:19.581"></status>
</kw>
<status starttime="20170809 04:00:19.384" status="PASS" endtime="20170809 04:00:19.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.582">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:00:19.582" status="PASS" endtime="20170809 04:00:19.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.585">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:19.584" status="PASS" endtime="20170809 04:00:19.585"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.585">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:19.585" status="PASS" endtime="20170809 04:00:19.586"></status>
</kw>
<status starttime="20170809 04:00:19.585" status="PASS" endtime="20170809 04:00:19.586"></status>
</kw>
<status starttime="20170809 04:00:19.583" status="PASS" endtime="20170809 04:00:19.586"></status>
</kw>
<status starttime="20170809 04:00:19.582" status="PASS" endtime="20170809 04:00:19.586"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.652">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:19.652">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:19.586" status="PASS" endtime="20170809 04:00:19.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.654">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:19.654" status="PASS" endtime="20170809 04:00:19.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.655">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:19.655" status="PASS" endtime="20170809 04:00:19.655"></status>
</kw>
<status starttime="20170809 04:00:19.654" status="PASS" endtime="20170809 04:00:19.655"></status>
</kw>
<status starttime="20170809 04:00:19.653" status="PASS" endtime="20170809 04:00:19.655"></status>
</kw>
<status starttime="20170809 04:00:19.653" status="PASS" endtime="20170809 04:00:19.656"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:19.656">Delete All Sessions</msg>
<status starttime="20170809 04:00:19.656" status="PASS" endtime="20170809 04:00:19.656"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.656">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:19.383" status="PASS" endtime="20170809 04:00:19.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:19.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:19.656" status="PASS" endtime="20170809 04:00:19.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:19.657">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:19.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:19.658">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:19.657" status="PASS" endtime="20170809 04:00:19.658"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.658">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:19.383" status="PASS" endtime="20170809 04:00:19.658"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:19.658">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:19.382" status="PASS" endtime="20170809 04:00:19.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:00:19.659">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:00:19.658" status="FAIL" endtime="20170809 04:00:19.659"></status>
</kw>
<status starttime="20170809 04:00:19.382" status="FAIL" endtime="20170809 04:00:19.659"></status>
</kw>
<status starttime="20170809 04:00:18.772" status="FAIL" endtime="20170809 04:00:19.659"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:29.665">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:29.665" status="PASS" endtime="20170809 04:00:29.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.666">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:29.666" status="PASS" endtime="20170809 04:00:29.666"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.667">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:29.666" status="PASS" endtime="20170809 04:00:29.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:29.667" status="PASS" endtime="20170809 04:00:29.667"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:29.860">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:29.668" status="PASS" endtime="20170809 04:00:29.861"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:29.861">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:29.861">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:29.668" status="PASS" endtime="20170809 04:00:29.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:29.861">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:29.861" status="PASS" endtime="20170809 04:00:29.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:29.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:29.862" status="PASS" endtime="20170809 04:00:29.862"></status>
</kw>
<status starttime="20170809 04:00:29.664" status="PASS" endtime="20170809 04:00:29.862"></status>
</kw>
<status starttime="20170809 04:00:29.664" status="PASS" endtime="20170809 04:00:29.862"></status>
</kw>
<status starttime="20170809 04:00:29.663" status="PASS" endtime="20170809 04:00:29.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.863">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:00:29.863" status="PASS" endtime="20170809 04:00:29.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.866">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:29.865" status="PASS" endtime="20170809 04:00:29.866"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:29.867">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:29.866" status="PASS" endtime="20170809 04:00:29.867"></status>
</kw>
<status starttime="20170809 04:00:29.866" status="PASS" endtime="20170809 04:00:29.867"></status>
</kw>
<status starttime="20170809 04:00:29.864" status="PASS" endtime="20170809 04:00:29.867"></status>
</kw>
<status starttime="20170809 04:00:29.864" status="PASS" endtime="20170809 04:00:29.867"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.932">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:29.932">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:29.867" status="PASS" endtime="20170809 04:00:29.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.934">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:29.933" status="PASS" endtime="20170809 04:00:29.934"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:29.935">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:29.935" status="PASS" endtime="20170809 04:00:29.935"></status>
</kw>
<status starttime="20170809 04:00:29.934" status="PASS" endtime="20170809 04:00:29.935"></status>
</kw>
<status starttime="20170809 04:00:29.933" status="PASS" endtime="20170809 04:00:29.935"></status>
</kw>
<status starttime="20170809 04:00:29.932" status="PASS" endtime="20170809 04:00:29.935"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:29.936">Delete All Sessions</msg>
<status starttime="20170809 04:00:29.935" status="PASS" endtime="20170809 04:00:29.936"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:29.936">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:29.662" status="PASS" endtime="20170809 04:00:29.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:29.936">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:29.936" status="PASS" endtime="20170809 04:00:29.937"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.937">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:29.937">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:29.937">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:29.937" status="PASS" endtime="20170809 04:00:29.937"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:29.938">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:00:29.661" status="PASS" endtime="20170809 04:00:29.938"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:29.938">${power_state} = On</msg>
<status starttime="20170809 04:00:29.661" status="PASS" endtime="20170809 04:00:29.938"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:00:29.938" status="PASS" endtime="20170809 04:00:29.938"></status>
</kw>
<status starttime="20170809 04:00:29.660" status="PASS" endtime="20170809 04:00:29.939"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:29.943">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:29.943" status="PASS" endtime="20170809 04:00:29.943"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:29.944" status="PASS" endtime="20170809 04:00:29.944"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.945">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:29.944" status="PASS" endtime="20170809 04:00:29.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:29.945">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:29.945" status="PASS" endtime="20170809 04:00:29.945"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.122">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:29.946" status="PASS" endtime="20170809 04:00:30.122"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:30.122">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:30.122">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:29.946" status="PASS" endtime="20170809 04:00:30.122"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.123">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:30.123" status="PASS" endtime="20170809 04:00:30.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.124">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:30.123" status="PASS" endtime="20170809 04:00:30.124"></status>
</kw>
<status starttime="20170809 04:00:29.942" status="PASS" endtime="20170809 04:00:30.124"></status>
</kw>
<status starttime="20170809 04:00:29.941" status="PASS" endtime="20170809 04:00:30.124"></status>
</kw>
<status starttime="20170809 04:00:29.940" status="PASS" endtime="20170809 04:00:30.124"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.125">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:00:30.125" status="PASS" endtime="20170809 04:00:30.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.127">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:30.126" status="PASS" endtime="20170809 04:00:30.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.128">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:30.128" status="PASS" endtime="20170809 04:00:30.129"></status>
</kw>
<status starttime="20170809 04:00:30.127" status="PASS" endtime="20170809 04:00:30.129"></status>
</kw>
<status starttime="20170809 04:00:30.126" status="PASS" endtime="20170809 04:00:30.130"></status>
</kw>
<status starttime="20170809 04:00:30.125" status="PASS" endtime="20170809 04:00:30.130"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.218">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:30.219">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:30.130" status="PASS" endtime="20170809 04:00:30.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.221">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:30.220" status="PASS" endtime="20170809 04:00:30.221"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.221">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:30.221" status="PASS" endtime="20170809 04:00:30.222"></status>
</kw>
<status starttime="20170809 04:00:30.221" status="PASS" endtime="20170809 04:00:30.222"></status>
</kw>
<status starttime="20170809 04:00:30.220" status="PASS" endtime="20170809 04:00:30.222"></status>
</kw>
<status starttime="20170809 04:00:30.219" status="PASS" endtime="20170809 04:00:30.222"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:30.222">Delete All Sessions</msg>
<status starttime="20170809 04:00:30.222" status="PASS" endtime="20170809 04:00:30.222"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:30.223">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:29.940" status="PASS" endtime="20170809 04:00:30.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:30.223" status="PASS" endtime="20170809 04:00:30.223"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.224">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:30.224">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:30.224">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:30.224" status="PASS" endtime="20170809 04:00:30.224"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:30.224">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:00:29.939" status="PASS" endtime="20170809 04:00:30.224"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:30.225">${host_state} = Running</msg>
<status starttime="20170809 04:00:29.939" status="PASS" endtime="20170809 04:00:30.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:00:30.225" status="PASS" endtime="20170809 04:00:30.225"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.231">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:30.231" status="PASS" endtime="20170809 04:00:30.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.232">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:30.232" status="PASS" endtime="20170809 04:00:30.232"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.233">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:30.232" status="PASS" endtime="20170809 04:00:30.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.233">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:30.233" status="PASS" endtime="20170809 04:00:30.233"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.411">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:30.234" status="PASS" endtime="20170809 04:00:30.411"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:30.411">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:30.411">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:30.234" status="PASS" endtime="20170809 04:00:30.411"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.412">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:30.412" status="PASS" endtime="20170809 04:00:30.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:30.412" status="PASS" endtime="20170809 04:00:30.413"></status>
</kw>
<status starttime="20170809 04:00:30.230" status="PASS" endtime="20170809 04:00:30.413"></status>
</kw>
<status starttime="20170809 04:00:30.230" status="PASS" endtime="20170809 04:00:30.413"></status>
</kw>
<status starttime="20170809 04:00:30.228" status="PASS" endtime="20170809 04:00:30.413"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.414">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:00:30.413" status="PASS" endtime="20170809 04:00:30.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.420">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:30.419" status="PASS" endtime="20170809 04:00:30.420"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.421">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:30.420" status="PASS" endtime="20170809 04:00:30.421"></status>
</kw>
<status starttime="20170809 04:00:30.420" status="PASS" endtime="20170809 04:00:30.421"></status>
</kw>
<status starttime="20170809 04:00:30.415" status="PASS" endtime="20170809 04:00:30.421"></status>
</kw>
<status starttime="20170809 04:00:30.414" status="PASS" endtime="20170809 04:00:30.421"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.544">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:30.544">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:30.422" status="PASS" endtime="20170809 04:00:30.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.546">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:30.545" status="PASS" endtime="20170809 04:00:30.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.547">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:30.547" status="PASS" endtime="20170809 04:00:30.547"></status>
</kw>
<status starttime="20170809 04:00:30.546" status="PASS" endtime="20170809 04:00:30.547"></status>
</kw>
<status starttime="20170809 04:00:30.545" status="PASS" endtime="20170809 04:00:30.547"></status>
</kw>
<status starttime="20170809 04:00:30.544" status="PASS" endtime="20170809 04:00:30.547"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:30.548">Delete All Sessions</msg>
<status starttime="20170809 04:00:30.547" status="PASS" endtime="20170809 04:00:30.548"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:30.548">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:30.227" status="PASS" endtime="20170809 04:00:30.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:30.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:30.548" status="PASS" endtime="20170809 04:00:30.549"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:30.549">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:30.549">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:30.549">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:30.549" status="PASS" endtime="20170809 04:00:30.549"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:30.550">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:30.226" status="PASS" endtime="20170809 04:00:30.550"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:30.550">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:30.226" status="PASS" endtime="20170809 04:00:30.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:00:30.551">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:00:30.550" status="FAIL" endtime="20170809 04:00:30.551"></status>
</kw>
<status starttime="20170809 04:00:30.225" status="FAIL" endtime="20170809 04:00:30.551"></status>
</kw>
<status starttime="20170809 04:00:29.660" status="FAIL" endtime="20170809 04:00:30.551"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:40.556">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:40.556" status="PASS" endtime="20170809 04:00:40.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.557">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:40.557" status="PASS" endtime="20170809 04:00:40.557"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.558">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:40.557" status="PASS" endtime="20170809 04:00:40.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.559">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:40.558" status="PASS" endtime="20170809 04:00:40.559"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:40.739">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:40.560" status="PASS" endtime="20170809 04:00:40.740"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:40.740">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:40.740">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:40.559" status="PASS" endtime="20170809 04:00:40.740"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:40.741">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:40.740" status="PASS" endtime="20170809 04:00:40.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:40.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:40.741" status="PASS" endtime="20170809 04:00:40.742"></status>
</kw>
<status starttime="20170809 04:00:40.555" status="PASS" endtime="20170809 04:00:40.742"></status>
</kw>
<status starttime="20170809 04:00:40.555" status="PASS" endtime="20170809 04:00:40.742"></status>
</kw>
<status starttime="20170809 04:00:40.554" status="PASS" endtime="20170809 04:00:40.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.742">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:00:40.742" status="PASS" endtime="20170809 04:00:40.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.745">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:40.744" status="PASS" endtime="20170809 04:00:40.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:40.745">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:40.745" status="PASS" endtime="20170809 04:00:40.746"></status>
</kw>
<status starttime="20170809 04:00:40.745" status="PASS" endtime="20170809 04:00:40.746"></status>
</kw>
<status starttime="20170809 04:00:40.743" status="PASS" endtime="20170809 04:00:40.746"></status>
</kw>
<status starttime="20170809 04:00:40.743" status="PASS" endtime="20170809 04:00:40.746"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.841">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:40.842">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:40.746" status="PASS" endtime="20170809 04:00:40.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.843">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:40.843" status="PASS" endtime="20170809 04:00:40.844"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:40.844">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:40.844" status="PASS" endtime="20170809 04:00:40.845"></status>
</kw>
<status starttime="20170809 04:00:40.844" status="PASS" endtime="20170809 04:00:40.845"></status>
</kw>
<status starttime="20170809 04:00:40.842" status="PASS" endtime="20170809 04:00:40.845"></status>
</kw>
<status starttime="20170809 04:00:40.842" status="PASS" endtime="20170809 04:00:40.845"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:40.845">Delete All Sessions</msg>
<status starttime="20170809 04:00:40.845" status="PASS" endtime="20170809 04:00:40.845"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:40.846">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:40.553" status="PASS" endtime="20170809 04:00:40.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:40.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:40.846" status="PASS" endtime="20170809 04:00:40.846"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.847">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:40.847">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:40.847">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:40.846" status="PASS" endtime="20170809 04:00:40.847"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:40.847">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:00:40.553" status="PASS" endtime="20170809 04:00:40.847"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:40.848">${power_state} = On</msg>
<status starttime="20170809 04:00:40.552" status="PASS" endtime="20170809 04:00:40.848"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:00:40.848" status="PASS" endtime="20170809 04:00:40.848"></status>
</kw>
<status starttime="20170809 04:00:40.552" status="PASS" endtime="20170809 04:00:40.848"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:40.853">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:40.852" status="PASS" endtime="20170809 04:00:40.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.854">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:40.853" status="PASS" endtime="20170809 04:00:40.854"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.854">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:40.854" status="PASS" endtime="20170809 04:00:40.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:40.855">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:40.854" status="PASS" endtime="20170809 04:00:40.855"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.075">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:40.856" status="PASS" endtime="20170809 04:00:41.075"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:41.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:41.075">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:40.855" status="PASS" endtime="20170809 04:00:41.075"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.076">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:41.076" status="PASS" endtime="20170809 04:00:41.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:41.076" status="PASS" endtime="20170809 04:00:41.077"></status>
</kw>
<status starttime="20170809 04:00:40.851" status="PASS" endtime="20170809 04:00:41.077"></status>
</kw>
<status starttime="20170809 04:00:40.851" status="PASS" endtime="20170809 04:00:41.077"></status>
</kw>
<status starttime="20170809 04:00:40.850" status="PASS" endtime="20170809 04:00:41.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.078">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:00:41.077" status="PASS" endtime="20170809 04:00:41.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.080">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:41.079" status="PASS" endtime="20170809 04:00:41.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.081">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:41.080" status="PASS" endtime="20170809 04:00:41.081"></status>
</kw>
<status starttime="20170809 04:00:41.080" status="PASS" endtime="20170809 04:00:41.081"></status>
</kw>
<status starttime="20170809 04:00:41.078" status="PASS" endtime="20170809 04:00:41.081"></status>
</kw>
<status starttime="20170809 04:00:41.078" status="PASS" endtime="20170809 04:00:41.081"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.188">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:41.188">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:41.081" status="PASS" endtime="20170809 04:00:41.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.190">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:41.189" status="PASS" endtime="20170809 04:00:41.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.191">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:41.191" status="PASS" endtime="20170809 04:00:41.191"></status>
</kw>
<status starttime="20170809 04:00:41.190" status="PASS" endtime="20170809 04:00:41.191"></status>
</kw>
<status starttime="20170809 04:00:41.189" status="PASS" endtime="20170809 04:00:41.191"></status>
</kw>
<status starttime="20170809 04:00:41.188" status="PASS" endtime="20170809 04:00:41.191"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:41.192">Delete All Sessions</msg>
<status starttime="20170809 04:00:41.192" status="PASS" endtime="20170809 04:00:41.192"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:41.192">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:40.849" status="PASS" endtime="20170809 04:00:41.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:41.192" status="PASS" endtime="20170809 04:00:41.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.193">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:41.193">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:41.194">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:41.193" status="PASS" endtime="20170809 04:00:41.194"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:41.194">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:00:40.849" status="PASS" endtime="20170809 04:00:41.194"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:41.194">${host_state} = Running</msg>
<status starttime="20170809 04:00:40.849" status="PASS" endtime="20170809 04:00:41.194"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:00:41.194" status="PASS" endtime="20170809 04:00:41.195"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.199">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:41.198" status="PASS" endtime="20170809 04:00:41.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:41.199" status="PASS" endtime="20170809 04:00:41.200"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.200">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:41.200" status="PASS" endtime="20170809 04:00:41.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:41.200" status="PASS" endtime="20170809 04:00:41.201"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.382">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:41.202" status="PASS" endtime="20170809 04:00:41.382"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:41.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:41.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:41.201" status="PASS" endtime="20170809 04:00:41.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:41.383" status="PASS" endtime="20170809 04:00:41.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:41.383" status="PASS" endtime="20170809 04:00:41.384"></status>
</kw>
<status starttime="20170809 04:00:41.198" status="PASS" endtime="20170809 04:00:41.384"></status>
</kw>
<status starttime="20170809 04:00:41.197" status="PASS" endtime="20170809 04:00:41.384"></status>
</kw>
<status starttime="20170809 04:00:41.197" status="PASS" endtime="20170809 04:00:41.385"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.385">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:00:41.385" status="PASS" endtime="20170809 04:00:41.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.387">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:41.386" status="PASS" endtime="20170809 04:00:41.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.388">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:41.388" status="PASS" endtime="20170809 04:00:41.388"></status>
</kw>
<status starttime="20170809 04:00:41.387" status="PASS" endtime="20170809 04:00:41.388"></status>
</kw>
<status starttime="20170809 04:00:41.386" status="PASS" endtime="20170809 04:00:41.389"></status>
</kw>
<status starttime="20170809 04:00:41.385" status="PASS" endtime="20170809 04:00:41.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.455">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:41.455">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:41.389" status="PASS" endtime="20170809 04:00:41.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.457">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:41.457" status="PASS" endtime="20170809 04:00:41.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.458">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:41.458" status="PASS" endtime="20170809 04:00:41.458"></status>
</kw>
<status starttime="20170809 04:00:41.457" status="PASS" endtime="20170809 04:00:41.458"></status>
</kw>
<status starttime="20170809 04:00:41.456" status="PASS" endtime="20170809 04:00:41.458"></status>
</kw>
<status starttime="20170809 04:00:41.456" status="PASS" endtime="20170809 04:00:41.458"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:41.459">Delete All Sessions</msg>
<status starttime="20170809 04:00:41.459" status="PASS" endtime="20170809 04:00:41.459"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:41.459">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:41.196" status="PASS" endtime="20170809 04:00:41.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:41.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:41.459" status="PASS" endtime="20170809 04:00:41.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:41.460">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:41.460">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:41.461">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:41.460" status="PASS" endtime="20170809 04:00:41.461"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:41.461">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:41.196" status="PASS" endtime="20170809 04:00:41.461"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:41.461">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:41.195" status="PASS" endtime="20170809 04:00:41.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:00:41.462">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:00:41.461" status="FAIL" endtime="20170809 04:00:41.462"></status>
</kw>
<status starttime="20170809 04:00:41.195" status="FAIL" endtime="20170809 04:00:41.462"></status>
</kw>
<status starttime="20170809 04:00:40.551" status="FAIL" endtime="20170809 04:00:41.462"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.468">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:51.467" status="PASS" endtime="20170809 04:00:51.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.469">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:51.468" status="PASS" endtime="20170809 04:00:51.469"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.469">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:51.469" status="PASS" endtime="20170809 04:00:51.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:51.470" status="PASS" endtime="20170809 04:00:51.470"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.650">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:51.471" status="PASS" endtime="20170809 04:00:51.650"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:51.651">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:51.651">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:51.470" status="PASS" endtime="20170809 04:00:51.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.651">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:51.651" status="PASS" endtime="20170809 04:00:51.651"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.652">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:51.652" status="PASS" endtime="20170809 04:00:51.652"></status>
</kw>
<status starttime="20170809 04:00:51.466" status="PASS" endtime="20170809 04:00:51.652"></status>
</kw>
<status starttime="20170809 04:00:51.466" status="PASS" endtime="20170809 04:00:51.652"></status>
</kw>
<status starttime="20170809 04:00:51.465" status="PASS" endtime="20170809 04:00:51.652"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.653">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:00:51.653" status="PASS" endtime="20170809 04:00:51.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.655">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:51.654" status="PASS" endtime="20170809 04:00:51.655"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.656">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:51.656" status="PASS" endtime="20170809 04:00:51.656"></status>
</kw>
<status starttime="20170809 04:00:51.655" status="PASS" endtime="20170809 04:00:51.656"></status>
</kw>
<status starttime="20170809 04:00:51.654" status="PASS" endtime="20170809 04:00:51.656"></status>
</kw>
<status starttime="20170809 04:00:51.653" status="PASS" endtime="20170809 04:00:51.657"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.721">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:51.721">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:51.657" status="PASS" endtime="20170809 04:00:51.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.723">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:51.723" status="PASS" endtime="20170809 04:00:51.723"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.725">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:51.724" status="PASS" endtime="20170809 04:00:51.725"></status>
</kw>
<status starttime="20170809 04:00:51.724" status="PASS" endtime="20170809 04:00:51.725"></status>
</kw>
<status starttime="20170809 04:00:51.722" status="PASS" endtime="20170809 04:00:51.725"></status>
</kw>
<status starttime="20170809 04:00:51.722" status="PASS" endtime="20170809 04:00:51.725"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:51.725">Delete All Sessions</msg>
<status starttime="20170809 04:00:51.725" status="PASS" endtime="20170809 04:00:51.726"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:51.726">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:51.465" status="PASS" endtime="20170809 04:00:51.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:51.726" status="PASS" endtime="20170809 04:00:51.726"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.727">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:51.727">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:51.727">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:51.727" status="PASS" endtime="20170809 04:00:51.727"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:51.727">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:00:51.464" status="PASS" endtime="20170809 04:00:51.727"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:51.728">${power_state} = On</msg>
<status starttime="20170809 04:00:51.464" status="PASS" endtime="20170809 04:00:51.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:00:51.728" status="PASS" endtime="20170809 04:00:51.728"></status>
</kw>
<status starttime="20170809 04:00:51.463" status="PASS" endtime="20170809 04:00:51.729"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.732">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:51.732" status="PASS" endtime="20170809 04:00:51.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.733">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:51.733" status="PASS" endtime="20170809 04:00:51.733"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.734">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:51.733" status="PASS" endtime="20170809 04:00:51.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.735">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:51.734" status="PASS" endtime="20170809 04:00:51.735"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.913">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:51.736" status="PASS" endtime="20170809 04:00:51.913"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:51.913">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:51.913">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:51.735" status="PASS" endtime="20170809 04:00:51.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.914">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:51.913" status="PASS" endtime="20170809 04:00:51.914"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:51.914" status="PASS" endtime="20170809 04:00:51.914"></status>
</kw>
<status starttime="20170809 04:00:51.731" status="PASS" endtime="20170809 04:00:51.915"></status>
</kw>
<status starttime="20170809 04:00:51.731" status="PASS" endtime="20170809 04:00:51.915"></status>
</kw>
<status starttime="20170809 04:00:51.730" status="PASS" endtime="20170809 04:00:51.915"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.915">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:00:51.915" status="PASS" endtime="20170809 04:00:51.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:51.918">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:51.917" status="PASS" endtime="20170809 04:00:51.918"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:51.919">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:00:51.919" status="PASS" endtime="20170809 04:00:51.919"></status>
</kw>
<status starttime="20170809 04:00:51.918" status="PASS" endtime="20170809 04:00:51.919"></status>
</kw>
<status starttime="20170809 04:00:51.916" status="PASS" endtime="20170809 04:00:51.919"></status>
</kw>
<status starttime="20170809 04:00:51.916" status="PASS" endtime="20170809 04:00:51.919"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.009">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:52.009">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:51.919" status="PASS" endtime="20170809 04:00:52.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.011">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:52.010" status="PASS" endtime="20170809 04:00:52.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:52.012">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:52.012" status="PASS" endtime="20170809 04:00:52.012"></status>
</kw>
<status starttime="20170809 04:00:52.011" status="PASS" endtime="20170809 04:00:52.012"></status>
</kw>
<status starttime="20170809 04:00:52.010" status="PASS" endtime="20170809 04:00:52.012"></status>
</kw>
<status starttime="20170809 04:00:52.009" status="PASS" endtime="20170809 04:00:52.012"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:52.013">Delete All Sessions</msg>
<status starttime="20170809 04:00:52.013" status="PASS" endtime="20170809 04:00:52.013"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:52.013">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:51.730" status="PASS" endtime="20170809 04:00:52.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:52.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:52.013" status="PASS" endtime="20170809 04:00:52.014"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.014">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:52.014">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:52.015">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:52.014" status="PASS" endtime="20170809 04:00:52.015"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:52.015">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:00:51.729" status="PASS" endtime="20170809 04:00:52.015"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:52.015">${host_state} = Running</msg>
<status starttime="20170809 04:00:51.729" status="PASS" endtime="20170809 04:00:52.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:00:52.015" status="PASS" endtime="20170809 04:00:52.016"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:52.020">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:00:52.019" status="PASS" endtime="20170809 04:00:52.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.021">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:00:52.020" status="PASS" endtime="20170809 04:00:52.021"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.021">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:00:52.021" status="PASS" endtime="20170809 04:00:52.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.022">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:00:52.021" status="PASS" endtime="20170809 04:00:52.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:52.214">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:00:52.023" status="PASS" endtime="20170809 04:00:52.214"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:52.214">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:00:52.214">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:52.022" status="PASS" endtime="20170809 04:00:52.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:52.215">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:52.215" status="PASS" endtime="20170809 04:00:52.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:52.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:52.216" status="PASS" endtime="20170809 04:00:52.216"></status>
</kw>
<status starttime="20170809 04:00:52.019" status="PASS" endtime="20170809 04:00:52.216"></status>
</kw>
<status starttime="20170809 04:00:52.018" status="PASS" endtime="20170809 04:00:52.217"></status>
</kw>
<status starttime="20170809 04:00:52.018" status="PASS" endtime="20170809 04:00:52.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.217">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:00:52.217" status="PASS" endtime="20170809 04:00:52.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.219">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:52.219" status="PASS" endtime="20170809 04:00:52.219"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:52.220">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:00:52.220" status="PASS" endtime="20170809 04:00:52.220"></status>
</kw>
<status starttime="20170809 04:00:52.220" status="PASS" endtime="20170809 04:00:52.221"></status>
</kw>
<status starttime="20170809 04:00:52.218" status="PASS" endtime="20170809 04:00:52.221"></status>
</kw>
<status starttime="20170809 04:00:52.218" status="PASS" endtime="20170809 04:00:52.221"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.308">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:00:52.308">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:52.221" status="PASS" endtime="20170809 04:00:52.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.310">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:52.309" status="PASS" endtime="20170809 04:00:52.310"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:52.311">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:00:52.311" status="PASS" endtime="20170809 04:00:52.311"></status>
</kw>
<status starttime="20170809 04:00:52.310" status="PASS" endtime="20170809 04:00:52.311"></status>
</kw>
<status starttime="20170809 04:00:52.309" status="PASS" endtime="20170809 04:00:52.311"></status>
</kw>
<status starttime="20170809 04:00:52.308" status="PASS" endtime="20170809 04:00:52.311"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:00:52.312">Delete All Sessions</msg>
<status starttime="20170809 04:00:52.312" status="PASS" endtime="20170809 04:00:52.312"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:52.312">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:00:52.017" status="PASS" endtime="20170809 04:00:52.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:00:52.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:00:52.312" status="PASS" endtime="20170809 04:00:52.313"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:00:52.313">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:00:52.313">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:00:52.313">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:00:52.313" status="PASS" endtime="20170809 04:00:52.313"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:52.314">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:52.017" status="PASS" endtime="20170809 04:00:52.314"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:00:52.314">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:00:52.016" status="PASS" endtime="20170809 04:00:52.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:00:52.315">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:00:52.314" status="FAIL" endtime="20170809 04:00:52.315"></status>
</kw>
<status starttime="20170809 04:00:52.016" status="FAIL" endtime="20170809 04:00:52.315"></status>
</kw>
<status starttime="20170809 04:00:51.463" status="FAIL" endtime="20170809 04:00:52.315"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:02.321">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:02.321" status="PASS" endtime="20170809 04:01:02.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:02.322">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:02.322" status="PASS" endtime="20170809 04:01:02.322"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:02.323">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:02.322" status="PASS" endtime="20170809 04:01:02.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:02.323">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:02.323" status="PASS" endtime="20170809 04:01:02.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:02.959">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:02.324" status="PASS" endtime="20170809 04:01:02.959"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:02.960">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:02.960">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:02.324" status="PASS" endtime="20170809 04:01:02.960"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:02.960">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:02.960" status="PASS" endtime="20170809 04:01:02.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:02.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:02.961" status="PASS" endtime="20170809 04:01:02.961"></status>
</kw>
<status starttime="20170809 04:01:02.320" status="PASS" endtime="20170809 04:01:02.961"></status>
</kw>
<status starttime="20170809 04:01:02.319" status="PASS" endtime="20170809 04:01:02.961"></status>
</kw>
<status starttime="20170809 04:01:02.318" status="PASS" endtime="20170809 04:01:02.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:02.962">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:01:02.962" status="PASS" endtime="20170809 04:01:02.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:02.964">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:02.963" status="PASS" endtime="20170809 04:01:02.964"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:02.965">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:02.965" status="PASS" endtime="20170809 04:01:02.965"></status>
</kw>
<status starttime="20170809 04:01:02.964" status="PASS" endtime="20170809 04:01:02.965"></status>
</kw>
<status starttime="20170809 04:01:02.963" status="PASS" endtime="20170809 04:01:02.965"></status>
</kw>
<status starttime="20170809 04:01:02.962" status="PASS" endtime="20170809 04:01:02.965"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:06.116">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:06.116">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:02.966" status="PASS" endtime="20170809 04:01:06.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:06.119">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:06.118" status="PASS" endtime="20170809 04:01:06.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:06.120">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:06.119" status="PASS" endtime="20170809 04:01:06.120"></status>
</kw>
<status starttime="20170809 04:01:06.119" status="PASS" endtime="20170809 04:01:06.120"></status>
</kw>
<status starttime="20170809 04:01:06.117" status="PASS" endtime="20170809 04:01:06.120"></status>
</kw>
<status starttime="20170809 04:01:06.117" status="PASS" endtime="20170809 04:01:06.120"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:06.120">Delete All Sessions</msg>
<status starttime="20170809 04:01:06.120" status="PASS" endtime="20170809 04:01:06.121"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:06.121">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:02.318" status="PASS" endtime="20170809 04:01:06.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:06.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:06.121" status="PASS" endtime="20170809 04:01:06.121"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:06.122">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:06.122">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:06.122">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:06.122" status="PASS" endtime="20170809 04:01:06.122"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:06.122">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:01:02.317" status="PASS" endtime="20170809 04:01:06.123"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:06.123">${power_state} = On</msg>
<status starttime="20170809 04:01:02.317" status="PASS" endtime="20170809 04:01:06.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:01:06.123" status="PASS" endtime="20170809 04:01:06.123"></status>
</kw>
<status starttime="20170809 04:01:02.316" status="PASS" endtime="20170809 04:01:06.123"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:06.127">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:06.127" status="PASS" endtime="20170809 04:01:06.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:06.128">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:06.128" status="PASS" endtime="20170809 04:01:06.129"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:06.129">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:06.129" status="PASS" endtime="20170809 04:01:06.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:06.130">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:06.129" status="PASS" endtime="20170809 04:01:06.130"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:06.473">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:06.130" status="PASS" endtime="20170809 04:01:06.473"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:06.473">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:06.473">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:06.130" status="PASS" endtime="20170809 04:01:06.473"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:06.474">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:06.473" status="PASS" endtime="20170809 04:01:06.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:06.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:06.474" status="PASS" endtime="20170809 04:01:06.475"></status>
</kw>
<status starttime="20170809 04:01:06.127" status="PASS" endtime="20170809 04:01:06.475"></status>
</kw>
<status starttime="20170809 04:01:06.126" status="PASS" endtime="20170809 04:01:06.475"></status>
</kw>
<status starttime="20170809 04:01:06.126" status="PASS" endtime="20170809 04:01:06.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:06.476">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:01:06.475" status="PASS" endtime="20170809 04:01:06.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:06.478">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:06.477" status="PASS" endtime="20170809 04:01:06.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:06.479">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:06.479" status="PASS" endtime="20170809 04:01:06.479"></status>
</kw>
<status starttime="20170809 04:01:06.478" status="PASS" endtime="20170809 04:01:06.479"></status>
</kw>
<status starttime="20170809 04:01:06.476" status="PASS" endtime="20170809 04:01:06.479"></status>
</kw>
<status starttime="20170809 04:01:06.476" status="PASS" endtime="20170809 04:01:06.479"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:08.553">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:08.553">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:06.480" status="PASS" endtime="20170809 04:01:08.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:08.555">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:08.554" status="PASS" endtime="20170809 04:01:08.555"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:08.556">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:08.556" status="PASS" endtime="20170809 04:01:08.556"></status>
</kw>
<status starttime="20170809 04:01:08.555" status="PASS" endtime="20170809 04:01:08.556"></status>
</kw>
<status starttime="20170809 04:01:08.554" status="PASS" endtime="20170809 04:01:08.556"></status>
</kw>
<status starttime="20170809 04:01:08.553" status="PASS" endtime="20170809 04:01:08.556"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:08.557">Delete All Sessions</msg>
<status starttime="20170809 04:01:08.557" status="PASS" endtime="20170809 04:01:08.557"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:08.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:06.125" status="PASS" endtime="20170809 04:01:08.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:08.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:08.557" status="PASS" endtime="20170809 04:01:08.558"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:08.558">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:08.558">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:08.558">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:08.558" status="PASS" endtime="20170809 04:01:08.558"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:08.559">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:01:06.124" status="PASS" endtime="20170809 04:01:08.559"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:08.559">${host_state} = Running</msg>
<status starttime="20170809 04:01:06.124" status="PASS" endtime="20170809 04:01:08.559"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:01:08.560" status="PASS" endtime="20170809 04:01:08.560"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:08.565">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:08.564" status="PASS" endtime="20170809 04:01:08.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:08.566">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:08.565" status="PASS" endtime="20170809 04:01:08.566"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:08.566">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:08.566" status="PASS" endtime="20170809 04:01:08.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:08.570">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:08.567" status="PASS" endtime="20170809 04:01:08.570"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:08.816">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:08.571" status="PASS" endtime="20170809 04:01:08.816"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:08.816">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:08.816">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:08.570" status="PASS" endtime="20170809 04:01:08.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:08.817">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:08.816" status="PASS" endtime="20170809 04:01:08.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:08.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:08.817" status="PASS" endtime="20170809 04:01:08.817"></status>
</kw>
<status starttime="20170809 04:01:08.564" status="PASS" endtime="20170809 04:01:08.818"></status>
</kw>
<status starttime="20170809 04:01:08.563" status="PASS" endtime="20170809 04:01:08.818"></status>
</kw>
<status starttime="20170809 04:01:08.563" status="PASS" endtime="20170809 04:01:08.818"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:08.818">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:01:08.818" status="PASS" endtime="20170809 04:01:08.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:08.820">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:01:08.820" status="PASS" endtime="20170809 04:01:08.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:08.821">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:01:08.821" status="PASS" endtime="20170809 04:01:08.821"></status>
</kw>
<status starttime="20170809 04:01:08.821" status="PASS" endtime="20170809 04:01:08.822"></status>
</kw>
<status starttime="20170809 04:01:08.819" status="PASS" endtime="20170809 04:01:08.822"></status>
</kw>
<status starttime="20170809 04:01:08.819" status="PASS" endtime="20170809 04:01:08.822"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:08.999">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:08.999">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:08.822" status="PASS" endtime="20170809 04:01:08.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:09.001">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:09.000" status="PASS" endtime="20170809 04:01:09.001"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:09.002">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:09.002" status="PASS" endtime="20170809 04:01:09.002"></status>
</kw>
<status starttime="20170809 04:01:09.001" status="PASS" endtime="20170809 04:01:09.002"></status>
</kw>
<status starttime="20170809 04:01:09.000" status="PASS" endtime="20170809 04:01:09.002"></status>
</kw>
<status starttime="20170809 04:01:08.999" status="PASS" endtime="20170809 04:01:09.002"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:09.003">Delete All Sessions</msg>
<status starttime="20170809 04:01:09.002" status="PASS" endtime="20170809 04:01:09.003"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:09.003">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:08.562" status="PASS" endtime="20170809 04:01:09.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:09.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:09.003" status="PASS" endtime="20170809 04:01:09.004"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:09.004">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:09.004">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:09.005">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:09.004" status="PASS" endtime="20170809 04:01:09.005"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:09.005">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:01:08.561" status="PASS" endtime="20170809 04:01:09.005"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:09.005">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:01:08.561" status="PASS" endtime="20170809 04:01:09.005"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:01:09.006">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:01:09.005" status="FAIL" endtime="20170809 04:01:09.006"></status>
</kw>
<status starttime="20170809 04:01:08.560" status="FAIL" endtime="20170809 04:01:09.006"></status>
</kw>
<status starttime="20170809 04:01:02.315" status="FAIL" endtime="20170809 04:01:09.006"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:19.012">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:19.012" status="PASS" endtime="20170809 04:01:19.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:19.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:19.013" status="PASS" endtime="20170809 04:01:19.013"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:19.014">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:19.013" status="PASS" endtime="20170809 04:01:19.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:19.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:19.014" status="PASS" endtime="20170809 04:01:19.015"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:19.637">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:19.015" status="PASS" endtime="20170809 04:01:19.637"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:19.637">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:19.637">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:19.015" status="PASS" endtime="20170809 04:01:19.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:19.638">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:19.638" status="PASS" endtime="20170809 04:01:19.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:19.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:19.638" status="PASS" endtime="20170809 04:01:19.639"></status>
</kw>
<status starttime="20170809 04:01:19.011" status="PASS" endtime="20170809 04:01:19.639"></status>
</kw>
<status starttime="20170809 04:01:19.011" status="PASS" endtime="20170809 04:01:19.639"></status>
</kw>
<status starttime="20170809 04:01:19.010" status="PASS" endtime="20170809 04:01:19.639"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:19.640">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:01:19.639" status="PASS" endtime="20170809 04:01:19.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:19.642">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:19.641" status="PASS" endtime="20170809 04:01:19.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:19.643">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:19.643" status="PASS" endtime="20170809 04:01:19.643"></status>
</kw>
<status starttime="20170809 04:01:19.642" status="PASS" endtime="20170809 04:01:19.643"></status>
</kw>
<status starttime="20170809 04:01:19.641" status="PASS" endtime="20170809 04:01:19.643"></status>
</kw>
<status starttime="20170809 04:01:19.640" status="PASS" endtime="20170809 04:01:19.643"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:22.054">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:22.054">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:19.643" status="PASS" endtime="20170809 04:01:22.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:22.056">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:22.056" status="PASS" endtime="20170809 04:01:22.056"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:22.057">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:22.057" status="PASS" endtime="20170809 04:01:22.057"></status>
</kw>
<status starttime="20170809 04:01:22.056" status="PASS" endtime="20170809 04:01:22.057"></status>
</kw>
<status starttime="20170809 04:01:22.055" status="PASS" endtime="20170809 04:01:22.057"></status>
</kw>
<status starttime="20170809 04:01:22.054" status="PASS" endtime="20170809 04:01:22.058"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:22.058">Delete All Sessions</msg>
<status starttime="20170809 04:01:22.058" status="PASS" endtime="20170809 04:01:22.058"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:22.058">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:19.009" status="PASS" endtime="20170809 04:01:22.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:22.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:22.058" status="PASS" endtime="20170809 04:01:22.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:22.059">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:22.059">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:22.060">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:22.059" status="PASS" endtime="20170809 04:01:22.060"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:22.060">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170809 04:01:19.009" status="PASS" endtime="20170809 04:01:22.060"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:22.060">${power_state} = Off</msg>
<status starttime="20170809 04:01:19.008" status="PASS" endtime="20170809 04:01:22.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:01:22.061">On != Off</msg>
<status starttime="20170809 04:01:22.061" status="FAIL" endtime="20170809 04:01:22.061"></status>
</kw>
<status starttime="20170809 04:01:19.008" status="FAIL" endtime="20170809 04:01:22.061"></status>
</kw>
<status starttime="20170809 04:01:19.007" status="FAIL" endtime="20170809 04:01:22.061"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:32.067">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:32.067" status="PASS" endtime="20170809 04:01:32.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:32.068">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:32.068" status="PASS" endtime="20170809 04:01:32.068"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:32.069">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:32.068" status="PASS" endtime="20170809 04:01:32.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:32.069">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:32.069" status="PASS" endtime="20170809 04:01:32.069"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:32.512">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:32.070" status="PASS" endtime="20170809 04:01:32.513"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:32.513">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:32.513">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:32.070" status="PASS" endtime="20170809 04:01:32.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:32.513">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:32.513" status="PASS" endtime="20170809 04:01:32.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:32.514">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:32.514" status="PASS" endtime="20170809 04:01:32.514"></status>
</kw>
<status starttime="20170809 04:01:32.066" status="PASS" endtime="20170809 04:01:32.514"></status>
</kw>
<status starttime="20170809 04:01:32.066" status="PASS" endtime="20170809 04:01:32.514"></status>
</kw>
<status starttime="20170809 04:01:32.065" status="PASS" endtime="20170809 04:01:32.514"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:32.515">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:01:32.515" status="PASS" endtime="20170809 04:01:32.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:32.517">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:32.516" status="PASS" endtime="20170809 04:01:32.517"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:32.518">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:32.518" status="PASS" endtime="20170809 04:01:32.518"></status>
</kw>
<status starttime="20170809 04:01:32.517" status="PASS" endtime="20170809 04:01:32.519"></status>
</kw>
<status starttime="20170809 04:01:32.516" status="PASS" endtime="20170809 04:01:32.519"></status>
</kw>
<status starttime="20170809 04:01:32.515" status="PASS" endtime="20170809 04:01:32.519"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:33.483">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:33.483">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:32.519" status="PASS" endtime="20170809 04:01:33.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:33.485">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:33.484" status="PASS" endtime="20170809 04:01:33.485"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:33.486">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:33.485" status="PASS" endtime="20170809 04:01:33.486"></status>
</kw>
<status starttime="20170809 04:01:33.485" status="PASS" endtime="20170809 04:01:33.486"></status>
</kw>
<status starttime="20170809 04:01:33.484" status="PASS" endtime="20170809 04:01:33.486"></status>
</kw>
<status starttime="20170809 04:01:33.483" status="PASS" endtime="20170809 04:01:33.486"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:33.486">Delete All Sessions</msg>
<status starttime="20170809 04:01:33.486" status="PASS" endtime="20170809 04:01:33.487"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:33.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:32.064" status="PASS" endtime="20170809 04:01:33.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:33.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:33.487" status="PASS" endtime="20170809 04:01:33.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:33.488">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:33.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:33.488">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:33.488" status="PASS" endtime="20170809 04:01:33.488"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:33.488">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:01:32.064" status="PASS" endtime="20170809 04:01:33.489"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:33.489">${power_state} = On</msg>
<status starttime="20170809 04:01:32.064" status="PASS" endtime="20170809 04:01:33.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:01:33.489" status="PASS" endtime="20170809 04:01:33.489"></status>
</kw>
<status starttime="20170809 04:01:32.063" status="PASS" endtime="20170809 04:01:33.489"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:33.493">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:33.493" status="PASS" endtime="20170809 04:01:33.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:33.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:33.494" status="PASS" endtime="20170809 04:01:33.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:33.495">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:33.494" status="PASS" endtime="20170809 04:01:33.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:33.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:33.495" status="PASS" endtime="20170809 04:01:33.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:33.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:33.496" status="PASS" endtime="20170809 04:01:33.964"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:33.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:33.965">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:33.496" status="PASS" endtime="20170809 04:01:33.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:33.965">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:33.965" status="PASS" endtime="20170809 04:01:33.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:33.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:33.966" status="PASS" endtime="20170809 04:01:33.966"></status>
</kw>
<status starttime="20170809 04:01:33.492" status="PASS" endtime="20170809 04:01:33.966"></status>
</kw>
<status starttime="20170809 04:01:33.492" status="PASS" endtime="20170809 04:01:33.966"></status>
</kw>
<status starttime="20170809 04:01:33.491" status="PASS" endtime="20170809 04:01:33.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:33.967">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:01:33.967" status="PASS" endtime="20170809 04:01:33.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:33.969">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:33.968" status="PASS" endtime="20170809 04:01:33.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:33.970">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:33.970" status="PASS" endtime="20170809 04:01:33.970"></status>
</kw>
<status starttime="20170809 04:01:33.969" status="PASS" endtime="20170809 04:01:33.970"></status>
</kw>
<status starttime="20170809 04:01:33.968" status="PASS" endtime="20170809 04:01:33.970"></status>
</kw>
<status starttime="20170809 04:01:33.967" status="PASS" endtime="20170809 04:01:33.970"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:34.515">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:34.515">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:33.970" status="PASS" endtime="20170809 04:01:34.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:34.517">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:34.516" status="PASS" endtime="20170809 04:01:34.517"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:34.518">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:34.517" status="PASS" endtime="20170809 04:01:34.518"></status>
</kw>
<status starttime="20170809 04:01:34.517" status="PASS" endtime="20170809 04:01:34.518"></status>
</kw>
<status starttime="20170809 04:01:34.516" status="PASS" endtime="20170809 04:01:34.518"></status>
</kw>
<status starttime="20170809 04:01:34.515" status="PASS" endtime="20170809 04:01:34.518"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:34.518">Delete All Sessions</msg>
<status starttime="20170809 04:01:34.518" status="PASS" endtime="20170809 04:01:34.518"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:34.519">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:33.491" status="PASS" endtime="20170809 04:01:34.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:34.519">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:34.519" status="PASS" endtime="20170809 04:01:34.519"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:34.520">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:34.520">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:34.520">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:34.520" status="PASS" endtime="20170809 04:01:34.520"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:34.520">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:01:33.490" status="PASS" endtime="20170809 04:01:34.520"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:34.521">${host_state} = Running</msg>
<status starttime="20170809 04:01:33.490" status="PASS" endtime="20170809 04:01:34.521"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:01:34.521" status="PASS" endtime="20170809 04:01:34.521"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:34.525">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:34.525" status="PASS" endtime="20170809 04:01:34.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:34.526">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:34.526" status="PASS" endtime="20170809 04:01:34.526"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:34.527">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:34.526" status="PASS" endtime="20170809 04:01:34.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:34.528">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:34.527" status="PASS" endtime="20170809 04:01:34.528"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:34.986">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:34.528" status="PASS" endtime="20170809 04:01:34.986"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:34.986">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:34.986">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:34.528" status="PASS" endtime="20170809 04:01:34.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:34.987">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:34.986" status="PASS" endtime="20170809 04:01:34.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:34.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:34.987" status="PASS" endtime="20170809 04:01:34.987"></status>
</kw>
<status starttime="20170809 04:01:34.524" status="PASS" endtime="20170809 04:01:34.988"></status>
</kw>
<status starttime="20170809 04:01:34.524" status="PASS" endtime="20170809 04:01:34.988"></status>
</kw>
<status starttime="20170809 04:01:34.524" status="PASS" endtime="20170809 04:01:34.988"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:34.988">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:01:34.988" status="PASS" endtime="20170809 04:01:34.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:34.990">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:01:34.990" status="PASS" endtime="20170809 04:01:34.990"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:34.991">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:01:34.991" status="PASS" endtime="20170809 04:01:34.991"></status>
</kw>
<status starttime="20170809 04:01:34.991" status="PASS" endtime="20170809 04:01:34.991"></status>
</kw>
<status starttime="20170809 04:01:34.989" status="PASS" endtime="20170809 04:01:34.992"></status>
</kw>
<status starttime="20170809 04:01:34.989" status="PASS" endtime="20170809 04:01:34.992"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:35.430">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:35.430">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:34.992" status="PASS" endtime="20170809 04:01:35.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:35.432">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:35.432" status="PASS" endtime="20170809 04:01:35.432"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:35.433">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:35.433" status="PASS" endtime="20170809 04:01:35.433"></status>
</kw>
<status starttime="20170809 04:01:35.432" status="PASS" endtime="20170809 04:01:35.434"></status>
</kw>
<status starttime="20170809 04:01:35.431" status="PASS" endtime="20170809 04:01:35.434"></status>
</kw>
<status starttime="20170809 04:01:35.431" status="PASS" endtime="20170809 04:01:35.434"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:35.434">Delete All Sessions</msg>
<status starttime="20170809 04:01:35.434" status="PASS" endtime="20170809 04:01:35.434"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:35.434">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:34.523" status="PASS" endtime="20170809 04:01:35.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:35.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:35.435" status="PASS" endtime="20170809 04:01:35.435"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:35.436">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:35.436">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:35.436">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:35.435" status="PASS" endtime="20170809 04:01:35.436"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:35.436">${state} = Off</msg>
<status starttime="20170809 04:01:34.522" status="PASS" endtime="20170809 04:01:35.436"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:35.436">${boot_progress} = Off</msg>
<status starttime="20170809 04:01:34.522" status="PASS" endtime="20170809 04:01:35.436"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:01:35.437">Off != FW Progress, Starting OS</msg>
<status starttime="20170809 04:01:35.437" status="FAIL" endtime="20170809 04:01:35.437"></status>
</kw>
<status starttime="20170809 04:01:34.521" status="FAIL" endtime="20170809 04:01:35.437"></status>
</kw>
<status starttime="20170809 04:01:32.062" status="FAIL" endtime="20170809 04:01:35.437"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.442">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:45.442" status="PASS" endtime="20170809 04:01:45.443"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.443">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:45.443" status="PASS" endtime="20170809 04:01:45.443"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.444">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:45.444" status="PASS" endtime="20170809 04:01:45.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.445">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:45.444" status="PASS" endtime="20170809 04:01:45.445"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.636">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:45.445" status="PASS" endtime="20170809 04:01:45.636"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:45.636">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:45.636">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:45.445" status="PASS" endtime="20170809 04:01:45.636"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.637">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:45.636" status="PASS" endtime="20170809 04:01:45.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.637">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:45.637" status="PASS" endtime="20170809 04:01:45.637"></status>
</kw>
<status starttime="20170809 04:01:45.442" status="PASS" endtime="20170809 04:01:45.638"></status>
</kw>
<status starttime="20170809 04:01:45.441" status="PASS" endtime="20170809 04:01:45.638"></status>
</kw>
<status starttime="20170809 04:01:45.441" status="PASS" endtime="20170809 04:01:45.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.638">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:01:45.638" status="PASS" endtime="20170809 04:01:45.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.640">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:45.640" status="PASS" endtime="20170809 04:01:45.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.641">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:45.641" status="PASS" endtime="20170809 04:01:45.641"></status>
</kw>
<status starttime="20170809 04:01:45.640" status="PASS" endtime="20170809 04:01:45.641"></status>
</kw>
<status starttime="20170809 04:01:45.639" status="PASS" endtime="20170809 04:01:45.642"></status>
</kw>
<status starttime="20170809 04:01:45.639" status="PASS" endtime="20170809 04:01:45.642"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.718">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:45.718">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:45.642" status="PASS" endtime="20170809 04:01:45.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.720">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:45.719" status="PASS" endtime="20170809 04:01:45.720"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.721">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:45.720" status="PASS" endtime="20170809 04:01:45.721"></status>
</kw>
<status starttime="20170809 04:01:45.720" status="PASS" endtime="20170809 04:01:45.721"></status>
</kw>
<status starttime="20170809 04:01:45.719" status="PASS" endtime="20170809 04:01:45.721"></status>
</kw>
<status starttime="20170809 04:01:45.718" status="PASS" endtime="20170809 04:01:45.721"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:45.721">Delete All Sessions</msg>
<status starttime="20170809 04:01:45.721" status="PASS" endtime="20170809 04:01:45.722"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:45.722">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:45.440" status="PASS" endtime="20170809 04:01:45.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:45.722" status="PASS" endtime="20170809 04:01:45.722"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.723">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:45.723">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:45.723">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:45.723" status="PASS" endtime="20170809 04:01:45.723"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:45.723">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:01:45.439" status="PASS" endtime="20170809 04:01:45.724"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:45.724">${power_state} = On</msg>
<status starttime="20170809 04:01:45.439" status="PASS" endtime="20170809 04:01:45.724"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:01:45.724" status="PASS" endtime="20170809 04:01:45.724"></status>
</kw>
<status starttime="20170809 04:01:45.438" status="PASS" endtime="20170809 04:01:45.724"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.728">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:45.728" status="PASS" endtime="20170809 04:01:45.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:45.729" status="PASS" endtime="20170809 04:01:45.729"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.730">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:45.730" status="PASS" endtime="20170809 04:01:45.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.731">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:45.730" status="PASS" endtime="20170809 04:01:45.731"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.949">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:45.731" status="PASS" endtime="20170809 04:01:45.950"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:45.950">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:45.950">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:45.731" status="PASS" endtime="20170809 04:01:45.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.950">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:45.950" status="PASS" endtime="20170809 04:01:45.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:45.951" status="PASS" endtime="20170809 04:01:45.951"></status>
</kw>
<status starttime="20170809 04:01:45.727" status="PASS" endtime="20170809 04:01:45.951"></status>
</kw>
<status starttime="20170809 04:01:45.727" status="PASS" endtime="20170809 04:01:45.951"></status>
</kw>
<status starttime="20170809 04:01:45.726" status="PASS" endtime="20170809 04:01:45.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.952">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:01:45.952" status="PASS" endtime="20170809 04:01:45.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:45.954">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:45.953" status="PASS" endtime="20170809 04:01:45.954"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:45.955">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:45.955" status="PASS" endtime="20170809 04:01:45.955"></status>
</kw>
<status starttime="20170809 04:01:45.954" status="PASS" endtime="20170809 04:01:45.955"></status>
</kw>
<status starttime="20170809 04:01:45.953" status="PASS" endtime="20170809 04:01:45.955"></status>
</kw>
<status starttime="20170809 04:01:45.952" status="PASS" endtime="20170809 04:01:45.955"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.056">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:46.056">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:45.956" status="PASS" endtime="20170809 04:01:46.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.058">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:46.058" status="PASS" endtime="20170809 04:01:46.058"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:46.059">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:46.059" status="PASS" endtime="20170809 04:01:46.059"></status>
</kw>
<status starttime="20170809 04:01:46.058" status="PASS" endtime="20170809 04:01:46.059"></status>
</kw>
<status starttime="20170809 04:01:46.057" status="PASS" endtime="20170809 04:01:46.060"></status>
</kw>
<status starttime="20170809 04:01:46.057" status="PASS" endtime="20170809 04:01:46.060"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:46.060">Delete All Sessions</msg>
<status starttime="20170809 04:01:46.060" status="PASS" endtime="20170809 04:01:46.060"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:46.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:45.725" status="PASS" endtime="20170809 04:01:46.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:46.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:46.061" status="PASS" endtime="20170809 04:01:46.061"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.062">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:46.062">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:46.062">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:46.061" status="PASS" endtime="20170809 04:01:46.062"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:46.062">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:01:45.725" status="PASS" endtime="20170809 04:01:46.062"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:46.063">${host_state} = Running</msg>
<status starttime="20170809 04:01:45.725" status="PASS" endtime="20170809 04:01:46.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:01:46.063" status="PASS" endtime="20170809 04:01:46.064"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:46.070">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:46.069" status="PASS" endtime="20170809 04:01:46.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.071">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:46.071" status="PASS" endtime="20170809 04:01:46.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.071">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:46.071" status="PASS" endtime="20170809 04:01:46.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:46.072" status="PASS" endtime="20170809 04:01:46.072"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:46.290">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:46.073" status="PASS" endtime="20170809 04:01:46.290"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:46.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:46.290">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:46.072" status="PASS" endtime="20170809 04:01:46.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:46.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:46.291" status="PASS" endtime="20170809 04:01:46.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:46.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:46.293" status="PASS" endtime="20170809 04:01:46.293"></status>
</kw>
<status starttime="20170809 04:01:46.068" status="PASS" endtime="20170809 04:01:46.293"></status>
</kw>
<status starttime="20170809 04:01:46.068" status="PASS" endtime="20170809 04:01:46.293"></status>
</kw>
<status starttime="20170809 04:01:46.067" status="PASS" endtime="20170809 04:01:46.294"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.294">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:01:46.294" status="PASS" endtime="20170809 04:01:46.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.296">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:01:46.296" status="PASS" endtime="20170809 04:01:46.296"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:46.297">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:01:46.297" status="PASS" endtime="20170809 04:01:46.297"></status>
</kw>
<status starttime="20170809 04:01:46.296" status="PASS" endtime="20170809 04:01:46.297"></status>
</kw>
<status starttime="20170809 04:01:46.295" status="PASS" endtime="20170809 04:01:46.298"></status>
</kw>
<status starttime="20170809 04:01:46.294" status="PASS" endtime="20170809 04:01:46.298"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.368">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:46.368">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:46.298" status="PASS" endtime="20170809 04:01:46.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.370">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:46.369" status="PASS" endtime="20170809 04:01:46.370"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:46.371">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:46.371" status="PASS" endtime="20170809 04:01:46.371"></status>
</kw>
<status starttime="20170809 04:01:46.370" status="PASS" endtime="20170809 04:01:46.371"></status>
</kw>
<status starttime="20170809 04:01:46.369" status="PASS" endtime="20170809 04:01:46.371"></status>
</kw>
<status starttime="20170809 04:01:46.369" status="PASS" endtime="20170809 04:01:46.371"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:46.372">Delete All Sessions</msg>
<status starttime="20170809 04:01:46.372" status="PASS" endtime="20170809 04:01:46.372"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:46.372">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:46.066" status="PASS" endtime="20170809 04:01:46.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:46.373">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:46.372" status="PASS" endtime="20170809 04:01:46.373"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:46.373">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:46.373">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:46.374">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:46.373" status="PASS" endtime="20170809 04:01:46.374"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:46.374">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:01:46.065" status="PASS" endtime="20170809 04:01:46.374"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:46.374">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:01:46.064" status="PASS" endtime="20170809 04:01:46.374"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:01:46.375">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:01:46.374" status="FAIL" endtime="20170809 04:01:46.375"></status>
</kw>
<status starttime="20170809 04:01:46.064" status="FAIL" endtime="20170809 04:01:46.375"></status>
</kw>
<status starttime="20170809 04:01:45.438" status="FAIL" endtime="20170809 04:01:46.375"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.380">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:56.380" status="PASS" endtime="20170809 04:01:56.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.381">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:56.380" status="PASS" endtime="20170809 04:01:56.381"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.381">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:56.381" status="PASS" endtime="20170809 04:01:56.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.382">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:56.382" status="PASS" endtime="20170809 04:01:56.382"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.596">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:56.383" status="PASS" endtime="20170809 04:01:56.596"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:56.596">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:56.596">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:56.382" status="PASS" endtime="20170809 04:01:56.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.597">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:56.596" status="PASS" endtime="20170809 04:01:56.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:56.597" status="PASS" endtime="20170809 04:01:56.598"></status>
</kw>
<status starttime="20170809 04:01:56.379" status="PASS" endtime="20170809 04:01:56.598"></status>
</kw>
<status starttime="20170809 04:01:56.379" status="PASS" endtime="20170809 04:01:56.598"></status>
</kw>
<status starttime="20170809 04:01:56.378" status="PASS" endtime="20170809 04:01:56.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.599">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:01:56.598" status="PASS" endtime="20170809 04:01:56.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.601">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:56.600" status="PASS" endtime="20170809 04:01:56.601"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.602">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:56.601" status="PASS" endtime="20170809 04:01:56.602"></status>
</kw>
<status starttime="20170809 04:01:56.601" status="PASS" endtime="20170809 04:01:56.602"></status>
</kw>
<status starttime="20170809 04:01:56.599" status="PASS" endtime="20170809 04:01:56.602"></status>
</kw>
<status starttime="20170809 04:01:56.599" status="PASS" endtime="20170809 04:01:56.602"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.665">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:56.666">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:56.602" status="PASS" endtime="20170809 04:01:56.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.668">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:56.667" status="PASS" endtime="20170809 04:01:56.668"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.668">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:56.668" status="PASS" endtime="20170809 04:01:56.669"></status>
</kw>
<status starttime="20170809 04:01:56.668" status="PASS" endtime="20170809 04:01:56.669"></status>
</kw>
<status starttime="20170809 04:01:56.666" status="PASS" endtime="20170809 04:01:56.669"></status>
</kw>
<status starttime="20170809 04:01:56.666" status="PASS" endtime="20170809 04:01:56.669"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:56.669">Delete All Sessions</msg>
<status starttime="20170809 04:01:56.669" status="PASS" endtime="20170809 04:01:56.669"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:56.669">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:56.377" status="PASS" endtime="20170809 04:01:56.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:56.670" status="PASS" endtime="20170809 04:01:56.670"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.671">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:56.671">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:56.671">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:56.670" status="PASS" endtime="20170809 04:01:56.671"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:56.671">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:01:56.377" status="PASS" endtime="20170809 04:01:56.671"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:56.672">${power_state} = On</msg>
<status starttime="20170809 04:01:56.376" status="PASS" endtime="20170809 04:01:56.672"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:01:56.672" status="PASS" endtime="20170809 04:01:56.672"></status>
</kw>
<status starttime="20170809 04:01:56.376" status="PASS" endtime="20170809 04:01:56.672"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.676">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:56.676" status="PASS" endtime="20170809 04:01:56.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:56.681" status="PASS" endtime="20170809 04:01:56.682"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.682">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:56.682" status="PASS" endtime="20170809 04:01:56.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:56.683" status="PASS" endtime="20170809 04:01:56.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.895">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:56.684" status="PASS" endtime="20170809 04:01:56.896"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:56.896">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:56.896">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:56.683" status="PASS" endtime="20170809 04:01:56.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.897">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:56.896" status="PASS" endtime="20170809 04:01:56.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.897">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:56.897" status="PASS" endtime="20170809 04:01:56.898"></status>
</kw>
<status starttime="20170809 04:01:56.675" status="PASS" endtime="20170809 04:01:56.898"></status>
</kw>
<status starttime="20170809 04:01:56.674" status="PASS" endtime="20170809 04:01:56.898"></status>
</kw>
<status starttime="20170809 04:01:56.674" status="PASS" endtime="20170809 04:01:56.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.898">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:01:56.898" status="PASS" endtime="20170809 04:01:56.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:56.901">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:56.900" status="PASS" endtime="20170809 04:01:56.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:56.901">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:01:56.901" status="PASS" endtime="20170809 04:01:56.902"></status>
</kw>
<status starttime="20170809 04:01:56.901" status="PASS" endtime="20170809 04:01:56.902"></status>
</kw>
<status starttime="20170809 04:01:56.899" status="PASS" endtime="20170809 04:01:56.902"></status>
</kw>
<status starttime="20170809 04:01:56.899" status="PASS" endtime="20170809 04:01:56.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.018">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:57.018">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:56.902" status="PASS" endtime="20170809 04:01:57.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.020">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:57.019" status="PASS" endtime="20170809 04:01:57.020"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:57.021">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:57.021" status="PASS" endtime="20170809 04:01:57.021"></status>
</kw>
<status starttime="20170809 04:01:57.020" status="PASS" endtime="20170809 04:01:57.021"></status>
</kw>
<status starttime="20170809 04:01:57.019" status="PASS" endtime="20170809 04:01:57.021"></status>
</kw>
<status starttime="20170809 04:01:57.018" status="PASS" endtime="20170809 04:01:57.021"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:57.022">Delete All Sessions</msg>
<status starttime="20170809 04:01:57.021" status="PASS" endtime="20170809 04:01:57.022"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:57.022">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:56.673" status="PASS" endtime="20170809 04:01:57.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:57.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:57.022" status="PASS" endtime="20170809 04:01:57.023"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.023">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:57.023">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:57.023">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:57.023" status="PASS" endtime="20170809 04:01:57.023"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:57.024">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:01:56.673" status="PASS" endtime="20170809 04:01:57.024"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:57.024">${host_state} = Running</msg>
<status starttime="20170809 04:01:56.672" status="PASS" endtime="20170809 04:01:57.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:01:57.024" status="PASS" endtime="20170809 04:01:57.024"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:57.029">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:01:57.029" status="PASS" endtime="20170809 04:01:57.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:01:57.030" status="PASS" endtime="20170809 04:01:57.030"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.031">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:01:57.031" status="PASS" endtime="20170809 04:01:57.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.032">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:01:57.031" status="PASS" endtime="20170809 04:01:57.032"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:57.303">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:01:57.032" status="PASS" endtime="20170809 04:01:57.304"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:57.304">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:01:57.304">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:57.032" status="PASS" endtime="20170809 04:01:57.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:57.304">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:57.304" status="PASS" endtime="20170809 04:01:57.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:57.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:57.305" status="PASS" endtime="20170809 04:01:57.305"></status>
</kw>
<status starttime="20170809 04:01:57.029" status="PASS" endtime="20170809 04:01:57.306"></status>
</kw>
<status starttime="20170809 04:01:57.028" status="PASS" endtime="20170809 04:01:57.306"></status>
</kw>
<status starttime="20170809 04:01:57.027" status="PASS" endtime="20170809 04:01:57.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.306">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:01:57.306" status="PASS" endtime="20170809 04:01:57.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.308">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:01:57.308" status="PASS" endtime="20170809 04:01:57.308"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:57.310">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:01:57.309" status="PASS" endtime="20170809 04:01:57.310"></status>
</kw>
<status starttime="20170809 04:01:57.309" status="PASS" endtime="20170809 04:01:57.310"></status>
</kw>
<status starttime="20170809 04:01:57.307" status="PASS" endtime="20170809 04:01:57.310"></status>
</kw>
<status starttime="20170809 04:01:57.307" status="PASS" endtime="20170809 04:01:57.310"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.392">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:01:57.393">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:57.310" status="PASS" endtime="20170809 04:01:57.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.394">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:57.394" status="PASS" endtime="20170809 04:01:57.395"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:57.395">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:01:57.395" status="PASS" endtime="20170809 04:01:57.396"></status>
</kw>
<status starttime="20170809 04:01:57.395" status="PASS" endtime="20170809 04:01:57.396"></status>
</kw>
<status starttime="20170809 04:01:57.394" status="PASS" endtime="20170809 04:01:57.396"></status>
</kw>
<status starttime="20170809 04:01:57.393" status="PASS" endtime="20170809 04:01:57.396"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:01:57.396">Delete All Sessions</msg>
<status starttime="20170809 04:01:57.396" status="PASS" endtime="20170809 04:01:57.396"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:57.396">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:01:57.026" status="PASS" endtime="20170809 04:01:57.397"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:01:57.397">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:01:57.397" status="PASS" endtime="20170809 04:01:57.397"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:01:57.398">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:01:57.398">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:01:57.398">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:01:57.398" status="PASS" endtime="20170809 04:01:57.398"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:57.398">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:01:57.025" status="PASS" endtime="20170809 04:01:57.398"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:01:57.398">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:01:57.025" status="PASS" endtime="20170809 04:01:57.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:01:57.399">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:01:57.399" status="FAIL" endtime="20170809 04:01:57.399"></status>
</kw>
<status starttime="20170809 04:01:57.025" status="FAIL" endtime="20170809 04:01:57.399"></status>
</kw>
<status starttime="20170809 04:01:56.375" status="FAIL" endtime="20170809 04:01:57.400"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:07.405">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:07.404" status="PASS" endtime="20170809 04:02:07.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.406">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:07.405" status="PASS" endtime="20170809 04:02:07.406"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.406">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:07.406" status="PASS" endtime="20170809 04:02:07.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.407">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:07.407" status="PASS" endtime="20170809 04:02:07.407"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:07.585">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:07.408" status="PASS" endtime="20170809 04:02:07.585"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:07.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:07.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:07.407" status="PASS" endtime="20170809 04:02:07.585"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:07.586">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:07.586" status="PASS" endtime="20170809 04:02:07.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:07.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:07.586" status="PASS" endtime="20170809 04:02:07.587"></status>
</kw>
<status starttime="20170809 04:02:07.404" status="PASS" endtime="20170809 04:02:07.587"></status>
</kw>
<status starttime="20170809 04:02:07.403" status="PASS" endtime="20170809 04:02:07.587"></status>
</kw>
<status starttime="20170809 04:02:07.403" status="PASS" endtime="20170809 04:02:07.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.588">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:02:07.588" status="PASS" endtime="20170809 04:02:07.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.590">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:07.589" status="PASS" endtime="20170809 04:02:07.590"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:07.591">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:07.591" status="PASS" endtime="20170809 04:02:07.591"></status>
</kw>
<status starttime="20170809 04:02:07.590" status="PASS" endtime="20170809 04:02:07.591"></status>
</kw>
<status starttime="20170809 04:02:07.589" status="PASS" endtime="20170809 04:02:07.591"></status>
</kw>
<status starttime="20170809 04:02:07.588" status="PASS" endtime="20170809 04:02:07.591"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.658">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:07.658">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:07.592" status="PASS" endtime="20170809 04:02:07.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.659">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:07.659" status="PASS" endtime="20170809 04:02:07.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:07.661">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:07.660" status="PASS" endtime="20170809 04:02:07.661"></status>
</kw>
<status starttime="20170809 04:02:07.660" status="PASS" endtime="20170809 04:02:07.661"></status>
</kw>
<status starttime="20170809 04:02:07.659" status="PASS" endtime="20170809 04:02:07.661"></status>
</kw>
<status starttime="20170809 04:02:07.658" status="PASS" endtime="20170809 04:02:07.661"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:07.662">Delete All Sessions</msg>
<status starttime="20170809 04:02:07.662" status="PASS" endtime="20170809 04:02:07.662"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:07.662">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:07.402" status="PASS" endtime="20170809 04:02:07.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:07.663">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:07.662" status="PASS" endtime="20170809 04:02:07.663"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.663">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:07.663">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:07.663">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:07.663" status="PASS" endtime="20170809 04:02:07.663"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:07.664">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:02:07.402" status="PASS" endtime="20170809 04:02:07.664"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:07.664">${power_state} = On</msg>
<status starttime="20170809 04:02:07.401" status="PASS" endtime="20170809 04:02:07.664"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:02:07.664" status="PASS" endtime="20170809 04:02:07.665"></status>
</kw>
<status starttime="20170809 04:02:07.401" status="PASS" endtime="20170809 04:02:07.665"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:07.669">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:07.668" status="PASS" endtime="20170809 04:02:07.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.670">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:07.669" status="PASS" endtime="20170809 04:02:07.670"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.670">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:07.670" status="PASS" endtime="20170809 04:02:07.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:07.671">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:07.670" status="PASS" endtime="20170809 04:02:07.671"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.041">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:07.672" status="PASS" endtime="20170809 04:02:08.041"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:08.041">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:08.041">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:07.671" status="PASS" endtime="20170809 04:02:08.041"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.042">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:08.041" status="PASS" endtime="20170809 04:02:08.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:08.042" status="PASS" endtime="20170809 04:02:08.043"></status>
</kw>
<status starttime="20170809 04:02:07.667" status="PASS" endtime="20170809 04:02:08.043"></status>
</kw>
<status starttime="20170809 04:02:07.667" status="PASS" endtime="20170809 04:02:08.043"></status>
</kw>
<status starttime="20170809 04:02:07.666" status="PASS" endtime="20170809 04:02:08.043"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.044">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:02:08.043" status="PASS" endtime="20170809 04:02:08.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.047">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:08.046" status="PASS" endtime="20170809 04:02:08.047"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.048">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:08.048" status="PASS" endtime="20170809 04:02:08.049"></status>
</kw>
<status starttime="20170809 04:02:08.047" status="PASS" endtime="20170809 04:02:08.049"></status>
</kw>
<status starttime="20170809 04:02:08.045" status="PASS" endtime="20170809 04:02:08.049"></status>
</kw>
<status starttime="20170809 04:02:08.044" status="PASS" endtime="20170809 04:02:08.049"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.139">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:08.139">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:08.049" status="PASS" endtime="20170809 04:02:08.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.141">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:08.140" status="PASS" endtime="20170809 04:02:08.141"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.141">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:08.141" status="PASS" endtime="20170809 04:02:08.142"></status>
</kw>
<status starttime="20170809 04:02:08.141" status="PASS" endtime="20170809 04:02:08.142"></status>
</kw>
<status starttime="20170809 04:02:08.140" status="PASS" endtime="20170809 04:02:08.142"></status>
</kw>
<status starttime="20170809 04:02:08.139" status="PASS" endtime="20170809 04:02:08.142"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:08.142">Delete All Sessions</msg>
<status starttime="20170809 04:02:08.142" status="PASS" endtime="20170809 04:02:08.142"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:08.143">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:07.666" status="PASS" endtime="20170809 04:02:08.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:08.143" status="PASS" endtime="20170809 04:02:08.143"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.144">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:08.144">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:08.144">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:08.144" status="PASS" endtime="20170809 04:02:08.144"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:08.144">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:02:07.665" status="PASS" endtime="20170809 04:02:08.144"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:08.145">${host_state} = Running</msg>
<status starttime="20170809 04:02:07.665" status="PASS" endtime="20170809 04:02:08.145"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:02:08.145" status="PASS" endtime="20170809 04:02:08.147"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.152">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:08.152" status="PASS" endtime="20170809 04:02:08.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.153">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:08.153" status="PASS" endtime="20170809 04:02:08.154"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.154">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:08.154" status="PASS" endtime="20170809 04:02:08.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.155">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:08.155" status="PASS" endtime="20170809 04:02:08.155"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:08.156" status="PASS" endtime="20170809 04:02:08.378"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:08.378">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:08.378">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:08.156" status="PASS" endtime="20170809 04:02:08.378"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.379">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:08.378" status="PASS" endtime="20170809 04:02:08.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:08.379" status="PASS" endtime="20170809 04:02:08.379"></status>
</kw>
<status starttime="20170809 04:02:08.151" status="PASS" endtime="20170809 04:02:08.379"></status>
</kw>
<status starttime="20170809 04:02:08.150" status="PASS" endtime="20170809 04:02:08.380"></status>
</kw>
<status starttime="20170809 04:02:08.149" status="PASS" endtime="20170809 04:02:08.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.380">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:02:08.380" status="PASS" endtime="20170809 04:02:08.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.383">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:08.382" status="PASS" endtime="20170809 04:02:08.383"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.384">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:08.384" status="PASS" endtime="20170809 04:02:08.384"></status>
</kw>
<status starttime="20170809 04:02:08.383" status="PASS" endtime="20170809 04:02:08.384"></status>
</kw>
<status starttime="20170809 04:02:08.381" status="PASS" endtime="20170809 04:02:08.384"></status>
</kw>
<status starttime="20170809 04:02:08.381" status="PASS" endtime="20170809 04:02:08.385"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.451">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:08.451">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:08.385" status="PASS" endtime="20170809 04:02:08.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.453">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:08.452" status="PASS" endtime="20170809 04:02:08.453"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.454">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:08.454" status="PASS" endtime="20170809 04:02:08.454"></status>
</kw>
<status starttime="20170809 04:02:08.453" status="PASS" endtime="20170809 04:02:08.454"></status>
</kw>
<status starttime="20170809 04:02:08.452" status="PASS" endtime="20170809 04:02:08.454"></status>
</kw>
<status starttime="20170809 04:02:08.451" status="PASS" endtime="20170809 04:02:08.454"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:08.455">Delete All Sessions</msg>
<status starttime="20170809 04:02:08.455" status="PASS" endtime="20170809 04:02:08.455"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:08.455">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:08.149" status="PASS" endtime="20170809 04:02:08.455"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:08.456">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:08.455" status="PASS" endtime="20170809 04:02:08.456"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:08.456">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:08.456">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:08.457">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:08.456" status="PASS" endtime="20170809 04:02:08.457"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:08.457">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:08.148" status="PASS" endtime="20170809 04:02:08.457"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:08.457">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:08.147" status="PASS" endtime="20170809 04:02:08.457"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:02:08.458">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:02:08.457" status="FAIL" endtime="20170809 04:02:08.458"></status>
</kw>
<status starttime="20170809 04:02:08.147" status="FAIL" endtime="20170809 04:02:08.458"></status>
</kw>
<status starttime="20170809 04:02:07.400" status="FAIL" endtime="20170809 04:02:08.458"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:18.463">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:18.463" status="PASS" endtime="20170809 04:02:18.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.465">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:18.464" status="PASS" endtime="20170809 04:02:18.465"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.465">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:18.465" status="PASS" endtime="20170809 04:02:18.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.466">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:18.465" status="PASS" endtime="20170809 04:02:18.466"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:18.713">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:18.467" status="PASS" endtime="20170809 04:02:18.713"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:18.713">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:18.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:18.466" status="PASS" endtime="20170809 04:02:18.713"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:18.714">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:18.713" status="PASS" endtime="20170809 04:02:18.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:18.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:18.714" status="PASS" endtime="20170809 04:02:18.715"></status>
</kw>
<status starttime="20170809 04:02:18.463" status="PASS" endtime="20170809 04:02:18.715"></status>
</kw>
<status starttime="20170809 04:02:18.462" status="PASS" endtime="20170809 04:02:18.715"></status>
</kw>
<status starttime="20170809 04:02:18.462" status="PASS" endtime="20170809 04:02:18.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.715">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:02:18.715" status="PASS" endtime="20170809 04:02:18.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.718">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:18.717" status="PASS" endtime="20170809 04:02:18.718"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:18.718">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:18.718" status="PASS" endtime="20170809 04:02:18.719"></status>
</kw>
<status starttime="20170809 04:02:18.718" status="PASS" endtime="20170809 04:02:18.719"></status>
</kw>
<status starttime="20170809 04:02:18.716" status="PASS" endtime="20170809 04:02:18.719"></status>
</kw>
<status starttime="20170809 04:02:18.716" status="PASS" endtime="20170809 04:02:18.719"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.854">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:18.854">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:18.719" status="PASS" endtime="20170809 04:02:18.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.856">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:18.856" status="PASS" endtime="20170809 04:02:18.856"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:18.857">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:18.857" status="PASS" endtime="20170809 04:02:18.857"></status>
</kw>
<status starttime="20170809 04:02:18.856" status="PASS" endtime="20170809 04:02:18.858"></status>
</kw>
<status starttime="20170809 04:02:18.855" status="PASS" endtime="20170809 04:02:18.858"></status>
</kw>
<status starttime="20170809 04:02:18.855" status="PASS" endtime="20170809 04:02:18.858"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:18.858">Delete All Sessions</msg>
<status starttime="20170809 04:02:18.858" status="PASS" endtime="20170809 04:02:18.858"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:18.858">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:18.461" status="PASS" endtime="20170809 04:02:18.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:18.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:18.859" status="PASS" endtime="20170809 04:02:18.859"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.860">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:18.860">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:18.860">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:18.859" status="PASS" endtime="20170809 04:02:18.860"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:18.860">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:02:18.460" status="PASS" endtime="20170809 04:02:18.860"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:18.861">${power_state} = On</msg>
<status starttime="20170809 04:02:18.460" status="PASS" endtime="20170809 04:02:18.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:02:18.861" status="PASS" endtime="20170809 04:02:18.861"></status>
</kw>
<status starttime="20170809 04:02:18.460" status="PASS" endtime="20170809 04:02:18.861"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:18.865">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:18.864" status="PASS" endtime="20170809 04:02:18.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:18.866" status="PASS" endtime="20170809 04:02:18.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.867">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:18.866" status="PASS" endtime="20170809 04:02:18.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:18.867">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:18.867" status="PASS" endtime="20170809 04:02:18.867"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.046">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:18.868" status="PASS" endtime="20170809 04:02:19.046"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:19.047">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:19.047">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:18.868" status="PASS" endtime="20170809 04:02:19.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.047">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:19.047" status="PASS" endtime="20170809 04:02:19.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.048">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:19.048" status="PASS" endtime="20170809 04:02:19.048"></status>
</kw>
<status starttime="20170809 04:02:18.864" status="PASS" endtime="20170809 04:02:19.048"></status>
</kw>
<status starttime="20170809 04:02:18.863" status="PASS" endtime="20170809 04:02:19.048"></status>
</kw>
<status starttime="20170809 04:02:18.863" status="PASS" endtime="20170809 04:02:19.048"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.049">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:02:19.049" status="PASS" endtime="20170809 04:02:19.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.051">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:19.051" status="PASS" endtime="20170809 04:02:19.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.052">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:19.052" status="PASS" endtime="20170809 04:02:19.052"></status>
</kw>
<status starttime="20170809 04:02:19.052" status="PASS" endtime="20170809 04:02:19.053"></status>
</kw>
<status starttime="20170809 04:02:19.050" status="PASS" endtime="20170809 04:02:19.053"></status>
</kw>
<status starttime="20170809 04:02:19.049" status="PASS" endtime="20170809 04:02:19.053"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.165">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:19.165">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:19.053" status="PASS" endtime="20170809 04:02:19.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.167">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:19.167" status="PASS" endtime="20170809 04:02:19.167"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.168">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:19.168" status="PASS" endtime="20170809 04:02:19.168"></status>
</kw>
<status starttime="20170809 04:02:19.167" status="PASS" endtime="20170809 04:02:19.168"></status>
</kw>
<status starttime="20170809 04:02:19.166" status="PASS" endtime="20170809 04:02:19.168"></status>
</kw>
<status starttime="20170809 04:02:19.166" status="PASS" endtime="20170809 04:02:19.169"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:19.169">Delete All Sessions</msg>
<status starttime="20170809 04:02:19.169" status="PASS" endtime="20170809 04:02:19.169"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:19.169">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:18.862" status="PASS" endtime="20170809 04:02:19.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:19.170" status="PASS" endtime="20170809 04:02:19.170"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.170">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:19.170">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:19.171">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:19.170" status="PASS" endtime="20170809 04:02:19.171"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:19.171">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:02:18.862" status="PASS" endtime="20170809 04:02:19.171"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:19.171">${host_state} = Running</msg>
<status starttime="20170809 04:02:18.861" status="PASS" endtime="20170809 04:02:19.171"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:02:19.172" status="PASS" endtime="20170809 04:02:19.172"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.178">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:19.177" status="PASS" endtime="20170809 04:02:19.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:19.179" status="PASS" endtime="20170809 04:02:19.179"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.180">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:19.179" status="PASS" endtime="20170809 04:02:19.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.180">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:19.180" status="PASS" endtime="20170809 04:02:19.180"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.439">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:19.181" status="PASS" endtime="20170809 04:02:19.439"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:19.439">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:19.439">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:19.181" status="PASS" endtime="20170809 04:02:19.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.440">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:19.440" status="PASS" endtime="20170809 04:02:19.440"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:19.440" status="PASS" endtime="20170809 04:02:19.441"></status>
</kw>
<status starttime="20170809 04:02:19.176" status="PASS" endtime="20170809 04:02:19.441"></status>
</kw>
<status starttime="20170809 04:02:19.176" status="PASS" endtime="20170809 04:02:19.441"></status>
</kw>
<status starttime="20170809 04:02:19.175" status="PASS" endtime="20170809 04:02:19.441"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.442">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:02:19.441" status="PASS" endtime="20170809 04:02:19.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.444">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:19.443" status="PASS" endtime="20170809 04:02:19.444"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.445">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:19.445" status="PASS" endtime="20170809 04:02:19.445"></status>
</kw>
<status starttime="20170809 04:02:19.444" status="PASS" endtime="20170809 04:02:19.445"></status>
</kw>
<status starttime="20170809 04:02:19.442" status="PASS" endtime="20170809 04:02:19.445"></status>
</kw>
<status starttime="20170809 04:02:19.442" status="PASS" endtime="20170809 04:02:19.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.533">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:19.533">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:19.446" status="PASS" endtime="20170809 04:02:19.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.535">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:19.535" status="PASS" endtime="20170809 04:02:19.535"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.536">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:19.536" status="PASS" endtime="20170809 04:02:19.536"></status>
</kw>
<status starttime="20170809 04:02:19.535" status="PASS" endtime="20170809 04:02:19.536"></status>
</kw>
<status starttime="20170809 04:02:19.534" status="PASS" endtime="20170809 04:02:19.536"></status>
</kw>
<status starttime="20170809 04:02:19.534" status="PASS" endtime="20170809 04:02:19.537"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:19.537">Delete All Sessions</msg>
<status starttime="20170809 04:02:19.537" status="PASS" endtime="20170809 04:02:19.537"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:19.538">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:19.174" status="PASS" endtime="20170809 04:02:19.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:19.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:19.538" status="PASS" endtime="20170809 04:02:19.538"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:19.539">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:19.539">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:19.539">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:19.539" status="PASS" endtime="20170809 04:02:19.539"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:19.539">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:19.173" status="PASS" endtime="20170809 04:02:19.539"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:19.539">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:19.172" status="PASS" endtime="20170809 04:02:19.540"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:02:19.540">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:02:19.540" status="FAIL" endtime="20170809 04:02:19.540"></status>
</kw>
<status starttime="20170809 04:02:19.172" status="FAIL" endtime="20170809 04:02:19.540"></status>
</kw>
<status starttime="20170809 04:02:18.459" status="FAIL" endtime="20170809 04:02:19.541"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:29.546">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:29.545" status="PASS" endtime="20170809 04:02:29.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.547">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:29.546" status="PASS" endtime="20170809 04:02:29.547"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.547">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:29.547" status="PASS" endtime="20170809 04:02:29.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:29.548" status="PASS" endtime="20170809 04:02:29.548"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:29.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:29.549" status="PASS" endtime="20170809 04:02:29.727"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:29.727">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:29.727">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:29.548" status="PASS" endtime="20170809 04:02:29.727"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:29.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:29.727" status="PASS" endtime="20170809 04:02:29.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:29.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:29.728" status="PASS" endtime="20170809 04:02:29.728"></status>
</kw>
<status starttime="20170809 04:02:29.545" status="PASS" endtime="20170809 04:02:29.729"></status>
</kw>
<status starttime="20170809 04:02:29.544" status="PASS" endtime="20170809 04:02:29.729"></status>
</kw>
<status starttime="20170809 04:02:29.544" status="PASS" endtime="20170809 04:02:29.729"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.730">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:02:29.729" status="PASS" endtime="20170809 04:02:29.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.732">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:29.731" status="PASS" endtime="20170809 04:02:29.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:29.733">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:29.732" status="PASS" endtime="20170809 04:02:29.733"></status>
</kw>
<status starttime="20170809 04:02:29.732" status="PASS" endtime="20170809 04:02:29.733"></status>
</kw>
<status starttime="20170809 04:02:29.730" status="PASS" endtime="20170809 04:02:29.733"></status>
</kw>
<status starttime="20170809 04:02:29.730" status="PASS" endtime="20170809 04:02:29.733"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.818">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:29.818">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:29.733" status="PASS" endtime="20170809 04:02:29.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.820">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:29.819" status="PASS" endtime="20170809 04:02:29.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:29.821">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:29.820" status="PASS" endtime="20170809 04:02:29.821"></status>
</kw>
<status starttime="20170809 04:02:29.820" status="PASS" endtime="20170809 04:02:29.821"></status>
</kw>
<status starttime="20170809 04:02:29.819" status="PASS" endtime="20170809 04:02:29.821"></status>
</kw>
<status starttime="20170809 04:02:29.818" status="PASS" endtime="20170809 04:02:29.821"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:29.821">Delete All Sessions</msg>
<status starttime="20170809 04:02:29.821" status="PASS" endtime="20170809 04:02:29.822"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:29.822">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:29.543" status="PASS" endtime="20170809 04:02:29.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:29.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:29.822" status="PASS" endtime="20170809 04:02:29.823"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:29.823">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:29.823">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:29.823" status="PASS" endtime="20170809 04:02:29.823"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:29.824">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:02:29.542" status="PASS" endtime="20170809 04:02:29.824"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:29.824">${power_state} = On</msg>
<status starttime="20170809 04:02:29.542" status="PASS" endtime="20170809 04:02:29.824"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:02:29.824" status="PASS" endtime="20170809 04:02:29.824"></status>
</kw>
<status starttime="20170809 04:02:29.542" status="PASS" endtime="20170809 04:02:29.825"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:29.831">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:29.831" status="PASS" endtime="20170809 04:02:29.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.832">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:29.832" status="PASS" endtime="20170809 04:02:29.832"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.833">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:29.833" status="PASS" endtime="20170809 04:02:29.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:29.834">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:29.833" status="PASS" endtime="20170809 04:02:29.834"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.069">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:29.834" status="PASS" endtime="20170809 04:02:30.069"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:30.069">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:30.069">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:29.834" status="PASS" endtime="20170809 04:02:30.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.070">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:30.069" status="PASS" endtime="20170809 04:02:30.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:30.070" status="PASS" endtime="20170809 04:02:30.071"></status>
</kw>
<status starttime="20170809 04:02:29.828" status="PASS" endtime="20170809 04:02:30.071"></status>
</kw>
<status starttime="20170809 04:02:29.827" status="PASS" endtime="20170809 04:02:30.071"></status>
</kw>
<status starttime="20170809 04:02:29.826" status="PASS" endtime="20170809 04:02:30.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.072">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:02:30.071" status="PASS" endtime="20170809 04:02:30.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.074">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:30.073" status="PASS" endtime="20170809 04:02:30.074"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.075">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:30.074" status="PASS" endtime="20170809 04:02:30.075"></status>
</kw>
<status starttime="20170809 04:02:30.074" status="PASS" endtime="20170809 04:02:30.075"></status>
</kw>
<status starttime="20170809 04:02:30.072" status="PASS" endtime="20170809 04:02:30.075"></status>
</kw>
<status starttime="20170809 04:02:30.072" status="PASS" endtime="20170809 04:02:30.075"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.182">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:30.183">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:30.075" status="PASS" endtime="20170809 04:02:30.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.184">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:30.184" status="PASS" endtime="20170809 04:02:30.185"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.186">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:30.185" status="PASS" endtime="20170809 04:02:30.186"></status>
</kw>
<status starttime="20170809 04:02:30.185" status="PASS" endtime="20170809 04:02:30.186"></status>
</kw>
<status starttime="20170809 04:02:30.183" status="PASS" endtime="20170809 04:02:30.186"></status>
</kw>
<status starttime="20170809 04:02:30.183" status="PASS" endtime="20170809 04:02:30.186"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:30.187">Delete All Sessions</msg>
<status starttime="20170809 04:02:30.186" status="PASS" endtime="20170809 04:02:30.187"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:30.187">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:29.826" status="PASS" endtime="20170809 04:02:30.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:30.187" status="PASS" endtime="20170809 04:02:30.188"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.188">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:30.188">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:30.188">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:30.188" status="PASS" endtime="20170809 04:02:30.188"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:30.189">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:02:29.825" status="PASS" endtime="20170809 04:02:30.189"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:30.189">${host_state} = Running</msg>
<status starttime="20170809 04:02:29.825" status="PASS" endtime="20170809 04:02:30.189"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:02:30.189" status="PASS" endtime="20170809 04:02:30.190"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.193">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:30.193" status="PASS" endtime="20170809 04:02:30.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:30.194" status="PASS" endtime="20170809 04:02:30.195"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.196">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:30.195" status="PASS" endtime="20170809 04:02:30.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.197">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:30.196" status="PASS" endtime="20170809 04:02:30.197"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:30.198" status="PASS" endtime="20170809 04:02:30.445"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:30.445">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:30.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:30.197" status="PASS" endtime="20170809 04:02:30.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.446">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:30.445" status="PASS" endtime="20170809 04:02:30.446"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:30.446" status="PASS" endtime="20170809 04:02:30.447"></status>
</kw>
<status starttime="20170809 04:02:30.193" status="PASS" endtime="20170809 04:02:30.447"></status>
</kw>
<status starttime="20170809 04:02:30.192" status="PASS" endtime="20170809 04:02:30.447"></status>
</kw>
<status starttime="20170809 04:02:30.192" status="PASS" endtime="20170809 04:02:30.447"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.448">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:02:30.448" status="PASS" endtime="20170809 04:02:30.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.450">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:30.449" status="PASS" endtime="20170809 04:02:30.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.451">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:30.451" status="PASS" endtime="20170809 04:02:30.451"></status>
</kw>
<status starttime="20170809 04:02:30.450" status="PASS" endtime="20170809 04:02:30.451"></status>
</kw>
<status starttime="20170809 04:02:30.449" status="PASS" endtime="20170809 04:02:30.451"></status>
</kw>
<status starttime="20170809 04:02:30.448" status="PASS" endtime="20170809 04:02:30.451"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.518">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:30.518">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:30.452" status="PASS" endtime="20170809 04:02:30.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.520">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:30.519" status="PASS" endtime="20170809 04:02:30.520"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.521">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:30.521" status="PASS" endtime="20170809 04:02:30.521"></status>
</kw>
<status starttime="20170809 04:02:30.520" status="PASS" endtime="20170809 04:02:30.521"></status>
</kw>
<status starttime="20170809 04:02:30.519" status="PASS" endtime="20170809 04:02:30.521"></status>
</kw>
<status starttime="20170809 04:02:30.518" status="PASS" endtime="20170809 04:02:30.521"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:30.522">Delete All Sessions</msg>
<status starttime="20170809 04:02:30.521" status="PASS" endtime="20170809 04:02:30.522"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:30.522">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:30.191" status="PASS" endtime="20170809 04:02:30.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:30.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:30.522" status="PASS" endtime="20170809 04:02:30.523"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:30.523">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:30.523">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:30.523">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:30.523" status="PASS" endtime="20170809 04:02:30.523"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:30.524">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:30.190" status="PASS" endtime="20170809 04:02:30.524"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:30.524">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:30.190" status="PASS" endtime="20170809 04:02:30.524"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:02:30.524">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:02:30.524" status="FAIL" endtime="20170809 04:02:30.525"></status>
</kw>
<status starttime="20170809 04:02:30.190" status="FAIL" endtime="20170809 04:02:30.525"></status>
</kw>
<status starttime="20170809 04:02:29.541" status="FAIL" endtime="20170809 04:02:30.525"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:40.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:40.530" status="PASS" endtime="20170809 04:02:40.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.531">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:40.531" status="PASS" endtime="20170809 04:02:40.531"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.532">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:40.532" status="PASS" endtime="20170809 04:02:40.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.533">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:40.532" status="PASS" endtime="20170809 04:02:40.533"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:40.709">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:40.533" status="PASS" endtime="20170809 04:02:40.709"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:40.709">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:40.709">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:40.533" status="PASS" endtime="20170809 04:02:40.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:40.709">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:40.709" status="PASS" endtime="20170809 04:02:40.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:40.710">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:40.710" status="PASS" endtime="20170809 04:02:40.710"></status>
</kw>
<status starttime="20170809 04:02:40.529" status="PASS" endtime="20170809 04:02:40.711"></status>
</kw>
<status starttime="20170809 04:02:40.528" status="PASS" endtime="20170809 04:02:40.711"></status>
</kw>
<status starttime="20170809 04:02:40.528" status="PASS" endtime="20170809 04:02:40.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.711">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:02:40.711" status="PASS" endtime="20170809 04:02:40.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.714">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:40.713" status="PASS" endtime="20170809 04:02:40.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:40.716">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:40.715" status="PASS" endtime="20170809 04:02:40.716"></status>
</kw>
<status starttime="20170809 04:02:40.715" status="PASS" endtime="20170809 04:02:40.716"></status>
</kw>
<status starttime="20170809 04:02:40.712" status="PASS" endtime="20170809 04:02:40.716"></status>
</kw>
<status starttime="20170809 04:02:40.712" status="PASS" endtime="20170809 04:02:40.716"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.794">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:40.794">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:40.716" status="PASS" endtime="20170809 04:02:40.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.796">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:40.795" status="PASS" endtime="20170809 04:02:40.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:40.797">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:40.797" status="PASS" endtime="20170809 04:02:40.797"></status>
</kw>
<status starttime="20170809 04:02:40.796" status="PASS" endtime="20170809 04:02:40.798"></status>
</kw>
<status starttime="20170809 04:02:40.795" status="PASS" endtime="20170809 04:02:40.798"></status>
</kw>
<status starttime="20170809 04:02:40.795" status="PASS" endtime="20170809 04:02:40.798"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:40.798">Delete All Sessions</msg>
<status starttime="20170809 04:02:40.798" status="PASS" endtime="20170809 04:02:40.798"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:40.798">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:40.527" status="PASS" endtime="20170809 04:02:40.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:40.799">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:40.799" status="PASS" endtime="20170809 04:02:40.799"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.800">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:40.800">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:40.800">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:40.799" status="PASS" endtime="20170809 04:02:40.800"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:40.800">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:02:40.526" status="PASS" endtime="20170809 04:02:40.800"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:40.800">${power_state} = On</msg>
<status starttime="20170809 04:02:40.526" status="PASS" endtime="20170809 04:02:40.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:02:40.801" status="PASS" endtime="20170809 04:02:40.801"></status>
</kw>
<status starttime="20170809 04:02:40.526" status="PASS" endtime="20170809 04:02:40.801"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:40.805">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:40.804" status="PASS" endtime="20170809 04:02:40.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.806">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:40.805" status="PASS" endtime="20170809 04:02:40.806"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.806">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:40.806" status="PASS" endtime="20170809 04:02:40.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:40.807">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:40.806" status="PASS" endtime="20170809 04:02:40.807"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:40.808" status="PASS" endtime="20170809 04:02:41.049"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:41.049">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:41.049">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:40.807" status="PASS" endtime="20170809 04:02:41.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.050">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:41.050" status="PASS" endtime="20170809 04:02:41.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:41.050" status="PASS" endtime="20170809 04:02:41.051"></status>
</kw>
<status starttime="20170809 04:02:40.804" status="PASS" endtime="20170809 04:02:41.051"></status>
</kw>
<status starttime="20170809 04:02:40.803" status="PASS" endtime="20170809 04:02:41.051"></status>
</kw>
<status starttime="20170809 04:02:40.803" status="PASS" endtime="20170809 04:02:41.051"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.052">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:02:41.051" status="PASS" endtime="20170809 04:02:41.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.054">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:41.053" status="PASS" endtime="20170809 04:02:41.054"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.055">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:41.055" status="PASS" endtime="20170809 04:02:41.055"></status>
</kw>
<status starttime="20170809 04:02:41.054" status="PASS" endtime="20170809 04:02:41.055"></status>
</kw>
<status starttime="20170809 04:02:41.053" status="PASS" endtime="20170809 04:02:41.055"></status>
</kw>
<status starttime="20170809 04:02:41.052" status="PASS" endtime="20170809 04:02:41.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.210">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:41.210">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:41.056" status="PASS" endtime="20170809 04:02:41.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.212">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:41.212" status="PASS" endtime="20170809 04:02:41.212"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.213">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:41.213" status="PASS" endtime="20170809 04:02:41.213"></status>
</kw>
<status starttime="20170809 04:02:41.212" status="PASS" endtime="20170809 04:02:41.213"></status>
</kw>
<status starttime="20170809 04:02:41.211" status="PASS" endtime="20170809 04:02:41.213"></status>
</kw>
<status starttime="20170809 04:02:41.211" status="PASS" endtime="20170809 04:02:41.213"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:41.214">Delete All Sessions</msg>
<status starttime="20170809 04:02:41.214" status="PASS" endtime="20170809 04:02:41.214"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:41.214">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:40.802" status="PASS" endtime="20170809 04:02:41.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:41.214" status="PASS" endtime="20170809 04:02:41.215"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.216">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:41.216">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:41.216">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:41.215" status="PASS" endtime="20170809 04:02:41.216"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:41.216">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:02:40.802" status="PASS" endtime="20170809 04:02:41.216"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:41.217">${host_state} = Running</msg>
<status starttime="20170809 04:02:40.801" status="PASS" endtime="20170809 04:02:41.217"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:02:41.217" status="PASS" endtime="20170809 04:02:41.218"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.223">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:41.223" status="PASS" endtime="20170809 04:02:41.224"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.224">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:41.224" status="PASS" endtime="20170809 04:02:41.224"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.225">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:41.225" status="PASS" endtime="20170809 04:02:41.225"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.226">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:41.226" status="PASS" endtime="20170809 04:02:41.226"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.423">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:41.227" status="PASS" endtime="20170809 04:02:41.423"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:41.423">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:41.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:41.227" status="PASS" endtime="20170809 04:02:41.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:41.423" status="PASS" endtime="20170809 04:02:41.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:41.424" status="PASS" endtime="20170809 04:02:41.424"></status>
</kw>
<status starttime="20170809 04:02:41.222" status="PASS" endtime="20170809 04:02:41.425"></status>
</kw>
<status starttime="20170809 04:02:41.221" status="PASS" endtime="20170809 04:02:41.425"></status>
</kw>
<status starttime="20170809 04:02:41.220" status="PASS" endtime="20170809 04:02:41.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.425">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:02:41.425" status="PASS" endtime="20170809 04:02:41.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.427">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:41.427" status="PASS" endtime="20170809 04:02:41.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.428">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:41.428" status="PASS" endtime="20170809 04:02:41.428"></status>
</kw>
<status starttime="20170809 04:02:41.428" status="PASS" endtime="20170809 04:02:41.429"></status>
</kw>
<status starttime="20170809 04:02:41.426" status="PASS" endtime="20170809 04:02:41.429"></status>
</kw>
<status starttime="20170809 04:02:41.426" status="PASS" endtime="20170809 04:02:41.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.506">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:41.506">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:41.429" status="PASS" endtime="20170809 04:02:41.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.508">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:41.507" status="PASS" endtime="20170809 04:02:41.508"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.509">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:41.508" status="PASS" endtime="20170809 04:02:41.509"></status>
</kw>
<status starttime="20170809 04:02:41.508" status="PASS" endtime="20170809 04:02:41.509"></status>
</kw>
<status starttime="20170809 04:02:41.507" status="PASS" endtime="20170809 04:02:41.509"></status>
</kw>
<status starttime="20170809 04:02:41.506" status="PASS" endtime="20170809 04:02:41.509"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:41.509">Delete All Sessions</msg>
<status starttime="20170809 04:02:41.509" status="PASS" endtime="20170809 04:02:41.509"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:41.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:41.219" status="PASS" endtime="20170809 04:02:41.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:41.510">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:41.510" status="PASS" endtime="20170809 04:02:41.510"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:41.511">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:41.511">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:41.511">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:41.511" status="PASS" endtime="20170809 04:02:41.511"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:41.511">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:41.219" status="PASS" endtime="20170809 04:02:41.511"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:41.512">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:41.218" status="PASS" endtime="20170809 04:02:41.512"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:02:41.512">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:02:41.512" status="FAIL" endtime="20170809 04:02:41.512"></status>
</kw>
<status starttime="20170809 04:02:41.218" status="FAIL" endtime="20170809 04:02:41.512"></status>
</kw>
<status starttime="20170809 04:02:40.525" status="FAIL" endtime="20170809 04:02:41.513"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:51.518">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:51.518" status="PASS" endtime="20170809 04:02:51.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:51.519" status="PASS" endtime="20170809 04:02:51.519"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.520">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:51.519" status="PASS" endtime="20170809 04:02:51.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.520">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:51.520" status="PASS" endtime="20170809 04:02:51.520"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:51.724">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:51.521" status="PASS" endtime="20170809 04:02:51.724"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:51.724">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:51.725">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:51.521" status="PASS" endtime="20170809 04:02:51.725"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:51.725">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:51.725" status="PASS" endtime="20170809 04:02:51.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:51.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:51.726" status="PASS" endtime="20170809 04:02:51.726"></status>
</kw>
<status starttime="20170809 04:02:51.517" status="PASS" endtime="20170809 04:02:51.726"></status>
</kw>
<status starttime="20170809 04:02:51.516" status="PASS" endtime="20170809 04:02:51.726"></status>
</kw>
<status starttime="20170809 04:02:51.516" status="PASS" endtime="20170809 04:02:51.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.727">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:02:51.727" status="PASS" endtime="20170809 04:02:51.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.729">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:51.728" status="PASS" endtime="20170809 04:02:51.729"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:51.730">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:51.730" status="PASS" endtime="20170809 04:02:51.730"></status>
</kw>
<status starttime="20170809 04:02:51.729" status="PASS" endtime="20170809 04:02:51.730"></status>
</kw>
<status starttime="20170809 04:02:51.728" status="PASS" endtime="20170809 04:02:51.730"></status>
</kw>
<status starttime="20170809 04:02:51.727" status="PASS" endtime="20170809 04:02:51.730"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.806">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:51.807">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:51.731" status="PASS" endtime="20170809 04:02:51.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.809">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:51.808" status="PASS" endtime="20170809 04:02:51.809"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:51.810">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:51.810" status="PASS" endtime="20170809 04:02:51.810"></status>
</kw>
<status starttime="20170809 04:02:51.809" status="PASS" endtime="20170809 04:02:51.810"></status>
</kw>
<status starttime="20170809 04:02:51.807" status="PASS" endtime="20170809 04:02:51.810"></status>
</kw>
<status starttime="20170809 04:02:51.807" status="PASS" endtime="20170809 04:02:51.810"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:51.811">Delete All Sessions</msg>
<status starttime="20170809 04:02:51.810" status="PASS" endtime="20170809 04:02:51.811"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:51.811">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:51.515" status="PASS" endtime="20170809 04:02:51.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:51.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:51.811" status="PASS" endtime="20170809 04:02:51.812"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.812">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:51.812">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:51.812">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:51.812" status="PASS" endtime="20170809 04:02:51.812"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:51.813">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:02:51.514" status="PASS" endtime="20170809 04:02:51.813"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:51.813">${power_state} = On</msg>
<status starttime="20170809 04:02:51.514" status="PASS" endtime="20170809 04:02:51.813"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:02:51.813" status="PASS" endtime="20170809 04:02:51.813"></status>
</kw>
<status starttime="20170809 04:02:51.514" status="PASS" endtime="20170809 04:02:51.814"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:51.817">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:51.817" status="PASS" endtime="20170809 04:02:51.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.818">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:51.818" status="PASS" endtime="20170809 04:02:51.818"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.819">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:51.818" status="PASS" endtime="20170809 04:02:51.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:51.819">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:51.819" status="PASS" endtime="20170809 04:02:51.819"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.067">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:51.820" status="PASS" endtime="20170809 04:02:52.067"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:52.068">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:52.068">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:51.820" status="PASS" endtime="20170809 04:02:52.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.068">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:52.068" status="PASS" endtime="20170809 04:02:52.068"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.069">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:52.069" status="PASS" endtime="20170809 04:02:52.069"></status>
</kw>
<status starttime="20170809 04:02:51.816" status="PASS" endtime="20170809 04:02:52.069"></status>
</kw>
<status starttime="20170809 04:02:51.816" status="PASS" endtime="20170809 04:02:52.069"></status>
</kw>
<status starttime="20170809 04:02:51.815" status="PASS" endtime="20170809 04:02:52.070"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.070">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:02:52.070" status="PASS" endtime="20170809 04:02:52.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.073">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:52.071" status="PASS" endtime="20170809 04:02:52.073"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.074">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:02:52.073" status="PASS" endtime="20170809 04:02:52.074"></status>
</kw>
<status starttime="20170809 04:02:52.073" status="PASS" endtime="20170809 04:02:52.074"></status>
</kw>
<status starttime="20170809 04:02:52.071" status="PASS" endtime="20170809 04:02:52.074"></status>
</kw>
<status starttime="20170809 04:02:52.070" status="PASS" endtime="20170809 04:02:52.074"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.164">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:52.164">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:52.074" status="PASS" endtime="20170809 04:02:52.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.166">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:52.166" status="PASS" endtime="20170809 04:02:52.166"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.167">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:52.167" status="PASS" endtime="20170809 04:02:52.167"></status>
</kw>
<status starttime="20170809 04:02:52.166" status="PASS" endtime="20170809 04:02:52.167"></status>
</kw>
<status starttime="20170809 04:02:52.165" status="PASS" endtime="20170809 04:02:52.167"></status>
</kw>
<status starttime="20170809 04:02:52.165" status="PASS" endtime="20170809 04:02:52.167"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:52.168">Delete All Sessions</msg>
<status starttime="20170809 04:02:52.168" status="PASS" endtime="20170809 04:02:52.168"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:52.168">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:51.815" status="PASS" endtime="20170809 04:02:52.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:52.168" status="PASS" endtime="20170809 04:02:52.169"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.169">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:52.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:52.170">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:52.169" status="PASS" endtime="20170809 04:02:52.170"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:52.170">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:02:51.814" status="PASS" endtime="20170809 04:02:52.170"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:52.170">${host_state} = Running</msg>
<status starttime="20170809 04:02:51.814" status="PASS" endtime="20170809 04:02:52.170"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:02:52.170" status="PASS" endtime="20170809 04:02:52.171"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.175">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:02:52.174" status="PASS" endtime="20170809 04:02:52.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.175">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:02:52.175" status="PASS" endtime="20170809 04:02:52.175"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.176">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:02:52.176" status="PASS" endtime="20170809 04:02:52.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.177">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:02:52.177" status="PASS" endtime="20170809 04:02:52.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.370">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:02:52.178" status="PASS" endtime="20170809 04:02:52.370"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:52.371">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:02:52.371">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:52.177" status="PASS" endtime="20170809 04:02:52.371"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.371">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:52.371" status="PASS" endtime="20170809 04:02:52.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:52.372" status="PASS" endtime="20170809 04:02:52.372"></status>
</kw>
<status starttime="20170809 04:02:52.174" status="PASS" endtime="20170809 04:02:52.372"></status>
</kw>
<status starttime="20170809 04:02:52.173" status="PASS" endtime="20170809 04:02:52.372"></status>
</kw>
<status starttime="20170809 04:02:52.173" status="PASS" endtime="20170809 04:02:52.372"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.373">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:02:52.373" status="PASS" endtime="20170809 04:02:52.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.375">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:52.374" status="PASS" endtime="20170809 04:02:52.375"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.376">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:02:52.376" status="PASS" endtime="20170809 04:02:52.376"></status>
</kw>
<status starttime="20170809 04:02:52.375" status="PASS" endtime="20170809 04:02:52.376"></status>
</kw>
<status starttime="20170809 04:02:52.374" status="PASS" endtime="20170809 04:02:52.376"></status>
</kw>
<status starttime="20170809 04:02:52.373" status="PASS" endtime="20170809 04:02:52.377"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.449">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:02:52.449">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:52.377" status="PASS" endtime="20170809 04:02:52.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.451">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:52.451" status="PASS" endtime="20170809 04:02:52.451"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.452">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:02:52.452" status="PASS" endtime="20170809 04:02:52.452"></status>
</kw>
<status starttime="20170809 04:02:52.451" status="PASS" endtime="20170809 04:02:52.452"></status>
</kw>
<status starttime="20170809 04:02:52.450" status="PASS" endtime="20170809 04:02:52.453"></status>
</kw>
<status starttime="20170809 04:02:52.450" status="PASS" endtime="20170809 04:02:52.453"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:02:52.453">Delete All Sessions</msg>
<status starttime="20170809 04:02:52.453" status="PASS" endtime="20170809 04:02:52.453"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:52.453">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:02:52.172" status="PASS" endtime="20170809 04:02:52.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:02:52.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:02:52.454" status="PASS" endtime="20170809 04:02:52.454"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:02:52.455">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:02:52.455">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:02:52.455">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:02:52.454" status="PASS" endtime="20170809 04:02:52.455"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:52.455">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:52.172" status="PASS" endtime="20170809 04:02:52.455"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:02:52.455">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:02:52.171" status="PASS" endtime="20170809 04:02:52.455"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:02:52.456">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:02:52.456" status="FAIL" endtime="20170809 04:02:52.456"></status>
</kw>
<status starttime="20170809 04:02:52.171" status="FAIL" endtime="20170809 04:02:52.456"></status>
</kw>
<status starttime="20170809 04:02:51.513" status="FAIL" endtime="20170809 04:02:52.457"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:02.463">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:02.462" status="PASS" endtime="20170809 04:03:02.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.464">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:02.464" status="PASS" endtime="20170809 04:03:02.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.465">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:02.464" status="PASS" endtime="20170809 04:03:02.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.466">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:02.465" status="PASS" endtime="20170809 04:03:02.466"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:02.675">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:02.467" status="PASS" endtime="20170809 04:03:02.675"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:02.675">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:02.675">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:02.466" status="PASS" endtime="20170809 04:03:02.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:02.676">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:02.675" status="PASS" endtime="20170809 04:03:02.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:02.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:02.676" status="PASS" endtime="20170809 04:03:02.676"></status>
</kw>
<status starttime="20170809 04:03:02.461" status="PASS" endtime="20170809 04:03:02.677"></status>
</kw>
<status starttime="20170809 04:03:02.460" status="PASS" endtime="20170809 04:03:02.677"></status>
</kw>
<status starttime="20170809 04:03:02.459" status="PASS" endtime="20170809 04:03:02.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.677">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170809 04:03:02.677" status="PASS" endtime="20170809 04:03:02.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.679">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:03:02.679" status="PASS" endtime="20170809 04:03:02.679"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:02.680">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170809 04:03:02.680" status="PASS" endtime="20170809 04:03:02.680"></status>
</kw>
<status starttime="20170809 04:03:02.680" status="PASS" endtime="20170809 04:03:02.681"></status>
</kw>
<status starttime="20170809 04:03:02.678" status="PASS" endtime="20170809 04:03:02.681"></status>
</kw>
<status starttime="20170809 04:03:02.678" status="PASS" endtime="20170809 04:03:02.681"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.959">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:02.959">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:02.681" status="PASS" endtime="20170809 04:03:02.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:03:02.961" status="PASS" endtime="20170809 04:03:02.964"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:02.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:03:02.965" status="PASS" endtime="20170809 04:03:02.965"></status>
</kw>
<status starttime="20170809 04:03:02.965" status="PASS" endtime="20170809 04:03:02.966"></status>
</kw>
<status starttime="20170809 04:03:02.960" status="PASS" endtime="20170809 04:03:02.966"></status>
</kw>
<status starttime="20170809 04:03:02.960" status="PASS" endtime="20170809 04:03:02.966"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:02.966">Delete All Sessions</msg>
<status starttime="20170809 04:03:02.966" status="PASS" endtime="20170809 04:03:02.966"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:02.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:02.459" status="PASS" endtime="20170809 04:03:02.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:02.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:02.967" status="PASS" endtime="20170809 04:03:02.967"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.968">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:02.968">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:02.968">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:03:02.967" status="PASS" endtime="20170809 04:03:02.968"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:02.968">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170809 04:03:02.458" status="PASS" endtime="20170809 04:03:02.968"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:02.969">${power_state} = On</msg>
<status starttime="20170809 04:03:02.458" status="PASS" endtime="20170809 04:03:02.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170809 04:03:02.969" status="PASS" endtime="20170809 04:03:02.969"></status>
</kw>
<status starttime="20170809 04:03:02.457" status="PASS" endtime="20170809 04:03:02.970"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:02.973">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:02.973" status="PASS" endtime="20170809 04:03:02.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:02.974" status="PASS" endtime="20170809 04:03:02.974"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.975">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:02.974" status="PASS" endtime="20170809 04:03:02.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:02.975">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:02.975" status="PASS" endtime="20170809 04:03:02.975"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.196">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:02.976" status="PASS" endtime="20170809 04:03:03.196"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.196">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:03.196">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:02.976" status="PASS" endtime="20170809 04:03:03.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.197">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:03.197" status="PASS" endtime="20170809 04:03:03.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:03.197" status="PASS" endtime="20170809 04:03:03.198"></status>
</kw>
<status starttime="20170809 04:03:02.972" status="PASS" endtime="20170809 04:03:03.198"></status>
</kw>
<status starttime="20170809 04:03:02.972" status="PASS" endtime="20170809 04:03:03.198"></status>
</kw>
<status starttime="20170809 04:03:02.971" status="PASS" endtime="20170809 04:03:03.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.199">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:03:03.198" status="PASS" endtime="20170809 04:03:03.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.201">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:03:03.200" status="PASS" endtime="20170809 04:03:03.201"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.202">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:03:03.202" status="PASS" endtime="20170809 04:03:03.202"></status>
</kw>
<status starttime="20170809 04:03:03.201" status="PASS" endtime="20170809 04:03:03.202"></status>
</kw>
<status starttime="20170809 04:03:03.199" status="PASS" endtime="20170809 04:03:03.202"></status>
</kw>
<status starttime="20170809 04:03:03.199" status="PASS" endtime="20170809 04:03:03.202"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.291">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:03.291">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:03.203" status="PASS" endtime="20170809 04:03:03.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.292">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:03:03.292" status="PASS" endtime="20170809 04:03:03.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.293">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:03:03.293" status="PASS" endtime="20170809 04:03:03.294"></status>
</kw>
<status starttime="20170809 04:03:03.293" status="PASS" endtime="20170809 04:03:03.294"></status>
</kw>
<status starttime="20170809 04:03:03.292" status="PASS" endtime="20170809 04:03:03.294"></status>
</kw>
<status starttime="20170809 04:03:03.291" status="PASS" endtime="20170809 04:03:03.294"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:03.294">Delete All Sessions</msg>
<status starttime="20170809 04:03:03.294" status="PASS" endtime="20170809 04:03:03.294"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.294">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:02.971" status="PASS" endtime="20170809 04:03:03.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:03.295" status="PASS" endtime="20170809 04:03:03.295"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.296">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:03.296">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:03.296">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:03:03.295" status="PASS" endtime="20170809 04:03:03.296"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.296">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:03:02.970" status="PASS" endtime="20170809 04:03:03.296"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.297">${host_state} = Running</msg>
<status starttime="20170809 04:03:02.970" status="PASS" endtime="20170809 04:03:03.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170809 04:03:03.297" status="PASS" endtime="20170809 04:03:03.297"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.301">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:03.301" status="PASS" endtime="20170809 04:03:03.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:03.301" status="PASS" endtime="20170809 04:03:03.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.302">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:03.302" status="PASS" endtime="20170809 04:03:03.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:03.303" status="PASS" endtime="20170809 04:03:03.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.493">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:03.304" status="PASS" endtime="20170809 04:03:03.493"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.493">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:03.493">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:03.303" status="PASS" endtime="20170809 04:03:03.493"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.494">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:03.494" status="PASS" endtime="20170809 04:03:03.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:03.494" status="PASS" endtime="20170809 04:03:03.495"></status>
</kw>
<status starttime="20170809 04:03:03.300" status="PASS" endtime="20170809 04:03:03.495"></status>
</kw>
<status starttime="20170809 04:03:03.300" status="PASS" endtime="20170809 04:03:03.495"></status>
</kw>
<status starttime="20170809 04:03:03.299" status="PASS" endtime="20170809 04:03:03.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.496">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170809 04:03:03.495" status="PASS" endtime="20170809 04:03:03.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.498">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:03:03.497" status="PASS" endtime="20170809 04:03:03.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.499">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170809 04:03:03.498" status="PASS" endtime="20170809 04:03:03.499"></status>
</kw>
<status starttime="20170809 04:03:03.498" status="PASS" endtime="20170809 04:03:03.499"></status>
</kw>
<status starttime="20170809 04:03:03.496" status="PASS" endtime="20170809 04:03:03.499"></status>
</kw>
<status starttime="20170809 04:03:03.496" status="PASS" endtime="20170809 04:03:03.499"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.565">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:03.565">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:03.499" status="PASS" endtime="20170809 04:03:03.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.567">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:03:03.567" status="PASS" endtime="20170809 04:03:03.567"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.568">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:03:03.568" status="PASS" endtime="20170809 04:03:03.568"></status>
</kw>
<status starttime="20170809 04:03:03.567" status="PASS" endtime="20170809 04:03:03.568"></status>
</kw>
<status starttime="20170809 04:03:03.566" status="PASS" endtime="20170809 04:03:03.568"></status>
</kw>
<status starttime="20170809 04:03:03.566" status="PASS" endtime="20170809 04:03:03.568"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:03.569">Delete All Sessions</msg>
<status starttime="20170809 04:03:03.569" status="PASS" endtime="20170809 04:03:03.569"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.569">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:03.298" status="PASS" endtime="20170809 04:03:03.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:03.569" status="PASS" endtime="20170809 04:03:03.570"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.571">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:03.571">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:03.571">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:03:03.570" status="PASS" endtime="20170809 04:03:03.571"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.571">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:03:03.298" status="PASS" endtime="20170809 04:03:03.572"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.572">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170809 04:03:03.298" status="PASS" endtime="20170809 04:03:03.572"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:03:03.573">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 04:03:03.572" status="FAIL" endtime="20170809 04:03:03.573"></status>
</kw>
<status starttime="20170809 04:03:03.297" status="FAIL" endtime="20170809 04:03:03.573"></status>
</kw>
<status starttime="20170809 04:03:02.457" status="FAIL" endtime="20170809 04:03:03.573"></status>
</kw>
<msg level="FAIL" timestamp="20170809 04:03:03.573">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170809 03:53:01.054" status="FAIL" endtime="20170809 04:03:03.573"></status>
</kw>
<status starttime="20170809 03:53:00.105" status="FAIL" endtime="20170809 04:03:03.573"></status>
</kw>
<status starttime="20170809 03:52:52.400" status="FAIL" endtime="20170809 04:03:03.573"></status>
</kw>
<status starttime="20170809 03:52:52.400" status="FAIL" endtime="20170809 04:03:03.574"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.579">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:03.579" status="PASS" endtime="20170809 04:03:03.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.580">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:03.580" status="PASS" endtime="20170809 04:03:03.580"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.581">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:03.580" status="PASS" endtime="20170809 04:03:03.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.581">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:03.581" status="PASS" endtime="20170809 04:03:03.581"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:03.582" status="PASS" endtime="20170809 04:03:03.791"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.791">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:03.791">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:03.581" status="PASS" endtime="20170809 04:03:03.791"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.792">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:03.791" status="PASS" endtime="20170809 04:03:03.792"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:03.792" status="PASS" endtime="20170809 04:03:03.792"></status>
</kw>
<status starttime="20170809 04:03:03.578" status="PASS" endtime="20170809 04:03:03.792"></status>
</kw>
<status starttime="20170809 04:03:03.577" status="PASS" endtime="20170809 04:03:03.793"></status>
</kw>
<status starttime="20170809 04:03:03.577" status="PASS" endtime="20170809 04:03:03.793"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.793">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170809 04:03:03.793" status="PASS" endtime="20170809 04:03:03.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.795">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:03:03.795" status="PASS" endtime="20170809 04:03:03.795"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.796">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170809 04:03:03.796" status="PASS" endtime="20170809 04:03:03.796"></status>
</kw>
<status starttime="20170809 04:03:03.795" status="PASS" endtime="20170809 04:03:03.796"></status>
</kw>
<status starttime="20170809 04:03:03.794" status="PASS" endtime="20170809 04:03:03.797"></status>
</kw>
<status starttime="20170809 04:03:03.794" status="PASS" endtime="20170809 04:03:03.797"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.901">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:03.901">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:03.797" status="PASS" endtime="20170809 04:03:03.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.903">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:03:03.902" status="PASS" endtime="20170809 04:03:03.903"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.904">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170809 04:03:03.904" status="PASS" endtime="20170809 04:03:03.904"></status>
</kw>
<status starttime="20170809 04:03:03.903" status="PASS" endtime="20170809 04:03:03.905"></status>
</kw>
<status starttime="20170809 04:03:03.902" status="PASS" endtime="20170809 04:03:03.905"></status>
</kw>
<status starttime="20170809 04:03:03.901" status="PASS" endtime="20170809 04:03:03.905"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:03.905">Delete All Sessions</msg>
<status starttime="20170809 04:03:03.905" status="PASS" endtime="20170809 04:03:03.905"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:03.576" status="PASS" endtime="20170809 04:03:03.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:03.906" status="PASS" endtime="20170809 04:03:03.906"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.907">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:03.907">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:03.907">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:03:03.906" status="PASS" endtime="20170809 04:03:03.907"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.907">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170809 04:03:03.575" status="PASS" endtime="20170809 04:03:03.907"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.908">${host_state} = Running</msg>
<status starttime="20170809 04:03:03.575" status="PASS" endtime="20170809 04:03:03.908"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:03:03.909">Running != Quiesced</msg>
<status starttime="20170809 04:03:03.909" status="FAIL" endtime="20170809 04:03:03.909"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.909">${status} = False</msg>
<status starttime="20170809 04:03:03.908" status="PASS" endtime="20170809 04:03:03.909"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:03.909">${status} = False</msg>
<status starttime="20170809 04:03:03.575" status="PASS" endtime="20170809 04:03:03.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:03.940">Length is 10</msg>
<status starttime="20170809 04:03:03.940" status="PASS" endtime="20170809 04:03:03.940"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:03.948">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 04:03:06.963">${RC} = 0</msg>
<msg level="INFO" timestamp="20170809 04:03:06.963">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.779 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.578 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status starttime="20170809 04:03:03.941" status="PASS" endtime="20170809 04:03:06.963"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:06.966">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.779 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.578 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.580 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.613 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.578/0.637/0.779/0.086 ms</msg>
<status starttime="20170809 04:03:06.965" status="PASS" endtime="20170809 04:03:06.967"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170809 04:03:06.967" status="PASS" endtime="20170809 04:03:06.967"></status>
</kw>
<status starttime="20170809 04:03:03.939" status="PASS" endtime="20170809 04:03:06.968"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:06.985">${cur_time} = 2017-08-09 04:03:06:984681</msg>
<status starttime="20170809 04:03:06.984" status="PASS" endtime="20170809 04:03:06.985"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:06.985">${cur_time} = 20170809040306984681</msg>
<status starttime="20170809 04:03:06.985" status="PASS" endtime="20170809 04:03:06.986"></status>
</kw>
<status starttime="20170809 04:03:06.984" status="PASS" endtime="20170809 04:03:06.986"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:06.986">${FFDC_TIME} = 20170809040306984681</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:06.999">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170809 04:03:06.998" status="PASS" endtime="20170809 04:03:06.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:06.999">${suite_name} = 20170809040306984681_TestsTestBasicPoweron</msg>
<status starttime="20170809 04:03:06.999" status="PASS" endtime="20170809 04:03:06.999"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.000">${test_name} = PowerOnTest</msg>
<status starttime="20170809 04:03:06.999" status="PASS" endtime="20170809 04:03:07.000"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.000">${test_name} = 20170809040306984681_PowerOnTest</msg>
<status starttime="20170809 04:03:07.000" status="PASS" endtime="20170809 04:03:07.000"></status>
</kw>
<status starttime="20170809 04:03:06.998" status="PASS" endtime="20170809 04:03:07.001"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:07.001">${FFDC_DIR_PATH} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170809 04:03:07.001">${FFDC_PREFIX} = 20170809040306984681_</msg>
<msg level="INFO" timestamp="20170809 04:03:07.031">${LOG_PREFIX} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.034" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.032" status="PASS" endtime="20170809 04:03:07.034"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:07.039">${FFDC_FILE_PATH} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.067" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.066" status="PASS" endtime="20170809 04:03:07.067"></status>
</kw>
<status starttime="20170809 04:03:07.066" status="PASS" endtime="20170809 04:03:07.067"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.072" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.072" status="PASS" endtime="20170809 04:03:07.072"></status>
</kw>
<status starttime="20170809 04:03:07.067" status="PASS" endtime="20170809 04:03:07.073"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.074" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.073" status="PASS" endtime="20170809 04:03:07.074"></status>
</kw>
<status starttime="20170809 04:03:07.073" status="PASS" endtime="20170809 04:03:07.074"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.075" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.075" status="PASS" endtime="20170809 04:03:07.076"></status>
</kw>
<status starttime="20170809 04:03:07.074" status="PASS" endtime="20170809 04:03:07.076"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.077" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.077" status="PASS" endtime="20170809 04:03:07.077"></status>
</kw>
<status starttime="20170809 04:03:07.076" status="PASS" endtime="20170809 04:03:07.077"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.079" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.078" status="PASS" endtime="20170809 04:03:07.079"></status>
</kw>
<status starttime="20170809 04:03:07.078" status="PASS" endtime="20170809 04:03:07.079"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.080" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.080" status="PASS" endtime="20170809 04:03:07.080"></status>
</kw>
<status starttime="20170809 04:03:07.079" status="PASS" endtime="20170809 04:03:07.081"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.082" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.081" status="PASS" endtime="20170809 04:03:07.082"></status>
</kw>
<status starttime="20170809 04:03:07.081" status="PASS" endtime="20170809 04:03:07.082"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.083" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.083" status="PASS" endtime="20170809 04:03:07.083"></status>
</kw>
<status starttime="20170809 04:03:07.082" status="PASS" endtime="20170809 04:03:07.083"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.085" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.085" status="PASS" endtime="20170809 04:03:07.085"></status>
</kw>
<status starttime="20170809 04:03:07.084" status="PASS" endtime="20170809 04:03:07.085"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.087" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.086" status="PASS" endtime="20170809 04:03:07.087"></status>
</kw>
<status starttime="20170809 04:03:07.086" status="PASS" endtime="20170809 04:03:07.087"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.088" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.087" status="PASS" endtime="20170809 04:03:07.088"></status>
</kw>
<status starttime="20170809 04:03:07.087" status="PASS" endtime="20170809 04:03:07.088"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.089" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.089" status="PASS" endtime="20170809 04:03:07.089"></status>
</kw>
<status starttime="20170809 04:03:07.088" status="PASS" endtime="20170809 04:03:07.090"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.137">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:07.137">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 04:03:07.215">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 04:03:07.230">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 04:03:07.230">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 04:03:07.230">${rc} = 0</msg>
<status starttime="20170809 04:03:07.090" status="PASS" endtime="20170809 04:03:07.230"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.231">Length is 0</msg>
<status starttime="20170809 04:03:07.231" status="PASS" endtime="20170809 04:03:07.231"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.231">Length is 11</msg>
<status starttime="20170809 04:03:07.231" status="PASS" endtime="20170809 04:03:07.231"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:07.232">${model_name} = Witherspoon</msg>
<status starttime="20170809 04:03:07.090" status="PASS" endtime="20170809 04:03:07.232"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.233" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.232" status="PASS" endtime="20170809 04:03:07.233"></status>
</kw>
<status starttime="20170809 04:03:07.232" status="PASS" endtime="20170809 04:03:07.233"></status>
</kw>
<status starttime="20170809 04:03:07.083" status="PASS" endtime="20170809 04:03:07.233"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.234" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.234" status="PASS" endtime="20170809 04:03:07.235"></status>
</kw>
<status starttime="20170809 04:03:07.233" status="PASS" endtime="20170809 04:03:07.235"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.235">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170809 04:03:07.235" status="PASS" endtime="20170809 04:03:07.235"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.237" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.236" status="PASS" endtime="20170809 04:03:07.237"></status>
</kw>
<status starttime="20170809 04:03:07.236" status="PASS" endtime="20170809 04:03:07.237"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.238" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.238" status="PASS" endtime="20170809 04:03:07.238"></status>
</kw>
<status starttime="20170809 04:03:07.237" status="PASS" endtime="20170809 04:03:07.238"></status>
</kw>
<status starttime="20170809 04:03:07.235" status="PASS" endtime="20170809 04:03:07.238"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.240" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.239" status="PASS" endtime="20170809 04:03:07.240"></status>
</kw>
<status starttime="20170809 04:03:07.239" status="PASS" endtime="20170809 04:03:07.240"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.241" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.241" status="PASS" endtime="20170809 04:03:07.241"></status>
</kw>
<status starttime="20170809 04:03:07.240" status="PASS" endtime="20170809 04:03:07.242"></status>
</kw>
<status starttime="20170809 04:03:07.238" status="PASS" endtime="20170809 04:03:07.242"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.243" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.243" status="PASS" endtime="20170809 04:03:07.243"></status>
</kw>
<status starttime="20170809 04:03:07.242" status="PASS" endtime="20170809 04:03:07.243"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.247" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.244" status="PASS" endtime="20170809 04:03:07.247"></status>
</kw>
<status starttime="20170809 04:03:07.243" status="PASS" endtime="20170809 04:03:07.248"></status>
</kw>
<status starttime="20170809 04:03:07.242" status="PASS" endtime="20170809 04:03:07.248"></status>
</kw>
<status starttime="20170809 04:03:07.235" status="PASS" endtime="20170809 04:03:07.248"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.249" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.249" status="PASS" endtime="20170809 04:03:07.249"></status>
</kw>
<status starttime="20170809 04:03:07.248" status="PASS" endtime="20170809 04:03:07.249"></status>
</kw>
<status starttime="20170809 04:03:07.065" status="PASS" endtime="20170809 04:03:07.249"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.260">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170809 04:03:07.259" status="PASS" endtime="20170809 04:03:07.260"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.261">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') |...</msg>
<status starttime="20170809 04:03:07.261" status="PASS" endtime="20170809 04:03:07.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170809 04:03:07.262" status="PASS" endtime="20170809 04:03:07.262"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:07.262">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | OS FFDC | SEL Log | Core Files | BMC Specific Files ]</msg>
<status starttime="20170809 04:03:07.261" status="PASS" endtime="20170809 04:03:07.262"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 04:03:07.264" status="PASS" endtime="20170809 04:03:07.264"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:07.264">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:07.264">${ret_values} = None</msg>
<status starttime="20170809 04:03:07.263" status="PASS" endtime="20170809 04:03:07.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 04:03:07.265" status="PASS" endtime="20170809 04:03:07.265"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.310">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170809 04:03:07.310" status="PASS" endtime="20170809 04:03:07.310"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.311">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170809 04:03:07.311" status="PASS" endtime="20170809 04:03:07.311"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.316">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170809 04:03:07.312" status="PASS" endtime="20170809 04:03:07.316"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.320" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.319" status="PASS" endtime="20170809 04:03:07.320"></status>
</kw>
<status starttime="20170809 04:03:07.319" status="PASS" endtime="20170809 04:03:07.320"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.321" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.321" status="PASS" endtime="20170809 04:03:07.321"></status>
</kw>
<status starttime="20170809 04:03:07.320" status="PASS" endtime="20170809 04:03:07.321"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.322" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.322" status="PASS" endtime="20170809 04:03:07.322"></status>
</kw>
<status starttime="20170809 04:03:07.321" status="PASS" endtime="20170809 04:03:07.323"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.324" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.323" status="PASS" endtime="20170809 04:03:07.324"></status>
</kw>
<status starttime="20170809 04:03:07.323" status="PASS" endtime="20170809 04:03:07.326"></status>
</kw>
<status starttime="20170809 04:03:07.318" status="PASS" endtime="20170809 04:03:07.326"></status>
</kw>
<status starttime="20170809 04:03:07.318" status="PASS" endtime="20170809 04:03:07.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.327">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20170809 04:03:07.327" status="PASS" endtime="20170809 04:03:07.327"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.447">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:07.447">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170809 04:03:07.494">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:07.381" status="PASS" endtime="20170809 04:03:07.494"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:07.494">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:07.494">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-201"\nVERSION_ID="v1.99.8-201-gb983102"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status starttime="20170809 04:03:07.327" status="PASS" endtime="20170809 04:03:07.494"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.495">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-201"
VERSION_ID="v1.99.8-201-gb983102"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status starttime="20170809 04:03:07.495" status="PASS" endtime="20170809 04:03:07.495"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.495">${stderr} = </msg>
<status starttime="20170809 04:03:07.495" status="PASS" endtime="20170809 04:03:07.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.502" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.502" status="PASS" endtime="20170809 04:03:07.502"></status>
</kw>
<status starttime="20170809 04:03:07.501" status="PASS" endtime="20170809 04:03:07.502"></status>
</kw>
<status starttime="20170809 04:03:07.496" status="PASS" endtime="20170809 04:03:07.502"></status>
</kw>
<status starttime="20170809 04:03:07.317" status="PASS" endtime="20170809 04:03:07.503"></status>
</kw>
<status starttime="20170809 04:03:07.317" status="PASS" endtime="20170809 04:03:07.503"></status>
</kw>
<status starttime="20170809 04:03:07.317" status="PASS" endtime="20170809 04:03:07.503"></status>
</kw>
<status starttime="20170809 04:03:07.310" status="PASS" endtime="20170809 04:03:07.503"></status>
</kw>
<status starttime="20170809 04:03:07.310" status="PASS" endtime="20170809 04:03:07.503"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.504">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170809 04:03:07.503" status="PASS" endtime="20170809 04:03:07.504"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.505">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170809 04:03:07.504" status="PASS" endtime="20170809 04:03:07.505"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.508" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.507" status="PASS" endtime="20170809 04:03:07.508"></status>
</kw>
<status starttime="20170809 04:03:07.507" status="PASS" endtime="20170809 04:03:07.508"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.509" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.509" status="PASS" endtime="20170809 04:03:07.509"></status>
</kw>
<status starttime="20170809 04:03:07.508" status="PASS" endtime="20170809 04:03:07.509"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.510" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.510" status="PASS" endtime="20170809 04:03:07.511"></status>
</kw>
<status starttime="20170809 04:03:07.509" status="PASS" endtime="20170809 04:03:07.511"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.512" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.511" status="PASS" endtime="20170809 04:03:07.512"></status>
</kw>
<status starttime="20170809 04:03:07.511" status="PASS" endtime="20170809 04:03:07.512"></status>
</kw>
<status starttime="20170809 04:03:07.506" status="PASS" endtime="20170809 04:03:07.512"></status>
</kw>
<status starttime="20170809 04:03:07.506" status="PASS" endtime="20170809 04:03:07.512"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.513">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20170809 04:03:07.512" status="PASS" endtime="20170809 04:03:07.513"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.631">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:07.632">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170809 04:03:07.749">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:07.564" status="PASS" endtime="20170809 04:03:07.749"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:07.749">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:07.749">${ret_values} = (u' 04:03:12 up 16 min,  load average: 0.86, 1.19, 0.90', u'', 0)</msg>
<status starttime="20170809 04:03:07.513" status="PASS" endtime="20170809 04:03:07.749"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.750">${stdout} =  04:03:12 up 16 min,  load average: 0.86, 1.19, 0.90</msg>
<status starttime="20170809 04:03:07.750" status="PASS" endtime="20170809 04:03:07.750"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.751">${stderr} = </msg>
<status starttime="20170809 04:03:07.750" status="PASS" endtime="20170809 04:03:07.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.757" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.757" status="PASS" endtime="20170809 04:03:07.757"></status>
</kw>
<status starttime="20170809 04:03:07.756" status="PASS" endtime="20170809 04:03:07.758"></status>
</kw>
<status starttime="20170809 04:03:07.751" status="PASS" endtime="20170809 04:03:07.758"></status>
</kw>
<status starttime="20170809 04:03:07.505" status="PASS" endtime="20170809 04:03:07.758"></status>
</kw>
<status starttime="20170809 04:03:07.505" status="PASS" endtime="20170809 04:03:07.758"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.761" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.760" status="PASS" endtime="20170809 04:03:07.761"></status>
</kw>
<status starttime="20170809 04:03:07.760" status="PASS" endtime="20170809 04:03:07.761"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.762" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.762" status="PASS" endtime="20170809 04:03:07.762"></status>
</kw>
<status starttime="20170809 04:03:07.761" status="PASS" endtime="20170809 04:03:07.762"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.763" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.763" status="PASS" endtime="20170809 04:03:07.763"></status>
</kw>
<status starttime="20170809 04:03:07.762" status="PASS" endtime="20170809 04:03:07.764"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.765" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.764" status="PASS" endtime="20170809 04:03:07.765"></status>
</kw>
<status starttime="20170809 04:03:07.764" status="PASS" endtime="20170809 04:03:07.765"></status>
</kw>
<status starttime="20170809 04:03:07.759" status="PASS" endtime="20170809 04:03:07.765"></status>
</kw>
<status starttime="20170809 04:03:07.759" status="PASS" endtime="20170809 04:03:07.765"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.766">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20170809 04:03:07.765" status="PASS" endtime="20170809 04:03:07.766"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.879">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:07.880">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170809 04:03:07.942">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:07.823" status="PASS" endtime="20170809 04:03:07.942"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:07.942">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:07.942">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status starttime="20170809 04:03:07.766" status="PASS" endtime="20170809 04:03:07.942"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.943">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status starttime="20170809 04:03:07.943" status="PASS" endtime="20170809 04:03:07.943"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.944">${stderr} = </msg>
<status starttime="20170809 04:03:07.943" status="PASS" endtime="20170809 04:03:07.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.950" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.950" status="PASS" endtime="20170809 04:03:07.950"></status>
</kw>
<status starttime="20170809 04:03:07.949" status="PASS" endtime="20170809 04:03:07.951"></status>
</kw>
<status starttime="20170809 04:03:07.944" status="PASS" endtime="20170809 04:03:07.951"></status>
</kw>
<status starttime="20170809 04:03:07.758" status="PASS" endtime="20170809 04:03:07.951"></status>
</kw>
<status starttime="20170809 04:03:07.758" status="PASS" endtime="20170809 04:03:07.951"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.954" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.953" status="PASS" endtime="20170809 04:03:07.954"></status>
</kw>
<status starttime="20170809 04:03:07.953" status="PASS" endtime="20170809 04:03:07.954"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.955" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.955" status="PASS" endtime="20170809 04:03:07.955"></status>
</kw>
<status starttime="20170809 04:03:07.954" status="PASS" endtime="20170809 04:03:07.955"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.957" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.956" status="PASS" endtime="20170809 04:03:07.957"></status>
</kw>
<status starttime="20170809 04:03:07.956" status="PASS" endtime="20170809 04:03:07.957"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:07.958" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:07.957" status="PASS" endtime="20170809 04:03:07.958"></status>
</kw>
<status starttime="20170809 04:03:07.957" status="PASS" endtime="20170809 04:03:07.958"></status>
</kw>
<status starttime="20170809 04:03:07.952" status="PASS" endtime="20170809 04:03:07.958"></status>
</kw>
<status starttime="20170809 04:03:07.952" status="PASS" endtime="20170809 04:03:07.958"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:07.959">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20170809 04:03:07.958" status="PASS" endtime="20170809 04:03:07.959"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:08.108">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:08.109">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170809 04:03:08.175">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:08.045" status="PASS" endtime="20170809 04:03:08.176"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:08.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:08.176">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Tue Aug 8 21:19:50 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20170809 04:03:07.959" status="PASS" endtime="20170809 04:03:08.176"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:08.177">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Tue Aug 8 21:19:50 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20170809 04:03:08.176" status="PASS" endtime="20170809 04:03:08.177"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:08.177">${stderr} = </msg>
<status starttime="20170809 04:03:08.177" status="PASS" endtime="20170809 04:03:08.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:08.185" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:08.184" status="PASS" endtime="20170809 04:03:08.185"></status>
</kw>
<status starttime="20170809 04:03:08.183" status="PASS" endtime="20170809 04:03:08.185"></status>
</kw>
<status starttime="20170809 04:03:08.178" status="PASS" endtime="20170809 04:03:08.185"></status>
</kw>
<status starttime="20170809 04:03:07.951" status="PASS" endtime="20170809 04:03:08.185"></status>
</kw>
<status starttime="20170809 04:03:07.951" status="PASS" endtime="20170809 04:03:08.185"></status>
</kw>
<status starttime="20170809 04:03:07.505" status="PASS" endtime="20170809 04:03:08.186"></status>
</kw>
<status starttime="20170809 04:03:07.503" status="PASS" endtime="20170809 04:03:08.186"></status>
</kw>
<status starttime="20170809 04:03:07.503" status="PASS" endtime="20170809 04:03:08.186"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:08.187">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20170809 04:03:08.187" status="PASS" endtime="20170809 04:03:08.187"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:08.188">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170809 04:03:08.187" status="PASS" endtime="20170809 04:03:08.188"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:08.191" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:08.190" status="PASS" endtime="20170809 04:03:08.191"></status>
</kw>
<status starttime="20170809 04:03:08.190" status="PASS" endtime="20170809 04:03:08.191"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:08.192" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:08.192" status="PASS" endtime="20170809 04:03:08.192"></status>
</kw>
<status starttime="20170809 04:03:08.191" status="PASS" endtime="20170809 04:03:08.192"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:08.194" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:08.193" status="PASS" endtime="20170809 04:03:08.194"></status>
</kw>
<status starttime="20170809 04:03:08.193" status="PASS" endtime="20170809 04:03:08.194"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:08.195" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:08.194" status="PASS" endtime="20170809 04:03:08.195"></status>
</kw>
<status starttime="20170809 04:03:08.194" status="PASS" endtime="20170809 04:03:08.195"></status>
</kw>
<status starttime="20170809 04:03:08.189" status="PASS" endtime="20170809 04:03:08.195"></status>
</kw>
<status starttime="20170809 04:03:08.189" status="PASS" endtime="20170809 04:03:08.195"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:08.196">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20170809 04:03:08.195" status="PASS" endtime="20170809 04:03:08.196"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:08.305">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:08.306">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170809 04:03:09.785">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:08.243" status="PASS" endtime="20170809 04:03:09.785"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:09.785">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:09.785">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status starttime="20170809 04:03:08.196" status="PASS" endtime="20170809 04:03:09.785"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:09.786">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status starttime="20170809 04:03:09.786" status="PASS" endtime="20170809 04:03:09.786"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:09.787">${stderr} = </msg>
<status starttime="20170809 04:03:09.786" status="PASS" endtime="20170809 04:03:09.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:09.796" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:09.796" status="PASS" endtime="20170809 04:03:09.796"></status>
</kw>
<status starttime="20170809 04:03:09.795" status="PASS" endtime="20170809 04:03:09.796"></status>
</kw>
<status starttime="20170809 04:03:09.787" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:08.188" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:08.188" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:08.188" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:08.186" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:08.186" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:07.310" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:07.309" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:07.265" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:07.263" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<status starttime="20170809 04:03:07.263" status="PASS" endtime="20170809 04:03:09.797"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 04:03:09.799" status="PASS" endtime="20170809 04:03:09.799"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:09.799">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:09.799">${ret_values} = None</msg>
<status starttime="20170809 04:03:09.798" status="PASS" endtime="20170809 04:03:09.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 04:03:09.800" status="PASS" endtime="20170809 04:03:09.800"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:09.840">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170809 04:03:09.839" status="PASS" endtime="20170809 04:03:09.840"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:09.841">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/...</msg>
<status starttime="20170809 04:03:09.841" status="PASS" endtime="20170809 04:03:09.841"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:09.842">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_record_log.txt</msg>
<status starttime="20170809 04:03:09.841" status="PASS" endtime="20170809 04:03:09.842"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:09.848">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:09.848" status="PASS" endtime="20170809 04:03:09.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:09.849">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:09.849" status="PASS" endtime="20170809 04:03:09.849"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:09.850">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:09.849" status="PASS" endtime="20170809 04:03:09.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:09.850">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:09.850" status="PASS" endtime="20170809 04:03:09.850"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.083">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:09.851" status="PASS" endtime="20170809 04:03:10.083"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:10.083">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:10.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:09.851" status="PASS" endtime="20170809 04:03:10.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.084">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:10.083" status="PASS" endtime="20170809 04:03:10.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:10.084" status="PASS" endtime="20170809 04:03:10.085"></status>
</kw>
<status starttime="20170809 04:03:09.844" status="PASS" endtime="20170809 04:03:10.085"></status>
</kw>
<status starttime="20170809 04:03:09.843" status="PASS" endtime="20170809 04:03:10.085"></status>
</kw>
<status starttime="20170809 04:03:09.843" status="PASS" endtime="20170809 04:03:10.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.086">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170809 04:03:10.086" status="PASS" endtime="20170809 04:03:10.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:10.087" status="PASS" endtime="20170809 04:03:10.087"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.157">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:10.158">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 04:03:10.088" status="PASS" endtime="20170809 04:03:10.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:10.158" status="PASS" endtime="20170809 04:03:10.158"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:10.159">Delete All Sessions</msg>
<status starttime="20170809 04:03:10.159" status="PASS" endtime="20170809 04:03:10.159"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:10.159">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 04:03:09.842" status="PASS" endtime="20170809 04:03:10.159"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.160">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 04:03:10.160">404 != 200</msg>
<status starttime="20170809 04:03:10.160" status="FAIL" endtime="20170809 04:03:10.160"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:10.161">${status} = False</msg>
<status starttime="20170809 04:03:10.159" status="PASS" endtime="20170809 04:03:10.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 04:03:10.161">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 04:03:10.161" status="PASS" endtime="20170809 04:03:10.162"></status>
</kw>
<status starttime="20170809 04:03:10.161" status="PASS" endtime="20170809 04:03:10.162"></status>
</kw>
<status starttime="20170809 04:03:09.841" status="PASS" endtime="20170809 04:03:10.162"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.162">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_elog.txt</msg>
<status starttime="20170809 04:03:10.162" status="PASS" endtime="20170809 04:03:10.163"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.165">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:10.165" status="PASS" endtime="20170809 04:03:10.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.166">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:10.166" status="PASS" endtime="20170809 04:03:10.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.167">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:10.166" status="PASS" endtime="20170809 04:03:10.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.167">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:10.167" status="PASS" endtime="20170809 04:03:10.168"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.447">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:10.168" status="PASS" endtime="20170809 04:03:10.448"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:10.448">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:10.448">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:10.168" status="PASS" endtime="20170809 04:03:10.448"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.448">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:10.448" status="PASS" endtime="20170809 04:03:10.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:10.449" status="PASS" endtime="20170809 04:03:10.449"></status>
</kw>
<status starttime="20170809 04:03:10.164" status="PASS" endtime="20170809 04:03:10.449"></status>
</kw>
<status starttime="20170809 04:03:10.164" status="PASS" endtime="20170809 04:03:10.449"></status>
</kw>
<status starttime="20170809 04:03:10.163" status="PASS" endtime="20170809 04:03:10.450"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.450">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170809 04:03:10.450" status="PASS" endtime="20170809 04:03:10.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:10.450" status="PASS" endtime="20170809 04:03:10.451"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.721">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:10.721">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:10.451" status="PASS" endtime="20170809 04:03:10.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:10.722" status="PASS" endtime="20170809 04:03:10.722"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:10.722">Delete All Sessions</msg>
<status starttime="20170809 04:03:10.722" status="PASS" endtime="20170809 04:03:10.722"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:10.723">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:10.163" status="PASS" endtime="20170809 04:03:10.723"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:10.723" status="PASS" endtime="20170809 04:03:10.724"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:10.724">${status} = True</msg>
<status starttime="20170809 04:03:10.723" status="PASS" endtime="20170809 04:03:10.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170809 04:03:10.724" status="PASS" endtime="20170809 04:03:10.725"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.726">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 6b 56 c9 00 00 00 00 a0 96 7e 40 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 73 5a 7a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 8c ff 79 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 8e 58 d7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 8f 77 93 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 8f 7e f6 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 8f 8d e0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 8f 98 c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 91 63 da 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 91 6e 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 91 8b ae 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 91 c5 a0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 91 cf f6 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 02 93 0d 50 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 93 17 ce 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 93 60 a2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 93 6b 0c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 02 93 74 94 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 02 94 f2 c4 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 94 fb cc 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f 4b 97 e8 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f 4b a0 ee 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 02 73 5a 7a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 8c ff 79 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 8e 58 d7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 8f 77 93 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 8f 7e f6 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 8f 8d e0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 8f 98 c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 91 63 da 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 91 6e 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 91 8b ae 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 91 c5 a0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 91 cf f6"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502251312347, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250205501, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250489096, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 cb 70 24 7b 00 00 00 00 cb 9b 75 52 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0d 90 00 00 0d 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 17 3c 70 79 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 55 7b 74 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 56 af e1 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 57 ce 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 57 d5 e5 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 57 e4 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 57 ee e1 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 59 b2 9c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 59 bd 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 59 d9 58 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 5a 22 8e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 5a 2c 6e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 17 5b 6e c9 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 5b 79 43 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 5b bf cd 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 5b c9 ff 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 17 5b d3 5b 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 17 5d 4e ad 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 5d 56 fd 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 27 b6 30 74 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 27 b6 39 37 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 17 3c 70 79 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 55 7b 74 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 56 af e1 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 57 ce 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 57 d5 e5 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 57 e4 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 57 ee e1 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 59 b2 9c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 59 bd 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 59 d9 58 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 5a 22 8e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 5a 2c 6e"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250816178, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250933440, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 81 cc c8 00 00 00 00 a0 ac 98 71 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 91 ca eb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 ab 6f fd 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 ac 96 ed 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 ad ae 5c 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 ad b6 28 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 ad c4 d0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 ad cf c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 af 92 3b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 af 9c e8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 af b9 94 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 b0 02 fd 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 b0 0c ee 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 02 b1 55 dd 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 b1 60 10 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 b1 a7 3f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 b1 b1 be 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 02 b1 bb 38 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 02 b3 39 79 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 b3 42 4f 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f 77 77 8e 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f 77 80 37 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 02 91 ca eb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 ab 6f fd 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 ac 96 ed 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 ad ae 5c 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 ad b6 28 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 ad c4 d0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 ad cf c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 af 92 3b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 af 9c e8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 af b9 94 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 b0 02 fd 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 b0 0c ee"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250982368, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502251100274, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 f7 5d e4 00 00 00 00 a1 22 15 fc 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 41 96 fc 88 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 03 80 28 a6 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 99 e1 f0 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 9b 14 f5 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9c 35 c9 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 9c 3d 9b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 9c 4b fc 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 9c 56 8f 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 9e 1a 32 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 9e 24 6a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9e 41 16 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 9e 8f 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 9e 99 9a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 03 9f d6 b1 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 9f e1 3d 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 a0 28 71 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 a0 32 e5 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 03 a0 3c 6c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 03 a1 ba 6b 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 a1 c2 e9 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 10 5d 16 c4 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 10 5d 1f 6d 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 03 80 28 a6 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 99 e1 f0 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 9b 14 f5 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9c 35 c9 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 9c 3d 9b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 9c 4b fc 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 9c 56 8f 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 9e 1a 32 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 9e 24 6a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9e 41 16 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 9e 8f 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 9e 99 9a"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502251148130, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502251265635, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:10.727">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 04:03:10.727">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu...</msg>
<status starttime="20170809 04:03:10.725" status="PASS" endtime="20170809 04:03:10.727"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.729" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_elog.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:10.729" status="PASS" endtime="20170809 04:03:10.730"></status>
</kw>
<status starttime="20170809 04:03:10.728" status="PASS" endtime="20170809 04:03:10.730"></status>
</kw>
<status starttime="20170809 04:03:10.162" status="PASS" endtime="20170809 04:03:10.730"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.730">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_sensor_list.txt</msg>
<status starttime="20170809 04:03:10.730" status="PASS" endtime="20170809 04:03:10.730"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.733">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:10.733" status="PASS" endtime="20170809 04:03:10.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.734">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:10.734" status="PASS" endtime="20170809 04:03:10.734"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.735">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:10.734" status="PASS" endtime="20170809 04:03:10.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.735">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:10.735" status="PASS" endtime="20170809 04:03:10.735"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.921">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:10.736" status="PASS" endtime="20170809 04:03:10.921"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:10.921">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:10.921">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:10.736" status="PASS" endtime="20170809 04:03:10.921"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.922">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:10.921" status="PASS" endtime="20170809 04:03:10.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:10.922">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:10.922" status="PASS" endtime="20170809 04:03:10.922"></status>
</kw>
<status starttime="20170809 04:03:10.732" status="PASS" endtime="20170809 04:03:10.923"></status>
</kw>
<status starttime="20170809 04:03:10.732" status="PASS" endtime="20170809 04:03:10.923"></status>
</kw>
<status starttime="20170809 04:03:10.731" status="PASS" endtime="20170809 04:03:10.923"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:10.923">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170809 04:03:10.923" status="PASS" endtime="20170809 04:03:10.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:10.924" status="PASS" endtime="20170809 04:03:10.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.111">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:11.112">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:10.924" status="PASS" endtime="20170809 04:03:11.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:11.112" status="PASS" endtime="20170809 04:03:11.112"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:11.113">Delete All Sessions</msg>
<status starttime="20170809 04:03:11.113" status="PASS" endtime="20170809 04:03:11.113"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.113">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:10.731" status="PASS" endtime="20170809 04:03:11.113"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:11.114" status="PASS" endtime="20170809 04:03:11.114"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.114">${status} = True</msg>
<status starttime="20170809 04:03:11.113" status="PASS" endtime="20170809 04:03:11.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170809 04:03:11.115" status="PASS" endtime="20170809 04:03:11.115"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.116">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:11.116">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 04:03:11.116">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170809 04:03:11.115" status="PASS" endtime="20170809 04:03:11.116"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.118" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_sensor_list.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:11.117" status="PASS" endtime="20170809 04:03:11.118"></status>
</kw>
<status starttime="20170809 04:03:11.116" status="PASS" endtime="20170809 04:03:11.118"></status>
</kw>
<status starttime="20170809 04:03:10.730" status="PASS" endtime="20170809 04:03:11.118"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.119">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_inventory.txt</msg>
<status starttime="20170809 04:03:11.118" status="PASS" endtime="20170809 04:03:11.119"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.122">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:11.121" status="PASS" endtime="20170809 04:03:11.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.123">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:11.122" status="PASS" endtime="20170809 04:03:11.123"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.123">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:11.123" status="PASS" endtime="20170809 04:03:11.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.124">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:11.123" status="PASS" endtime="20170809 04:03:11.124"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:11.125" status="PASS" endtime="20170809 04:03:11.352"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:11.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:11.124" status="PASS" endtime="20170809 04:03:11.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:11.352" status="PASS" endtime="20170809 04:03:11.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:11.353" status="PASS" endtime="20170809 04:03:11.354"></status>
</kw>
<status starttime="20170809 04:03:11.121" status="PASS" endtime="20170809 04:03:11.354"></status>
</kw>
<status starttime="20170809 04:03:11.120" status="PASS" endtime="20170809 04:03:11.354"></status>
</kw>
<status starttime="20170809 04:03:11.119" status="PASS" endtime="20170809 04:03:11.354"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.354">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170809 04:03:11.354" status="PASS" endtime="20170809 04:03:11.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:11.355" status="PASS" endtime="20170809 04:03:11.355"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.670">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:11.670">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:11.355" status="PASS" endtime="20170809 04:03:11.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:11.670" status="PASS" endtime="20170809 04:03:11.671"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:11.671">Delete All Sessions</msg>
<status starttime="20170809 04:03:11.671" status="PASS" endtime="20170809 04:03:11.671"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.671">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:11.119" status="PASS" endtime="20170809 04:03:11.671"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:11.672" status="PASS" endtime="20170809 04:03:11.673"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.673">${status} = True</msg>
<status starttime="20170809 04:03:11.672" status="PASS" endtime="20170809 04:03:11.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170809 04:03:11.673" status="PASS" endtime="20170809 04:03:11.673"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.674">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:11.674">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 04:03:11.675">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status starttime="20170809 04:03:11.674" status="PASS" endtime="20170809 04:03:11.675"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.676" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_inventory.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:11.676" status="PASS" endtime="20170809 04:03:11.676"></status>
</kw>
<status starttime="20170809 04:03:11.675" status="PASS" endtime="20170809 04:03:11.676"></status>
</kw>
<status starttime="20170809 04:03:11.118" status="PASS" endtime="20170809 04:03:11.676"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.677">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_led.txt</msg>
<status starttime="20170809 04:03:11.677" status="PASS" endtime="20170809 04:03:11.677"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.680">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:11.680" status="PASS" endtime="20170809 04:03:11.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.681">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:11.680" status="PASS" endtime="20170809 04:03:11.681"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.682">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:11.681" status="PASS" endtime="20170809 04:03:11.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.682">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:11.682" status="PASS" endtime="20170809 04:03:11.682"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.869">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:11.683" status="PASS" endtime="20170809 04:03:11.870"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:11.870">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:11.683" status="PASS" endtime="20170809 04:03:11.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.871">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:11.870" status="PASS" endtime="20170809 04:03:11.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.871">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:11.871" status="PASS" endtime="20170809 04:03:11.871"></status>
</kw>
<status starttime="20170809 04:03:11.679" status="PASS" endtime="20170809 04:03:11.871"></status>
</kw>
<status starttime="20170809 04:03:11.679" status="PASS" endtime="20170809 04:03:11.872"></status>
</kw>
<status starttime="20170809 04:03:11.678" status="PASS" endtime="20170809 04:03:11.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.872">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170809 04:03:11.872" status="PASS" endtime="20170809 04:03:11.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:11.873" status="PASS" endtime="20170809 04:03:11.873"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:11.917">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:11.918">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 04:03:11.873" status="PASS" endtime="20170809 04:03:11.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:11.918" status="PASS" endtime="20170809 04:03:11.918"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:11.919">Delete All Sessions</msg>
<status starttime="20170809 04:03:11.919" status="PASS" endtime="20170809 04:03:11.919"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.919">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170809 04:03:11.677" status="PASS" endtime="20170809 04:03:11.919"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 04:03:11.920">404 != 200</msg>
<status starttime="20170809 04:03:11.920" status="FAIL" endtime="20170809 04:03:11.920"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.920">${status} = False</msg>
<status starttime="20170809 04:03:11.919" status="PASS" endtime="20170809 04:03:11.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 04:03:11.921">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 04:03:11.921" status="PASS" endtime="20170809 04:03:11.921"></status>
</kw>
<status starttime="20170809 04:03:11.921" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<status starttime="20170809 04:03:11.677" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<status starttime="20170809 04:03:09.841" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<status starttime="20170809 04:03:09.840" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<status starttime="20170809 04:03:09.840" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<status starttime="20170809 04:03:09.840" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<status starttime="20170809 04:03:09.838" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<status starttime="20170809 04:03:09.800" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<status starttime="20170809 04:03:09.798" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<status starttime="20170809 04:03:09.797" status="PASS" endtime="20170809 04:03:11.922"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 04:03:11.924" status="PASS" endtime="20170809 04:03:11.924"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.924">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:11.924">${ret_values} = None</msg>
<status starttime="20170809 04:03:11.923" status="PASS" endtime="20170809 04:03:11.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 04:03:11.924" status="PASS" endtime="20170809 04:03:11.925"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:11.968">Returning from the enclosing user keyword.</msg>
<status starttime="20170809 04:03:11.967" status="PASS" endtime="20170809 04:03:11.968"></status>
</kw>
<status starttime="20170809 04:03:11.967" status="PASS" endtime="20170809 04:03:11.968"></status>
</kw>
<status starttime="20170809 04:03:11.925" status="PASS" endtime="20170809 04:03:11.968"></status>
</kw>
<status starttime="20170809 04:03:11.922" status="PASS" endtime="20170809 04:03:11.968"></status>
</kw>
<status starttime="20170809 04:03:11.922" status="PASS" endtime="20170809 04:03:11.968"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 04:03:11.970" status="PASS" endtime="20170809 04:03:11.970"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:11.970">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:11.970">${ret_values} = None</msg>
<status starttime="20170809 04:03:11.969" status="PASS" endtime="20170809 04:03:11.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 04:03:11.971" status="PASS" endtime="20170809 04:03:11.971"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.014">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:12.014" status="PASS" endtime="20170809 04:03:12.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.015">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:12.015" status="PASS" endtime="20170809 04:03:12.015"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.016">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:12.015" status="PASS" endtime="20170809 04:03:12.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.016">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:12.016" status="PASS" endtime="20170809 04:03:12.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.196">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:12.017" status="PASS" endtime="20170809 04:03:12.196"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:12.196">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:12.196">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:12.017" status="PASS" endtime="20170809 04:03:12.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.197">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:12.196" status="PASS" endtime="20170809 04:03:12.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:12.197" status="PASS" endtime="20170809 04:03:12.197"></status>
</kw>
<status starttime="20170809 04:03:12.013" status="PASS" endtime="20170809 04:03:12.198"></status>
</kw>
<status starttime="20170809 04:03:12.013" status="PASS" endtime="20170809 04:03:12.198"></status>
</kw>
<status starttime="20170809 04:03:12.012" status="PASS" endtime="20170809 04:03:12.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.198">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170809 04:03:12.198" status="PASS" endtime="20170809 04:03:12.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:12.199" status="PASS" endtime="20170809 04:03:12.199"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.517">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:12.517">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:12.199" status="PASS" endtime="20170809 04:03:12.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:12.518" status="PASS" endtime="20170809 04:03:12.518"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:12.519">Delete All Sessions</msg>
<status starttime="20170809 04:03:12.518" status="PASS" endtime="20170809 04:03:12.519"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:12.519">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:12.011" status="PASS" endtime="20170809 04:03:12.519"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:12.520" status="PASS" endtime="20170809 04:03:12.520"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:12.520">${status} = True</msg>
<status starttime="20170809 04:03:12.519" status="PASS" endtime="20170809 04:03:12.520"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170809 04:03:12.520" status="PASS" endtime="20170809 04:03:12.521"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.522">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 6b 56 c9 00 00 00 00 a0 96 7e 40 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 73 5a 7a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 8c ff 79 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 8e 58 d7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 8f 77 93 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 8f 7e f6 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 8f 8d e0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 8f 98 c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 91 63 da 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 91 6e 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 91 8b ae 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 91 c5 a0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 91 cf f6 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 02 93 0d 50 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 93 17 ce 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 93 60 a2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 93 6b 0c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 02 93 74 94 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 02 94 f2 c4 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 94 fb cc 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f 4b 97 e8 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f 4b a0 ee 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 02 73 5a 7a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 8c ff 79 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 8e 58 d7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 8f 77 93 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 8f 7e f6 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 8f 8d e0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 8f 98 c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 91 63 da 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 91 6e 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 91 8b ae 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 91 c5 a0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 91 cf f6"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502251312347, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250205501, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250489096, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 cb 70 24 7b 00 00 00 00 cb 9b 75 52 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0d 90 00 00 0d 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 17 3c 70 79 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 55 7b 74 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 56 af e1 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 57 ce 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 57 d5 e5 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 57 e4 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 57 ee e1 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 59 b2 9c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 59 bd 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 59 d9 58 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 5a 22 8e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 5a 2c 6e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 17 5b 6e c9 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 5b 79 43 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 5b bf cd 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 5b c9 ff 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 17 5b d3 5b 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 17 5d 4e ad 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 5d 56 fd 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 27 b6 30 74 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 27 b6 39 37 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 17 3c 70 79 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 55 7b 74 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 56 af e1 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 57 ce 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 57 d5 e5 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 57 e4 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 57 ee e1 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 59 b2 9c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 59 bd 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 59 d9 58 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 5a 22 8e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 5a 2c 6e"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250816178, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250933440, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 81 cc c8 00 00 00 00 a0 ac 98 71 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 91 ca eb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 ab 6f fd 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 ac 96 ed 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 ad ae 5c 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 ad b6 28 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 ad c4 d0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 ad cf c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 af 92 3b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 af 9c e8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 af b9 94 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 b0 02 fd 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 b0 0c ee 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 02 b1 55 dd 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 b1 60 10 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 b1 a7 3f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 b1 b1 be 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 02 b1 bb 38 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 02 b3 39 79 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 b3 42 4f 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f 77 77 8e 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f 77 80 37 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 02 91 ca eb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 ab 6f fd 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 ac 96 ed 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 ad ae 5c 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 ad b6 28 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 ad c4 d0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 ad cf c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 af 92 3b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 af 9c e8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 af b9 94 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 b0 02 fd 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 b0 0c ee"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502250982368, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502251100274, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 f7 5d e4 00 00 00 00 a1 22 15 fc 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 41 96 fc 88 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 03 80 28 a6 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 99 e1 f0 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 9b 14 f5 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9c 35 c9 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 9c 3d 9b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 9c 4b fc 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 9c 56 8f 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 9e 1a 32 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 9e 24 6a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9e 41 16 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 9e 8f 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 9e 99 9a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 03 9f d6 b1 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 9f e1 3d 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 a0 28 71 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 a0 32 e5 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 03 a0 3c 6c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 03 a1 ba 6b 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 a1 c2 e9 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 10 5d 16 c4 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 10 5d 1f 6d 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 03 80 28 a6 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 99 e1 f0 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 9b 14 f5 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9c 35 c9 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 9c 3d 9b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 9c 4b fc 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 9c 56 8f 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 9e 1a 32 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 9e 24 6a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9e 41 16 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 9e 8f 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 9e 99 9a"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502251148130, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502251265635, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:12.523">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:12.524">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/10': {u'associations': [[u'callout', u'fault', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1']], u'AdditionalData': [u'CALLOUT_INVENT...</msg>
<status starttime="20170809 04:03:12.521" status="PASS" endtime="20170809 04:03:12.524"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.524">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/ent...</msg>
<status starttime="20170809 04:03:12.524" status="PASS" endtime="20170809 04:03:12.524"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.525">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel</msg>
<status starttime="20170809 04:03:12.524" status="PASS" endtime="20170809 04:03:12.525"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.526" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:12.525" status="PASS" endtime="20170809 04:03:12.526"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/10">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 04:03:12.526" status="PASS" endtime="20170809 04:03:12.527"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:12.530" status="PASS" endtime="20170809 04:03:12.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.531">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:12.531" status="PASS" endtime="20170809 04:03:12.531"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.531">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:12.531" status="PASS" endtime="20170809 04:03:12.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.532">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:12.532" status="PASS" endtime="20170809 04:03:12.532"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.760">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:12.533" status="PASS" endtime="20170809 04:03:12.760"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:12.760">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:12.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:12.532" status="PASS" endtime="20170809 04:03:12.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.761">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:12.761" status="PASS" endtime="20170809 04:03:12.761"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:12.761" status="PASS" endtime="20170809 04:03:12.762"></status>
</kw>
<status starttime="20170809 04:03:12.529" status="PASS" endtime="20170809 04:03:12.762"></status>
</kw>
<status starttime="20170809 04:03:12.529" status="PASS" endtime="20170809 04:03:12.762"></status>
</kw>
<status starttime="20170809 04:03:12.528" status="PASS" endtime="20170809 04:03:12.762"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.763">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status starttime="20170809 04:03:12.762" status="PASS" endtime="20170809 04:03:12.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:12.763" status="PASS" endtime="20170809 04:03:12.763"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.928">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:12.928">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:12.764" status="PASS" endtime="20170809 04:03:12.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:12.929" status="PASS" endtime="20170809 04:03:12.929"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:12.929">Delete All Sessions</msg>
<status starttime="20170809 04:03:12.929" status="PASS" endtime="20170809 04:03:12.929"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:12.930">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:12.527" status="PASS" endtime="20170809 04:03:12.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:12.930" status="PASS" endtime="20170809 04:03:12.930"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.931">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 6b 56 c9 00 00 00 00 a0 96 7e 40 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 73 5a 7a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 8c ff 79 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 8e 58 d7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 8f 77 93 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 8f 7e f6 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 8f 8d e0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 8f 98 c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 91 63 da 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 91 6e 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 91 8b ae 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 91 c5 a0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 91 cf f6 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 02 93 0d 50 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 93 17 ce 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 93 60 a2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 93 6b 0c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 02 93 74 94 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 02 94 f2 c4 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 94 fb cc 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f 4b 97 e8 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f 4b a0 ee 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 02 73 5a 7a 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 8c ff 79 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 8e 58 d7 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 8f 77 93 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 8f 7e f6 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 8f 8d e0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 8f 98 c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 91 63 da 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 91 6e 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 91 8b ae 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 91 c5 a0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 91 cf f6"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:12.931">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:12.931">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 6b 56...</msg>
<status starttime="20170809 04:03:12.931" status="PASS" endtime="20170809 04:03:12.931"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:12.932">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 6b 56 c9 00 00 ...</msg>
<status starttime="20170809 04:03:12.527" status="PASS" endtime="20170809 04:03:12.932"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.932">Length is 2</msg>
<msg level="INFO" timestamp="20170809 04:03:12.932">${length} = 2</msg>
<status starttime="20170809 04:03:12.932" status="PASS" endtime="20170809 04:03:12.933"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 04:03:12.933" status="PASS" endtime="20170809 04:03:12.933"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.934">${index} = 1</msg>
<status starttime="20170809 04:03:12.933" status="PASS" endtime="20170809 04:03:12.934"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.935" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:12.935" status="PASS" endtime="20170809 04:03:12.935"></status>
</kw>
<status starttime="20170809 04:03:12.934" status="PASS" endtime="20170809 04:03:12.935"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.936" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:12.936" status="PASS" endtime="20170809 04:03:12.936"></status>
</kw>
<status starttime="20170809 04:03:12.935" status="PASS" endtime="20170809 04:03:12.937"></status>
</kw>
<status starttime="20170809 04:03:12.526" status="PASS" endtime="20170809 04:03:12.937"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 04:03:12.937" status="PASS" endtime="20170809 04:03:12.937"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:12.941">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:12.940" status="PASS" endtime="20170809 04:03:12.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.942">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:12.941" status="PASS" endtime="20170809 04:03:12.942"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.942">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:12.942" status="PASS" endtime="20170809 04:03:12.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:12.943">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:12.943" status="PASS" endtime="20170809 04:03:12.943"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.151">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:12.944" status="PASS" endtime="20170809 04:03:13.152"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:13.152">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:13.152">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:12.943" status="PASS" endtime="20170809 04:03:13.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.152">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:13.152" status="PASS" endtime="20170809 04:03:13.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:13.153" status="PASS" endtime="20170809 04:03:13.153"></status>
</kw>
<status starttime="20170809 04:03:12.940" status="PASS" endtime="20170809 04:03:13.153"></status>
</kw>
<status starttime="20170809 04:03:12.939" status="PASS" endtime="20170809 04:03:13.153"></status>
</kw>
<status starttime="20170809 04:03:12.939" status="PASS" endtime="20170809 04:03:13.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.154">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170809 04:03:13.154" status="PASS" endtime="20170809 04:03:13.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:13.154" status="PASS" endtime="20170809 04:03:13.155"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.236">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:13.237">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:13.155" status="PASS" endtime="20170809 04:03:13.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:13.237" status="PASS" endtime="20170809 04:03:13.237"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:13.238">Delete All Sessions</msg>
<status starttime="20170809 04:03:13.237" status="PASS" endtime="20170809 04:03:13.238"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:13.238">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:12.938" status="PASS" endtime="20170809 04:03:13.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:13.238" status="PASS" endtime="20170809 04:03:13.239"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.239">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:13.239">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:13.239">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:03:13.239" status="PASS" endtime="20170809 04:03:13.239"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:13.240">${esel_data} = []</msg>
<status starttime="20170809 04:03:12.937" status="PASS" endtime="20170809 04:03:13.240"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.240">Length is 0</msg>
<msg level="INFO" timestamp="20170809 04:03:13.240">${length} = 0</msg>
<status starttime="20170809 04:03:13.240" status="PASS" endtime="20170809 04:03:13.240"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.241">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 04:03:13.240" status="PASS" endtime="20170809 04:03:13.241"></status>
</kw>
<status starttime="20170809 04:03:12.937" status="PASS" endtime="20170809 04:03:13.241"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 04:03:13.241" status="PASS" endtime="20170809 04:03:13.242"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.245">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:13.245" status="PASS" endtime="20170809 04:03:13.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:13.248" status="PASS" endtime="20170809 04:03:13.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.249">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:13.249" status="PASS" endtime="20170809 04:03:13.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:13.250" status="PASS" endtime="20170809 04:03:13.250"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.492">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:13.251" status="PASS" endtime="20170809 04:03:13.492"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:13.493">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:13.493">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:13.250" status="PASS" endtime="20170809 04:03:13.493"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.493">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:13.493" status="PASS" endtime="20170809 04:03:13.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:13.494" status="PASS" endtime="20170809 04:03:13.494"></status>
</kw>
<status starttime="20170809 04:03:13.245" status="PASS" endtime="20170809 04:03:13.495"></status>
</kw>
<status starttime="20170809 04:03:13.244" status="PASS" endtime="20170809 04:03:13.495"></status>
</kw>
<status starttime="20170809 04:03:13.244" status="PASS" endtime="20170809 04:03:13.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.496">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170809 04:03:13.495" status="PASS" endtime="20170809 04:03:13.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:13.496" status="PASS" endtime="20170809 04:03:13.497"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.580">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:13.580">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:13.497" status="PASS" endtime="20170809 04:03:13.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:13.581" status="PASS" endtime="20170809 04:03:13.581"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:13.581">Delete All Sessions</msg>
<status starttime="20170809 04:03:13.581" status="PASS" endtime="20170809 04:03:13.582"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:13.582">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:13.243" status="PASS" endtime="20170809 04:03:13.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.582">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:13.582" status="PASS" endtime="20170809 04:03:13.582"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.583">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:13.583">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:13.583">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:03:13.583" status="PASS" endtime="20170809 04:03:13.583"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:13.583">${esel_data} = []</msg>
<status starttime="20170809 04:03:13.242" status="PASS" endtime="20170809 04:03:13.583"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.584">Length is 0</msg>
<msg level="INFO" timestamp="20170809 04:03:13.584">${length} = 0</msg>
<status starttime="20170809 04:03:13.584" status="PASS" endtime="20170809 04:03:13.584"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.585">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 04:03:13.584" status="PASS" endtime="20170809 04:03:13.585"></status>
</kw>
<status starttime="20170809 04:03:13.241" status="PASS" endtime="20170809 04:03:13.585"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 04:03:13.585" status="PASS" endtime="20170809 04:03:13.586"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.589">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:13.589" status="PASS" endtime="20170809 04:03:13.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.590">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:13.590" status="PASS" endtime="20170809 04:03:13.590"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.591">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:13.591" status="PASS" endtime="20170809 04:03:13.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.592">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:13.591" status="PASS" endtime="20170809 04:03:13.592"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.779">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:13.592" status="PASS" endtime="20170809 04:03:13.779"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:13.779">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:13.779">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:13.592" status="PASS" endtime="20170809 04:03:13.779"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.780">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:13.779" status="PASS" endtime="20170809 04:03:13.780"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.780">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:13.780" status="PASS" endtime="20170809 04:03:13.780"></status>
</kw>
<status starttime="20170809 04:03:13.588" status="PASS" endtime="20170809 04:03:13.780"></status>
</kw>
<status starttime="20170809 04:03:13.588" status="PASS" endtime="20170809 04:03:13.780"></status>
</kw>
<status starttime="20170809 04:03:13.587" status="PASS" endtime="20170809 04:03:13.781"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.781">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170809 04:03:13.781" status="PASS" endtime="20170809 04:03:13.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:13.781" status="PASS" endtime="20170809 04:03:13.782"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.871">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:13.871">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:13.782" status="PASS" endtime="20170809 04:03:13.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:13.871" status="PASS" endtime="20170809 04:03:13.872"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:13.872">Delete All Sessions</msg>
<status starttime="20170809 04:03:13.872" status="PASS" endtime="20170809 04:03:13.872"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:13.872">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:13.587" status="PASS" endtime="20170809 04:03:13.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.873">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:13.872" status="PASS" endtime="20170809 04:03:13.873"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.874">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 cb 70 24 7b 00 00 00 00 cb 9b 75 52 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0d 90 00 00 0d 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 17 3c 70 79 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 55 7b 74 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 56 af e1 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 57 ce 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 57 d5 e5 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 57 e4 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 57 ee e1 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 59 b2 9c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 59 bd 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 59 d9 58 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 5a 22 8e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 5a 2c 6e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 17 5b 6e c9 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 5b 79 43 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 5b bf cd 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 5b c9 ff 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 17 5b d3 5b 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 17 5d 4e ad 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 5d 56 fd 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 27 b6 30 74 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 27 b6 39 37 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 17 3c 70 79 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 55 7b 74 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 56 af e1 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 57 ce 5b 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 57 d5 e5 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 57 e4 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 57 ee e1 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 59 b2 9c 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 59 bd 25 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 59 d9 58 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 5a 22 8e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 5a 2c 6e"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:13.874">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:13.874">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 cb 70 24...</msg>
<status starttime="20170809 04:03:13.873" status="PASS" endtime="20170809 04:03:13.874"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:13.874">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 cb 70 24 7b 00 00 ...</msg>
<status starttime="20170809 04:03:13.586" status="PASS" endtime="20170809 04:03:13.874"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.875">Length is 2</msg>
<msg level="INFO" timestamp="20170809 04:03:13.875">${length} = 2</msg>
<status starttime="20170809 04:03:13.875" status="PASS" endtime="20170809 04:03:13.875"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 04:03:13.875" status="PASS" endtime="20170809 04:03:13.876"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.876">${index} = 1</msg>
<status starttime="20170809 04:03:13.876" status="PASS" endtime="20170809 04:03:13.876"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.878" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:13.877" status="PASS" endtime="20170809 04:03:13.878"></status>
</kw>
<status starttime="20170809 04:03:13.876" status="PASS" endtime="20170809 04:03:13.878"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.879" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:13.878" status="PASS" endtime="20170809 04:03:13.879"></status>
</kw>
<status starttime="20170809 04:03:13.878" status="PASS" endtime="20170809 04:03:13.879"></status>
</kw>
<status starttime="20170809 04:03:13.585" status="PASS" endtime="20170809 04:03:13.879"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 04:03:13.879" status="PASS" endtime="20170809 04:03:13.880"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:13.883">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:13.883" status="PASS" endtime="20170809 04:03:13.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.884">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:13.884" status="PASS" endtime="20170809 04:03:13.884"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.885">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:13.885" status="PASS" endtime="20170809 04:03:13.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:13.886">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:13.885" status="PASS" endtime="20170809 04:03:13.886"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.171">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:13.886" status="PASS" endtime="20170809 04:03:14.171"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:14.171">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:14.171">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:13.886" status="PASS" endtime="20170809 04:03:14.171"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.172">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:14.172" status="PASS" endtime="20170809 04:03:14.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:14.172" status="PASS" endtime="20170809 04:03:14.173"></status>
</kw>
<status starttime="20170809 04:03:13.883" status="PASS" endtime="20170809 04:03:14.173"></status>
</kw>
<status starttime="20170809 04:03:13.882" status="PASS" endtime="20170809 04:03:14.173"></status>
</kw>
<status starttime="20170809 04:03:13.881" status="PASS" endtime="20170809 04:03:14.173"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.174">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170809 04:03:14.173" status="PASS" endtime="20170809 04:03:14.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:14.174" status="PASS" endtime="20170809 04:03:14.174"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.263">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:14.263">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:14.175" status="PASS" endtime="20170809 04:03:14.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:14.264" status="PASS" endtime="20170809 04:03:14.264"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:14.264">Delete All Sessions</msg>
<status starttime="20170809 04:03:14.264" status="PASS" endtime="20170809 04:03:14.265"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:14.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:13.881" status="PASS" endtime="20170809 04:03:14.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:14.265" status="PASS" endtime="20170809 04:03:14.265"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.266">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:14.266">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:14.266">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:03:14.266" status="PASS" endtime="20170809 04:03:14.266"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:14.266">${esel_data} = []</msg>
<status starttime="20170809 04:03:13.880" status="PASS" endtime="20170809 04:03:14.266"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.267">Length is 0</msg>
<msg level="INFO" timestamp="20170809 04:03:14.267">${length} = 0</msg>
<status starttime="20170809 04:03:14.267" status="PASS" endtime="20170809 04:03:14.267"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.268">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 04:03:14.267" status="PASS" endtime="20170809 04:03:14.268"></status>
</kw>
<status starttime="20170809 04:03:13.879" status="PASS" endtime="20170809 04:03:14.268"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 04:03:14.268" status="PASS" endtime="20170809 04:03:14.269"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.272">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:14.272" status="PASS" endtime="20170809 04:03:14.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.273">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:14.273" status="PASS" endtime="20170809 04:03:14.273"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.274">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:14.273" status="PASS" endtime="20170809 04:03:14.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.274">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:14.274" status="PASS" endtime="20170809 04:03:14.274"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.473">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:14.275" status="PASS" endtime="20170809 04:03:14.474"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:14.474">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:14.474">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:14.275" status="PASS" endtime="20170809 04:03:14.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.474">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:14.474" status="PASS" endtime="20170809 04:03:14.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.475">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:14.475" status="PASS" endtime="20170809 04:03:14.475"></status>
</kw>
<status starttime="20170809 04:03:14.271" status="PASS" endtime="20170809 04:03:14.475"></status>
</kw>
<status starttime="20170809 04:03:14.271" status="PASS" endtime="20170809 04:03:14.475"></status>
</kw>
<status starttime="20170809 04:03:14.270" status="PASS" endtime="20170809 04:03:14.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.476">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status starttime="20170809 04:03:14.476" status="PASS" endtime="20170809 04:03:14.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:14.476" status="PASS" endtime="20170809 04:03:14.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.578">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:14.578">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:14.477" status="PASS" endtime="20170809 04:03:14.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:14.579" status="PASS" endtime="20170809 04:03:14.579"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:14.579">Delete All Sessions</msg>
<status starttime="20170809 04:03:14.579" status="PASS" endtime="20170809 04:03:14.579"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:14.580">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:14.269" status="PASS" endtime="20170809 04:03:14.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:14.580" status="PASS" endtime="20170809 04:03:14.580"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.581">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 81 cc c8 00 00 00 00 a0 ac 98 71 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 91 ca eb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 ab 6f fd 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 ac 96 ed 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 ad ae 5c 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 ad b6 28 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 ad c4 d0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 ad cf c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 af 92 3b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 af 9c e8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 af b9 94 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 b0 02 fd 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 b0 0c ee 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 02 b1 55 dd 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 b1 60 10 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 b1 a7 3f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 b1 b1 be 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 02 b1 bb 38 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 02 b3 39 79 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 b3 42 4f 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f 77 77 8e 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f 77 80 37 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 02 91 ca eb 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 ab 6f fd 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 ac 96 ed 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 ad ae 5c 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 ad b6 28 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 ad c4 d0 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 ad cf c5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 af 92 3b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 af 9c e8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 af b9 94 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 b0 02 fd 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 b0 0c ee"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:14.581">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:14.581">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 81 cc...</msg>
<status starttime="20170809 04:03:14.580" status="PASS" endtime="20170809 04:03:14.581"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:14.582">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 81 cc c8 00 00 ...</msg>
<status starttime="20170809 04:03:14.269" status="PASS" endtime="20170809 04:03:14.582"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.582">Length is 2</msg>
<msg level="INFO" timestamp="20170809 04:03:14.582">${length} = 2</msg>
<status starttime="20170809 04:03:14.582" status="PASS" endtime="20170809 04:03:14.582"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 04:03:14.583" status="PASS" endtime="20170809 04:03:14.583"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.583">${index} = 1</msg>
<status starttime="20170809 04:03:14.583" status="PASS" endtime="20170809 04:03:14.584"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.585" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:14.584" status="PASS" endtime="20170809 04:03:14.585"></status>
</kw>
<status starttime="20170809 04:03:14.584" status="PASS" endtime="20170809 04:03:14.585"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.586" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:14.586" status="PASS" endtime="20170809 04:03:14.586"></status>
</kw>
<status starttime="20170809 04:03:14.585" status="PASS" endtime="20170809 04:03:14.586"></status>
</kw>
<status starttime="20170809 04:03:14.268" status="PASS" endtime="20170809 04:03:14.586"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/7">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 04:03:14.587" status="PASS" endtime="20170809 04:03:14.587"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.591">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:14.590" status="PASS" endtime="20170809 04:03:14.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.591">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:14.591" status="PASS" endtime="20170809 04:03:14.592"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.592">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:14.592" status="PASS" endtime="20170809 04:03:14.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.593">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:14.592" status="PASS" endtime="20170809 04:03:14.593"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.790">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:14.593" status="PASS" endtime="20170809 04:03:14.790"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:14.790">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:14.790">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:14.593" status="PASS" endtime="20170809 04:03:14.791"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.791">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:14.791" status="PASS" endtime="20170809 04:03:14.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:14.791" status="PASS" endtime="20170809 04:03:14.792"></status>
</kw>
<status starttime="20170809 04:03:14.590" status="PASS" endtime="20170809 04:03:14.792"></status>
</kw>
<status starttime="20170809 04:03:14.589" status="PASS" endtime="20170809 04:03:14.792"></status>
</kw>
<status starttime="20170809 04:03:14.589" status="PASS" endtime="20170809 04:03:14.792"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.793">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status starttime="20170809 04:03:14.792" status="PASS" endtime="20170809 04:03:14.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:14.793" status="PASS" endtime="20170809 04:03:14.793"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.887">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:14.887">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:14.794" status="PASS" endtime="20170809 04:03:14.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:14.887" status="PASS" endtime="20170809 04:03:14.887"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:14.888">Delete All Sessions</msg>
<status starttime="20170809 04:03:14.888" status="PASS" endtime="20170809 04:03:14.888"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:14.888">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:14.588" status="PASS" endtime="20170809 04:03:14.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:14.888" status="PASS" endtime="20170809 04:03:14.889"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.889">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:14.889">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:14.889">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:03:14.889" status="PASS" endtime="20170809 04:03:14.889"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:14.890">${esel_data} = []</msg>
<status starttime="20170809 04:03:14.587" status="PASS" endtime="20170809 04:03:14.890"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.890">Length is 0</msg>
<msg level="INFO" timestamp="20170809 04:03:14.890">${length} = 0</msg>
<status starttime="20170809 04:03:14.890" status="PASS" endtime="20170809 04:03:14.890"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.891">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 04:03:14.891" status="PASS" endtime="20170809 04:03:14.891"></status>
</kw>
<status starttime="20170809 04:03:14.586" status="PASS" endtime="20170809 04:03:14.891"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/8">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 04:03:14.892" status="PASS" endtime="20170809 04:03:14.892"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:14.896">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:14.895" status="PASS" endtime="20170809 04:03:14.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.896">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:14.896" status="PASS" endtime="20170809 04:03:14.897"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.897">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:14.897" status="PASS" endtime="20170809 04:03:14.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:14.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:14.897" status="PASS" endtime="20170809 04:03:14.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.089">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:14.899" status="PASS" endtime="20170809 04:03:15.089"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:15.089">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:15.089">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:14.898" status="PASS" endtime="20170809 04:03:15.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.090">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:15.089" status="PASS" endtime="20170809 04:03:15.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:15.090" status="PASS" endtime="20170809 04:03:15.090"></status>
</kw>
<status starttime="20170809 04:03:14.895" status="PASS" endtime="20170809 04:03:15.090"></status>
</kw>
<status starttime="20170809 04:03:14.894" status="PASS" endtime="20170809 04:03:15.091"></status>
</kw>
<status starttime="20170809 04:03:14.894" status="PASS" endtime="20170809 04:03:15.091"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.091">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status starttime="20170809 04:03:15.091" status="PASS" endtime="20170809 04:03:15.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:15.092" status="PASS" endtime="20170809 04:03:15.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.217">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:15.217">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:15.092" status="PASS" endtime="20170809 04:03:15.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:15.217" status="PASS" endtime="20170809 04:03:15.218"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:15.218">Delete All Sessions</msg>
<status starttime="20170809 04:03:15.218" status="PASS" endtime="20170809 04:03:15.218"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:15.218">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:14.893" status="PASS" endtime="20170809 04:03:15.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.219">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:15.219" status="PASS" endtime="20170809 04:03:15.219"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.220">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 f7 5d e4 00 00 00 00 a1 22 15 fc 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 41 96 fc 88 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 03 80 28 a6 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 99 e1 f0 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 9b 14 f5 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9c 35 c9 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 9c 3d 9b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 9c 4b fc 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 9c 56 8f 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 9e 1a 32 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 9e 24 6a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9e 41 16 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 9e 8f 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 9e 99 9a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 03 9f d6 b1 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 9f e1 3d 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 a0 28 71 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 a0 32 e5 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 03 a0 3c 6c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 03 a1 ba 6b 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 a1 c2 e9 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 10 5d 16 c4 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 10 5d 1f 6d 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 03 80 28 a6 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 99 e1 f0 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 9b 14 f5 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9c 35 c9 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 9c 3d 9b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 9c 4b fc 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 9c 56 8f 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 9e 1a 32 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 9e 24 6a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 9e 41 16 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 9e 8f 74 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 9e 99 9a"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:15.220">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:15.220">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 f7 5d...</msg>
<status starttime="20170809 04:03:15.219" status="PASS" endtime="20170809 04:03:15.220"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:15.221">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 f7 5d e4 00 00 ...</msg>
<status starttime="20170809 04:03:14.892" status="PASS" endtime="20170809 04:03:15.221"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.221">Length is 2</msg>
<msg level="INFO" timestamp="20170809 04:03:15.221">${length} = 2</msg>
<status starttime="20170809 04:03:15.221" status="PASS" endtime="20170809 04:03:15.221"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170809 04:03:15.221" status="PASS" endtime="20170809 04:03:15.222"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.222">${index} = 1</msg>
<status starttime="20170809 04:03:15.222" status="PASS" endtime="20170809 04:03:15.222"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.224" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:15.223" status="PASS" endtime="20170809 04:03:15.224"></status>
</kw>
<status starttime="20170809 04:03:15.222" status="PASS" endtime="20170809 04:03:15.224"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.225" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_esel&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:15.225" status="PASS" endtime="20170809 04:03:15.225"></status>
</kw>
<status starttime="20170809 04:03:15.224" status="PASS" endtime="20170809 04:03:15.225"></status>
</kw>
<status starttime="20170809 04:03:14.891" status="PASS" endtime="20170809 04:03:15.225"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/9">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170809 04:03:15.225" status="PASS" endtime="20170809 04:03:15.226"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.229">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170809 04:03:15.229" status="PASS" endtime="20170809 04:03:15.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.230">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170809 04:03:15.230" status="PASS" endtime="20170809 04:03:15.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.231">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170809 04:03:15.230" status="PASS" endtime="20170809 04:03:15.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.231">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170809 04:03:15.231" status="PASS" endtime="20170809 04:03:15.231"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.522">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170809 04:03:15.232" status="PASS" endtime="20170809 04:03:15.522"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:15.522">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:15.522">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:15.232" status="PASS" endtime="20170809 04:03:15.523"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.523">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:15.523" status="PASS" endtime="20170809 04:03:15.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:15.523" status="PASS" endtime="20170809 04:03:15.524"></status>
</kw>
<status starttime="20170809 04:03:15.228" status="PASS" endtime="20170809 04:03:15.524"></status>
</kw>
<status starttime="20170809 04:03:15.228" status="PASS" endtime="20170809 04:03:15.524"></status>
</kw>
<status starttime="20170809 04:03:15.227" status="PASS" endtime="20170809 04:03:15.524"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.525">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status starttime="20170809 04:03:15.524" status="PASS" endtime="20170809 04:03:15.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170809 04:03:15.525" status="PASS" endtime="20170809 04:03:15.525"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.622">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 04:03:15.622">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:15.526" status="PASS" endtime="20170809 04:03:15.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170809 04:03:15.622" status="PASS" endtime="20170809 04:03:15.623"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 04:03:15.623">Delete All Sessions</msg>
<status starttime="20170809 04:03:15.623" status="PASS" endtime="20170809 04:03:15.623"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:15.623">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170809 04:03:15.227" status="PASS" endtime="20170809 04:03:15.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170809 04:03:15.623" status="PASS" endtime="20170809 04:03:15.624"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.624">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 04:03:15.624">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 04:03:15.625">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170809 04:03:15.624" status="PASS" endtime="20170809 04:03:15.625"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:15.625">${esel_data} = []</msg>
<status starttime="20170809 04:03:15.226" status="PASS" endtime="20170809 04:03:15.625"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.625">Length is 0</msg>
<msg level="INFO" timestamp="20170809 04:03:15.625">${length} = 0</msg>
<status starttime="20170809 04:03:15.625" status="PASS" endtime="20170809 04:03:15.625"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.626">Continuing for loop from the next iteration.</msg>
<status starttime="20170809 04:03:15.626" status="PASS" endtime="20170809 04:03:15.626"></status>
</kw>
<status starttime="20170809 04:03:15.225" status="PASS" endtime="20170809 04:03:15.626"></status>
</kw>
<status starttime="20170809 04:03:12.526" status="PASS" endtime="20170809 04:03:15.626"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.630">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 04:03:15.636">${out} = </msg>
<status starttime="20170809 04:03:15.627" status="PASS" endtime="20170809 04:03:15.636"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 04:03:15.640">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170809 04:03:15.639" status="FAIL" endtime="20170809 04:03:15.640"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:15.640">${status} = False</msg>
<status starttime="20170809 04:03:15.638" status="PASS" endtime="20170809 04:03:15.640"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:15.641">Returning from the enclosing user keyword.</msg>
<status starttime="20170809 04:03:15.640" status="PASS" endtime="20170809 04:03:15.641"></status>
</kw>
<status starttime="20170809 04:03:12.011" status="PASS" endtime="20170809 04:03:15.641"></status>
</kw>
<status starttime="20170809 04:03:11.971" status="PASS" endtime="20170809 04:03:15.642"></status>
</kw>
<status starttime="20170809 04:03:11.969" status="PASS" endtime="20170809 04:03:15.642"></status>
</kw>
<status starttime="20170809 04:03:11.968" status="PASS" endtime="20170809 04:03:15.642"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 04:03:15.644" status="PASS" endtime="20170809 04:03:15.645"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:15.645">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:15.645">${ret_values} = None</msg>
<status starttime="20170809 04:03:15.644" status="PASS" endtime="20170809 04:03:15.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 04:03:15.645" status="PASS" endtime="20170809 04:03:15.646"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.733">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:15.733">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170809 04:03:15.791">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 04:03:15.809">${core_files} = /tmp/core_phosphor-hwmon-.2467</msg>
<msg level="INFO" timestamp="20170809 04:03:15.809">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 04:03:15.809">${rc} = 0</msg>
<status starttime="20170809 04:03:15.683" status="PASS" endtime="20170809 04:03:15.809"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:15.810">@{core_list} = [ /tmp/core_phosphor-hwmon-.2467 ]</msg>
<status starttime="20170809 04:03:15.810" status="PASS" endtime="20170809 04:03:15.810"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170809 04:03:15.830" status="PASS" endtime="20170809 04:03:15.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170809 04:03:15.848" status="PASS" endtime="20170809 04:03:16.515"></status>
</kw>
<status starttime="20170809 04:03:15.847" status="PASS" endtime="20170809 04:03:16.515"></status>
</kw>
<status starttime="20170809 04:03:15.844" status="PASS" endtime="20170809 04:03:16.515"></status>
</kw>
<status starttime="20170809 04:03:15.830" status="PASS" endtime="20170809 04:03:16.515"></status>
</kw>
<status starttime="20170809 04:03:15.810" status="PASS" endtime="20170809 04:03:16.515"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2467">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170809 04:03:16.516" status="PASS" endtime="20170809 04:03:16.864"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:16.923">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:16.923">Executing command 'rm /tmp/core_phosphor-hwmon-.2467'.</msg>
<msg level="INFO" timestamp="20170809 04:03:16.980">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:16.865" status="PASS" endtime="20170809 04:03:16.997"></status>
</kw>
<status starttime="20170809 04:03:16.515" status="PASS" endtime="20170809 04:03:16.998"></status>
</kw>
<status starttime="20170809 04:03:16.515" status="PASS" endtime="20170809 04:03:16.998"></status>
</kw>
<status starttime="20170809 04:03:15.683" status="PASS" endtime="20170809 04:03:16.998"></status>
</kw>
<status starttime="20170809 04:03:15.646" status="PASS" endtime="20170809 04:03:16.998"></status>
</kw>
<status starttime="20170809 04:03:15.643" status="PASS" endtime="20170809 04:03:16.998"></status>
</kw>
<status starttime="20170809 04:03:15.642" status="PASS" endtime="20170809 04:03:16.998"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170809 04:03:17.000" status="PASS" endtime="20170809 04:03:17.000"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:17.000">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:17.000">${ret_values} = None</msg>
<status starttime="20170809 04:03:16.999" status="PASS" endtime="20170809 04:03:17.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170809 04:03:17.001" status="PASS" endtime="20170809 04:03:17.001"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.045">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170809 04:03:17.045" status="PASS" endtime="20170809 04:03:17.045"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.046">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_proc_fd_active_list', 'ls -Al /p...</msg>
<status starttime="20170809 04:03:17.046" status="PASS" endtime="20170809 04:03:17.046"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.047">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_meminfo.txt</msg>
<status starttime="20170809 04:03:17.047" status="PASS" endtime="20170809 04:03:17.047"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 04:03:17.048" status="PASS" endtime="20170809 04:03:17.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.049">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20170809 04:03:17.049" status="PASS" endtime="20170809 04:03:17.049"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:17.166">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:17.167">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170809 04:03:17.214">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:17.104" status="PASS" endtime="20170809 04:03:17.214"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:17.214">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:17.214">${ret_values} = (u'MemTotal:         432260 kB\nMemFree:          251556 kB\nMemAvailable:     318364 kB\nBuffers:           15500 kB\nCached:            67604 kB\nSwapCached:            0 kB\nActive:           12110...</msg>
<status starttime="20170809 04:03:17.050" status="PASS" endtime="20170809 04:03:17.214"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.215">${stdout} = MemTotal:         432260 kB
MemFree:          251556 kB
MemAvailable:     318364 kB
Buffers:           15500 kB
Cached:            67604 kB
SwapCached:            0 kB
Active:           121104 kB
Inac...</msg>
<status starttime="20170809 04:03:17.215" status="PASS" endtime="20170809 04:03:17.216"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.216">${stderr} = </msg>
<status starttime="20170809 04:03:17.216" status="PASS" endtime="20170809 04:03:17.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:17.227" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_meminfo.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:17.226" status="PASS" endtime="20170809 04:03:17.227"></status>
</kw>
<status starttime="20170809 04:03:17.225" status="PASS" endtime="20170809 04:03:17.227"></status>
</kw>
<status starttime="20170809 04:03:17.217" status="PASS" endtime="20170809 04:03:17.227"></status>
</kw>
<status starttime="20170809 04:03:17.048" status="PASS" endtime="20170809 04:03:17.227"></status>
</kw>
<status starttime="20170809 04:03:17.047" status="PASS" endtime="20170809 04:03:17.227"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.228">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_procinfo.txt</msg>
<status starttime="20170809 04:03:17.228" status="PASS" endtime="20170809 04:03:17.228"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 04:03:17.229" status="PASS" endtime="20170809 04:03:17.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.230">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20170809 04:03:17.230" status="PASS" endtime="20170809 04:03:17.230"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:17.345">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:17.346">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170809 04:03:17.402">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:17.284" status="PASS" endtime="20170809 04:03:17.402"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:17.403">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:17.403">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20170809 04:03:17.230" status="PASS" endtime="20170809 04:03:17.403"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.403">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20170809 04:03:17.403" status="PASS" endtime="20170809 04:03:17.403"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.404">${stderr} = </msg>
<status starttime="20170809 04:03:17.404" status="PASS" endtime="20170809 04:03:17.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:17.411" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_procinfo.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:17.410" status="PASS" endtime="20170809 04:03:17.411"></status>
</kw>
<status starttime="20170809 04:03:17.409" status="PASS" endtime="20170809 04:03:17.411"></status>
</kw>
<status starttime="20170809 04:03:17.404" status="PASS" endtime="20170809 04:03:17.411"></status>
</kw>
<status starttime="20170809 04:03:17.228" status="PASS" endtime="20170809 04:03:17.411"></status>
</kw>
<status starttime="20170809 04:03:17.227" status="PASS" endtime="20170809 04:03:17.411"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.412">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_journalctl.txt</msg>
<status starttime="20170809 04:03:17.412" status="PASS" endtime="20170809 04:03:17.412"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 04:03:17.413" status="PASS" endtime="20170809 04:03:17.413"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:17.414">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20170809 04:03:17.414" status="PASS" endtime="20170809 04:03:17.414"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:17.527">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:17.528">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170809 04:03:20.131">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:17.467" status="PASS" endtime="20170809 04:03:20.132"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:20.132">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:20.136">${ret_values} = (u'-- Logs begin at Wed 2017-08-09 03:47:01 UTC, end at Wed 2017-08-09 04:03:21 UTC. --\nAug 09 03:47:01 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 09 03:47:01 witherspoon kernel: Linu...</msg>
<status starttime="20170809 04:03:17.414" status="PASS" endtime="20170809 04:03:20.136"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:20.138">${stdout} = -- Logs begin at Wed 2017-08-09 03:47:01 UTC, end at Wed 2017-08-09 04:03:21 UTC. --
Aug 09 03:47:01 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 09 03:47:01 witherspoon kernel: Linux ver...</msg>
<status starttime="20170809 04:03:20.136" status="PASS" endtime="20170809 04:03:20.138"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:20.138">${stderr} = </msg>
<status starttime="20170809 04:03:20.138" status="PASS" endtime="20170809 04:03:20.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:20.148" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_journalctl.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:20.146" status="PASS" endtime="20170809 04:03:20.148"></status>
</kw>
<status starttime="20170809 04:03:20.144" status="PASS" endtime="20170809 04:03:20.148"></status>
</kw>
<status starttime="20170809 04:03:20.138" status="PASS" endtime="20170809 04:03:20.148"></status>
</kw>
<status starttime="20170809 04:03:17.412" status="PASS" endtime="20170809 04:03:20.148"></status>
</kw>
<status starttime="20170809 04:03:17.411" status="PASS" endtime="20170809 04:03:20.148"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:20.149">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_proc_list.txt</msg>
<status starttime="20170809 04:03:20.148" status="PASS" endtime="20170809 04:03:20.149"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 04:03:20.150" status="PASS" endtime="20170809 04:03:20.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:20.151">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20170809 04:03:20.150" status="PASS" endtime="20170809 04:03:20.151"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:20.264">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:20.265">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170809 04:03:20.583">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:20.200" status="PASS" endtime="20170809 04:03:20.584"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:20.584">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:20.584">${ret_values} = (u'Mem: 180820K used, 251440K free, 14712K shrd, 15500K buff, 67608K cached\nCPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.96 1.20 0.91 1/165 2859\n  PID  PPID ...</msg>
<status starttime="20170809 04:03:20.151" status="PASS" endtime="20170809 04:03:20.584"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:20.585">${stdout} = Mem: 180820K used, 251440K free, 14712K shrd, 15500K buff, 67608K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.96 1.20 0.91 1/165 2859
  PID  PPID USER  ...</msg>
<status starttime="20170809 04:03:20.584" status="PASS" endtime="20170809 04:03:20.585"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:20.585">${stderr} = </msg>
<status starttime="20170809 04:03:20.585" status="PASS" endtime="20170809 04:03:20.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:20.593" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_proc_list.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:20.592" status="PASS" endtime="20170809 04:03:20.593"></status>
</kw>
<status starttime="20170809 04:03:20.591" status="PASS" endtime="20170809 04:03:20.593"></status>
</kw>
<status starttime="20170809 04:03:20.586" status="PASS" endtime="20170809 04:03:20.593"></status>
</kw>
<status starttime="20170809 04:03:20.149" status="PASS" endtime="20170809 04:03:20.593"></status>
</kw>
<status starttime="20170809 04:03:20.148" status="PASS" endtime="20170809 04:03:20.593"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:20.594">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_proc_fd_active_list.txt</msg>
<status starttime="20170809 04:03:20.593" status="PASS" endtime="20170809 04:03:20.594"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 04:03:20.595" status="PASS" endtime="20170809 04:03:20.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:20.596">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20170809 04:03:20.596" status="PASS" endtime="20170809 04:03:20.596"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:20.719">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:20.720">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170809 04:03:21.351">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:20.661" status="PASS" endtime="20170809 04:03:21.351"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:21.351">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:21.352">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  9 04:03 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  9 04:03 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20170809 04:03:20.597" status="PASS" endtime="20170809 04:03:21.353"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.353">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  9 04:03 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  9 04:03 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20170809 04:03:21.353" status="PASS" endtime="20170809 04:03:21.354"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.354">${stderr} = ls: /proc/2860/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20170809 04:03:21.354" status="PASS" endtime="20170809 04:03:21.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:21.362" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:21.361" status="PASS" endtime="20170809 04:03:21.362"></status>
</kw>
<status starttime="20170809 04:03:21.360" status="PASS" endtime="20170809 04:03:21.362"></status>
</kw>
<status starttime="20170809 04:03:21.354" status="PASS" endtime="20170809 04:03:21.362"></status>
</kw>
<status starttime="20170809 04:03:20.594" status="PASS" endtime="20170809 04:03:21.362"></status>
</kw>
<status starttime="20170809 04:03:20.593" status="PASS" endtime="20170809 04:03:21.362"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.363">${logpath} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_dmesg.txt</msg>
<status starttime="20170809 04:03:21.362" status="PASS" endtime="20170809 04:03:21.363"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170809 04:03:21.364" status="PASS" endtime="20170809 04:03:21.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.365">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20170809 04:03:21.364" status="PASS" endtime="20170809 04:03:21.365"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:21.477">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.3.86.161
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170809 04:03:21.477">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170809 04:03:21.546">Command exited with return code 0.</msg>
<status starttime="20170809 04:03:21.413" status="PASS" endtime="20170809 04:03:21.547"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:21.547">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 04:03:21.547">${ret_values} = (u'[    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB\n[    2.800000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB\n[    2.8...</msg>
<status starttime="20170809 04:03:21.365" status="PASS" endtime="20170809 04:03:21.547"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.548">${stdout} = [    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB
[    2.800000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB
[    2.810000...</msg>
<status starttime="20170809 04:03:21.547" status="PASS" endtime="20170809 04:03:21.548"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.548">${stderr} = </msg>
<status starttime="20170809 04:03:21.548" status="PASS" endtime="20170809 04:03:21.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:21.555" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_dmesg.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/20170809040306984681_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:21.555" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:21.554" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:21.549" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:21.363" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:21.362" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:17.047" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:17.046" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:17.045" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:17.045" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:17.044" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:17.001" status="PASS" endtime="20170809 04:03:21.556"></status>
</kw>
<status starttime="20170809 04:03:16.998" status="PASS" endtime="20170809 04:03:21.557"></status>
</kw>
<status starttime="20170809 04:03:16.998" status="PASS" endtime="20170809 04:03:21.557"></status>
</kw>
<status starttime="20170809 04:03:07.262" status="PASS" endtime="20170809 04:03:21.557"></status>
</kw>
<status starttime="20170809 04:03:07.260" status="PASS" endtime="20170809 04:03:21.557"></status>
</kw>
<status starttime="20170809 04:03:07.260" status="PASS" endtime="20170809 04:03:21.557"></status>
</kw>
<status starttime="20170809 04:03:07.260" status="PASS" endtime="20170809 04:03:21.557"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170809 04:03:21.568" status="PASS" endtime="20170809 04:03:21.568"></status>
</kw>
<status starttime="20170809 04:03:21.557" status="PASS" endtime="20170809 04:03:21.568"></status>
</kw>
<status starttime="20170809 04:03:07.259" status="PASS" endtime="20170809 04:03:21.568"></status>
</kw>
<status starttime="20170809 04:03:03.910" status="PASS" endtime="20170809 04:03:21.568"></status>
</kw>
<status starttime="20170809 04:03:03.910" status="PASS" endtime="20170809 04:03:21.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170809 04:03:21.569" status="PASS" endtime="20170809 04:03:21.569"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.581">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170809 04:03:21.570" status="PASS" endtime="20170809 04:03:21.581"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.582">${FFDC_DIR_PATH} = /tmp/fspcibld/26435/obmc-robot/logs/20170809040306984681_TestsTestBasicPoweron/20170809040306984681_PowerOnTest/</msg>
<status starttime="20170809 04:03:21.582" status="PASS" endtime="20170809 04:03:21.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170809 04:03:21.583" status="PASS" endtime="20170809 04:03:21.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170809 04:03:21.583" status="PASS" endtime="20170809 04:03:21.584"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:21.586" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs"&gt;/tmp/fspcibld/26435/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170809 04:03:21.584" status="PASS" endtime="20170809 04:03:21.586"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:21.587" html="yes">File '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170809 04:03:21.587" status="PASS" endtime="20170809 04:03:21.588"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:21.588">${exist} = True</msg>
<status starttime="20170809 04:03:21.587" status="PASS" endtime="20170809 04:03:21.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170809 04:03:21.588" status="PASS" endtime="20170809 04:03:21.589"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170809 04:03:21.589" status="PASS" endtime="20170809 04:03:21.589"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.590">${cur_time} = 2017-08-09 04:03:21:589930</msg>
<status starttime="20170809 04:03:21.590" status="PASS" endtime="20170809 04:03:21.590"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.591">${cur_time} = 20170809040321589930</msg>
<status starttime="20170809 04:03:21.590" status="PASS" endtime="20170809 04:03:21.591"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:21.591">${cur_time} = 20170809040321589930</msg>
<status starttime="20170809 04:03:21.589" status="PASS" endtime="20170809 04:03:21.591"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:21.592" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/26435/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:21.591" status="PASS" endtime="20170809 04:03:21.592"></status>
</kw>
<status starttime="20170809 04:03:21.569" status="PASS" endtime="20170809 04:03:21.592"></status>
</kw>
<status starttime="20170809 04:03:03.574" status="PASS" endtime="20170809 04:03:21.592"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.594">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 04:03:21.593" status="PASS" endtime="20170809 04:03:21.594"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.595">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 04:03:21.595" status="PASS" endtime="20170809 04:03:21.595"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:21.595">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170809 04:03:21.593" status="PASS" endtime="20170809 04:03:21.595"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.596">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170809 04:03:21.596" status="PASS" endtime="20170809 04:03:21.596"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 04:03:21.596" status="PASS" endtime="20170809 04:03:21.597"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.601">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 04:03:21.604">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 04:03:21.604">${output} = /tmp/fspcibld/26435/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170809 04:03:21.597" status="PASS" endtime="20170809 04:03:21.604"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 04:03:21.606" status="PASS" endtime="20170809 04:03:21.608"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170809 04:03:21.609" status="PASS" endtime="20170809 04:03:21.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.611">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 04:03:21.610" status="PASS" endtime="20170809 04:03:21.611"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:21.611">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170809 04:03:21.595" status="PASS" endtime="20170809 04:03:21.611"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.612">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170809 04:03:21.612" status="PASS" endtime="20170809 04:03:21.612"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 04:03:21.612" status="PASS" endtime="20170809 04:03:21.613"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.616">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 04:03:21.630">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 04:03:21.630">${os_con_pid} = </msg>
<status starttime="20170809 04:03:21.613" status="PASS" endtime="20170809 04:03:21.630"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170809 04:03:21.633" status="PASS" endtime="20170809 04:03:21.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.636">${cmd_buf} = kill -9 </msg>
<status starttime="20170809 04:03:21.635" status="PASS" endtime="20170809 04:03:21.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170809 04:03:21.636" status="PASS" endtime="20170809 04:03:21.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.638">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 04:03:21.638">${output} = None</msg>
<status starttime="20170809 04:03:21.638" status="PASS" endtime="20170809 04:03:21.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170809 04:03:21.639" status="PASS" endtime="20170809 04:03:21.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:21.646" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/26435/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/26435/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170809 04:03:21.643" status="PASS" endtime="20170809 04:03:21.646"></status>
</kw>
<status starttime="20170809 04:03:21.642" status="PASS" endtime="20170809 04:03:21.646"></status>
</kw>
<status starttime="20170809 04:03:21.640" status="PASS" endtime="20170809 04:03:21.646"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.647">${output} = </msg>
<status starttime="20170809 04:03:21.646" status="PASS" endtime="20170809 04:03:21.647"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 04:03:21.648">${loc_quiet} = 1</msg>
<status starttime="20170809 04:03:21.647" status="PASS" endtime="20170809 04:03:21.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170809 04:03:21.649" status="PASS" endtime="20170809 04:03:21.690"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:21.692">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 04:03:21.692">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status starttime="20170809 04:03:21.648" status="PASS" endtime="20170809 04:03:21.692"></status>
</kw>
<msg level="INFO" timestamp="20170809 04:03:21.693">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status starttime="20170809 04:03:21.592" status="PASS" endtime="20170809 04:03:21.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 04:03:21.695">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85116|secure|Booting in non-secure mode.
  3.85117|secure|SecureROM invalid - skipping functionality
  6.31573|ISTEP  6. 5 - host_init_fsi
  6.39608|ISTEP  6. 6 - host_set_ipl_parms
  6.40511|ISTEP  6. 7 - host_discover_targets
  6.67947|================================================
  6.68125|Error reported by i2c (0x0700) PLID 0x9000000D
  6.68307|  Bus Arbitration Lost Error was found in the I2C status register.
  6.68307|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  6.68308|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  6.68490|  UserData1  Status Register Value : 0x080e080000050001
  6.68491|  UserData2  Master Target : 0x0300006c0190004d
  6.68491|------------------------------------------------
  6.68492|  Callout type             : Hardware Callout
  6.68492|  CPU id                   : 0
  6.68493|  Target                   : Physical:/Sys0/Node0/Proc1
  6.68494|  Deconfig State           : NO_DECONFIG
  6.68494|  GARD Error Type          : GARD_NULL
  6.68495|  Priority                 : SRCI_PRIORITY_HIGH
  6.68495|------------------------------------------------
  6.68496|  Callout type             : Procedure Callout
  6.68496|  Procedure                : EPUB_PRC_HB_CODE
  6.68497|  Priority                 : SRCI_PRIORITY_LOW
  6.68497|------------------------------------------------
  6.68498|  
  6.68498|------------------------------------------------
  6.68499|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  6.68499|================================================
164.82677|IPMI: shutdown requested
164.84179|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85023|secure|Booting in non-secure mode.
  3.85024|secure|SecureROM invalid - skipping functionality
  4.97055|ISTEP  6. 5 - host_init_fsi
  5.04919|ISTEP  6. 6 - host_set_ipl_parms
  5.05616|ISTEP  6. 7 - host_discover_targets
  5.27570|================================================
  5.27748|Error reported by i2c (0x0700) PLID 0x9000000F
  5.27929|  Bus Arbitration Lost Error was found in the I2C status register.
  5.27929|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.27930|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.28112|  UserData1  Status Register Value : 0x080e080000050001
  5.28112|  UserData2  Master Target : 0x0300006c0190004d
  5.28113|------------------------------------------------
  5.28113|  Callout type             : Hardware Callout
  5.28114|  CPU id                   : 2
  5.28115|  Target                   : Physical:/Sys0/Node0/Proc1
  5.28115|  Deconfig State           : NO_DECONFIG
  5.28116|  GARD Error Type          : GARD_NULL
  5.28116|  Priority                 : SRCI_PRIORITY_HIGH
  5.28117|------------------------------------------------
  5.28117|  Callout type             : Procedure Callout
  5.28118|  Procedure                : EPUB_PRC_HB_CODE
  5.28118|  Priority                 : SRCI_PRIORITY_LOW
  5.28119|------------------------------------------------
  5.28119|  
  5.28119|------------------------------------------------
  5.28120|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.28120|================================================
163.57167|IPMI: shutdown requested
163.58046|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85020|secure|Booting in non-secure mode.
  3.85021|secure|SecureROM invalid - skipping functionality
  4.99429|ISTEP  6. 5 - host_init_fsi
  5.06494|ISTEP  6. 6 - host_set_ipl_parms
  5.07358|ISTEP  6. 7 - host_discover_targets
  5.29322|================================================
  5.29503|Error reported by i2c (0x0700) PLID 0x90000011
  5.29684|  Bus Arbitration Lost Error was found in the I2C status register.
  5.29685|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.29686|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.29867|  UserData1  Status Register Value : 0x080e080000050001
  5.29868|  UserData2  Master Target : 0x0300006c0190004d
  5.29868|------------------------------------------------
  5.29869|  Callout type             : Hardware Callout
  5.29869|  CPU id                   : 2
  5.29870|  Target                   : Physical:/Sys0/Node0/Proc1
  5.29871|  Deconfig State           : NO_DECONFIG
  5.29871|  GARD Error Type          : GARD_NULL
  5.29872|  Priority                 : SRCI_PRIORITY_HIGH
  5.29872|------------------------------------------------
  5.29873|  Callout type             : Procedure Callout
  5.29873|  Procedure                : EPUB_PRC_HB_CODE
  5.29873|  Priority                 : SRCI_PRIORITY_LOW
  5.29874|------------------------------------------------
  5.29874|  
  5.29875|------------------------------------------------
  5.29875|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.29876|================================================
164.09498|IPMI: shutdown requested
164.15834|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85048|secure|Booting in non-secure mode.
  3.85049|secure|SecureROM invalid - skipping functionality
  4.96602|ISTEP  6. 5 - host_init_fsi
  5.04704|ISTEP  6. 6 - host_set_ipl_parms
  5.05386|ISTEP  6. 7 - host_discover_targets
  5.27000|================================================
  5.27182|Error reported by i2c (0x0700) PLID 0x90000013
  5.27365|  Bus Arbitration Lost Error was found in the I2C status register.
  5.27365|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.27366|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.27548|  UserData1  Status Register Value : 0x080e080000050001
  5.27549|  UserData2  Master Target : 0x0300006c0190004d
  5.27549|------------------------------------------------
  5.27550|  Callout type             : Hardware Callout
  5.27550|  CPU id                   : 0
  5.27551|  Target                   : Physical:/Sys0/Node0/Proc1
  5.27551|  Deconfig State           : NO_DECONFIG
  5.27552|  GARD Error Type          : GARD_NULL
  5.27552|  Priority                 : SRCI_PRIORITY_HIGH
  5.27553|------------------------------------------------
  5.27553|  Callout type             : Procedure Callout
  5.27554|  Procedure                : EPUB_PRC_HB_CODE
  5.27554|  Priority                 : SRCI_PRIORITY_LOW
  5.27555|------------------------------------------------
  5.27555|  
  5.27556|------------------------------------------------
  5.27556|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.27557|================================================
</msg>
<status starttime="20170809 04:03:21.695" status="PASS" endtime="20170809 04:03:21.696"></status>
</kw>
<status starttime="20170809 04:03:03.574" status="PASS" endtime="20170809 04:03:21.696"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170809 03:52:52.253" critical="yes" status="FAIL" endtime="20170809 04:03:21.696">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170809 03:52:52.217" status="FAIL" endtime="20170809 04:03:21.697"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170809 03:52:45.861" status="FAIL" endtime="20170809 04:03:21.701"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
