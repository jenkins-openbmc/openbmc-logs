<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170824 20:28:30.666" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170824 20:28:31.765" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170824 20:28:31.765" starttime="20170824 20:28:31.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:31.765" starttime="20170824 20:28:31.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170824 20:28:31.769" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170824 20:28:31.770" starttime="20170824 20:28:31.769"></status>
</kw>
<msg timestamp="20170824 20:28:31.770" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170824 20:28:31.770" starttime="20170824 20:28:31.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:31.771" starttime="20170824 20:28:31.771"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:31.771" starttime="20170824 20:28:31.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:31.772" starttime="20170824 20:28:31.771"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170824 20:28:31.773" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170824 20:28:31.773" starttime="20170824 20:28:31.773"></status>
</kw>
<msg timestamp="20170824 20:28:31.773" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170824 20:28:31.773" starttime="20170824 20:28:31.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:31.776" starttime="20170824 20:28:31.775"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:31.776" starttime="20170824 20:28:31.775"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:31.776" starttime="20170824 20:28:31.774"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170824 20:28:31.776" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170824 20:28:34.030" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170824 20:28:34.030" starttime="20170824 20:28:31.776"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:34.030" starttime="20170824 20:28:31.768"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:28:34.031" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170824 20:28:34.391" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170824 20:28:34.391" level="INFO">${output} = 1503606204</msg>
<msg timestamp="20170824 20:28:34.391" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:28:34.392" starttime="20170824 20:28:34.031"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170824 20:28:34.392" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170824 20:28:34.392" starttime="20170824 20:28:34.392"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170824 20:28:34.393" level="INFO">${btime} = 1503606204</msg>
<status status="PASS" endtime="20170824 20:28:34.393" starttime="20170824 20:28:34.393"></status>
</kw>
<msg timestamp="20170824 20:28:34.393" level="INFO">${cur_btime} = 1503606204</msg>
<status status="PASS" endtime="20170824 20:28:34.393" starttime="20170824 20:28:31.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170824 20:28:34.395" level="INFO">${BOOT_TIME} = 1503606204</msg>
<status status="PASS" endtime="20170824 20:28:34.395" starttime="20170824 20:28:34.395"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:34.395" starttime="20170824 20:28:34.394"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:34.395" starttime="20170824 20:28:31.767"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:34.396" starttime="20170824 20:28:34.396"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:34.397" starttime="20170824 20:28:34.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:34.397" starttime="20170824 20:28:34.397"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:34.397" starttime="20170824 20:28:31.766"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170824 20:28:34.400" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170824 20:28:34.400" starttime="20170824 20:28:34.400"></status>
</kw>
<msg timestamp="20170824 20:28:34.401" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170824 20:28:34.401" starttime="20170824 20:28:34.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:34.402" starttime="20170824 20:28:34.402"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:34.402" starttime="20170824 20:28:34.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:34.403" starttime="20170824 20:28:34.402"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170824 20:28:34.404" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170824 20:28:34.404" starttime="20170824 20:28:34.404"></status>
</kw>
<msg timestamp="20170824 20:28:34.404" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170824 20:28:34.404" starttime="20170824 20:28:34.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:34.406" starttime="20170824 20:28:34.406"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:34.406" starttime="20170824 20:28:34.405"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:34.406" starttime="20170824 20:28:34.404"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170824 20:28:34.407" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170824 20:28:36.885" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170824 20:28:36.885" starttime="20170824 20:28:34.406"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:36.885" starttime="20170824 20:28:34.398"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170824 20:28:36.886" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170824 20:28:37.034" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170824 20:28:37.035" level="INFO">${output} = </msg>
<msg timestamp="20170824 20:28:37.035" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170824 20:28:37.035" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170824 20:28:37.035" starttime="20170824 20:28:36.886"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:37.036" starttime="20170824 20:28:37.035"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:37.036" starttime="20170824 20:28:34.398"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170824 20:28:37.038" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170824 20:28:37.038" starttime="20170824 20:28:37.038"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:28:37.039" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170824 20:28:37.039" starttime="20170824 20:28:37.039"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:28:37.042" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:28:37.043" starttime="20170824 20:28:37.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:37.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:37.044" starttime="20170824 20:28:37.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:28:37.044" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:28:37.044" starttime="20170824 20:28:37.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:28:37.045" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:28:37.045" starttime="20170824 20:28:37.045"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:28:37.374" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:28:37.374" starttime="20170824 20:28:37.046"></status>
</kw>
<msg timestamp="20170824 20:28:37.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:28:37.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:37.375" starttime="20170824 20:28:37.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:28:37.375" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:37.376" starttime="20170824 20:28:37.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:37.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:37.376" starttime="20170824 20:28:37.376"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:37.376" starttime="20170824 20:28:37.041"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:37.376" starttime="20170824 20:28:37.041"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:37.377" starttime="20170824 20:28:37.040"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:28:37.377" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170824 20:28:37.377" starttime="20170824 20:28:37.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:37.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:37.378" starttime="20170824 20:28:37.378"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:37.378" starttime="20170824 20:28:37.378"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 20:28:37.380" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170824 20:28:37.380" starttime="20170824 20:28:37.380"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 20:28:37.381" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170824 20:28:37.381" starttime="20170824 20:28:37.381"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:37.381" starttime="20170824 20:28:37.380"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:37.382" starttime="20170824 20:28:37.379"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:28:39.217" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170824 20:28:39.217" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:39.218" starttime="20170824 20:28:37.382"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 20:28:39.219" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170824 20:28:39.219" starttime="20170824 20:28:39.218"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 20:28:39.220" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170824 20:28:39.220" starttime="20170824 20:28:39.220"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:39.220" starttime="20170824 20:28:39.219"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:39.220" starttime="20170824 20:28:39.218"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:28:39.221" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:28:39.221" starttime="20170824 20:28:39.221"></status>
</kw>
<msg timestamp="20170824 20:28:39.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:39.221" starttime="20170824 20:28:37.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:39.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:39.222" starttime="20170824 20:28:39.221"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170824 20:28:39.222" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 20:28:39.222" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 20:28:39.223" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170824 20:28:39.223" starttime="20170824 20:28:39.222"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:39.223" starttime="20170824 20:28:37.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:39.223" starttime="20170824 20:28:39.223"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:28:39.229" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:28:39.230" starttime="20170824 20:28:39.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:39.230" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:39.231" starttime="20170824 20:28:39.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:28:39.231" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:28:39.231" starttime="20170824 20:28:39.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:28:39.232" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:28:39.232" starttime="20170824 20:28:39.232"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:28:40.109" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:28:40.109" starttime="20170824 20:28:39.234"></status>
</kw>
<msg timestamp="20170824 20:28:40.110" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:28:40.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:40.110" starttime="20170824 20:28:39.233"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:28:40.111" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:40.111" starttime="20170824 20:28:40.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:40.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:40.111" starttime="20170824 20:28:40.111"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:40.112" starttime="20170824 20:28:39.229"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:40.112" starttime="20170824 20:28:39.228"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:40.112" starttime="20170824 20:28:39.227"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:28:40.112" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170824 20:28:40.112" starttime="20170824 20:28:40.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:40.113" starttime="20170824 20:28:40.113"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:28:40.651" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 20:28:40.651" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:40.651" starttime="20170824 20:28:40.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:40.652" starttime="20170824 20:28:40.652"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:28:40.653" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:28:40.653" starttime="20170824 20:28:40.653"></status>
</kw>
<msg timestamp="20170824 20:28:40.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:40.653" starttime="20170824 20:28:39.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:40.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:40.654" starttime="20170824 20:28:40.653"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 20:28:40.654" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 20:28:40.654" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 20:28:40.655" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170824 20:28:40.655" starttime="20170824 20:28:40.654"></status>
</kw>
<msg timestamp="20170824 20:28:40.655" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170824 20:28:40.655" starttime="20170824 20:28:39.226"></status>
</kw>
<msg timestamp="20170824 20:28:40.655" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170824 20:28:40.655" starttime="20170824 20:28:39.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:40.656" starttime="20170824 20:28:40.656"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:40.656" starttime="20170824 20:28:39.225"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:28:40.662" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:28:40.663" starttime="20170824 20:28:40.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:40.663" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:40.663" starttime="20170824 20:28:40.663"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:28:40.664" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:28:40.664" starttime="20170824 20:28:40.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:28:40.665" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:28:40.665" starttime="20170824 20:28:40.664"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:28:41.422" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:28:41.422" starttime="20170824 20:28:40.666"></status>
</kw>
<msg timestamp="20170824 20:28:41.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:28:41.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:41.422" starttime="20170824 20:28:40.665"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:28:41.423" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:41.423" starttime="20170824 20:28:41.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:41.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:41.424" starttime="20170824 20:28:41.423"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:41.424" starttime="20170824 20:28:40.661"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:41.424" starttime="20170824 20:28:40.661"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:41.424" starttime="20170824 20:28:40.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:28:41.425" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170824 20:28:41.425" starttime="20170824 20:28:41.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:41.425" starttime="20170824 20:28:41.425"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:28:41.830" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 20:28:41.830" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:41.830" starttime="20170824 20:28:41.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:41.831" starttime="20170824 20:28:41.830"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:28:41.831" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:28:41.831" starttime="20170824 20:28:41.831"></status>
</kw>
<msg timestamp="20170824 20:28:41.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:41.832" starttime="20170824 20:28:40.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:41.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:41.832" starttime="20170824 20:28:41.832"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 20:28:41.833" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 20:28:41.833" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 20:28:41.833" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170824 20:28:41.833" starttime="20170824 20:28:41.833"></status>
</kw>
<msg timestamp="20170824 20:28:41.833" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170824 20:28:41.833" starttime="20170824 20:28:40.657"></status>
</kw>
<msg timestamp="20170824 20:28:41.834" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170824 20:28:41.834" starttime="20170824 20:28:40.656"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:41.834" starttime="20170824 20:28:41.834"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:41.834" starttime="20170824 20:28:39.225"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:41.835" starttime="20170824 20:28:39.224"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:41.835" starttime="20170824 20:28:39.224"></status>
</kw>
<msg timestamp="20170824 20:28:41.835" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170824 20:28:41.835" starttime="20170824 20:28:39.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:41.835" starttime="20170824 20:28:41.835"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:41.836" starttime="20170824 20:28:37.037"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:41.836" starttime="20170824 20:28:37.037"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:41.836" starttime="20170824 20:28:37.036"></status>
</kw>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:28:41.849" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:28:41.849" starttime="20170824 20:28:41.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:41.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:41.850" starttime="20170824 20:28:41.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:28:41.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:28:41.851" starttime="20170824 20:28:41.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:28:41.851" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:28:41.851" starttime="20170824 20:28:41.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:28:42.325" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:28:42.325" starttime="20170824 20:28:41.852"></status>
</kw>
<msg timestamp="20170824 20:28:42.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:28:42.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.326" starttime="20170824 20:28:41.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:28:42.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.326" starttime="20170824 20:28:42.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:42.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.327" starttime="20170824 20:28:42.327"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.327" starttime="20170824 20:28:41.848"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.327" starttime="20170824 20:28:41.848"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.327" starttime="20170824 20:28:41.846"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:28:42.328" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170824 20:28:42.328" starttime="20170824 20:28:42.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:42.329" starttime="20170824 20:28:42.328"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:28:42.401" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170824 20:28:42.401" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.401" starttime="20170824 20:28:42.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:42.402" starttime="20170824 20:28:42.402"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:28:42.402" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:28:42.402" starttime="20170824 20:28:42.402"></status>
</kw>
<msg timestamp="20170824 20:28:42.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.403" starttime="20170824 20:28:41.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:42.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.403" starttime="20170824 20:28:42.403"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 20:28:42.404" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 20:28:42.404" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 20:28:42.404" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170824 20:28:42.404" starttime="20170824 20:28:42.404"></status>
</kw>
<msg timestamp="20170824 20:28:42.404" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170824 20:28:42.405" starttime="20170824 20:28:41.845"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.405" starttime="20170824 20:28:41.845"></status>
</kw>
<msg timestamp="20170824 20:28:42.405" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20170824 20:28:42.405" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20170824 20:28:42.405" starttime="20170824 20:28:41.836"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:42.406" starttime="20170824 20:28:42.406"></status>
</kw>
<msg timestamp="20170824 20:28:42.406" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170824 20:28:42.407" starttime="20170824 20:28:42.406"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170824 20:28:42.418" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170824 20:28:42.418" starttime="20170824 20:28:42.418"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:28:42.420" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20170824 20:28:42.420" starttime="20170824 20:28:42.420"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:28:42.423" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:28:42.423" starttime="20170824 20:28:42.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:42.424" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:42.424" starttime="20170824 20:28:42.424"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:28:42.425" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:28:42.425" starttime="20170824 20:28:42.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:28:42.425" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:28:42.425" starttime="20170824 20:28:42.425"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:28:42.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:28:42.601" starttime="20170824 20:28:42.426"></status>
</kw>
<msg timestamp="20170824 20:28:42.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:28:42.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.601" starttime="20170824 20:28:42.426"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:28:42.602" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.602" starttime="20170824 20:28:42.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:42.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.603" starttime="20170824 20:28:42.602"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.603" starttime="20170824 20:28:42.422"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.603" starttime="20170824 20:28:42.422"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.603" starttime="20170824 20:28:42.421"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:28:42.604" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170824 20:28:42.604" starttime="20170824 20:28:42.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:42.604" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:42.604" starttime="20170824 20:28:42.604"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:42.605" starttime="20170824 20:28:42.605"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 20:28:42.606" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20170824 20:28:42.606" starttime="20170824 20:28:42.606"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 20:28:42.608" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170824 20:28:42.608" starttime="20170824 20:28:42.608"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.608" starttime="20170824 20:28:42.607"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.608" starttime="20170824 20:28:42.605"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:28:42.732" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170824 20:28:42.733" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.733" starttime="20170824 20:28:42.608"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 20:28:42.734" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170824 20:28:42.734" starttime="20170824 20:28:42.733"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 20:28:42.735" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170824 20:28:42.735" starttime="20170824 20:28:42.735"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.735" starttime="20170824 20:28:42.734"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.735" starttime="20170824 20:28:42.733"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:28:42.736" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:28:42.736" starttime="20170824 20:28:42.735"></status>
</kw>
<msg timestamp="20170824 20:28:42.736" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.736" starttime="20170824 20:28:42.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:42.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:42.737" starttime="20170824 20:28:42.736"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170824 20:28:42.737" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 20:28:42.737" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 20:28:42.737" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170824 20:28:42.737" starttime="20170824 20:28:42.737"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.738" starttime="20170824 20:28:42.419"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.738" starttime="20170824 20:28:42.417"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:42.738" starttime="20170824 20:28:42.407"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20170824 20:28:42.739" starttime="20170824 20:28:42.739"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:28:42.740" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20170824 20:28:42.740" starttime="20170824 20:28:42.740"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:28:42.746" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:28:42.746" starttime="20170824 20:28:42.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:42.747" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:42.747" starttime="20170824 20:28:42.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:28:42.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:28:42.747" starttime="20170824 20:28:42.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:28:42.748" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:28:42.748" starttime="20170824 20:28:42.748"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:28:43.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:28:43.127" starttime="20170824 20:28:42.749"></status>
</kw>
<msg timestamp="20170824 20:28:43.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:28:43.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:43.127" starttime="20170824 20:28:42.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:28:43.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:43.128" starttime="20170824 20:28:43.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:43.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:43.129" starttime="20170824 20:28:43.128"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:43.129" starttime="20170824 20:28:42.745"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:43.129" starttime="20170824 20:28:42.744"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:43.129" starttime="20170824 20:28:42.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:28:43.130" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170824 20:28:43.130" starttime="20170824 20:28:43.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:43.131" starttime="20170824 20:28:43.130"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:28:43.192" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170824 20:28:43.192" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:43.192" starttime="20170824 20:28:43.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:43.192" starttime="20170824 20:28:43.192"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:28:43.193" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:28:43.193" starttime="20170824 20:28:43.193"></status>
</kw>
<msg timestamp="20170824 20:28:43.193" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:43.193" starttime="20170824 20:28:42.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:43.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:43.194" starttime="20170824 20:28:43.194"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 20:28:43.195" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 20:28:43.195" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 20:28:43.195" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170824 20:28:43.195" starttime="20170824 20:28:43.194"></status>
</kw>
<msg timestamp="20170824 20:28:43.195" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170824 20:28:43.195" starttime="20170824 20:28:42.742"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:43.196" starttime="20170824 20:28:42.741"></status>
</kw>
<msg timestamp="20170824 20:28:43.196" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170824 20:28:43.196" starttime="20170824 20:28:42.741"></status>
</kw>
<msg timestamp="20170824 20:28:43.196" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170824 20:28:43.196" starttime="20170824 20:28:42.738"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170824 20:28:43.197" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:43.197" starttime="20170824 20:28:43.197"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:43.197" starttime="20170824 20:28:41.836"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:28:43.199" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170824 20:28:43.199" starttime="20170824 20:28:43.198"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:28:43.203" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:28:43.203" starttime="20170824 20:28:43.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:43.204" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:43.204" starttime="20170824 20:28:43.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:28:43.205" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:28:43.205" starttime="20170824 20:28:43.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:28:43.206" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:28:43.206" starttime="20170824 20:28:43.205"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:28:46.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:28:46.544" starttime="20170824 20:28:43.206"></status>
</kw>
<msg timestamp="20170824 20:28:46.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:28:46.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:28:46.545" starttime="20170824 20:28:43.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:28:46.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:46.546" starttime="20170824 20:28:46.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:28:46.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:28:46.547" starttime="20170824 20:28:46.546"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:46.547" starttime="20170824 20:28:43.202"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:46.547" starttime="20170824 20:28:43.201"></status>
</kw>
<status status="PASS" endtime="20170824 20:28:46.547" starttime="20170824 20:28:43.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:28:46.548" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170824 20:28:46.548" starttime="20170824 20:28:46.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:46.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:46.549" starttime="20170824 20:28:46.549"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:46.551" starttime="20170824 20:28:46.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:28:46.552" starttime="20170824 20:28:46.551"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:28:56.558" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170824 20:28:56.558" starttime="20170824 20:28:46.552"></status>
</kw>
<status status="FAIL" endtime="20170824 20:28:56.558" starttime="20170824 20:28:43.199"></status>
</kw>
<status status="FAIL" endtime="20170824 20:28:56.558" starttime="20170824 20:28:43.198"></status>
</kw>
<status status="FAIL" endtime="20170824 20:28:56.558" starttime="20170824 20:28:31.766"></status>
</kw>
<status status="FAIL" endtime="20170824 20:28:56.558" starttime="20170824 20:28:31.766"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:28:56.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:28:56.575" starttime="20170824 20:28:56.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:28:56.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:28:56.576" starttime="20170824 20:28:56.576"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:28:56.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:28:56.577" starttime="20170824 20:28:56.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:28:56.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:28:56.578" starttime="20170824 20:28:56.577"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:29:06.594" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170824 20:29:06.594" starttime="20170824 20:28:56.579"></status>
</kw>
<msg timestamp="20170824 20:29:06.594" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170824 20:29:06.594" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170824 20:29:06.594" starttime="20170824 20:28:56.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:29:06.595" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:29:06.596" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170824 20:29:06.596" starttime="20170824 20:29:06.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:29:06.596" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170824 20:29:06.596" starttime="20170824 20:29:06.596"></status>
</kw>
<status status="FAIL" endtime="20170824 20:29:06.597" starttime="20170824 20:28:56.573"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:29:26.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:29:26.599" starttime="20170824 20:29:26.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:29:26.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:29:26.600" starttime="20170824 20:29:26.599"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:29:26.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:29:26.600" starttime="20170824 20:29:26.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:29:26.601" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:29:26.601" starttime="20170824 20:29:26.601"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:29:36.614" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b7d250&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170824 20:29:46.825" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b7df10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170824 20:29:57.239" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b8c0d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170824 20:30:07.252" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b8c210&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20170824 20:30:07.252" starttime="20170824 20:29:26.602"></status>
</kw>
<msg timestamp="20170824 20:30:07.253" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170824 20:30:07.253" level="INFO">${resp} = ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b8c...</msg>
<status status="PASS" endtime="20170824 20:30:07.253" starttime="20170824 20:29:26.601"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:30:07.254" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:30:07.254" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b8c210&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170824 20:30:07.254" starttime="20170824 20:30:07.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:30:07.255" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170824 20:30:07.255" starttime="20170824 20:30:07.254"></status>
</kw>
<status status="FAIL" endtime="20170824 20:30:07.255" starttime="20170824 20:29:26.597"></status>
</kw>
<msg timestamp="20170824 20:30:07.255" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b8c210&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170824 20:30:07.256" starttime="20170824 20:28:56.572"></status>
</kw>
<status status="FAIL" endtime="20170824 20:30:07.256" starttime="20170824 20:28:56.571"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:30:07.256" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170824 20:30:07.257" starttime="20170824 20:30:07.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:30:07.257" starttime="20170824 20:30:07.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:30:17.270" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b8c0d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170824 20:30:34.489" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170824 20:30:44.928" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170824 20:30:54.979" level="INFO">${ret} = None</msg>
<msg timestamp="20170824 20:30:54.979" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/state/host0//attr/CurrentHostState (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20170824 20:30:54.979" starttime="20170824 20:30:07.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:30:54.980" starttime="20170824 20:30:54.980"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:30:54.981" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:30:54.981" starttime="20170824 20:30:54.981"></status>
</kw>
<msg timestamp="20170824 20:30:54.981" level="INFO">${resp} = None</msg>
<status status="FAIL" endtime="20170824 20:30:54.981" starttime="20170824 20:28:56.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:30:54.982" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170824 20:30:54.982" starttime="20170824 20:30:54.982"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 20:30:54.983" level="INFO">${content} = None</msg>
<msg timestamp="20170824 20:30:54.983" level="FAIL">Resolving variable '${resp.content}' failed: AttributeError: 'NoneType' object has no attribute 'content'</msg>
<status status="FAIL" endtime="20170824 20:30:54.983" starttime="20170824 20:30:54.982"></status>
</kw>
<msg timestamp="20170824 20:30:54.983" level="INFO">${state} = None</msg>
<msg timestamp="20170824 20:30:54.983" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: TypeError: 'NoneType' object has no attribute '__getitem__'</msg>
<status status="FAIL" endtime="20170824 20:30:54.983" starttime="20170824 20:28:56.570"></status>
</kw>
<msg timestamp="20170824 20:30:54.984" level="INFO">${host_state} = None</msg>
<msg timestamp="20170824 20:30:54.984" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</msg>
<status status="FAIL" endtime="20170824 20:30:54.984" starttime="20170824 20:28:56.569"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170824 20:30:54.985" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:30:54.985" level="FAIL">None != Quiesced</msg>
<status status="FAIL" endtime="20170824 20:30:54.985" starttime="20170824 20:30:54.985"></status>
</kw>
<msg timestamp="20170824 20:30:54.985" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170824 20:30:54.985" starttime="20170824 20:30:54.984"></status>
</kw>
<msg timestamp="20170824 20:30:54.985" level="INFO">${status} = False</msg>
<status status="FAIL" endtime="20170824 20:30:54.985" starttime="20170824 20:28:56.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170824 20:30:54.999" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170824 20:30:54.999" starttime="20170824 20:30:54.999"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170824 20:30:55.004" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170824 20:30:58.018" level="INFO">${RC} = 0</msg>
<msg timestamp="20170824 20:30:58.018" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=19.4 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=7.96 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170824 20:30:58.018" starttime="20170824 20:30:55.000"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.022" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=19.4 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=7.96 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=25.5 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=6.27 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 6.275/14.820/25.562/8.016 ms</msg>
<status status="PASS" endtime="20170824 20:30:58.022" starttime="20170824 20:30:58.021"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:30:58.023" starttime="20170824 20:30:58.023"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.023" starttime="20170824 20:30:54.998"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 20:30:58.049" level="INFO">${cur_time} = 2017-08-24 20:30:58:048621</msg>
<status status="PASS" endtime="20170824 20:30:58.049" starttime="20170824 20:30:58.048"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 20:30:58.049" level="INFO">${cur_time} = 20170824203058048621</msg>
<status status="PASS" endtime="20170824 20:30:58.049" starttime="20170824 20:30:58.049"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.050" starttime="20170824 20:30:58.048"></status>
</kw>
<msg timestamp="20170824 20:30:58.059" level="INFO">${FFDC_TIME} = 20170824203058048621</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170824 20:30:58.063" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170824 20:30:58.063" starttime="20170824 20:30:58.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170824 20:30:58.064" level="INFO">${suite_name} = 20170824203058048621_UpdateBmc</msg>
<status status="PASS" endtime="20170824 20:30:58.064" starttime="20170824 20:30:58.063"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170824 20:30:58.064" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170824 20:30:58.064" starttime="20170824 20:30:58.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170824 20:30:58.065" level="INFO">${test_name} = 20170824203058048621_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170824 20:30:58.065" starttime="20170824 20:30:58.065"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.065" starttime="20170824 20:30:58.060"></status>
</kw>
<msg timestamp="20170824 20:30:58.071" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170824 20:30:58.076" level="INFO">${FFDC_PREFIX} = 20170824203058048621_</msg>
<msg timestamp="20170824 20:30:58.100" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170824 20:30:58.102" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.102" starttime="20170824 20:30:58.101"></status>
</kw>
<msg timestamp="20170824 20:30:58.107" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.121" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.121" starttime="20170824 20:30:58.120"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.121" starttime="20170824 20:30:58.120"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.122" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.122" starttime="20170824 20:30:58.122"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.123" starttime="20170824 20:30:58.121"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.124" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.124" starttime="20170824 20:30:58.123"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.124" starttime="20170824 20:30:58.123"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.125" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.125" starttime="20170824 20:30:58.125"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.125" starttime="20170824 20:30:58.124"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.127" starttime="20170824 20:30:58.126"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.127" starttime="20170824 20:30:58.126"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.128" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.129" starttime="20170824 20:30:58.128"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.129" starttime="20170824 20:30:58.127"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.130" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.130" starttime="20170824 20:30:58.130"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.130" starttime="20170824 20:30:58.129"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.131" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.131" starttime="20170824 20:30:58.131"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.132" starttime="20170824 20:30:58.130"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.133" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.133" starttime="20170824 20:30:58.132"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.133" starttime="20170824 20:30:58.132"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.134" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.134" starttime="20170824 20:30:58.134"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.135" starttime="20170824 20:30:58.133"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.136" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.136" starttime="20170824 20:30:58.135"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.136" starttime="20170824 20:30:58.135"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.139" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.139" starttime="20170824 20:30:58.138"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.139" starttime="20170824 20:30:58.137"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:30:58.140" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:30:58.140" starttime="20170824 20:30:58.140"></status>
</kw>
<status status="PASS" endtime="20170824 20:30:58.140" starttime="20170824 20:30:58.139"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170824 20:30:58.162" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:30:58.162" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170824 20:31:01.117" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170824 20:31:01.117" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170824 20:31:01.243" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170824 20:31:01.255" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170824 20:31:01.255" level="INFO">${stderr} = </msg>
<msg timestamp="20170824 20:31:01.255" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170824 20:31:01.255" starttime="20170824 20:30:58.141"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.256" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170824 20:31:01.256" starttime="20170824 20:31:01.255"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.256" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170824 20:31:01.257" starttime="20170824 20:31:01.256"></status>
</kw>
<msg timestamp="20170824 20:31:01.257" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170824 20:31:01.257" starttime="20170824 20:30:58.140"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.258" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.258" starttime="20170824 20:31:01.258"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.258" starttime="20170824 20:31:01.257"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.258" starttime="20170824 20:30:58.133"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.260" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.260" starttime="20170824 20:31:01.259"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.260" starttime="20170824 20:31:01.259"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 20:31:01.260" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170824 20:31:01.261" starttime="20170824 20:31:01.260"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.262" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.262" starttime="20170824 20:31:01.262"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.262" starttime="20170824 20:31:01.261"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.263" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.263" starttime="20170824 20:31:01.263"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.264" starttime="20170824 20:31:01.262"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.264" starttime="20170824 20:31:01.261"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.266" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.266" starttime="20170824 20:31:01.265"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.266" starttime="20170824 20:31:01.264"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.267" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.267" starttime="20170824 20:31:01.267"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.268" starttime="20170824 20:31:01.266"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.268" starttime="20170824 20:31:01.264"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.269" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.269" starttime="20170824 20:31:01.269"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.269" starttime="20170824 20:31:01.268"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.271" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.271" starttime="20170824 20:31:01.270"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.271" starttime="20170824 20:31:01.269"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.271" starttime="20170824 20:31:01.268"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.271" starttime="20170824 20:31:01.261"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.272" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.272" starttime="20170824 20:31:01.272"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.272" starttime="20170824 20:31:01.271"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.272" starttime="20170824 20:30:58.119"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 20:31:01.280" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170824 20:31:01.280" starttime="20170824 20:31:01.279"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170824 20:31:01.281" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170824 20:31:01.281" starttime="20170824 20:31:01.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:31:01.282" starttime="20170824 20:31:01.282"></status>
</kw>
<msg timestamp="20170824 20:31:01.282" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170824 20:31:01.282" starttime="20170824 20:31:01.281"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:31:01.285" starttime="20170824 20:31:01.284"></status>
</kw>
<msg timestamp="20170824 20:31:01.285" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:31:01.285" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170824 20:31:01.285" starttime="20170824 20:31:01.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170824 20:31:01.285" starttime="20170824 20:31:01.285"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 20:31:01.306" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170824 20:31:01.306" starttime="20170824 20:31:01.305"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 20:31:01.307" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170824 20:31:01.307" starttime="20170824 20:31:01.307"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.319" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170824 20:31:01.319" starttime="20170824 20:31:01.307"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.323" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.323" starttime="20170824 20:31:01.322"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.323" starttime="20170824 20:31:01.322"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.324" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.325" starttime="20170824 20:31:01.324"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.325" starttime="20170824 20:31:01.323"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.326" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.326" starttime="20170824 20:31:01.325"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.326" starttime="20170824 20:31:01.325"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:01.327" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:01.327" starttime="20170824 20:31:01.327"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.327" starttime="20170824 20:31:01.326"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.327" starttime="20170824 20:31:01.321"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:01.328" starttime="20170824 20:31:01.321"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:31:01.328" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:31:01.328" starttime="20170824 20:31:01.328"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:31:01.386" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:31:01.386" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170824 20:31:04.293" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20170824 20:31:04.294" starttime="20170824 20:31:01.353"></status>
</kw>
<msg timestamp="20170824 20:31:04.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:31:04.294" level="INFO">${ret_values} = (u'', u'Traceback (most recent call last):\n  File "/usr/sbin/obmcutil", line 169, in &lt;module&gt;\n    obj = bus.get_object(bus_name, obj_path)\n  File "/usr/lib/python2.7/site-packages/dbus/bus.py", lin...</msg>
<status status="PASS" endtime="20170824 20:31:04.294" starttime="20170824 20:31:01.329"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:31:04.295" level="INFO">${stdout} = </msg>
<status status="PASS" endtime="20170824 20:31:04.295" starttime="20170824 20:31:04.294"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:31:04.295" level="INFO">${stderr} = Traceback (most recent call last):
  File "/usr/sbin/obmcutil", line 169, in &lt;module&gt;
    obj = bus.get_object(bus_name, obj_path)
  File "/usr/lib/python2.7/site-packages/dbus/bus.py", line 241, in g...</msg>
<status status="PASS" endtime="20170824 20:31:04.295" starttime="20170824 20:31:04.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.303" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.303" starttime="20170824 20:31:04.303"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.303" starttime="20170824 20:31:04.302"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.304" starttime="20170824 20:31:04.296"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.304" starttime="20170824 20:31:01.320"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.304" starttime="20170824 20:31:01.319"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.304" starttime="20170824 20:31:01.319"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.304" starttime="20170824 20:31:01.306"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.304" starttime="20170824 20:31:01.306"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 20:31:04.305" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170824 20:31:04.305" starttime="20170824 20:31:04.305"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.306" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170824 20:31:04.306" starttime="20170824 20:31:04.305"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.309" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.309" starttime="20170824 20:31:04.309"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.309" starttime="20170824 20:31:04.308"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.311" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.311" starttime="20170824 20:31:04.310"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.311" starttime="20170824 20:31:04.310"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.312" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.312" starttime="20170824 20:31:04.312"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.312" starttime="20170824 20:31:04.311"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.313" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.313" starttime="20170824 20:31:04.313"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.314" starttime="20170824 20:31:04.312"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.314" starttime="20170824 20:31:04.308"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.314" starttime="20170824 20:31:04.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:31:04.314" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:31:04.315" starttime="20170824 20:31:04.314"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:31:04.373" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:31:04.373" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170824 20:31:04.937" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:31:04.937" starttime="20170824 20:31:04.339"></status>
</kw>
<msg timestamp="20170824 20:31:04.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:31:04.938" level="INFO">${ret_values} = (u'20170824193133', u'', 0)</msg>
<status status="PASS" endtime="20170824 20:31:04.938" starttime="20170824 20:31:04.315"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:31:04.938" level="INFO">${stdout} = 20170824193133</msg>
<status status="PASS" endtime="20170824 20:31:04.939" starttime="20170824 20:31:04.938"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:31:04.939" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:31:04.939" starttime="20170824 20:31:04.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.947" starttime="20170824 20:31:04.947"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.947" starttime="20170824 20:31:04.946"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.947" starttime="20170824 20:31:04.939"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.947" starttime="20170824 20:31:04.306"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.947" starttime="20170824 20:31:04.306"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.951" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.951" starttime="20170824 20:31:04.950"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.951" starttime="20170824 20:31:04.950"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.952" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.952" starttime="20170824 20:31:04.952"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.952" starttime="20170824 20:31:04.951"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.954" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.954" starttime="20170824 20:31:04.953"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.954" starttime="20170824 20:31:04.953"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:04.955" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:04.955" starttime="20170824 20:31:04.955"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.955" starttime="20170824 20:31:04.954"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.955" starttime="20170824 20:31:04.949"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:04.955" starttime="20170824 20:31:04.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:31:04.956" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:31:04.956" starttime="20170824 20:31:04.956"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:31:05.014" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:31:05.015" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170824 20:31:05.311" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:31:05.312" starttime="20170824 20:31:04.981"></status>
</kw>
<msg timestamp="20170824 20:31:05.312" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:31:05.312" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.9-46"\nVERSION_ID="v1.99.9-46-g03916cb"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170824 20:31:05.312" starttime="20170824 20:31:04.957"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:31:05.313" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.9-46"
VERSION_ID="v1.99.9-46-g03916cb"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170824 20:31:05.313" starttime="20170824 20:31:05.312"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:31:05.313" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:31:05.313" starttime="20170824 20:31:05.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:05.321" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:05.321" starttime="20170824 20:31:05.320"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.321" starttime="20170824 20:31:05.320"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.321" starttime="20170824 20:31:05.314"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.321" starttime="20170824 20:31:04.948"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.321" starttime="20170824 20:31:04.948"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.321" starttime="20170824 20:31:04.306"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.321" starttime="20170824 20:31:04.304"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.321" starttime="20170824 20:31:04.304"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 20:31:05.323" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170824 20:31:05.323" starttime="20170824 20:31:05.322"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170824 20:31:05.324" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170824 20:31:05.324" starttime="20170824 20:31:05.323"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:05.327" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:05.327" starttime="20170824 20:31:05.327"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.328" starttime="20170824 20:31:05.326"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:05.329" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:05.329" starttime="20170824 20:31:05.328"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.329" starttime="20170824 20:31:05.328"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:05.330" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:05.330" starttime="20170824 20:31:05.330"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.330" starttime="20170824 20:31:05.329"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:05.331" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:05.331" starttime="20170824 20:31:05.331"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.332" starttime="20170824 20:31:05.330"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.332" starttime="20170824 20:31:05.326"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:05.332" starttime="20170824 20:31:05.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:31:05.333" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:31:05.333" starttime="20170824 20:31:05.332"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:31:05.391" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:31:05.391" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170824 20:31:06.060" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:31:06.061" starttime="20170824 20:31:05.358"></status>
</kw>
<msg timestamp="20170824 20:31:06.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:31:06.061" level="INFO">${ret_values} = (u' 20:31:14 up 1 min,  load average: 6.83, 1.93, 0.66', u'', 0)</msg>
<status status="PASS" endtime="20170824 20:31:06.061" starttime="20170824 20:31:05.333"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:31:06.062" level="INFO">${stdout} =  20:31:14 up 1 min,  load average: 6.83, 1.93, 0.66</msg>
<status status="PASS" endtime="20170824 20:31:06.062" starttime="20170824 20:31:06.061"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:31:06.062" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:31:06.062" starttime="20170824 20:31:06.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.070" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.070" starttime="20170824 20:31:06.069"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.070" starttime="20170824 20:31:06.069"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.070" starttime="20170824 20:31:06.063"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.070" starttime="20170824 20:31:05.324"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.070" starttime="20170824 20:31:05.324"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.074" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.074" starttime="20170824 20:31:06.073"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.074" starttime="20170824 20:31:06.073"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.075" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.075" starttime="20170824 20:31:06.075"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.075" starttime="20170824 20:31:06.074"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.076" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.076" starttime="20170824 20:31:06.076"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.077" starttime="20170824 20:31:06.075"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.078" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.078" starttime="20170824 20:31:06.077"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.078" starttime="20170824 20:31:06.077"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.078" starttime="20170824 20:31:06.072"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.078" starttime="20170824 20:31:06.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:31:06.079" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:31:06.079" starttime="20170824 20:31:06.078"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:31:06.137" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:31:06.137" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170824 20:31:06.394" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:31:06.394" starttime="20170824 20:31:06.104"></status>
</kw>
<msg timestamp="20170824 20:31:06.394" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:31:06.394" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170824 20:31:06.394" starttime="20170824 20:31:06.079"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:31:06.395" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     43.5...</msg>
<status status="PASS" endtime="20170824 20:31:06.395" starttime="20170824 20:31:06.395"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:31:06.396" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:31:06.396" starttime="20170824 20:31:06.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.403" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.403" starttime="20170824 20:31:06.403"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.403" starttime="20170824 20:31:06.402"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.403" starttime="20170824 20:31:06.396"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.403" starttime="20170824 20:31:06.071"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.403" starttime="20170824 20:31:06.070"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.407" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.407" starttime="20170824 20:31:06.406"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.407" starttime="20170824 20:31:06.406"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.408" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.408" starttime="20170824 20:31:06.408"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.409" starttime="20170824 20:31:06.407"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.410" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.410" starttime="20170824 20:31:06.409"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.410" starttime="20170824 20:31:06.409"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:06.411" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:06.411" starttime="20170824 20:31:06.411"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.411" starttime="20170824 20:31:06.410"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.411" starttime="20170824 20:31:06.405"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:06.411" starttime="20170824 20:31:06.405"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:31:06.412" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:31:06.412" starttime="20170824 20:31:06.412"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:31:06.470" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:31:06.471" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170824 20:31:07.209" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:31:07.209" starttime="20170824 20:31:06.436"></status>
</kw>
<msg timestamp="20170824 20:31:07.209" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:31:07.210" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 #1 Thu Aug 24 19:30:13 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170824 20:31:07.210" starttime="20170824 20:31:06.412"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:31:07.210" level="INFO">${stdout} = Linux witherspoon 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 #1 Thu Aug 24 19:30:13 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170824 20:31:07.210" starttime="20170824 20:31:07.210"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:31:07.211" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:31:07.211" starttime="20170824 20:31:07.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:31:07.218" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:31:07.218" starttime="20170824 20:31:07.218"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.218" starttime="20170824 20:31:07.217"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:07.211"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:06.404"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:06.404"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:05.324"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:05.322"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:05.322"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:01.306"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:01.305"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:01.286"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:01.283"></status>
</kw>
<status status="PASS" endtime="20170824 20:31:07.219" starttime="20170824 20:31:01.283"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:31:07.221" starttime="20170824 20:31:07.221"></status>
</kw>
<msg timestamp="20170824 20:31:07.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:31:07.221" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170824 20:31:07.221" starttime="20170824 20:31:07.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170824 20:31:07.222" starttime="20170824 20:31:07.222"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 20:31:07.241" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170824 20:31:07.241" starttime="20170824 20:31:07.241"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 20:31:07.243" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_xyz_l...</msg>
<status status="PASS" endtime="20170824 20:31:07.243" starttime="20170824 20:31:07.242"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:31:07.244" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170824 20:31:07.244" starttime="20170824 20:31:07.243"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:31:07.247" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:31:07.248" starttime="20170824 20:31:07.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:31:07.248" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:31:07.248" starttime="20170824 20:31:07.248"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:31:07.249" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:31:07.249" starttime="20170824 20:31:07.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:31:07.250" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:31:07.250" starttime="20170824 20:31:07.249"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:31:17.283" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170824 20:31:17.283" starttime="20170824 20:31:07.250"></status>
</kw>
<msg timestamp="20170824 20:31:17.283" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170824 20:31:17.284" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170824 20:31:17.284" starttime="20170824 20:31:07.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:31:17.284" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:31:17.285" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170824 20:31:17.285" starttime="20170824 20:31:17.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:31:17.285" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170824 20:31:17.286" starttime="20170824 20:31:17.285"></status>
</kw>
<status status="FAIL" endtime="20170824 20:31:17.286" starttime="20170824 20:31:07.246"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:31:37.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:31:37.288" starttime="20170824 20:31:37.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:31:37.289" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:31:37.289" starttime="20170824 20:31:37.289"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:31:37.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:31:37.290" starttime="20170824 20:31:37.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:31:37.290" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:31:37.290" starttime="20170824 20:31:37.290"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:31:47.322" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170824 20:31:47.323" starttime="20170824 20:31:37.291"></status>
</kw>
<msg timestamp="20170824 20:31:47.323" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170824 20:31:47.323" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170824 20:31:47.323" starttime="20170824 20:31:37.291"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:31:47.324" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:31:47.324" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170824 20:31:47.324" starttime="20170824 20:31:47.323"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:31:47.325" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170824 20:31:47.325" starttime="20170824 20:31:47.324"></status>
</kw>
<status status="FAIL" endtime="20170824 20:31:47.325" starttime="20170824 20:31:37.286"></status>
</kw>
<msg timestamp="20170824 20:31:47.325" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170824 20:31:47.325" starttime="20170824 20:31:07.245"></status>
</kw>
<status status="FAIL" endtime="20170824 20:31:47.325" starttime="20170824 20:31:07.245"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:31:47.326" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170824 20:31:47.326" starttime="20170824 20:31:47.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:31:47.327" starttime="20170824 20:31:47.326"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:31:57.333" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /org/openbmc/sensors/enumerate</msg>
<msg timestamp="20170824 20:32:07.568" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /org/openbmc/sensors/enumerate</msg>
<msg timestamp="20170824 20:32:13.680" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 20:32:13.680" level="INFO">${ret} = &lt;Response [401]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:13.680" starttime="20170824 20:31:47.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:13.681" starttime="20170824 20:32:13.680"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:32:13.681" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:32:13.681" starttime="20170824 20:32:13.681"></status>
</kw>
<msg timestamp="20170824 20:32:13.682" level="INFO">${resp} = &lt;Response [401]&gt;</msg>
<status status="FAIL" endtime="20170824 20:32:13.682" starttime="20170824 20:31:07.244"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:13.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:32:13.683" level="FAIL">401 != 200</msg>
<status status="FAIL" endtime="20170824 20:32:13.683" starttime="20170824 20:32:13.683"></status>
</kw>
<msg timestamp="20170824 20:32:13.683" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170824 20:32:13.683" starttime="20170824 20:32:13.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170824 20:32:13.684" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170824 20:32:13.684" starttime="20170824 20:32:13.684"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:13.685" starttime="20170824 20:32:13.684"></status>
</kw>
<status status="FAIL" endtime="20170824 20:32:13.685" starttime="20170824 20:31:07.243"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:13.686" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170824 20:32:13.686" starttime="20170824 20:32:13.685"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:32:13.690" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:32:13.690" starttime="20170824 20:32:13.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:32:13.691" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:32:13.691" starttime="20170824 20:32:13.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:32:13.692" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:32:13.692" starttime="20170824 20:32:13.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:32:13.692" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:32:13.692" starttime="20170824 20:32:13.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:32:14.325" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:32:14.325" starttime="20170824 20:32:13.693"></status>
</kw>
<msg timestamp="20170824 20:32:14.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:14.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:14.325" starttime="20170824 20:32:13.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:32:14.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:14.326" starttime="20170824 20:32:14.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:14.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:14.327" starttime="20170824 20:32:14.327"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:14.327" starttime="20170824 20:32:13.688"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:14.327" starttime="20170824 20:32:13.688"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:14.327" starttime="20170824 20:32:13.687"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:32:14.328" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170824 20:32:14.328" starttime="20170824 20:32:14.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:14.329" starttime="20170824 20:32:14.328"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:32:17.110" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 20:32:17.110" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:17.110" starttime="20170824 20:32:14.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:17.111" starttime="20170824 20:32:17.110"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:32:17.111" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:32:17.111" starttime="20170824 20:32:17.111"></status>
</kw>
<msg timestamp="20170824 20:32:17.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:17.111" starttime="20170824 20:32:13.686"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:17.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:17.113" starttime="20170824 20:32:17.112"></status>
</kw>
<msg timestamp="20170824 20:32:17.113" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170824 20:32:17.113" starttime="20170824 20:32:17.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:17.113" starttime="20170824 20:32:17.113"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170824 20:32:17.114" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 20:32:17.114" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170824 20:32:17.114" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/host0/auto_reboot": {
            "AutoReboot": 1
...</msg>
<status status="PASS" endtime="20170824 20:32:17.115" starttime="20170824 20:32:17.114"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:32:17.116" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:17.116" starttime="20170824 20:32:17.116"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:17.116" starttime="20170824 20:32:17.115"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:17.116" starttime="20170824 20:32:13.685"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:17.117" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170824 20:32:17.117" starttime="20170824 20:32:17.117"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:32:17.120" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:32:17.120" starttime="20170824 20:32:17.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:32:17.121" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:32:17.121" starttime="20170824 20:32:17.121"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:32:17.122" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:32:17.122" starttime="20170824 20:32:17.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:32:17.122" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:32:17.122" starttime="20170824 20:32:17.122"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:32:17.401" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:32:17.401" starttime="20170824 20:32:17.123"></status>
</kw>
<msg timestamp="20170824 20:32:17.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:17.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:17.401" starttime="20170824 20:32:17.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:32:17.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:17.403" starttime="20170824 20:32:17.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:17.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:17.403" starttime="20170824 20:32:17.403"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:17.403" starttime="20170824 20:32:17.119"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:17.403" starttime="20170824 20:32:17.119"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:17.404" starttime="20170824 20:32:17.118"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:32:17.404" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170824 20:32:17.404" starttime="20170824 20:32:17.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:17.405" starttime="20170824 20:32:17.405"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:32:17.921" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 20:32:17.921" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:17.921" starttime="20170824 20:32:17.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:17.922" starttime="20170824 20:32:17.921"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:32:17.922" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:32:17.922" starttime="20170824 20:32:17.922"></status>
</kw>
<msg timestamp="20170824 20:32:17.922" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:17.922" starttime="20170824 20:32:17.117"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:17.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:32:17.924" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170824 20:32:17.924" starttime="20170824 20:32:17.923"></status>
</kw>
<msg timestamp="20170824 20:32:17.924" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170824 20:32:17.924" starttime="20170824 20:32:17.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170824 20:32:17.925" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170824 20:32:17.925" starttime="20170824 20:32:17.925"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:17.925" starttime="20170824 20:32:17.924"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:17.925" starttime="20170824 20:32:17.116"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:17.926" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_sensor_xyz_list.txt</msg>
<status status="PASS" endtime="20170824 20:32:17.926" starttime="20170824 20:32:17.926"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:32:17.929" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:32:17.929" starttime="20170824 20:32:17.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:32:17.930" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:32:17.930" starttime="20170824 20:32:17.930"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:32:17.930" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:32:17.931" starttime="20170824 20:32:17.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:32:17.931" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:32:17.931" starttime="20170824 20:32:17.931"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:32:19.078" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:32:19.078" starttime="20170824 20:32:17.932"></status>
</kw>
<msg timestamp="20170824 20:32:19.078" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:19.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:19.078" starttime="20170824 20:32:17.932"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:32:19.079" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:19.079" starttime="20170824 20:32:19.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:19.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:19.080" starttime="20170824 20:32:19.079"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:19.080" starttime="20170824 20:32:17.928"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:19.080" starttime="20170824 20:32:17.927"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:19.080" starttime="20170824 20:32:17.927"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:32:19.081" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170824 20:32:19.081" starttime="20170824 20:32:19.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:19.081" starttime="20170824 20:32:19.081"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:32:22.823" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 20:32:22.823" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:22.823" starttime="20170824 20:32:19.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:22.824" starttime="20170824 20:32:22.823"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:32:22.824" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:32:22.824" starttime="20170824 20:32:22.824"></status>
</kw>
<msg timestamp="20170824 20:32:22.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:22.825" starttime="20170824 20:32:17.926"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:22.826" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:22.826" starttime="20170824 20:32:22.825"></status>
</kw>
<msg timestamp="20170824 20:32:22.826" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170824 20:32:22.826" starttime="20170824 20:32:22.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:22.826" starttime="20170824 20:32:22.826"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170824 20:32:22.828" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29910
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 207500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 20:32:22.828" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170824 20:32:22.828" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170824 20:32:22.828" starttime="20170824 20:32:22.827"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:32:22.830" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_sensor_xyz_list.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:22.830" starttime="20170824 20:32:22.829"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:22.830" starttime="20170824 20:32:22.828"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:22.830" starttime="20170824 20:32:17.925"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:22.831" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_led.txt</msg>
<status status="PASS" endtime="20170824 20:32:22.831" starttime="20170824 20:32:22.830"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:32:22.834" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:32:22.834" starttime="20170824 20:32:22.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:32:22.835" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:32:22.835" starttime="20170824 20:32:22.835"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:32:22.836" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:32:22.836" starttime="20170824 20:32:22.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:32:22.836" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:32:22.836" starttime="20170824 20:32:22.836"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:32:23.159" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:32:23.159" starttime="20170824 20:32:22.837"></status>
</kw>
<msg timestamp="20170824 20:32:23.159" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:23.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:23.159" starttime="20170824 20:32:22.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:32:23.160" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:23.160" starttime="20170824 20:32:23.159"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:23.161" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:23.161" starttime="20170824 20:32:23.160"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:23.161" starttime="20170824 20:32:22.833"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:23.161" starttime="20170824 20:32:22.832"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:23.161" starttime="20170824 20:32:22.832"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:32:23.162" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170824 20:32:23.162" starttime="20170824 20:32:23.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:23.162" starttime="20170824 20:32:23.162"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:32:23.787" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 20:32:23.787" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:23.787" starttime="20170824 20:32:23.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:23.788" starttime="20170824 20:32:23.788"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:32:23.788" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:32:23.788" starttime="20170824 20:32:23.788"></status>
</kw>
<msg timestamp="20170824 20:32:23.789" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:23.789" starttime="20170824 20:32:22.831"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:23.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:32:23.790" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170824 20:32:23.790" starttime="20170824 20:32:23.790"></status>
</kw>
<msg timestamp="20170824 20:32:23.790" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170824 20:32:23.790" starttime="20170824 20:32:23.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170824 20:32:23.791" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170824 20:32:23.791" starttime="20170824 20:32:23.791"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:23.792" starttime="20170824 20:32:23.791"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:23.792" starttime="20170824 20:32:22.830"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:23.792" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_elog.txt</msg>
<status status="PASS" endtime="20170824 20:32:23.792" starttime="20170824 20:32:23.792"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:32:23.795" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:32:23.796" starttime="20170824 20:32:23.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:32:23.796" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:32:23.796" starttime="20170824 20:32:23.796"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:32:23.797" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:32:23.797" starttime="20170824 20:32:23.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:32:23.798" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:32:23.798" starttime="20170824 20:32:23.797"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:32:24.268" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:32:24.268" starttime="20170824 20:32:23.798"></status>
</kw>
<msg timestamp="20170824 20:32:24.269" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:24.269" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:24.269" starttime="20170824 20:32:23.798"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:32:24.269" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:24.269" starttime="20170824 20:32:24.269"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:24.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:24.270" starttime="20170824 20:32:24.270"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:24.270" starttime="20170824 20:32:23.794"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:24.270" starttime="20170824 20:32:23.794"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:24.271" starttime="20170824 20:32:23.793"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:32:24.271" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170824 20:32:24.271" starttime="20170824 20:32:24.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:24.272" starttime="20170824 20:32:24.272"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:32:24.796" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 20:32:24.797" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:24.797" starttime="20170824 20:32:24.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:24.797" starttime="20170824 20:32:24.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:32:24.798" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:32:24.798" starttime="20170824 20:32:24.798"></status>
</kw>
<msg timestamp="20170824 20:32:24.798" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:24.798" starttime="20170824 20:32:23.793"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:24.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:32:24.800" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170824 20:32:24.800" starttime="20170824 20:32:24.799"></status>
</kw>
<msg timestamp="20170824 20:32:24.800" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170824 20:32:24.800" starttime="20170824 20:32:24.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170824 20:32:24.801" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170824 20:32:24.801" starttime="20170824 20:32:24.801"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:24.801" starttime="20170824 20:32:24.800"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:24.801" starttime="20170824 20:32:23.792"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:24.802" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170824 20:32:24.802" starttime="20170824 20:32:24.802"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:32:24.805" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:32:24.806" starttime="20170824 20:32:24.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:32:24.807" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:32:24.807" starttime="20170824 20:32:24.806"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:32:24.808" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:32:24.808" starttime="20170824 20:32:24.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:32:24.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:32:24.809" starttime="20170824 20:32:24.808"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:32:25.591" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:32:25.591" starttime="20170824 20:32:24.810"></status>
</kw>
<msg timestamp="20170824 20:32:25.591" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:25.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:25.591" starttime="20170824 20:32:24.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:32:25.592" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:25.592" starttime="20170824 20:32:25.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:25.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:25.593" starttime="20170824 20:32:25.592"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:25.593" starttime="20170824 20:32:24.804"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:25.593" starttime="20170824 20:32:24.804"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:25.593" starttime="20170824 20:32:24.803"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:32:25.594" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170824 20:32:25.594" starttime="20170824 20:32:25.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:25.595" starttime="20170824 20:32:25.594"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:32:27.233" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 20:32:27.233" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:27.234" starttime="20170824 20:32:25.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:27.234" starttime="20170824 20:32:27.234"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:32:27.235" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:32:27.235" starttime="20170824 20:32:27.235"></status>
</kw>
<msg timestamp="20170824 20:32:27.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:27.235" starttime="20170824 20:32:24.802"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:27.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:27.236" starttime="20170824 20:32:27.236"></status>
</kw>
<msg timestamp="20170824 20:32:27.236" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170824 20:32:27.236" starttime="20170824 20:32:27.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:27.237" starttime="20170824 20:32:27.237"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170824 20:32:27.238" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 20:32:27.238" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170824 20:32:27.238" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170824 20:32:27.238" starttime="20170824 20:32:27.237"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:32:27.240" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:27.240" starttime="20170824 20:32:27.239"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:27.240" starttime="20170824 20:32:27.238"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:27.240" starttime="20170824 20:32:24.801"></status>
</kw>
<status status="FAIL" endtime="20170824 20:32:27.240" starttime="20170824 20:31:07.243"></status>
</kw>
<status status="FAIL" endtime="20170824 20:32:27.240" starttime="20170824 20:31:07.242"></status>
</kw>
<status status="FAIL" endtime="20170824 20:32:27.240" starttime="20170824 20:31:07.242"></status>
</kw>
<status status="FAIL" endtime="20170824 20:32:27.240" starttime="20170824 20:31:07.241"></status>
</kw>
<status status="FAIL" endtime="20170824 20:32:27.240" starttime="20170824 20:31:07.240"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:27.241" starttime="20170824 20:31:07.222"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:27.241" starttime="20170824 20:31:07.220"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:27.241" starttime="20170824 20:31:07.219"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:27.243" starttime="20170824 20:32:27.243"></status>
</kw>
<msg timestamp="20170824 20:32:27.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:27.243" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170824 20:32:27.243" starttime="20170824 20:32:27.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:27.244" starttime="20170824 20:32:27.243"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:27.267" starttime="20170824 20:32:27.264"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170824 20:32:27.269" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170824 20:32:27.269" starttime="20170824 20:32:27.268"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:27.269" starttime="20170824 20:32:27.263"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:27.270" starttime="20170824 20:32:27.244"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:27.270" starttime="20170824 20:32:27.241"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:27.270" starttime="20170824 20:32:27.241"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:27.272" starttime="20170824 20:32:27.271"></status>
</kw>
<msg timestamp="20170824 20:32:27.272" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:27.272" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170824 20:32:27.272" starttime="20170824 20:32:27.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:27.272" starttime="20170824 20:32:27.272"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170824 20:32:27.319" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:32:27.319" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170824 20:32:27.694" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170824 20:32:27.707" level="INFO">${core_files} = None</msg>
<msg timestamp="20170824 20:32:27.707" level="INFO">${stderr} = None</msg>
<msg timestamp="20170824 20:32:27.708" level="INFO">${rc} = None</msg>
<msg timestamp="20170824 20:32:27.708" level="FAIL">#(UTC) 2017/08/24 20:32:27.706478 -   86.452098 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170824 20:32:27.708" starttime="20170824 20:32:27.292"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170824 20:32:27.709" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170824 20:32:27.709" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170824 20:32:27.709" starttime="20170824 20:32:27.708"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:27.729" starttime="20170824 20:32:27.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:28.761" starttime="20170824 20:32:27.730"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:28.762" starttime="20170824 20:32:27.730"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:28.762" starttime="20170824 20:32:27.720"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:28.762" starttime="20170824 20:32:27.709"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170824 20:32:28.762" starttime="20170824 20:32:28.762"></status>
</kw>
<status status="FAIL" endtime="20170824 20:32:28.762" starttime="20170824 20:32:27.291"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:28.762" starttime="20170824 20:32:27.273"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:28.762" starttime="20170824 20:32:27.270"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:28.762" starttime="20170824 20:32:27.270"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:28.764" starttime="20170824 20:32:28.764"></status>
</kw>
<msg timestamp="20170824 20:32:28.765" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:28.765" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170824 20:32:28.765" starttime="20170824 20:32:28.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:28.765" starttime="20170824 20:32:28.765"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 20:32:28.785" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170824 20:32:28.785" starttime="20170824 20:32:28.785"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 20:32:28.787" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170824 20:32:28.787" starttime="20170824 20:32:28.786"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:28.788" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170824 20:32:28.788" starttime="20170824 20:32:28.787"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:28.790" starttime="20170824 20:32:28.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:32:28.791" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:32:28.791" starttime="20170824 20:32:28.790"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:32:28.851" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:32:28.851" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170824 20:32:30.046" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:32:30.047" starttime="20170824 20:32:28.816"></status>
</kw>
<msg timestamp="20170824 20:32:30.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:30.048" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 24 20:32 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 24 20:32 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170824 20:32:30.048" starttime="20170824 20:32:28.791"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:32:30.049" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 24 20:32 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 24 20:32 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170824 20:32:30.049" starttime="20170824 20:32:30.049"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:32:30.050" level="INFO">${stderr} = ls: /proc/1791/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170824 20:32:30.050" starttime="20170824 20:32:30.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:32:30.059" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:30.059" starttime="20170824 20:32:30.058"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:30.059" starttime="20170824 20:32:30.057"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:30.059" starttime="20170824 20:32:30.051"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:30.060" starttime="20170824 20:32:28.788"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:30.060" starttime="20170824 20:32:28.787"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:30.060" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170824 20:32:30.060" starttime="20170824 20:32:30.060"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:30.062" starttime="20170824 20:32:30.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:32:30.063" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:32:30.063" starttime="20170824 20:32:30.062"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:32:30.122" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:32:30.123" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170824 20:32:30.446" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:32:30.447" starttime="20170824 20:32:30.088"></status>
</kw>
<msg timestamp="20170824 20:32:30.447" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:30.447" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170824 20:32:30.447" starttime="20170824 20:32:30.063"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:32:30.448" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170824 20:32:30.448" starttime="20170824 20:32:30.447"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:32:30.448" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:32:30.448" starttime="20170824 20:32:30.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:32:30.456" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:30.456" starttime="20170824 20:32:30.455"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:30.456" starttime="20170824 20:32:30.455"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:30.457" starttime="20170824 20:32:30.449"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:30.457" starttime="20170824 20:32:30.061"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:30.457" starttime="20170824 20:32:30.060"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:30.457" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170824 20:32:30.458" starttime="20170824 20:32:30.457"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:30.459" starttime="20170824 20:32:30.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:32:30.460" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:32:30.460" starttime="20170824 20:32:30.459"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:32:30.519" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:32:30.519" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170824 20:32:31.043" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:32:31.043" starttime="20170824 20:32:30.486"></status>
</kw>
<msg timestamp="20170824 20:32:31.043" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:31.043" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          255448 kB\nMemAvailable:     302416 kB\nBuffers:           11492 kB\nCached:            76700 kB\nSwapCached:            0 kB\nActive:           10428...</msg>
<status status="PASS" endtime="20170824 20:32:31.043" starttime="20170824 20:32:30.460"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:32:31.044" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          255448 kB
MemAvailable:     302416 kB
Buffers:           11492 kB
Cached:            76700 kB
SwapCached:            0 kB
Active:           104284 kB
Inac...</msg>
<status status="PASS" endtime="20170824 20:32:31.044" starttime="20170824 20:32:31.044"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:32:31.045" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:32:31.045" starttime="20170824 20:32:31.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:32:31.052" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:31.052" starttime="20170824 20:32:31.051"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:31.052" starttime="20170824 20:32:31.051"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:31.052" starttime="20170824 20:32:31.045"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:31.052" starttime="20170824 20:32:30.458"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:31.052" starttime="20170824 20:32:30.457"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:31.053" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170824 20:32:31.053" starttime="20170824 20:32:31.053"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:31.055" starttime="20170824 20:32:31.054"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:32:31.055" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:32:31.055" starttime="20170824 20:32:31.055"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:32:31.114" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:32:31.115" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170824 20:32:31.626" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:32:31.626" starttime="20170824 20:32:31.080"></status>
</kw>
<msg timestamp="20170824 20:32:31.627" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:31.627" level="INFO">${ret_values} = (u'Mem: 176768K used, 255480K free, 38992K shrd, 11492K buff, 76700K cached\nCPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq\nLoad average: 6.14 3.32 1.30 6/152 1796\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170824 20:32:31.627" starttime="20170824 20:32:31.056"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:32:31.628" level="INFO">${stdout} = Mem: 176768K used, 255480K free, 38992K shrd, 11492K buff, 76700K cached
CPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 6.14 3.32 1.30 6/152 1796
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170824 20:32:31.628" starttime="20170824 20:32:31.627"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:32:31.628" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:32:31.628" starttime="20170824 20:32:31.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:32:31.636" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:31.636" starttime="20170824 20:32:31.635"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:31.636" starttime="20170824 20:32:31.634"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:31.636" starttime="20170824 20:32:31.629"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:31.636" starttime="20170824 20:32:31.053"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:31.636" starttime="20170824 20:32:31.052"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:31.637" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170824 20:32:31.637" starttime="20170824 20:32:31.637"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:31.639" starttime="20170824 20:32:31.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:32:31.639" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:32:31.639" starttime="20170824 20:32:31.639"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:32:31.699" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:32:31.700" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170824 20:32:32.168" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:32:32.169" starttime="20170824 20:32:31.664"></status>
</kw>
<msg timestamp="20170824 20:32:32.169" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:32.169" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 (jenkins@openbmc-builder2) (gcc version 6.2.0 (GCC) ) #1 Thu Aug 24 1...</msg>
<status status="PASS" endtime="20170824 20:32:32.169" starttime="20170824 20:32:31.640"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:32:32.170" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 (jenkins@openbmc-builder2) (gcc version 6.2.0 (GCC) ) #1 Thu Aug 24 19:30...</msg>
<status status="PASS" endtime="20170824 20:32:32.170" starttime="20170824 20:32:32.170"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:32:32.171" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:32:32.171" starttime="20170824 20:32:32.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:32:32.178" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:32.178" starttime="20170824 20:32:32.178"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:32.178" starttime="20170824 20:32:32.177"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:32.178" starttime="20170824 20:32:32.171"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:32.179" starttime="20170824 20:32:31.637"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:32.179" starttime="20170824 20:32:31.637"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 20:32:32.179" level="INFO">${logpath} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170824 20:32:32.179" starttime="20170824 20:32:32.179"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:32.181" starttime="20170824 20:32:32.180"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 20:32:32.182" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170824 20:32:32.182" starttime="20170824 20:32:32.181"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 20:32:32.240" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170824 20:32:32.240" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170824 20:32:33.869" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170824 20:32:33.870" starttime="20170824 20:32:32.205"></status>
</kw>
<msg timestamp="20170824 20:32:33.870" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:33.872" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-24 20:30:13 UTC, end at Thu 2017-08-24 20:32:40 UTC. --\nAug 24 20:30:13 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 24 20:30:13 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170824 20:32:33.872" starttime="20170824 20:32:32.182"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 20:32:33.873" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-24 20:30:13 UTC, end at Thu 2017-08-24 20:32:40 UTC. --
Aug 24 20:30:13 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 24 20:30:13 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170824 20:32:33.873" starttime="20170824 20:32:33.873"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 20:32:33.874" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170824 20:32:33.874" starttime="20170824 20:32:33.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170824 20:32:33.886" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/20170824203058048621_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:33.886" starttime="20170824 20:32:33.885"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.886" starttime="20170824 20:32:33.883"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.886" starttime="20170824 20:32:33.875"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:32.180"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:32.179"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:28.787"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:28.786"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:28.786"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:28.785"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:28.784"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:28.766"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:28.763"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:33.887" starttime="20170824 20:32:28.763"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:33.889" starttime="20170824 20:32:33.889"></status>
</kw>
<msg timestamp="20170824 20:32:33.889" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:33.889" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170824 20:32:33.889" starttime="20170824 20:32:33.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:33.890" starttime="20170824 20:32:33.890"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 20:32:33.911" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170824 20:32:33.912" starttime="20170824 20:32:33.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 20:32:33.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170824 20:32:33.914" starttime="20170824 20:32:33.914"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 20:32:33.915" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170824 20:32:33.915" starttime="20170824 20:32:33.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 20:32:33.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170824 20:32:33.915" starttime="20170824 20:32:33.915"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 20:32:34.155" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170824 20:32:34.155" starttime="20170824 20:32:33.916"></status>
</kw>
<msg timestamp="20170824 20:32:34.155" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:34.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:34.155" starttime="20170824 20:32:33.916"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 20:32:34.156" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:34.156" starttime="20170824 20:32:34.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:34.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170824 20:32:34.157" starttime="20170824 20:32:34.157"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.157" starttime="20170824 20:32:33.910"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.157" starttime="20170824 20:32:33.910"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.157" starttime="20170824 20:32:33.909"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 20:32:34.158" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170824 20:32:34.158" starttime="20170824 20:32:34.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:34.159" starttime="20170824 20:32:34.158"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 20:32:34.207" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170824 20:32:34.207" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:34.207" starttime="20170824 20:32:34.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:34.208" starttime="20170824 20:32:34.207"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 20:32:34.208" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170824 20:32:34.208" starttime="20170824 20:32:34.208"></status>
</kw>
<msg timestamp="20170824 20:32:34.209" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170824 20:32:34.209" starttime="20170824 20:32:33.909"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 20:32:34.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 20:32:34.210" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170824 20:32:34.210" starttime="20170824 20:32:34.209"></status>
</kw>
<msg timestamp="20170824 20:32:34.210" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170824 20:32:34.210" starttime="20170824 20:32:34.209"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170824 20:32:34.211" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170824 20:32:34.211" starttime="20170824 20:32:34.211"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.211" starttime="20170824 20:32:33.908"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.211" starttime="20170824 20:32:33.890"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.211" starttime="20170824 20:32:33.888"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.211" starttime="20170824 20:32:33.887"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:34.213" starttime="20170824 20:32:34.213"></status>
</kw>
<msg timestamp="20170824 20:32:34.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 20:32:34.214" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170824 20:32:34.214" starttime="20170824 20:32:34.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:34.214" starttime="20170824 20:32:34.214"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170824 20:32:34.234" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170824 20:32:34.234" starttime="20170824 20:32:34.233"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.234" starttime="20170824 20:32:34.232"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.234" starttime="20170824 20:32:34.214"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.234" starttime="20170824 20:32:34.212"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.234" starttime="20170824 20:32:34.211"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.234" starttime="20170824 20:31:01.283"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.234" starttime="20170824 20:31:01.280"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.234" starttime="20170824 20:31:01.280"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.235" starttime="20170824 20:31:01.280"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170824 20:32:34.243" starttime="20170824 20:32:34.242"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.243" starttime="20170824 20:32:34.235"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.243" starttime="20170824 20:31:01.279"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.243" starttime="20170824 20:30:54.986"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.243" starttime="20170824 20:30:54.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:34.244" starttime="20170824 20:32:34.244"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170824 20:32:34.245" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170824 20:32:34.245" starttime="20170824 20:32:34.245"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170824 20:32:34.246" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170824203058048621_UpdateBmc/20170824203058048621_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170824 20:32:34.246" starttime="20170824 20:32:34.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:34.246" starttime="20170824 20:32:34.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:34.247" starttime="20170824 20:32:34.247"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170824 20:32:34.248" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170824 20:32:34.248" starttime="20170824 20:32:34.247"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170824 20:32:34.251" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170824 20:32:34.251" starttime="20170824 20:32:34.251"></status>
</kw>
<msg timestamp="20170824 20:32:34.251" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170824 20:32:34.251" starttime="20170824 20:32:34.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170824 20:32:34.253" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:34.253" starttime="20170824 20:32:34.252"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.253" starttime="20170824 20:32:34.252"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170824 20:32:34.253" starttime="20170824 20:32:34.253"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 20:32:34.255" level="INFO">${cur_time} = 2017-08-24 20:32:34:254362</msg>
<status status="PASS" endtime="20170824 20:32:34.255" starttime="20170824 20:32:34.254"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 20:32:34.255" level="INFO">${cur_time} = 20170824203234254362</msg>
<status status="PASS" endtime="20170824 20:32:34.255" starttime="20170824 20:32:34.255"></status>
</kw>
<msg timestamp="20170824 20:32:34.255" level="INFO">${cur_time} = 20170824203234254362</msg>
<status status="PASS" endtime="20170824 20:32:34.255" starttime="20170824 20:32:34.254"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170824 20:32:34.256" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 20:32:34.256" starttime="20170824 20:32:34.256"></status>
</kw>
<status status="PASS" endtime="20170824 20:32:34.256" starttime="20170824 20:32:34.244"></status>
</kw>
<status status="FAIL" endtime="20170824 20:32:34.257" starttime="20170824 20:28:56.568"></status>
</kw>
<msg timestamp="20170824 20:32:34.257" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</msg>
<status status="FAIL" endtime="20170824 20:32:34.257" starttime="20170824 20:28:56.559">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170824 20:32:34.257" critical="yes" starttime="20170824 20:28:31.761">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)

Also teardown failed:
Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170824 20:32:34.258" starttime="20170824 20:28:30.667"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170824 20:29:36.614" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b7d250&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170824 20:29:46.825" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b7df10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170824 20:29:57.239" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b8c0d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170824 20:30:17.270" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff99b8c0d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170824 20:30:34.489" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170824 20:30:44.928" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170824 20:31:57.333" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /org/openbmc/sensors/enumerate</msg>
<msg timestamp="20170824 20:32:07.568" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /org/openbmc/sensors/enumerate</msg>
</errors>
</robot>
