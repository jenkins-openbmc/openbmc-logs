<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170718 03:56:23.121">
<suite name="Tests" id="s1" source="/tmp/fspcibld/6791/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:23.715">Dictionary does not contain key 'host'.</msg>
<status endtime="20170718 03:56:23.715" starttime="20170718 03:56:23.715" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:23.715">${has_host} = False</msg>
<status endtime="20170718 03:56:23.715" starttime="20170718 03:56:23.715" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170718 03:56:23.717" starttime="20170718 03:56:23.716" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:23.717" starttime="20170718 03:56:23.716" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:23.718">${port_num} = 22</msg>
<status endtime="20170718 03:56:23.718" starttime="20170718 03:56:23.718" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:23.719">${SSH_PORT} = 22</msg>
<status endtime="20170718 03:56:23.719" starttime="20170718 03:56:23.718" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:23.719">${https_num} = 443</msg>
<status endtime="20170718 03:56:23.719" starttime="20170718 03:56:23.719" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:23.720">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170718 03:56:23.720" starttime="20170718 03:56:23.719" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:23.720" starttime="20170718 03:56:23.717" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:23.720" starttime="20170718 03:56:23.717" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:23.721">Dictionary does not contain key 'port'.</msg>
<status endtime="20170718 03:56:23.721" starttime="20170718 03:56:23.721" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:23.721">${has_port} = False</msg>
<status endtime="20170718 03:56:23.721" starttime="20170718 03:56:23.721" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170718 03:56:23.723" starttime="20170718 03:56:23.723" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170718 03:56:23.724" starttime="20170718 03:56:23.723" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:23.724" starttime="20170718 03:56:23.722" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:23.724" starttime="20170718 03:56:23.722" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:23.724">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170718 03:56:25.766">Read output: root@witherspoon:~#</msg>
<status endtime="20170718 03:56:25.766" starttime="20170718 03:56:23.724" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:25.766" starttime="20170718 03:56:23.714" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:25.768">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170718 03:56:25.915">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 03:56:25.915">${output} = VERSION_ID="v1.99.7-26-gd1fca41"</msg>
<msg level="INFO" timestamp="20170718 03:56:25.915">${stderr} = </msg>
<status endtime="20170718 03:56:25.915" starttime="20170718 03:56:25.767" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:25.916">Length is 0</msg>
<status endtime="20170718 03:56:25.916" starttime="20170718 03:56:25.916" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:25.917">VERSION_ID="v1.99.7-26-gd1fca41"</msg>
<status endtime="20170718 03:56:25.917" starttime="20170718 03:56:25.917" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:25.917" starttime="20170718 03:56:25.767" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:25.917" starttime="20170718 03:56:25.767" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:25.919">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170718 03:56:26.035">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 03:56:26.035">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg level="INFO" timestamp="20170718 03:56:26.035">${stderr} = </msg>
<status endtime="20170718 03:56:26.035" starttime="20170718 03:56:25.919" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:26.036">Length is 0</msg>
<status endtime="20170718 03:56:26.036" starttime="20170718 03:56:26.036" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:26.036">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status endtime="20170718 03:56:26.036" starttime="20170718 03:56:25.918" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:26.037">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.52
	op-build-v1.17-128-gf1b53c7-dirty
	buildroot-2017.05-15-gcd06d25
	skiboot-v5.7-rc1
	hostboot-d0a8f18
	linux-4.11.6-openpower1-p060b411
	petitboot-v1.4.3-p84d353a
	machine-xml-5b59a1d
	occ-6a00709
	hostboot-binaries-0e2ad15
	capp-ucode-9c73e9f
	sbe-02021c6
</msg>
<status endtime="20170718 03:56:26.038" starttime="20170718 03:56:26.037" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:26.038" starttime="20170718 03:56:25.918" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:26.038" starttime="20170718 03:56:25.918" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:26.041">Dictionary does not contain key 'host'.</msg>
<status endtime="20170718 03:56:26.041" starttime="20170718 03:56:26.040" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:26.041">${has_host} = False</msg>
<status endtime="20170718 03:56:26.041" starttime="20170718 03:56:26.040" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170718 03:56:26.042" starttime="20170718 03:56:26.042" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:26.042" starttime="20170718 03:56:26.041" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:26.043">${port_num} = 22</msg>
<status endtime="20170718 03:56:26.043" starttime="20170718 03:56:26.043" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:26.044">${SSH_PORT} = 22</msg>
<status endtime="20170718 03:56:26.044" starttime="20170718 03:56:26.043" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:26.044">${https_num} = 443</msg>
<status endtime="20170718 03:56:26.044" starttime="20170718 03:56:26.044" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:26.045">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170718 03:56:26.045" starttime="20170718 03:56:26.045" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:26.045" starttime="20170718 03:56:26.043" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:26.045" starttime="20170718 03:56:26.042" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:26.046">Dictionary does not contain key 'port'.</msg>
<status endtime="20170718 03:56:26.046" starttime="20170718 03:56:26.046" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:26.046">${has_port} = False</msg>
<status endtime="20170718 03:56:26.046" starttime="20170718 03:56:26.046" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170718 03:56:26.048" starttime="20170718 03:56:26.048" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170718 03:56:26.049" starttime="20170718 03:56:26.049" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:26.049" starttime="20170718 03:56:26.048" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:26.049" starttime="20170718 03:56:26.047" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:26.050">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170718 03:56:27.720">Read output: root@witherspoon:~#</msg>
<status endtime="20170718 03:56:27.720" starttime="20170718 03:56:26.049" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:27.720" starttime="20170718 03:56:26.039" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:27.721">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170718 03:56:27.811">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 03:56:27.811">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170718 03:56:27.811">${stderr} = </msg>
<status endtime="20170718 03:56:27.811" starttime="20170718 03:56:27.721" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:27.811">Length is 0</msg>
<status endtime="20170718 03:56:27.812" starttime="20170718 03:56:27.811" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:27.812">Length is 11</msg>
<status endtime="20170718 03:56:27.812" starttime="20170718 03:56:27.812" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:27.812">${bmc_model} = Witherspoon</msg>
<status endtime="20170718 03:56:27.812" starttime="20170718 03:56:26.039" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:27.813">BMC Model=Witherspoon</msg>
<status endtime="20170718 03:56:27.813" starttime="20170718 03:56:27.812" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:27.813" starttime="20170718 03:56:26.039" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:27.813" starttime="20170718 03:56:26.038" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:27.815">Dictionary does not contain key 'host'.</msg>
<status endtime="20170718 03:56:27.815" starttime="20170718 03:56:27.815" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:27.815">${has_host} = False</msg>
<status endtime="20170718 03:56:27.815" starttime="20170718 03:56:27.814" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170718 03:56:27.816" starttime="20170718 03:56:27.816" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:27.816" starttime="20170718 03:56:27.815" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:27.818">${port_num} = 22</msg>
<status endtime="20170718 03:56:27.818" starttime="20170718 03:56:27.817" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:27.818">${SSH_PORT} = 22</msg>
<status endtime="20170718 03:56:27.818" starttime="20170718 03:56:27.818" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:27.819">${https_num} = 443</msg>
<status endtime="20170718 03:56:27.819" starttime="20170718 03:56:27.819" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:27.820">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170718 03:56:27.820" starttime="20170718 03:56:27.819" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:27.820" starttime="20170718 03:56:27.817" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:27.820" starttime="20170718 03:56:27.817" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:27.821">Dictionary does not contain key 'port'.</msg>
<status endtime="20170718 03:56:27.821" starttime="20170718 03:56:27.820" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:27.821">${has_port} = False</msg>
<status endtime="20170718 03:56:27.821" starttime="20170718 03:56:27.820" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170718 03:56:27.823" starttime="20170718 03:56:27.822" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170718 03:56:27.825" starttime="20170718 03:56:27.823" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:27.825" starttime="20170718 03:56:27.822" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:27.825" starttime="20170718 03:56:27.821" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:27.825">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170718 03:56:29.704">Read output: root@witherspoon:~#</msg>
<status endtime="20170718 03:56:29.705" starttime="20170718 03:56:27.825" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:29.705" starttime="20170718 03:56:27.814" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:29.706">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170718 03:56:29.793">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 03:56:29.793">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170718 03:56:29.793">${stderr} = </msg>
<status endtime="20170718 03:56:29.793" starttime="20170718 03:56:29.706" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:29.794">Length is 0</msg>
<status endtime="20170718 03:56:29.794" starttime="20170718 03:56:29.794" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:29.794">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170718 03:56:29.794" starttime="20170718 03:56:29.705" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170718 03:56:29.795" starttime="20170718 03:56:29.795" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:29.795" starttime="20170718 03:56:27.813" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:29.795" starttime="20170718 03:56:27.813" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170718 03:56:29.796" starttime="20170718 03:56:29.795" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:29.796" starttime="20170718 03:56:23.713" status="PASS"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/fspcibld/6791/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/fspcibld/6791/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:29.885">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:56:29.885" starttime="20170718 03:56:29.884" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:29.886">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:56:29.886" starttime="20170718 03:56:29.886" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:29.887">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:56:29.887" starttime="20170718 03:56:29.886" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:29.887">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:56:29.887" starttime="20170718 03:56:29.887" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.128">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:56:30.129" starttime="20170718 03:56:29.888" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.129">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:56:30.129">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:30.129" starttime="20170718 03:56:29.887" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.130">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:30.130" starttime="20170718 03:56:30.129" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:30.130" starttime="20170718 03:56:30.130" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.130" starttime="20170718 03:56:29.883" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.131" starttime="20170718 03:56:29.883" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.131" starttime="20170718 03:56:29.882" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.137">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:56:30.137" starttime="20170718 03:56:30.136" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.138">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:56:30.138" starttime="20170718 03:56:30.138" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.139">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:56:30.139" starttime="20170718 03:56:30.138" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.140">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:56:30.140" starttime="20170718 03:56:30.139" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.342">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:56:30.342" starttime="20170718 03:56:30.141" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.342">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:56:30.342">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:30.342" starttime="20170718 03:56:30.140" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.343">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:30.343" starttime="20170718 03:56:30.343" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:30.344" starttime="20170718 03:56:30.344" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.344" starttime="20170718 03:56:30.135" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.344" starttime="20170718 03:56:30.135" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.344" starttime="20170718 03:56:30.134" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.345">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:56:30.345" starttime="20170718 03:56:30.345" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.347">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:56:30.347" starttime="20170718 03:56:30.346" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.348">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:56:30.348" starttime="20170718 03:56:30.348" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.348" starttime="20170718 03:56:30.347" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.348" starttime="20170718 03:56:30.346" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.349" starttime="20170718 03:56:30.345" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.417">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:56:30.417">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:30.417" starttime="20170718 03:56:30.349" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.419">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:30.419" starttime="20170718 03:56:30.418" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.420">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:30.420" starttime="20170718 03:56:30.420" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.420" starttime="20170718 03:56:30.419" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.420" starttime="20170718 03:56:30.418" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.420" starttime="20170718 03:56:30.417" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.421">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:30.421" starttime="20170718 03:56:30.133" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:30.421" starttime="20170718 03:56:30.421" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.422">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:56:30.422">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:56:30.422">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:56:30.422" starttime="20170718 03:56:30.422" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.422">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:56:30.422" starttime="20170718 03:56:30.132" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.423">${host_state} = Running</msg>
<status endtime="20170718 03:56:30.423" starttime="20170718 03:56:30.132" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:30.424">Running != Quiesced</msg>
<status endtime="20170718 03:56:30.424" starttime="20170718 03:56:30.423" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.424">${status} = False</msg>
<status endtime="20170718 03:56:30.424" starttime="20170718 03:56:30.423" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.424">${status} = False</msg>
<status endtime="20170718 03:56:30.425" starttime="20170718 03:56:30.131" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170718 03:56:30.425" starttime="20170718 03:56:30.425" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170718 03:56:30.426" starttime="20170718 03:56:30.425" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.435">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170718 03:56:30.435" starttime="20170718 03:56:30.426" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.448">${FFDC_DIR_PATH} = </msg>
<status endtime="20170718 03:56:30.448" starttime="20170718 03:56:30.436" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.451">${cur_time} = 2017-07-18 03:56:30:450858</msg>
<status endtime="20170718 03:56:30.451" starttime="20170718 03:56:30.451" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.452">${cur_time} = 20170718035630450858</msg>
<status endtime="20170718 03:56:30.452" starttime="20170718 03:56:30.452" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.452" starttime="20170718 03:56:30.450" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.456">${FFDC_TIME} = 20170718035630450858</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.457">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170718 03:56:30.457" starttime="20170718 03:56:30.457" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.458">${suite_name} = 20170718035630450858_TestsSecurityTestSsl</msg>
<status endtime="20170718 03:56:30.458" starttime="20170718 03:56:30.457" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.458">${test_name} = TestSSLConnection</msg>
<status endtime="20170718 03:56:30.458" starttime="20170718 03:56:30.458" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.459">${test_name} = 20170718035630450858_TestSSLConnection</msg>
<status endtime="20170718 03:56:30.459" starttime="20170718 03:56:30.459" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.459" starttime="20170718 03:56:30.457" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.460">${FFDC_DIR_PATH} = /tmp/fspcibld/6791/obmc-robot/logs/20170718035630450858_TestsSecurityTestSsl/20170718035630450858_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170718 03:56:30.463">${FFDC_PREFIX} = 20170718035630450858_</msg>
<status endtime="20170718 03:56:30.464" starttime="20170718 03:56:30.450" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.464" starttime="20170718 03:56:30.449" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170718 03:56:30.464" starttime="20170718 03:56:30.464" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.465" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs"&gt;/tmp/fspcibld/6791/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170718 03:56:30.465" starttime="20170718 03:56:30.465" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:30.466">File '/tmp/fspcibld/6791/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170718 03:56:30.466" starttime="20170718 03:56:30.466" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.466">${exist} = False</msg>
<status endtime="20170718 03:56:30.466" starttime="20170718 03:56:30.465" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.467" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 03:56:30.468" starttime="20170718 03:56:30.467" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.468" starttime="20170718 03:56:30.467" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170718 03:56:30.468" starttime="20170718 03:56:30.468" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.469">${cur_time} = 2017-07-18 03:56:30:469007</msg>
<status endtime="20170718 03:56:30.469" starttime="20170718 03:56:30.469" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.470">${cur_time} = 20170718035630469007</msg>
<status endtime="20170718 03:56:30.470" starttime="20170718 03:56:30.469" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.470">${cur_time} = 20170718035630469007</msg>
<status endtime="20170718 03:56:30.470" starttime="20170718 03:56:30.468" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:30.471" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 03:56:30.471" starttime="20170718 03:56:30.470" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.471" starttime="20170718 03:56:30.426" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.471" starttime="20170718 03:56:30.131" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170718 03:56:30.471" starttime="20170718 03:56:29.882" status="PASS" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170718 03:56:30.472">Delete All Sessions</msg>
<status endtime="20170718 03:56:30.473" starttime="20170718 03:56:30.472" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170718 03:56:30.473" starttime="20170718 03:56:29.798" status="PASS"></status>
</suite>
<status endtime="20170718 03:56:30.475" starttime="20170718 03:56:29.796" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/fspcibld/6791/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.513">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170718 03:56:30.513" starttime="20170718 03:56:30.512" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.513">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170718 03:56:30.514" starttime="20170718 03:56:30.513" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.514">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170718 03:56:30.514" starttime="20170718 03:56:30.512" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.516">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170718 03:56:30.516" starttime="20170718 03:56:30.515" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.517">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170718 03:56:30.517" starttime="20170718 03:56:30.516" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.517">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170718 03:56:30.517" starttime="20170718 03:56:30.515" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.518">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170718 03:56:30.518" starttime="20170718 03:56:30.517" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170718 03:56:30.518" starttime="20170718 03:56:30.518" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.535">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170718 03:56:30.542">${rc} = 0</msg>
<msg level="INFO" timestamp="20170718 03:56:30.542">${output} = /tmp/fspcibld/6791/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170718 03:56:30.542" starttime="20170718 03:56:30.518" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170718 03:56:30.545" starttime="20170718 03:56:30.544" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170718 03:56:30.546" starttime="20170718 03:56:30.545" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.546">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170718 03:56:30.546" starttime="20170718 03:56:30.546" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:30.547">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170718 03:56:30.547" starttime="20170718 03:56:30.517" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.547">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170718 03:56:30.547" starttime="20170718 03:56:30.547" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170718 03:56:30.548" starttime="20170718 03:56:30.548" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.551">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170718 03:56:30.560">${rc} = 0</msg>
<msg level="INFO" timestamp="20170718 03:56:30.560">${os_con_pid} = </msg>
<status endtime="20170718 03:56:30.560" starttime="20170718 03:56:30.548" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170718 03:56:30.562" starttime="20170718 03:56:30.562" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.563">${cmd_buf} = kill -9 </msg>
<status endtime="20170718 03:56:30.563" starttime="20170718 03:56:30.563" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170718 03:56:30.564" starttime="20170718 03:56:30.563" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.565">${rc} = None</msg>
<msg level="INFO" timestamp="20170718 03:56:30.565">${output} = None</msg>
<status endtime="20170718 03:56:30.565" starttime="20170718 03:56:30.564" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170718 03:56:30.565" starttime="20170718 03:56:30.565" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:30.567">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status endtime="20170718 03:56:30.567" starttime="20170718 03:56:30.567" status="FAIL"></status>
</kw>
<status endtime="20170718 03:56:30.567" starttime="20170718 03:56:30.566" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:30.568" starttime="20170718 03:56:30.566" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.568">${output} = </msg>
<status endtime="20170718 03:56:30.568" starttime="20170718 03:56:30.568" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:30.569">${loc_quiet} = 1</msg>
<status endtime="20170718 03:56:30.569" starttime="20170718 03:56:30.568" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170718 03:56:30.999" starttime="20170718 03:56:30.570" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:31.000">${rc} = 1</msg>
<msg level="INFO" timestamp="20170718 03:56:31.000">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170718 03:56:31.000" starttime="20170718 03:56:30.569" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:31.001">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170718 03:56:31.001" starttime="20170718 03:56:30.514" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:31.003" html="yes">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170718 03:56:31.003" starttime="20170718 03:56:31.002" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.004">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170718 03:56:31.004" starttime="20170718 03:56:31.004" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170718 03:56:31.004" starttime="20170718 03:56:31.004" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.008">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170718 03:56:31.012">${rc} = 0</msg>
<msg level="INFO" timestamp="20170718 03:56:31.012">${output} = /tmp/fspcibld/6791/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170718 03:56:31.012" starttime="20170718 03:56:31.005" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170718 03:56:31.015" starttime="20170718 03:56:31.014" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170718 03:56:31.016" starttime="20170718 03:56:31.015" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.016">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170718 03:56:31.016" starttime="20170718 03:56:31.016" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:31.017">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170718 03:56:31.017" starttime="20170718 03:56:31.003" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.017">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170718 03:56:31.017" starttime="20170718 03:56:31.017" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170718 03:56:31.018" starttime="20170718 03:56:31.018" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.021">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170718 03:56:31.024">${rc} = 0</msg>
<msg level="INFO" timestamp="20170718 03:56:31.024">${output} = </msg>
<status endtime="20170718 03:56:31.024" starttime="20170718 03:56:31.018" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170718 03:56:31.026" starttime="20170718 03:56:31.026" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:31.027" starttime="20170718 03:56:30.511" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:31.028">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.030">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170718 03:56:31.030" starttime="20170718 03:56:31.029" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.031">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170718 03:56:31.031" starttime="20170718 03:56:31.031" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:31.038">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:56:31.039" starttime="20170718 03:56:31.038" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:56:31.039" starttime="20170718 03:56:31.039" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.040">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:56:31.040" starttime="20170718 03:56:31.039" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.040">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:56:31.041" starttime="20170718 03:56:31.040" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:31.521">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:56:31.521" starttime="20170718 03:56:31.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:31.521">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:56:31.521">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:31.521" starttime="20170718 03:56:31.041" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:31.522">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:31.522" starttime="20170718 03:56:31.522" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:31.523">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:31.523" starttime="20170718 03:56:31.522" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:31.523" starttime="20170718 03:56:31.033" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:31.523" starttime="20170718 03:56:31.033" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:31.523" starttime="20170718 03:56:31.032" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.524">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170718 03:56:31.524" starttime="20170718 03:56:31.523" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.524">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:56:31.524" starttime="20170718 03:56:31.524" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170718 03:56:31.525" starttime="20170718 03:56:31.524" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:31.526">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170718 03:56:31.526" starttime="20170718 03:56:31.526" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:31.527">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170718 03:56:31.527" starttime="20170718 03:56:31.527" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:31.527" starttime="20170718 03:56:31.526" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:31.528" starttime="20170718 03:56:31.525" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:32.116">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170718 03:56:32.116">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:32.116" starttime="20170718 03:56:31.528" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:32.118">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:32.118" starttime="20170718 03:56:32.117" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:32.119">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:32.119" starttime="20170718 03:56:32.118" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:32.119" starttime="20170718 03:56:32.118" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:32.119" starttime="20170718 03:56:32.116" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:32.119">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:32.120" starttime="20170718 03:56:31.031" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:32.120">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:32.120" starttime="20170718 03:56:32.120" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:32.121">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:56:32.121">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:56:32.121">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170718 03:56:32.121" starttime="20170718 03:56:32.120" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:32.121" starttime="20170718 03:56:31.030" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170718 03:56:32.122" starttime="20170718 03:56:32.121" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:32.126">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:56:32.126" starttime="20170718 03:56:32.126" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:32.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:56:32.127" starttime="20170718 03:56:32.126" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:32.127">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:56:32.127" starttime="20170718 03:56:32.127" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:32.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:56:32.128" starttime="20170718 03:56:32.128" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:33.115">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:56:33.115" starttime="20170718 03:56:32.129" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:33.115">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:56:33.115">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:33.115" starttime="20170718 03:56:32.128" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:33.116">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:33.116" starttime="20170718 03:56:33.116" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:33.117">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:33.117" starttime="20170718 03:56:33.116" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:33.117" starttime="20170718 03:56:32.125" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:33.117" starttime="20170718 03:56:32.125" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:33.117" starttime="20170718 03:56:32.124" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:33.118">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:56:33.118" starttime="20170718 03:56:33.117" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:33.120">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:56:33.120" starttime="20170718 03:56:33.119" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:33.121">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:56:33.121" starttime="20170718 03:56:33.121" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:33.121" starttime="20170718 03:56:33.120" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:33.121" starttime="20170718 03:56:33.118" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:33.121" starttime="20170718 03:56:33.118" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:38.603">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:56:38.603">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:38.603" starttime="20170718 03:56:33.121" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:38.605">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:38.605" starttime="20170718 03:56:38.605" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:38.606">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:38.606" starttime="20170718 03:56:38.606" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:38.606" starttime="20170718 03:56:38.605" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:38.606" starttime="20170718 03:56:38.604" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:38.606" starttime="20170718 03:56:38.604" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:38.607">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:38.607" starttime="20170718 03:56:32.123" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:38.607">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:38.607" starttime="20170718 03:56:38.607" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:38.608">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:56:38.608">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:56:38.608">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:56:38.608" starttime="20170718 03:56:38.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:38.608">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:56:38.608" starttime="20170718 03:56:32.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:38.609">${host_state} = Running</msg>
<status endtime="20170718 03:56:38.609" starttime="20170718 03:56:32.123" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:38.609">Off != Running</msg>
<status endtime="20170718 03:56:38.609" starttime="20170718 03:56:38.609" status="FAIL"></status>
</kw>
<status endtime="20170718 03:56:38.610" starttime="20170718 03:56:32.122" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:48.616">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:56:48.617" starttime="20170718 03:56:48.616" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:48.618">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:56:48.618" starttime="20170718 03:56:48.617" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:48.618">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:56:48.618" starttime="20170718 03:56:48.618" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:48.619">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:56:48.619" starttime="20170718 03:56:48.618" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:48.840">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:56:48.840" starttime="20170718 03:56:48.620" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:48.840">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:56:48.841">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:48.841" starttime="20170718 03:56:48.619" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:48.841">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:48.841" starttime="20170718 03:56:48.841" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:48.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:48.842" starttime="20170718 03:56:48.842" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:48.842" starttime="20170718 03:56:48.614" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:48.842" starttime="20170718 03:56:48.614" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:48.842" starttime="20170718 03:56:48.613" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:48.843">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:56:48.843" starttime="20170718 03:56:48.843" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:48.845">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:56:48.845" starttime="20170718 03:56:48.844" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:48.846">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:56:48.846" starttime="20170718 03:56:48.846" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:48.846" starttime="20170718 03:56:48.845" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:48.846" starttime="20170718 03:56:48.844" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:48.846" starttime="20170718 03:56:48.843" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:48.919">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:56:48.919">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:48.920" starttime="20170718 03:56:48.846" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:48.921">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:48.921" starttime="20170718 03:56:48.921" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:48.922">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:48.923" starttime="20170718 03:56:48.922" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:48.923" starttime="20170718 03:56:48.921" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:48.923" starttime="20170718 03:56:48.920" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:48.923" starttime="20170718 03:56:48.920" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:48.923">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:48.923" starttime="20170718 03:56:48.612" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:48.924">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:48.924" starttime="20170718 03:56:48.923" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:48.924">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:56:48.924">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:56:48.925">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:56:48.925" starttime="20170718 03:56:48.924" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:48.925">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:56:48.925" starttime="20170718 03:56:48.611" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:48.925">${host_state} = Running</msg>
<status endtime="20170718 03:56:48.925" starttime="20170718 03:56:48.611" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:48.926">Off != Running</msg>
<status endtime="20170718 03:56:48.926" starttime="20170718 03:56:48.925" status="FAIL"></status>
</kw>
<status endtime="20170718 03:56:48.926" starttime="20170718 03:56:48.610" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:58.931">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:56:58.931" starttime="20170718 03:56:58.930" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:58.932">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:56:58.932" starttime="20170718 03:56:58.932" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:58.933">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:56:58.933" starttime="20170718 03:56:58.933" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:58.934">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:56:58.934" starttime="20170718 03:56:58.934" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:59.124">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:56:59.124" starttime="20170718 03:56:58.935" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:59.124">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:56:59.124">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:59.124" starttime="20170718 03:56:58.935" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:59.125">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:59.125" starttime="20170718 03:56:59.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:59.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:59.126" starttime="20170718 03:56:59.125" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:59.126" starttime="20170718 03:56:58.930" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:59.126" starttime="20170718 03:56:58.929" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:59.126" starttime="20170718 03:56:58.929" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:59.127">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:56:59.127" starttime="20170718 03:56:59.127" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:59.129">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:56:59.129" starttime="20170718 03:56:59.128" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:59.130">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:56:59.130" starttime="20170718 03:56:59.130" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:59.130" starttime="20170718 03:56:59.129" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:59.130" starttime="20170718 03:56:59.128" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:59.130" starttime="20170718 03:56:59.127" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:59.196">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:56:59.196">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:59.196" starttime="20170718 03:56:59.131" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:59.198">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:59.198" starttime="20170718 03:56:59.198" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:59.199">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:56:59.199" starttime="20170718 03:56:59.199" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:59.199" starttime="20170718 03:56:59.198" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:59.199" starttime="20170718 03:56:59.197" status="PASS"></status>
</kw>
<status endtime="20170718 03:56:59.199" starttime="20170718 03:56:59.197" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:59.200">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:56:59.200" starttime="20170718 03:56:58.928" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:56:59.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:56:59.200" starttime="20170718 03:56:59.200" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:56:59.201">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:56:59.201">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:56:59.201">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:56:59.201" starttime="20170718 03:56:59.201" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:59.201">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:56:59.201" starttime="20170718 03:56:58.928" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:56:59.202">${host_state} = Running</msg>
<status endtime="20170718 03:56:59.202" starttime="20170718 03:56:58.927" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:56:59.202">Off != Running</msg>
<status endtime="20170718 03:56:59.202" starttime="20170718 03:56:59.202" status="FAIL"></status>
</kw>
<status endtime="20170718 03:56:59.203" starttime="20170718 03:56:58.926" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:09.208">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:57:09.209" starttime="20170718 03:57:09.208" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:09.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:57:09.209" starttime="20170718 03:57:09.209" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:09.210">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:57:09.210" starttime="20170718 03:57:09.209" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:09.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:57:09.211" starttime="20170718 03:57:09.210" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:09.410">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:57:09.410" starttime="20170718 03:57:09.211" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:09.410">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:57:09.411">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:09.411" starttime="20170718 03:57:09.211" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:09.411">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:09.411" starttime="20170718 03:57:09.411" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:09.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:09.412" starttime="20170718 03:57:09.412" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:09.412" starttime="20170718 03:57:09.206" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:09.412" starttime="20170718 03:57:09.206" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:09.412" starttime="20170718 03:57:09.205" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:09.413">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:57:09.413" starttime="20170718 03:57:09.413" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:09.415">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:09.415" starttime="20170718 03:57:09.414" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:09.416">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:09.416" starttime="20170718 03:57:09.416" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:09.416" starttime="20170718 03:57:09.415" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:09.416" starttime="20170718 03:57:09.414" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:09.416" starttime="20170718 03:57:09.413" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:09.484">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:57:09.484">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:09.484" starttime="20170718 03:57:09.417" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:09.486">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:09.486" starttime="20170718 03:57:09.485" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:09.487">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:09.487" starttime="20170718 03:57:09.486" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:09.487" starttime="20170718 03:57:09.486" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:09.487" starttime="20170718 03:57:09.485" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:09.487" starttime="20170718 03:57:09.484" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:09.488">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:09.488" starttime="20170718 03:57:09.205" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:09.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:09.488" starttime="20170718 03:57:09.488" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:09.489">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:57:09.489">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:57:09.489">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:57:09.489" starttime="20170718 03:57:09.489" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:09.489">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:57:09.490" starttime="20170718 03:57:09.204" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:09.490">${host_state} = Running</msg>
<status endtime="20170718 03:57:09.490" starttime="20170718 03:57:09.204" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:57:09.490">Off != Running</msg>
<status endtime="20170718 03:57:09.491" starttime="20170718 03:57:09.490" status="FAIL"></status>
</kw>
<status endtime="20170718 03:57:09.491" starttime="20170718 03:57:09.203" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:19.495">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:57:19.496" starttime="20170718 03:57:19.495" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:19.496">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:57:19.496" starttime="20170718 03:57:19.496" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:19.497">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:57:19.497" starttime="20170718 03:57:19.496" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:19.497">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:57:19.497" starttime="20170718 03:57:19.497" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:19.747">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:57:19.748" starttime="20170718 03:57:19.498" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:19.748">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:57:19.748">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:19.748" starttime="20170718 03:57:19.498" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:19.748">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:19.749" starttime="20170718 03:57:19.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:19.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:19.750" starttime="20170718 03:57:19.749" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:19.750" starttime="20170718 03:57:19.494" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:19.750" starttime="20170718 03:57:19.494" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:19.750" starttime="20170718 03:57:19.493" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:19.751">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:57:19.751" starttime="20170718 03:57:19.750" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:19.753">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:19.753" starttime="20170718 03:57:19.752" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:19.754">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:19.754" starttime="20170718 03:57:19.753" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:19.754" starttime="20170718 03:57:19.753" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:19.754" starttime="20170718 03:57:19.751" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:19.754" starttime="20170718 03:57:19.751" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:19.819">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:57:19.820">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:19.820" starttime="20170718 03:57:19.754" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:19.821">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:19.821" starttime="20170718 03:57:19.821" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:19.822">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:19.823" starttime="20170718 03:57:19.822" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:19.823" starttime="20170718 03:57:19.822" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:19.823" starttime="20170718 03:57:19.820" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:19.823" starttime="20170718 03:57:19.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:19.823">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:19.823" starttime="20170718 03:57:19.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:19.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:19.824" starttime="20170718 03:57:19.823" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:19.824">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:57:19.824">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:57:19.824">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:57:19.824" starttime="20170718 03:57:19.824" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:19.825">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:57:19.825" starttime="20170718 03:57:19.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:19.825">${host_state} = Running</msg>
<status endtime="20170718 03:57:19.825" starttime="20170718 03:57:19.492" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:57:19.826">Off != Running</msg>
<status endtime="20170718 03:57:19.826" starttime="20170718 03:57:19.825" status="FAIL"></status>
</kw>
<status endtime="20170718 03:57:19.826" starttime="20170718 03:57:19.491" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:29.831">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:57:29.831" starttime="20170718 03:57:29.831" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:29.832">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:57:29.832" starttime="20170718 03:57:29.832" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:29.833">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:57:29.833" starttime="20170718 03:57:29.832" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:29.833">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:57:29.833" starttime="20170718 03:57:29.833" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:30.016">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:57:30.016" starttime="20170718 03:57:29.834" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:30.016">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:57:30.016">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:30.016" starttime="20170718 03:57:29.834" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:30.017">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:30.017" starttime="20170718 03:57:30.017" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:30.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:30.018" starttime="20170718 03:57:30.017" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:30.018" starttime="20170718 03:57:29.830" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:30.018" starttime="20170718 03:57:29.829" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:30.018" starttime="20170718 03:57:29.829" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:30.019">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:57:30.019" starttime="20170718 03:57:30.018" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:30.021">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:30.021" starttime="20170718 03:57:30.020" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:30.022">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:30.022" starttime="20170718 03:57:30.022" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:30.022" starttime="20170718 03:57:30.021" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:30.022" starttime="20170718 03:57:30.019" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:30.022" starttime="20170718 03:57:30.019" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:30.097">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:57:30.097">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:30.097" starttime="20170718 03:57:30.022" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:30.099">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:30.099" starttime="20170718 03:57:30.099" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:30.100">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:30.101" starttime="20170718 03:57:30.100" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:30.101" starttime="20170718 03:57:30.099" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:30.101" starttime="20170718 03:57:30.098" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:30.101" starttime="20170718 03:57:30.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:30.101">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:30.101" starttime="20170718 03:57:29.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:30.102">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:30.102" starttime="20170718 03:57:30.101" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:30.102">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:57:30.102">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:57:30.102">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:57:30.102" starttime="20170718 03:57:30.102" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:30.103">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:57:30.103" starttime="20170718 03:57:29.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:30.103">${host_state} = Running</msg>
<status endtime="20170718 03:57:30.103" starttime="20170718 03:57:29.827" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:57:30.104">Off != Running</msg>
<status endtime="20170718 03:57:30.104" starttime="20170718 03:57:30.103" status="FAIL"></status>
</kw>
<status endtime="20170718 03:57:30.104" starttime="20170718 03:57:29.826" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:40.109">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:57:40.109" starttime="20170718 03:57:40.108" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:40.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:57:40.110" starttime="20170718 03:57:40.109" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:40.110">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:57:40.110" starttime="20170718 03:57:40.110" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:40.111">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:57:40.111" starttime="20170718 03:57:40.111" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:40.301">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:57:40.301" starttime="20170718 03:57:40.112" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:40.302">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:57:40.302">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:40.302" starttime="20170718 03:57:40.111" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:40.302">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:40.302" starttime="20170718 03:57:40.302" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:40.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:40.303" starttime="20170718 03:57:40.303" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:40.304" starttime="20170718 03:57:40.108" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:40.304" starttime="20170718 03:57:40.107" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:40.304" starttime="20170718 03:57:40.107" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:40.304">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:57:40.304" starttime="20170718 03:57:40.304" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:40.306">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:40.306" starttime="20170718 03:57:40.306" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:40.307">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:40.307" starttime="20170718 03:57:40.307" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:40.308" starttime="20170718 03:57:40.307" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:40.308" starttime="20170718 03:57:40.305" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:40.308" starttime="20170718 03:57:40.305" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:40.396">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:57:40.396">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:40.396" starttime="20170718 03:57:40.308" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:40.398">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:40.398" starttime="20170718 03:57:40.397" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:40.399">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:40.399" starttime="20170718 03:57:40.399" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:40.399" starttime="20170718 03:57:40.398" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:40.399" starttime="20170718 03:57:40.397" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:40.399" starttime="20170718 03:57:40.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:40.399">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:40.399" starttime="20170718 03:57:40.106" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:40.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:40.400" starttime="20170718 03:57:40.400" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:40.401">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:57:40.401">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:57:40.401">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:57:40.401" starttime="20170718 03:57:40.400" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:40.401">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:57:40.401" starttime="20170718 03:57:40.105" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:40.401">${host_state} = Running</msg>
<status endtime="20170718 03:57:40.401" starttime="20170718 03:57:40.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:57:40.402">Off != Running</msg>
<status endtime="20170718 03:57:40.402" starttime="20170718 03:57:40.402" status="FAIL"></status>
</kw>
<status endtime="20170718 03:57:40.402" starttime="20170718 03:57:40.104" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:50.409">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:57:50.409" starttime="20170718 03:57:50.409" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:50.410">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:57:50.410" starttime="20170718 03:57:50.410" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:50.411">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:57:50.411" starttime="20170718 03:57:50.410" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:50.411">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:57:50.411" starttime="20170718 03:57:50.411" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:50.624">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:57:50.624" starttime="20170718 03:57:50.412" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:50.624">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:57:50.624">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:50.624" starttime="20170718 03:57:50.412" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:50.625">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:50.625" starttime="20170718 03:57:50.625" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:50.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:50.626" starttime="20170718 03:57:50.625" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:50.626" starttime="20170718 03:57:50.406" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:50.626" starttime="20170718 03:57:50.406" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:50.626" starttime="20170718 03:57:50.405" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:50.627">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:57:50.627" starttime="20170718 03:57:50.626" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:50.629">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:50.629" starttime="20170718 03:57:50.628" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:50.629">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:57:50.630" starttime="20170718 03:57:50.629" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:50.630" starttime="20170718 03:57:50.629" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:50.630" starttime="20170718 03:57:50.627" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:50.630" starttime="20170718 03:57:50.627" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:50.695">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:57:50.696">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:50.696" starttime="20170718 03:57:50.630" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:50.697">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:50.697" starttime="20170718 03:57:50.697" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:50.698">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:57:50.699" starttime="20170718 03:57:50.698" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:50.699" starttime="20170718 03:57:50.698" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:50.699" starttime="20170718 03:57:50.696" status="PASS"></status>
</kw>
<status endtime="20170718 03:57:50.699" starttime="20170718 03:57:50.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:50.699">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:57:50.699" starttime="20170718 03:57:50.404" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:57:50.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:57:50.700" starttime="20170718 03:57:50.699" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:57:50.700">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:57:50.700">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:57:50.700">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:57:50.701" starttime="20170718 03:57:50.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:50.701">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:57:50.701" starttime="20170718 03:57:50.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:57:50.701">${host_state} = Running</msg>
<status endtime="20170718 03:57:50.701" starttime="20170718 03:57:50.403" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:57:50.702">Off != Running</msg>
<status endtime="20170718 03:57:50.702" starttime="20170718 03:57:50.701" status="FAIL"></status>
</kw>
<status endtime="20170718 03:57:50.702" starttime="20170718 03:57:50.403" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:00.707">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:58:00.707" starttime="20170718 03:58:00.707" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:00.708">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:58:00.708" starttime="20170718 03:58:00.708" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:00.709">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:58:00.709" starttime="20170718 03:58:00.708" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:00.709">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:58:00.709" starttime="20170718 03:58:00.709" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:00.903">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:58:00.903" starttime="20170718 03:58:00.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:00.903">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:58:00.903">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:00.903" starttime="20170718 03:58:00.710" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:00.904">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:00.904" starttime="20170718 03:58:00.903" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:00.905">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:00.905" starttime="20170718 03:58:00.904" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:00.905" starttime="20170718 03:58:00.706" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:00.905" starttime="20170718 03:58:00.706" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:00.905" starttime="20170718 03:58:00.705" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:00.905">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:58:00.906" starttime="20170718 03:58:00.905" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:00.908">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:00.908" starttime="20170718 03:58:00.907" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:00.909">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:00.909" starttime="20170718 03:58:00.909" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:00.909" starttime="20170718 03:58:00.908" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:00.909" starttime="20170718 03:58:00.906" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:00.909" starttime="20170718 03:58:00.906" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:00.975">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:58:00.975">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:00.975" starttime="20170718 03:58:00.910" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:00.977">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:00.977" starttime="20170718 03:58:00.976" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:00.978">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:00.978" starttime="20170718 03:58:00.978" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:00.978" starttime="20170718 03:58:00.977" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:00.978" starttime="20170718 03:58:00.976" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:00.979" starttime="20170718 03:58:00.975" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:00.979">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:00.979" starttime="20170718 03:58:00.704" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:00.979">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:00.979" starttime="20170718 03:58:00.979" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:00.980">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:58:00.980">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:58:00.980">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:58:00.980" starttime="20170718 03:58:00.980" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:00.980">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:58:00.980" starttime="20170718 03:58:00.704" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:00.981">${host_state} = Running</msg>
<status endtime="20170718 03:58:00.981" starttime="20170718 03:58:00.703" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:58:00.983">Off != Running</msg>
<status endtime="20170718 03:58:00.983" starttime="20170718 03:58:00.983" status="FAIL"></status>
</kw>
<status endtime="20170718 03:58:00.984" starttime="20170718 03:58:00.702" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:10.988">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:58:10.989" starttime="20170718 03:58:10.988" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:10.990">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:58:10.990" starttime="20170718 03:58:10.989" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:10.990">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:58:10.990" starttime="20170718 03:58:10.990" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:10.991">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:58:10.991" starttime="20170718 03:58:10.990" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:11.204">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:58:11.204" starttime="20170718 03:58:10.992" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:11.205">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:58:11.205">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:11.205" starttime="20170718 03:58:10.991" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:11.205">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:11.205" starttime="20170718 03:58:11.205" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:11.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:11.206" starttime="20170718 03:58:11.206" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:11.206" starttime="20170718 03:58:10.987" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:11.206" starttime="20170718 03:58:10.987" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:11.206" starttime="20170718 03:58:10.986" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:11.207">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:58:11.207" starttime="20170718 03:58:11.207" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:11.209">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:11.209" starttime="20170718 03:58:11.208" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:11.210">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:11.210" starttime="20170718 03:58:11.210" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:11.210" starttime="20170718 03:58:11.209" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:11.210" starttime="20170718 03:58:11.208" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:11.210" starttime="20170718 03:58:11.207" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:11.347">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:58:11.347">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:11.347" starttime="20170718 03:58:11.211" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:11.349">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:11.349" starttime="20170718 03:58:11.348" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:11.350">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:11.350" starttime="20170718 03:58:11.349" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:11.350" starttime="20170718 03:58:11.349" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:11.350" starttime="20170718 03:58:11.348" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:11.350" starttime="20170718 03:58:11.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:11.350">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:11.350" starttime="20170718 03:58:10.986" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:11.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:11.351" starttime="20170718 03:58:11.350" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:11.351">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:58:11.351">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:58:11.352">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:58:11.352" starttime="20170718 03:58:11.351" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:11.352">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:58:11.352" starttime="20170718 03:58:10.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:11.352">${host_state} = Running</msg>
<status endtime="20170718 03:58:11.352" starttime="20170718 03:58:10.985" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:58:11.353">Off != Running</msg>
<status endtime="20170718 03:58:11.353" starttime="20170718 03:58:11.352" status="FAIL"></status>
</kw>
<status endtime="20170718 03:58:11.353" starttime="20170718 03:58:10.984" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:21.358">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:58:21.358" starttime="20170718 03:58:21.358" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:21.359">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:58:21.359" starttime="20170718 03:58:21.359" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:21.360">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:58:21.360" starttime="20170718 03:58:21.359" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:21.360">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:58:21.360" starttime="20170718 03:58:21.360" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:21.542">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:58:21.542" starttime="20170718 03:58:21.361" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:21.543">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:58:21.543">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:21.543" starttime="20170718 03:58:21.361" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:21.543">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:21.543" starttime="20170718 03:58:21.543" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:21.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:21.544" starttime="20170718 03:58:21.544" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:21.544" starttime="20170718 03:58:21.357" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:21.544" starttime="20170718 03:58:21.357" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:21.544" starttime="20170718 03:58:21.356" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:21.545">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:58:21.545" starttime="20170718 03:58:21.545" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:21.547">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:21.547" starttime="20170718 03:58:21.547" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:21.548">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:21.548" starttime="20170718 03:58:21.548" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:21.548" starttime="20170718 03:58:21.547" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:21.549" starttime="20170718 03:58:21.546" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:21.549" starttime="20170718 03:58:21.545" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:21.617">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:58:21.617">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:21.617" starttime="20170718 03:58:21.549" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:21.619">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:21.619" starttime="20170718 03:58:21.619" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:21.620">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:21.620" starttime="20170718 03:58:21.620" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:21.620" starttime="20170718 03:58:21.619" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:21.620" starttime="20170718 03:58:21.618" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:21.620" starttime="20170718 03:58:21.618" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:21.621">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:21.621" starttime="20170718 03:58:21.356" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:21.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:21.621" starttime="20170718 03:58:21.621" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:21.622">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:58:21.622">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:58:21.622">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:58:21.622" starttime="20170718 03:58:21.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:21.622">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:58:21.622" starttime="20170718 03:58:21.355" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:21.623">${host_state} = Running</msg>
<status endtime="20170718 03:58:21.623" starttime="20170718 03:58:21.354" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:58:21.623">Off != Running</msg>
<status endtime="20170718 03:58:21.623" starttime="20170718 03:58:21.623" status="FAIL"></status>
</kw>
<status endtime="20170718 03:58:21.624" starttime="20170718 03:58:21.354" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:31.628">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:58:31.629" starttime="20170718 03:58:31.628" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:31.629">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:58:31.629" starttime="20170718 03:58:31.629" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:31.630">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:58:31.630" starttime="20170718 03:58:31.630" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:31.631">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:58:31.631" starttime="20170718 03:58:31.631" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:31.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:58:31.812" starttime="20170718 03:58:31.632" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:31.813">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:58:31.813">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:31.813" starttime="20170718 03:58:31.631" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:31.813">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:31.813" starttime="20170718 03:58:31.813" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:31.814">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:31.814" starttime="20170718 03:58:31.814" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:31.814" starttime="20170718 03:58:31.628" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:31.814" starttime="20170718 03:58:31.627" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:31.814" starttime="20170718 03:58:31.626" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:31.815">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:58:31.815" starttime="20170718 03:58:31.815" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:31.817">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:31.817" starttime="20170718 03:58:31.816" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:31.818">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:31.818" starttime="20170718 03:58:31.818" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:31.818" starttime="20170718 03:58:31.817" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:31.818" starttime="20170718 03:58:31.816" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:31.818" starttime="20170718 03:58:31.815" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:31.884">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:58:31.884">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:31.884" starttime="20170718 03:58:31.819" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:31.886">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:31.886" starttime="20170718 03:58:31.886" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:31.887">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:31.887" starttime="20170718 03:58:31.887" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:31.887" starttime="20170718 03:58:31.886" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:31.887" starttime="20170718 03:58:31.885" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:31.887" starttime="20170718 03:58:31.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:31.888">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:31.888" starttime="20170718 03:58:31.626" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:31.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:31.888" starttime="20170718 03:58:31.888" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:31.889">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:58:31.889">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:58:31.889">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:58:31.889" starttime="20170718 03:58:31.889" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:31.889">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:58:31.889" starttime="20170718 03:58:31.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:31.890">${host_state} = Running</msg>
<status endtime="20170718 03:58:31.890" starttime="20170718 03:58:31.625" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:58:31.890">Off != Running</msg>
<status endtime="20170718 03:58:31.890" starttime="20170718 03:58:31.890" status="FAIL"></status>
</kw>
<status endtime="20170718 03:58:31.890" starttime="20170718 03:58:31.624" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:41.895">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:58:41.896" starttime="20170718 03:58:41.895" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:41.896">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:58:41.896" starttime="20170718 03:58:41.896" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:41.897">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:58:41.897" starttime="20170718 03:58:41.897" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:41.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:58:41.898" starttime="20170718 03:58:41.897" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:42.083">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:58:42.083" starttime="20170718 03:58:41.898" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:42.083">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:58:42.084">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:42.084" starttime="20170718 03:58:41.898" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:42.084">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:42.084" starttime="20170718 03:58:42.084" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:42.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:42.085" starttime="20170718 03:58:42.085" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:42.085" starttime="20170718 03:58:41.894" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:42.085" starttime="20170718 03:58:41.894" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:42.085" starttime="20170718 03:58:41.893" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:42.086">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:58:42.086" starttime="20170718 03:58:42.086" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:42.088">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:42.088" starttime="20170718 03:58:42.087" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:42.089">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:42.089" starttime="20170718 03:58:42.089" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:42.089" starttime="20170718 03:58:42.088" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:42.089" starttime="20170718 03:58:42.087" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:42.089" starttime="20170718 03:58:42.086" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:42.155">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:58:42.155">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:42.155" starttime="20170718 03:58:42.089" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:42.157">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:42.157" starttime="20170718 03:58:42.156" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:42.158">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:42.158" starttime="20170718 03:58:42.158" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:42.158" starttime="20170718 03:58:42.157" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:42.159" starttime="20170718 03:58:42.156" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:42.159" starttime="20170718 03:58:42.155" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:42.159">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:42.159" starttime="20170718 03:58:41.892" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:42.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:42.160" starttime="20170718 03:58:42.159" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:42.160">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:58:42.160">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:58:42.160">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:58:42.160" starttime="20170718 03:58:42.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:42.161">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:58:42.161" starttime="20170718 03:58:41.892" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:42.161">${host_state} = Running</msg>
<status endtime="20170718 03:58:42.161" starttime="20170718 03:58:41.891" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:58:42.162">Off != Running</msg>
<status endtime="20170718 03:58:42.162" starttime="20170718 03:58:42.161" status="FAIL"></status>
</kw>
<status endtime="20170718 03:58:42.162" starttime="20170718 03:58:41.891" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:52.167">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:58:52.167" starttime="20170718 03:58:52.166" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:52.168">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:58:52.168" starttime="20170718 03:58:52.167" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:52.168">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:58:52.168" starttime="20170718 03:58:52.168" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:52.169">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:58:52.169" starttime="20170718 03:58:52.169" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:52.366">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:58:52.366" starttime="20170718 03:58:52.170" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:52.366">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:58:52.366">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:52.366" starttime="20170718 03:58:52.169" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:52.367">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:52.367" starttime="20170718 03:58:52.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:52.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:52.368" starttime="20170718 03:58:52.367" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:52.368" starttime="20170718 03:58:52.166" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:52.368" starttime="20170718 03:58:52.165" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:52.368" starttime="20170718 03:58:52.165" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:52.369">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:58:52.369" starttime="20170718 03:58:52.368" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:52.371">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:52.371" starttime="20170718 03:58:52.371" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:52.372">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:58:52.372" starttime="20170718 03:58:52.372" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:52.373" starttime="20170718 03:58:52.371" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:52.373" starttime="20170718 03:58:52.370" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:52.373" starttime="20170718 03:58:52.369" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:52.456">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:58:52.457">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:52.457" starttime="20170718 03:58:52.373" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:52.458">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:52.458" starttime="20170718 03:58:52.458" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:52.459">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:58:52.459" starttime="20170718 03:58:52.459" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:52.460" starttime="20170718 03:58:52.458" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:52.460" starttime="20170718 03:58:52.457" status="PASS"></status>
</kw>
<status endtime="20170718 03:58:52.460" starttime="20170718 03:58:52.457" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:52.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:58:52.460" starttime="20170718 03:58:52.164" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:58:52.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:58:52.461" starttime="20170718 03:58:52.460" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:58:52.461">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:58:52.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:58:52.461">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:58:52.461" starttime="20170718 03:58:52.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:52.462">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:58:52.462" starttime="20170718 03:58:52.163" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:58:52.462">${host_state} = Running</msg>
<status endtime="20170718 03:58:52.462" starttime="20170718 03:58:52.163" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:58:52.463">Off != Running</msg>
<status endtime="20170718 03:58:52.463" starttime="20170718 03:58:52.462" status="FAIL"></status>
</kw>
<status endtime="20170718 03:58:52.463" starttime="20170718 03:58:52.162" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:02.468">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:59:02.469" starttime="20170718 03:59:02.467" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:02.469">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:59:02.469" starttime="20170718 03:59:02.469" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:02.470">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:59:02.470" starttime="20170718 03:59:02.469" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:02.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:59:02.471" starttime="20170718 03:59:02.470" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:02.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:59:02.693" starttime="20170718 03:59:02.471" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:02.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:59:02.694">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:02.694" starttime="20170718 03:59:02.471" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:02.694">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:02.694" starttime="20170718 03:59:02.694" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:02.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:02.695" starttime="20170718 03:59:02.695" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:02.695" starttime="20170718 03:59:02.467" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:02.695" starttime="20170718 03:59:02.466" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:02.695" starttime="20170718 03:59:02.466" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:02.696">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:59:02.696" starttime="20170718 03:59:02.696" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:02.698">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:02.698" starttime="20170718 03:59:02.697" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:02.699">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:02.699" starttime="20170718 03:59:02.699" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:02.699" starttime="20170718 03:59:02.698" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:02.699" starttime="20170718 03:59:02.697" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:02.699" starttime="20170718 03:59:02.696" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:02.767">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:59:02.768">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:02.768" starttime="20170718 03:59:02.700" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:02.769">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:02.769" starttime="20170718 03:59:02.769" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:02.770">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:02.770" starttime="20170718 03:59:02.770" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:02.771" starttime="20170718 03:59:02.770" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:02.771" starttime="20170718 03:59:02.768" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:02.771" starttime="20170718 03:59:02.768" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:02.771">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:02.771" starttime="20170718 03:59:02.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:02.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:02.772" starttime="20170718 03:59:02.771" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:02.772">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:59:02.772">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:59:02.772">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:59:02.772" starttime="20170718 03:59:02.772" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:02.773">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:59:02.773" starttime="20170718 03:59:02.464" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:02.773">${host_state} = Running</msg>
<status endtime="20170718 03:59:02.773" starttime="20170718 03:59:02.464" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:59:02.774">Off != Running</msg>
<status endtime="20170718 03:59:02.774" starttime="20170718 03:59:02.773" status="FAIL"></status>
</kw>
<status endtime="20170718 03:59:02.774" starttime="20170718 03:59:02.463" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:12.781">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:59:12.782" starttime="20170718 03:59:12.781" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:12.783">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:59:12.783" starttime="20170718 03:59:12.782" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:12.784">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:59:12.784" starttime="20170718 03:59:12.783" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:12.785">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:59:12.785" starttime="20170718 03:59:12.784" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:12.974">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:59:12.974" starttime="20170718 03:59:12.786" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:12.974">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:59:12.974">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:12.974" starttime="20170718 03:59:12.785" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:12.975">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:12.975" starttime="20170718 03:59:12.974" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:12.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:12.976" starttime="20170718 03:59:12.975" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:12.976" starttime="20170718 03:59:12.780" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:12.976" starttime="20170718 03:59:12.779" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:12.976" starttime="20170718 03:59:12.779" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:12.976">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:59:12.976" starttime="20170718 03:59:12.976" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:12.979">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:12.979" starttime="20170718 03:59:12.978" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:12.979">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:12.980" starttime="20170718 03:59:12.979" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:12.980" starttime="20170718 03:59:12.979" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:12.980" starttime="20170718 03:59:12.977" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:12.980" starttime="20170718 03:59:12.977" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:13.079">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:59:13.079">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:13.079" starttime="20170718 03:59:12.980" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:13.081">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:13.081" starttime="20170718 03:59:13.080" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:13.082">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:13.082" starttime="20170718 03:59:13.082" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:13.082" starttime="20170718 03:59:13.081" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:13.082" starttime="20170718 03:59:13.080" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:13.082" starttime="20170718 03:59:13.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:13.082">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:13.083" starttime="20170718 03:59:12.778" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:13.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:13.083" starttime="20170718 03:59:13.083" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:13.084">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:59:13.084">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:59:13.084">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:59:13.084" starttime="20170718 03:59:13.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:13.084">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:59:13.084" starttime="20170718 03:59:12.776" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:13.084">${host_state} = Running</msg>
<status endtime="20170718 03:59:13.085" starttime="20170718 03:59:12.776" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:59:13.085">Off != Running</msg>
<status endtime="20170718 03:59:13.085" starttime="20170718 03:59:13.085" status="FAIL"></status>
</kw>
<status endtime="20170718 03:59:13.085" starttime="20170718 03:59:12.775" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:23.090">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:59:23.091" starttime="20170718 03:59:23.090" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:23.091">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:59:23.091" starttime="20170718 03:59:23.091" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:23.092">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:59:23.092" starttime="20170718 03:59:23.092" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:23.093">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:59:23.093" starttime="20170718 03:59:23.092" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:23.372">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:59:23.372" starttime="20170718 03:59:23.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:23.372">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:59:23.372">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:23.372" starttime="20170718 03:59:23.093" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:23.373">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:23.373" starttime="20170718 03:59:23.373" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:23.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:23.374" starttime="20170718 03:59:23.374" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:23.374" starttime="20170718 03:59:23.089" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:23.374" starttime="20170718 03:59:23.089" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:23.375" starttime="20170718 03:59:23.088" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:23.375">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:59:23.375" starttime="20170718 03:59:23.375" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:23.377">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:23.377" starttime="20170718 03:59:23.377" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:23.378">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:23.378" starttime="20170718 03:59:23.378" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:23.378" starttime="20170718 03:59:23.377" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:23.378" starttime="20170718 03:59:23.376" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:23.379" starttime="20170718 03:59:23.375" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:23.444">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:59:23.445">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:23.445" starttime="20170718 03:59:23.379" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:23.446">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:23.446" starttime="20170718 03:59:23.446" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:23.447">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:23.447" starttime="20170718 03:59:23.447" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:23.447" starttime="20170718 03:59:23.447" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:23.448" starttime="20170718 03:59:23.445" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:23.448" starttime="20170718 03:59:23.445" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:23.448">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:23.448" starttime="20170718 03:59:23.088" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:23.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:23.449" starttime="20170718 03:59:23.448" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:23.449">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:59:23.449">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:59:23.449">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:59:23.449" starttime="20170718 03:59:23.449" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:23.450">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:59:23.450" starttime="20170718 03:59:23.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:23.450">${host_state} = Running</msg>
<status endtime="20170718 03:59:23.450" starttime="20170718 03:59:23.087" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:59:23.451">Off != Running</msg>
<status endtime="20170718 03:59:23.451" starttime="20170718 03:59:23.450" status="FAIL"></status>
</kw>
<status endtime="20170718 03:59:23.451" starttime="20170718 03:59:23.086" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:33.456">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:59:33.456" starttime="20170718 03:59:33.455" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:33.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:59:33.457" starttime="20170718 03:59:33.456" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:33.457">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:59:33.457" starttime="20170718 03:59:33.457" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:33.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:59:33.458" starttime="20170718 03:59:33.458" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:33.641">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:59:33.641" starttime="20170718 03:59:33.459" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:33.641">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:59:33.641">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:33.641" starttime="20170718 03:59:33.458" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:33.642">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:33.642" starttime="20170718 03:59:33.642" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:33.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:33.643" starttime="20170718 03:59:33.642" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:33.643" starttime="20170718 03:59:33.454" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:33.643" starttime="20170718 03:59:33.454" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:33.643" starttime="20170718 03:59:33.453" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:33.644">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:59:33.644" starttime="20170718 03:59:33.643" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:33.646">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:33.646" starttime="20170718 03:59:33.645" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:33.647">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:33.647" starttime="20170718 03:59:33.647" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:33.647" starttime="20170718 03:59:33.646" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:33.647" starttime="20170718 03:59:33.644" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:33.647" starttime="20170718 03:59:33.644" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:33.715">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:59:33.715">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:33.715" starttime="20170718 03:59:33.647" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:33.717">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:33.717" starttime="20170718 03:59:33.717" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:33.719">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:33.720" starttime="20170718 03:59:33.718" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:33.720" starttime="20170718 03:59:33.718" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:33.720" starttime="20170718 03:59:33.716" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:33.720" starttime="20170718 03:59:33.715" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:33.720">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:33.720" starttime="20170718 03:59:33.453" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:33.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:33.721" starttime="20170718 03:59:33.720" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:33.721">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:59:33.721">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:59:33.721">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:59:33.721" starttime="20170718 03:59:33.721" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:33.722">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:59:33.722" starttime="20170718 03:59:33.452" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:33.722">${host_state} = Running</msg>
<status endtime="20170718 03:59:33.722" starttime="20170718 03:59:33.452" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:59:33.723">Off != Running</msg>
<status endtime="20170718 03:59:33.723" starttime="20170718 03:59:33.722" status="FAIL"></status>
</kw>
<status endtime="20170718 03:59:33.723" starttime="20170718 03:59:33.451" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:43.727">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:59:43.728" starttime="20170718 03:59:43.727" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:43.728">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:59:43.728" starttime="20170718 03:59:43.728" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:43.729">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:59:43.729" starttime="20170718 03:59:43.729" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:43.730">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:59:43.730" starttime="20170718 03:59:43.729" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:43.910">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:59:43.910" starttime="20170718 03:59:43.730" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:43.910">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:59:43.910">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:43.910" starttime="20170718 03:59:43.730" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:43.911">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:43.911" starttime="20170718 03:59:43.911" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:43.912">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:43.912" starttime="20170718 03:59:43.911" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:43.912" starttime="20170718 03:59:43.727" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:43.912" starttime="20170718 03:59:43.726" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:43.912" starttime="20170718 03:59:43.726" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:43.913">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:59:43.913" starttime="20170718 03:59:43.912" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:43.915">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:43.915" starttime="20170718 03:59:43.914" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:43.916">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:43.916" starttime="20170718 03:59:43.916" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:43.916" starttime="20170718 03:59:43.915" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:43.916" starttime="20170718 03:59:43.913" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:43.916" starttime="20170718 03:59:43.913" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:43.982">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:59:43.982">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:43.982" starttime="20170718 03:59:43.917" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:43.984">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:43.984" starttime="20170718 03:59:43.984" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:43.985">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:43.985" starttime="20170718 03:59:43.985" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:43.985" starttime="20170718 03:59:43.984" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:43.985" starttime="20170718 03:59:43.983" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:43.986" starttime="20170718 03:59:43.983" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:43.986">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:43.986" starttime="20170718 03:59:43.725" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:43.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:43.986" starttime="20170718 03:59:43.986" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:43.987">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:59:43.987">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:59:43.987">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:59:43.987" starttime="20170718 03:59:43.987" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:43.987">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:59:43.988" starttime="20170718 03:59:43.724" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:43.988">${host_state} = Running</msg>
<status endtime="20170718 03:59:43.988" starttime="20170718 03:59:43.724" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:59:43.988">Off != Running</msg>
<status endtime="20170718 03:59:43.989" starttime="20170718 03:59:43.988" status="FAIL"></status>
</kw>
<status endtime="20170718 03:59:43.989" starttime="20170718 03:59:43.723" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:53.993">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 03:59:53.994" starttime="20170718 03:59:53.993" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:53.995">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 03:59:53.995" starttime="20170718 03:59:53.994" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:53.995">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 03:59:53.995" starttime="20170718 03:59:53.995" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:53.996">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 03:59:53.996" starttime="20170718 03:59:53.996" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:54.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 03:59:54.178" starttime="20170718 03:59:53.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:54.178">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 03:59:54.178">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:54.178" starttime="20170718 03:59:53.996" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:54.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:54.179" starttime="20170718 03:59:54.179" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:54.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:54.180" starttime="20170718 03:59:54.179" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:54.180" starttime="20170718 03:59:53.992" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:54.180" starttime="20170718 03:59:53.992" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:54.180" starttime="20170718 03:59:53.991" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:54.181">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 03:59:54.181" starttime="20170718 03:59:54.180" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:54.183">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:54.183" starttime="20170718 03:59:54.182" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:54.184">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 03:59:54.184" starttime="20170718 03:59:54.184" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:54.184" starttime="20170718 03:59:54.183" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:54.184" starttime="20170718 03:59:54.181" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:54.184" starttime="20170718 03:59:54.181" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:54.251">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 03:59:54.251">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:54.251" starttime="20170718 03:59:54.185" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:54.253">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:54.253" starttime="20170718 03:59:54.252" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:54.253">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 03:59:54.254" starttime="20170718 03:59:54.253" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:54.254" starttime="20170718 03:59:54.253" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:54.254" starttime="20170718 03:59:54.251" status="PASS"></status>
</kw>
<status endtime="20170718 03:59:54.254" starttime="20170718 03:59:54.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:54.254">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 03:59:54.254" starttime="20170718 03:59:53.991" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 03:59:54.255">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 03:59:54.255" starttime="20170718 03:59:54.254" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 03:59:54.255">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 03:59:54.255">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 03:59:54.255">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 03:59:54.255" starttime="20170718 03:59:54.255" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:54.256">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 03:59:54.256" starttime="20170718 03:59:53.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 03:59:54.256">${host_state} = Running</msg>
<status endtime="20170718 03:59:54.256" starttime="20170718 03:59:53.990" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 03:59:54.257">Off != Running</msg>
<status endtime="20170718 03:59:54.257" starttime="20170718 03:59:54.256" status="FAIL"></status>
</kw>
<status endtime="20170718 03:59:54.257" starttime="20170718 03:59:53.989" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:04.263">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:00:04.263" starttime="20170718 04:00:04.262" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:04.264">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:00:04.264" starttime="20170718 04:00:04.263" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:04.265">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:00:04.265" starttime="20170718 04:00:04.264" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:04.265">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:00:04.265" starttime="20170718 04:00:04.265" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:04.552">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:00:04.552" starttime="20170718 04:00:04.266" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:04.552">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:00:04.552">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:04.552" starttime="20170718 04:00:04.266" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:04.553">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:04.553" starttime="20170718 04:00:04.553" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:04.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:04.554" starttime="20170718 04:00:04.553" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:04.554" starttime="20170718 04:00:04.261" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:04.554" starttime="20170718 04:00:04.261" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:04.554" starttime="20170718 04:00:04.260" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:04.555">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:00:04.555" starttime="20170718 04:00:04.554" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:04.557">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:04.557" starttime="20170718 04:00:04.556" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:04.558">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:04.558" starttime="20170718 04:00:04.557" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:04.558" starttime="20170718 04:00:04.557" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:04.558" starttime="20170718 04:00:04.555" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:04.558" starttime="20170718 04:00:04.555" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:04.666">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:00:04.666">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:04.666" starttime="20170718 04:00:04.558" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:04.668">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:04.668" starttime="20170718 04:00:04.667" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:04.669">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:04.669" starttime="20170718 04:00:04.669" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:04.669" starttime="20170718 04:00:04.668" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:04.669" starttime="20170718 04:00:04.667" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:04.669" starttime="20170718 04:00:04.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:04.669">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:04.669" starttime="20170718 04:00:04.259" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:04.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:04.670" starttime="20170718 04:00:04.670" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:04.671">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:00:04.671">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:00:04.671">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:00:04.671" starttime="20170718 04:00:04.670" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:04.671">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:00:04.672" starttime="20170718 04:00:04.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:04.672">${host_state} = Running</msg>
<status endtime="20170718 04:00:04.672" starttime="20170718 04:00:04.258" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:00:04.674">Off != Running</msg>
<status endtime="20170718 04:00:04.674" starttime="20170718 04:00:04.674" status="FAIL"></status>
</kw>
<status endtime="20170718 04:00:04.674" starttime="20170718 04:00:04.257" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:14.680">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:00:14.681" starttime="20170718 04:00:14.680" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:14.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:00:14.682" starttime="20170718 04:00:14.681" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:14.683">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:00:14.683" starttime="20170718 04:00:14.682" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:14.684">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:00:14.684" starttime="20170718 04:00:14.683" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:14.879">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:00:14.879" starttime="20170718 04:00:14.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:14.880">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:00:14.880">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:14.880" starttime="20170718 04:00:14.684" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:14.880">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:14.880" starttime="20170718 04:00:14.880" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:14.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:14.881" starttime="20170718 04:00:14.881" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:14.881" starttime="20170718 04:00:14.679" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:14.881" starttime="20170718 04:00:14.678" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:14.881" starttime="20170718 04:00:14.677" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:14.882">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:00:14.882" starttime="20170718 04:00:14.882" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:14.884">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:14.884" starttime="20170718 04:00:14.883" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:14.885">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:14.885" starttime="20170718 04:00:14.885" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:14.885" starttime="20170718 04:00:14.884" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:14.885" starttime="20170718 04:00:14.883" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:14.885" starttime="20170718 04:00:14.882" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:15.037">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:00:15.037">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:15.037" starttime="20170718 04:00:14.886" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:15.039">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:15.039" starttime="20170718 04:00:15.038" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:15.040">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:15.040" starttime="20170718 04:00:15.039" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:15.040" starttime="20170718 04:00:15.039" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:15.040" starttime="20170718 04:00:15.038" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:15.040" starttime="20170718 04:00:15.037" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:15.040">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:15.040" starttime="20170718 04:00:14.677" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:15.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:15.041" starttime="20170718 04:00:15.041" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:15.042">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:00:15.042">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:00:15.042">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:00:15.042" starttime="20170718 04:00:15.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:15.042">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:00:15.042" starttime="20170718 04:00:14.676" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:15.042">${host_state} = Running</msg>
<status endtime="20170718 04:00:15.042" starttime="20170718 04:00:14.676" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:00:15.043">Off != Running</msg>
<status endtime="20170718 04:00:15.043" starttime="20170718 04:00:15.043" status="FAIL"></status>
</kw>
<status endtime="20170718 04:00:15.043" starttime="20170718 04:00:14.675" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:25.048">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:00:25.049" starttime="20170718 04:00:25.048" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:25.049">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:00:25.049" starttime="20170718 04:00:25.049" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:25.050">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:00:25.050" starttime="20170718 04:00:25.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:25.051">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:00:25.051" starttime="20170718 04:00:25.050" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:25.232">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:00:25.232" starttime="20170718 04:00:25.051" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:25.232">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:00:25.232">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:25.232" starttime="20170718 04:00:25.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:25.233">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:25.233" starttime="20170718 04:00:25.233" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:25.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:25.234" starttime="20170718 04:00:25.233" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:25.234" starttime="20170718 04:00:25.047" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:25.234" starttime="20170718 04:00:25.047" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:25.234" starttime="20170718 04:00:25.046" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:25.235">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:00:25.235" starttime="20170718 04:00:25.234" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:25.237">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:25.237" starttime="20170718 04:00:25.236" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:25.238">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:25.238" starttime="20170718 04:00:25.237" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:25.238" starttime="20170718 04:00:25.237" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:25.238" starttime="20170718 04:00:25.235" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:25.238" starttime="20170718 04:00:25.235" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:25.314">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:00:25.314">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:25.314" starttime="20170718 04:00:25.238" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:25.316">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:25.316" starttime="20170718 04:00:25.315" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:25.317">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:25.317" starttime="20170718 04:00:25.317" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:25.317" starttime="20170718 04:00:25.316" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:25.317" starttime="20170718 04:00:25.315" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:25.318" starttime="20170718 04:00:25.314" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:25.318">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:25.318" starttime="20170718 04:00:25.045" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:25.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:25.318" starttime="20170718 04:00:25.318" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:25.319">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:00:25.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:00:25.319">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:00:25.319" starttime="20170718 04:00:25.319" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:25.319">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:00:25.319" starttime="20170718 04:00:25.045" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:25.320">${host_state} = Running</msg>
<status endtime="20170718 04:00:25.320" starttime="20170718 04:00:25.044" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:00:25.320">Off != Running</msg>
<status endtime="20170718 04:00:25.320" starttime="20170718 04:00:25.320" status="FAIL"></status>
</kw>
<status endtime="20170718 04:00:25.321" starttime="20170718 04:00:25.044" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:35.325">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:00:35.326" starttime="20170718 04:00:35.325" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:35.326">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:00:35.326" starttime="20170718 04:00:35.326" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:35.327">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:00:35.327" starttime="20170718 04:00:35.327" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:35.328">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:00:35.328" starttime="20170718 04:00:35.327" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:35.509">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:00:35.510" starttime="20170718 04:00:35.328" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:35.510">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:00:35.510">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:35.510" starttime="20170718 04:00:35.328" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:35.510">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:35.510" starttime="20170718 04:00:35.510" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:35.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:35.512" starttime="20170718 04:00:35.511" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:35.512" starttime="20170718 04:00:35.324" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:35.512" starttime="20170718 04:00:35.324" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:35.512" starttime="20170718 04:00:35.323" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:35.512">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:00:35.512" starttime="20170718 04:00:35.512" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:35.515">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:35.515" starttime="20170718 04:00:35.514" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:35.517">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:35.517" starttime="20170718 04:00:35.516" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:35.517" starttime="20170718 04:00:35.516" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:35.517" starttime="20170718 04:00:35.513" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:35.517" starttime="20170718 04:00:35.513" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:35.584">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:00:35.584">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:35.584" starttime="20170718 04:00:35.517" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:35.586">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:35.586" starttime="20170718 04:00:35.585" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:35.586">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:35.587" starttime="20170718 04:00:35.586" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:35.587" starttime="20170718 04:00:35.586" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:35.587" starttime="20170718 04:00:35.585" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:35.587" starttime="20170718 04:00:35.584" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:35.587">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:35.587" starttime="20170718 04:00:35.323" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:35.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:35.588" starttime="20170718 04:00:35.587" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:35.588">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:00:35.588">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:00:35.589">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:00:35.589" starttime="20170718 04:00:35.588" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:35.589">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:00:35.589" starttime="20170718 04:00:35.322" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:35.589">${host_state} = Running</msg>
<status endtime="20170718 04:00:35.589" starttime="20170718 04:00:35.322" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:00:35.590">Off != Running</msg>
<status endtime="20170718 04:00:35.590" starttime="20170718 04:00:35.590" status="FAIL"></status>
</kw>
<status endtime="20170718 04:00:35.590" starttime="20170718 04:00:35.321" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:45.597">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:00:45.597" starttime="20170718 04:00:45.596" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:45.598">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:00:45.598" starttime="20170718 04:00:45.598" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:45.598">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:00:45.598" starttime="20170718 04:00:45.598" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:45.599">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:00:45.599" starttime="20170718 04:00:45.599" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:45.846">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:00:45.846" starttime="20170718 04:00:45.600" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:45.847">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:00:45.847">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:45.847" starttime="20170718 04:00:45.599" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:45.847">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:45.847" starttime="20170718 04:00:45.847" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:45.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:45.848" starttime="20170718 04:00:45.848" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:45.848" starttime="20170718 04:00:45.594" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:45.848" starttime="20170718 04:00:45.593" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:45.848" starttime="20170718 04:00:45.593" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:45.849">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:00:45.849" starttime="20170718 04:00:45.849" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:45.851">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:45.851" starttime="20170718 04:00:45.850" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:45.852">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:45.852" starttime="20170718 04:00:45.852" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:45.852" starttime="20170718 04:00:45.851" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:45.852" starttime="20170718 04:00:45.850" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:45.852" starttime="20170718 04:00:45.849" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:45.919">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:00:45.919">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:45.919" starttime="20170718 04:00:45.853" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:45.921">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:45.921" starttime="20170718 04:00:45.920" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:45.956">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:45.956" starttime="20170718 04:00:45.922" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:45.956" starttime="20170718 04:00:45.921" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:45.956" starttime="20170718 04:00:45.920" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:45.957" starttime="20170718 04:00:45.920" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:45.957">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:45.957" starttime="20170718 04:00:45.592" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:45.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:45.958" starttime="20170718 04:00:45.957" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:45.958">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:00:45.958">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:00:45.958">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:00:45.958" starttime="20170718 04:00:45.958" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:45.958">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:00:45.959" starttime="20170718 04:00:45.592" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:45.959">${host_state} = Running</msg>
<status endtime="20170718 04:00:45.959" starttime="20170718 04:00:45.591" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:00:45.959">Off != Running</msg>
<status endtime="20170718 04:00:45.960" starttime="20170718 04:00:45.959" status="FAIL"></status>
</kw>
<status endtime="20170718 04:00:45.960" starttime="20170718 04:00:45.591" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:55.965">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:00:55.965" starttime="20170718 04:00:55.964" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:55.966">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:00:55.966" starttime="20170718 04:00:55.965" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:55.966">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:00:55.966" starttime="20170718 04:00:55.966" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:55.967">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:00:55.967" starttime="20170718 04:00:55.966" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:56.166">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:00:56.166" starttime="20170718 04:00:55.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:56.166">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:00:56.166">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:56.166" starttime="20170718 04:00:55.967" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:56.167">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:56.167" starttime="20170718 04:00:56.166" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:56.167">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:56.168" starttime="20170718 04:00:56.167" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:56.168" starttime="20170718 04:00:55.964" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:56.168" starttime="20170718 04:00:55.963" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:56.168" starttime="20170718 04:00:55.963" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:56.169">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:00:56.169" starttime="20170718 04:00:56.168" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:56.171">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:56.171" starttime="20170718 04:00:56.170" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:56.173">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:00:56.173" starttime="20170718 04:00:56.172" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:56.173" starttime="20170718 04:00:56.172" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:56.173" starttime="20170718 04:00:56.169" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:56.173" starttime="20170718 04:00:56.169" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:56.251">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:00:56.251">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:56.251" starttime="20170718 04:00:56.173" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:56.253">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:56.253" starttime="20170718 04:00:56.252" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:56.254">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:00:56.254" starttime="20170718 04:00:56.253" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:56.254" starttime="20170718 04:00:56.253" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:56.254" starttime="20170718 04:00:56.252" status="PASS"></status>
</kw>
<status endtime="20170718 04:00:56.254" starttime="20170718 04:00:56.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:56.254">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:00:56.254" starttime="20170718 04:00:55.962" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:00:56.255">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:00:56.255" starttime="20170718 04:00:56.254" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:00:56.255">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:00:56.255">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:00:56.256">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:00:56.256" starttime="20170718 04:00:56.255" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:56.256">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:00:56.256" starttime="20170718 04:00:55.961" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:00:56.256">${host_state} = Running</msg>
<status endtime="20170718 04:00:56.256" starttime="20170718 04:00:55.961" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:00:56.257">Off != Running</msg>
<status endtime="20170718 04:00:56.257" starttime="20170718 04:00:56.256" status="FAIL"></status>
</kw>
<status endtime="20170718 04:00:56.257" starttime="20170718 04:00:55.960" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:06.262">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:01:06.263" starttime="20170718 04:01:06.262" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:06.263">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:01:06.263" starttime="20170718 04:01:06.263" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:06.264">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:01:06.264" starttime="20170718 04:01:06.264" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:06.265">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:01:06.265" starttime="20170718 04:01:06.264" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:06.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:01:06.445" starttime="20170718 04:01:06.265" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:06.445">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:01:06.445">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:06.445" starttime="20170718 04:01:06.265" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:06.446">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:06.446" starttime="20170718 04:01:06.445" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:06.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:06.446" starttime="20170718 04:01:06.446" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:06.447" starttime="20170718 04:01:06.261" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:06.447" starttime="20170718 04:01:06.260" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:06.447" starttime="20170718 04:01:06.260" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:06.447">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:01:06.447" starttime="20170718 04:01:06.447" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:06.449">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:06.449" starttime="20170718 04:01:06.449" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:06.450">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:06.450" starttime="20170718 04:01:06.450" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:06.451" starttime="20170718 04:01:06.450" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:06.451" starttime="20170718 04:01:06.448" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:06.451" starttime="20170718 04:01:06.448" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:06.523">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:01:06.523">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:06.523" starttime="20170718 04:01:06.451" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:06.525">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:06.525" starttime="20170718 04:01:06.524" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:06.526">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:06.526" starttime="20170718 04:01:06.526" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:06.526" starttime="20170718 04:01:06.525" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:06.526" starttime="20170718 04:01:06.524" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:06.526" starttime="20170718 04:01:06.523" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:06.526">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:06.527" starttime="20170718 04:01:06.259" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:06.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:06.527" starttime="20170718 04:01:06.527" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:06.528">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:01:06.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:01:06.528">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:01:06.528" starttime="20170718 04:01:06.527" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:06.528">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:01:06.528" starttime="20170718 04:01:06.259" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:06.528">${host_state} = Running</msg>
<status endtime="20170718 04:01:06.529" starttime="20170718 04:01:06.258" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:01:06.529">Off != Running</msg>
<status endtime="20170718 04:01:06.529" starttime="20170718 04:01:06.529" status="FAIL"></status>
</kw>
<status endtime="20170718 04:01:06.529" starttime="20170718 04:01:06.258" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:16.534">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:01:16.535" starttime="20170718 04:01:16.534" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:16.535">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:01:16.535" starttime="20170718 04:01:16.535" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:16.536">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:01:16.536" starttime="20170718 04:01:16.536" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:16.537">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:01:16.537" starttime="20170718 04:01:16.536" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:16.719">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:01:16.719" starttime="20170718 04:01:16.537" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:16.719">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:01:16.719">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:16.719" starttime="20170718 04:01:16.537" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:16.720">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:16.720" starttime="20170718 04:01:16.719" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:16.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:16.721" starttime="20170718 04:01:16.720" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:16.721" starttime="20170718 04:01:16.533" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:16.721" starttime="20170718 04:01:16.533" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:16.721" starttime="20170718 04:01:16.532" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:16.722">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:01:16.722" starttime="20170718 04:01:16.721" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:16.724">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:16.724" starttime="20170718 04:01:16.723" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:16.725">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:16.725" starttime="20170718 04:01:16.725" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:16.725" starttime="20170718 04:01:16.724" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:16.725" starttime="20170718 04:01:16.723" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:16.725" starttime="20170718 04:01:16.722" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:16.791">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:01:16.791">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:16.791" starttime="20170718 04:01:16.725" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:16.793">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:16.793" starttime="20170718 04:01:16.792" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:16.794">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:16.794" starttime="20170718 04:01:16.794" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:16.794" starttime="20170718 04:01:16.793" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:16.794" starttime="20170718 04:01:16.792" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:16.794" starttime="20170718 04:01:16.791" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:16.794">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:16.794" starttime="20170718 04:01:16.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:16.795">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:16.795" starttime="20170718 04:01:16.795" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:16.796">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:01:16.796">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:01:16.796">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:01:16.796" starttime="20170718 04:01:16.795" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:16.796">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:01:16.796" starttime="20170718 04:01:16.531" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:16.796">${host_state} = Running</msg>
<status endtime="20170718 04:01:16.796" starttime="20170718 04:01:16.531" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:01:16.797">Off != Running</msg>
<status endtime="20170718 04:01:16.797" starttime="20170718 04:01:16.797" status="FAIL"></status>
</kw>
<status endtime="20170718 04:01:16.797" starttime="20170718 04:01:16.530" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:26.802">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:01:26.803" starttime="20170718 04:01:26.802" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:26.803">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:01:26.803" starttime="20170718 04:01:26.803" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:26.804">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:01:26.804" starttime="20170718 04:01:26.804" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:26.805">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:01:26.805" starttime="20170718 04:01:26.804" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:27.134">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:01:27.134" starttime="20170718 04:01:26.805" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:27.134">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:01:27.134">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:27.135" starttime="20170718 04:01:26.805" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:27.135">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:27.135" starttime="20170718 04:01:27.135" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:27.136">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:27.136" starttime="20170718 04:01:27.136" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:27.136" starttime="20170718 04:01:26.801" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:27.136" starttime="20170718 04:01:26.801" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:27.136" starttime="20170718 04:01:26.800" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:27.137">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:01:27.137" starttime="20170718 04:01:27.137" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:27.139">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:27.139" starttime="20170718 04:01:27.138" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:27.140">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:27.140" starttime="20170718 04:01:27.140" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:27.140" starttime="20170718 04:01:27.139" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:27.140" starttime="20170718 04:01:27.138" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:27.140" starttime="20170718 04:01:27.137" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:27.206">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:01:27.206">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:27.206" starttime="20170718 04:01:27.141" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:27.208">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:27.208" starttime="20170718 04:01:27.208" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:27.209">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:27.209" starttime="20170718 04:01:27.209" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:27.210" starttime="20170718 04:01:27.208" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:27.210" starttime="20170718 04:01:27.207" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:27.210" starttime="20170718 04:01:27.207" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:27.210">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:27.210" starttime="20170718 04:01:26.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:27.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:27.211" starttime="20170718 04:01:27.210" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:27.211">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:01:27.211">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:01:27.211">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:01:27.211" starttime="20170718 04:01:27.211" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:27.212">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:01:27.212" starttime="20170718 04:01:26.799" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:27.212">${host_state} = Running</msg>
<status endtime="20170718 04:01:27.212" starttime="20170718 04:01:26.798" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:01:27.213">Off != Running</msg>
<status endtime="20170718 04:01:27.213" starttime="20170718 04:01:27.212" status="FAIL"></status>
</kw>
<status endtime="20170718 04:01:27.213" starttime="20170718 04:01:26.798" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:37.218">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:01:37.218" starttime="20170718 04:01:37.217" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:37.219">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:01:37.219" starttime="20170718 04:01:37.218" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:37.219">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:01:37.219" starttime="20170718 04:01:37.219" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:37.220">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:01:37.220" starttime="20170718 04:01:37.219" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:37.438">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:01:37.438" starttime="20170718 04:01:37.221" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:37.438">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:01:37.439">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:37.439" starttime="20170718 04:01:37.220" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:37.439">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:37.439" starttime="20170718 04:01:37.439" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:37.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:37.440" starttime="20170718 04:01:37.440" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:37.440" starttime="20170718 04:01:37.217" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:37.440" starttime="20170718 04:01:37.216" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:37.440" starttime="20170718 04:01:37.216" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:37.441">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:01:37.441" starttime="20170718 04:01:37.441" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:37.443">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:37.443" starttime="20170718 04:01:37.442" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:37.444">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:37.444" starttime="20170718 04:01:37.444" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:37.444" starttime="20170718 04:01:37.443" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:37.444" starttime="20170718 04:01:37.442" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:37.444" starttime="20170718 04:01:37.441" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:37.531">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:01:37.531">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:37.531" starttime="20170718 04:01:37.445" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:37.533">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:37.533" starttime="20170718 04:01:37.533" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:37.534">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:37.534" starttime="20170718 04:01:37.534" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:37.534" starttime="20170718 04:01:37.533" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:37.534" starttime="20170718 04:01:37.532" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:37.534" starttime="20170718 04:01:37.532" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:37.535">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:37.535" starttime="20170718 04:01:37.215" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:37.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:37.535" starttime="20170718 04:01:37.535" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:37.536">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:01:37.536">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:01:37.536">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:01:37.536" starttime="20170718 04:01:37.536" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:37.536">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:01:37.536" starttime="20170718 04:01:37.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:37.537">${host_state} = Running</msg>
<status endtime="20170718 04:01:37.537" starttime="20170718 04:01:37.214" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:01:37.537">Off != Running</msg>
<status endtime="20170718 04:01:37.537" starttime="20170718 04:01:37.537" status="FAIL"></status>
</kw>
<status endtime="20170718 04:01:37.537" starttime="20170718 04:01:37.213" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:47.543">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:01:47.543" starttime="20170718 04:01:47.543" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:47.544">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:01:47.544" starttime="20170718 04:01:47.544" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:47.545">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:01:47.545" starttime="20170718 04:01:47.545" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:47.546">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:01:47.546" starttime="20170718 04:01:47.546" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:47.737">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:01:47.737" starttime="20170718 04:01:47.547" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:47.737">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:01:47.737">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:47.737" starttime="20170718 04:01:47.547" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:47.738">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:47.738" starttime="20170718 04:01:47.738" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:47.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:47.739" starttime="20170718 04:01:47.738" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:47.739" starttime="20170718 04:01:47.542" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:47.739" starttime="20170718 04:01:47.541" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:47.739" starttime="20170718 04:01:47.541" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:47.740">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:01:47.740" starttime="20170718 04:01:47.740" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:47.742">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:47.742" starttime="20170718 04:01:47.741" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:47.743">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:47.743" starttime="20170718 04:01:47.743" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:47.743" starttime="20170718 04:01:47.742" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:47.743" starttime="20170718 04:01:47.741" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:47.744" starttime="20170718 04:01:47.740" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:47.837">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:01:47.837">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:47.838" starttime="20170718 04:01:47.744" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:47.839">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:47.840" starttime="20170718 04:01:47.839" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:47.841">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:47.841" starttime="20170718 04:01:47.841" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:47.841" starttime="20170718 04:01:47.840" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:47.841" starttime="20170718 04:01:47.838" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:47.841" starttime="20170718 04:01:47.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:47.841">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:47.841" starttime="20170718 04:01:47.540" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:47.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:47.842" starttime="20170718 04:01:47.842" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:47.843">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:01:47.843">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:01:47.843">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:01:47.843" starttime="20170718 04:01:47.842" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:47.843">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:01:47.843" starttime="20170718 04:01:47.539" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:47.843">${host_state} = Running</msg>
<status endtime="20170718 04:01:47.843" starttime="20170718 04:01:47.539" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:01:47.844">Off != Running</msg>
<status endtime="20170718 04:01:47.844" starttime="20170718 04:01:47.844" status="FAIL"></status>
</kw>
<status endtime="20170718 04:01:47.844" starttime="20170718 04:01:47.538" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:57.849">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:01:57.850" starttime="20170718 04:01:57.849" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:57.850">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:01:57.850" starttime="20170718 04:01:57.850" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:57.851">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:01:57.851" starttime="20170718 04:01:57.851" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:57.852">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:01:57.852" starttime="20170718 04:01:57.851" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:58.037">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:01:58.037" starttime="20170718 04:01:57.852" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:58.037">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:01:58.037">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:58.037" starttime="20170718 04:01:57.852" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:58.038">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:58.038" starttime="20170718 04:01:58.037" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:58.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:58.039" starttime="20170718 04:01:58.038" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:58.039" starttime="20170718 04:01:57.848" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:58.040" starttime="20170718 04:01:57.848" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:58.040" starttime="20170718 04:01:57.847" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:58.040">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:01:58.040" starttime="20170718 04:01:58.040" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:58.043">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:58.043" starttime="20170718 04:01:58.042" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:58.044">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:01:58.044" starttime="20170718 04:01:58.043" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:58.044" starttime="20170718 04:01:58.043" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:58.044" starttime="20170718 04:01:58.041" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:58.044" starttime="20170718 04:01:58.041" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:58.110">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:01:58.110">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:58.110" starttime="20170718 04:01:58.044" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:58.113">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:58.113" starttime="20170718 04:01:58.112" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:58.114">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:01:58.114" starttime="20170718 04:01:58.114" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:58.114" starttime="20170718 04:01:58.113" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:58.114" starttime="20170718 04:01:58.111" status="PASS"></status>
</kw>
<status endtime="20170718 04:01:58.114" starttime="20170718 04:01:58.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:58.115">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:01:58.115" starttime="20170718 04:01:57.847" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:01:58.115">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:01:58.115" starttime="20170718 04:01:58.115" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:01:58.116">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:01:58.116">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:01:58.116">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:01:58.116" starttime="20170718 04:01:58.116" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:58.116">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:01:58.116" starttime="20170718 04:01:57.846" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:01:58.117">${host_state} = Running</msg>
<status endtime="20170718 04:01:58.117" starttime="20170718 04:01:57.846" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:01:58.117">Off != Running</msg>
<status endtime="20170718 04:01:58.117" starttime="20170718 04:01:58.117" status="FAIL"></status>
</kw>
<status endtime="20170718 04:01:58.118" starttime="20170718 04:01:57.845" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:08.123">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:08.124" starttime="20170718 04:02:08.123" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:08.124">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:08.124" starttime="20170718 04:02:08.124" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:08.125">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:08.125" starttime="20170718 04:02:08.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:08.125">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:08.125" starttime="20170718 04:02:08.125" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:08.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:08.350" starttime="20170718 04:02:08.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:08.350">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:08.350">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:08.350" starttime="20170718 04:02:08.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:08.350">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:08.350" starttime="20170718 04:02:08.350" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:08.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:08.351" starttime="20170718 04:02:08.351" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:08.351" starttime="20170718 04:02:08.122" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:08.351" starttime="20170718 04:02:08.121" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:08.351" starttime="20170718 04:02:08.121" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:08.352">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:02:08.352" starttime="20170718 04:02:08.352" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:08.354">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:08.354" starttime="20170718 04:02:08.353" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:08.355">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:08.355" starttime="20170718 04:02:08.355" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:08.355" starttime="20170718 04:02:08.354" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:08.355" starttime="20170718 04:02:08.353" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:08.355" starttime="20170718 04:02:08.352" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:08.422">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:08.422">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:08.422" starttime="20170718 04:02:08.356" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:08.424">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:08.424" starttime="20170718 04:02:08.423" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:08.427">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:08.427" starttime="20170718 04:02:08.426" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:08.427" starttime="20170718 04:02:08.424" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:08.427" starttime="20170718 04:02:08.423" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:08.427" starttime="20170718 04:02:08.422" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:08.427">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:08.427" starttime="20170718 04:02:08.120" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:08.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:08.428" starttime="20170718 04:02:08.428" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:08.429">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:08.429">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:02:08.429">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:02:08.429" starttime="20170718 04:02:08.428" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:08.429">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:02:08.430" starttime="20170718 04:02:08.119" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:08.430">${host_state} = Running</msg>
<status endtime="20170718 04:02:08.430" starttime="20170718 04:02:08.119" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:08.431">Off != Running</msg>
<status endtime="20170718 04:02:08.431" starttime="20170718 04:02:08.430" status="FAIL"></status>
</kw>
<status endtime="20170718 04:02:08.431" starttime="20170718 04:02:08.118" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:18.436">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:18.436" starttime="20170718 04:02:18.436" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:18.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:18.437" starttime="20170718 04:02:18.437" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:18.437">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:18.437" starttime="20170718 04:02:18.437" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:18.438">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:18.438" starttime="20170718 04:02:18.438" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:18.633">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:18.633" starttime="20170718 04:02:18.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:18.633">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:18.633">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:18.633" starttime="20170718 04:02:18.438" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:18.634">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:18.634" starttime="20170718 04:02:18.634" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:18.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:18.635" starttime="20170718 04:02:18.634" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:18.635" starttime="20170718 04:02:18.435" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:18.635" starttime="20170718 04:02:18.435" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:18.635" starttime="20170718 04:02:18.434" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:18.636">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:02:18.636" starttime="20170718 04:02:18.635" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:18.638">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:18.638" starttime="20170718 04:02:18.637" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:18.639">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:18.639" starttime="20170718 04:02:18.639" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:18.639" starttime="20170718 04:02:18.638" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:18.639" starttime="20170718 04:02:18.636" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:18.639" starttime="20170718 04:02:18.636" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:18.724">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:18.724">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:18.724" starttime="20170718 04:02:18.640" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:18.726">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:18.726" starttime="20170718 04:02:18.725" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:18.727">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:18.727" starttime="20170718 04:02:18.726" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:18.727" starttime="20170718 04:02:18.726" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:18.727" starttime="20170718 04:02:18.725" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:18.727" starttime="20170718 04:02:18.724" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:18.727">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:18.727" starttime="20170718 04:02:18.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:18.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:18.728" starttime="20170718 04:02:18.728" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:18.728">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:18.728">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:02:18.729">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:02:18.729" starttime="20170718 04:02:18.728" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:18.729">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:02:18.729" starttime="20170718 04:02:18.433" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:18.729">${host_state} = Running</msg>
<status endtime="20170718 04:02:18.729" starttime="20170718 04:02:18.432" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:18.730">Off != Running</msg>
<status endtime="20170718 04:02:18.730" starttime="20170718 04:02:18.730" status="FAIL"></status>
</kw>
<status endtime="20170718 04:02:18.730" starttime="20170718 04:02:18.432" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:28.735">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:28.736" starttime="20170718 04:02:28.735" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:28.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:28.736" starttime="20170718 04:02:28.736" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:28.737">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:28.737" starttime="20170718 04:02:28.737" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:28.738">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:28.738" starttime="20170718 04:02:28.737" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:28.917">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:28.918" starttime="20170718 04:02:28.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:28.918">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:28.918">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:28.918" starttime="20170718 04:02:28.738" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:28.918">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:28.918" starttime="20170718 04:02:28.918" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:28.919">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:28.919" starttime="20170718 04:02:28.919" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:28.919" starttime="20170718 04:02:28.734" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:28.919" starttime="20170718 04:02:28.734" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:28.920" starttime="20170718 04:02:28.733" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:28.920">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:02:28.920" starttime="20170718 04:02:28.920" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:28.922">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:28.922" starttime="20170718 04:02:28.921" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:28.923">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:28.923" starttime="20170718 04:02:28.923" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:28.923" starttime="20170718 04:02:28.922" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:28.923" starttime="20170718 04:02:28.921" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:28.924" starttime="20170718 04:02:28.920" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:28.991">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:28.991">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:28.991" starttime="20170718 04:02:28.924" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:28.993">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:28.993" starttime="20170718 04:02:28.992" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:28.994">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:28.994" starttime="20170718 04:02:28.993" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:28.994" starttime="20170718 04:02:28.993" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:28.994" starttime="20170718 04:02:28.992" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:28.994" starttime="20170718 04:02:28.991" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:28.994">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:28.994" starttime="20170718 04:02:28.732" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:28.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:28.995" starttime="20170718 04:02:28.994" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:28.995">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:28.995">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:02:28.996">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:02:28.996" starttime="20170718 04:02:28.995" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:28.996">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:02:28.996" starttime="20170718 04:02:28.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:28.996">${host_state} = Running</msg>
<status endtime="20170718 04:02:28.996" starttime="20170718 04:02:28.731" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:28.997">Off != Running</msg>
<status endtime="20170718 04:02:28.997" starttime="20170718 04:02:28.996" status="FAIL"></status>
</kw>
<status endtime="20170718 04:02:28.997" starttime="20170718 04:02:28.731" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.003">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:39.004" starttime="20170718 04:02:39.003" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.004">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:39.004" starttime="20170718 04:02:39.004" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.005">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:39.005" starttime="20170718 04:02:39.004" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.005">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:39.005" starttime="20170718 04:02:39.005" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.195">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:39.195" starttime="20170718 04:02:39.006" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.196">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:39.196">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:39.196" starttime="20170718 04:02:39.006" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.196">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:39.196" starttime="20170718 04:02:39.196" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:39.197" starttime="20170718 04:02:39.197" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.197" starttime="20170718 04:02:39.002" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.197" starttime="20170718 04:02:39.002" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.197" starttime="20170718 04:02:39.001" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.198">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:02:39.198" starttime="20170718 04:02:39.198" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.200">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:39.200" starttime="20170718 04:02:39.199" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.201">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:39.201" starttime="20170718 04:02:39.201" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.201" starttime="20170718 04:02:39.200" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.201" starttime="20170718 04:02:39.199" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.201" starttime="20170718 04:02:39.198" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.269">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:39.269">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:39.269" starttime="20170718 04:02:39.202" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.271">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:39.271" starttime="20170718 04:02:39.270" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.272">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:39.272" starttime="20170718 04:02:39.272" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.272" starttime="20170718 04:02:39.271" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.272" starttime="20170718 04:02:39.270" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.272" starttime="20170718 04:02:39.269" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.273">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:39.273" starttime="20170718 04:02:39.000" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.273">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:39.273" starttime="20170718 04:02:39.273" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.274">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:39.274">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:02:39.274">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:02:39.274" starttime="20170718 04:02:39.274" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.274">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:02:39.274" starttime="20170718 04:02:38.999" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.275">${host_state} = Running</msg>
<status endtime="20170718 04:02:39.275" starttime="20170718 04:02:38.999" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:39.275">Off != Running</msg>
<status endtime="20170718 04:02:39.275" starttime="20170718 04:02:39.275" status="FAIL"></status>
</kw>
<status endtime="20170718 04:02:39.276" starttime="20170718 04:02:38.998" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170718 04:02:39.276">Keyword 'Is Host Off' failed after retrying for 6 minutes. The last error was: Off != Running</msg>
<status endtime="20170718 04:02:39.276" starttime="20170718 03:56:32.122" status="FAIL"></status>
</kw>
<status endtime="20170718 04:02:39.276" starttime="20170718 03:56:31.028" status="FAIL"></status>
</kw>
<status endtime="20170718 04:02:39.276" starttime="20170718 03:56:31.028" status="FAIL"></status>
</kw>
<status endtime="20170718 04:02:39.276" starttime="20170718 03:56:31.027" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.282">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:39.282" starttime="20170718 04:02:39.281" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.283">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:39.283" starttime="20170718 04:02:39.282" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.283">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:39.283" starttime="20170718 04:02:39.283" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.284">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:39.284" starttime="20170718 04:02:39.284" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.466">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:39.466" starttime="20170718 04:02:39.285" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.466">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:39.466">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:39.466" starttime="20170718 04:02:39.284" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.467">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:39.467" starttime="20170718 04:02:39.466" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:39.467" starttime="20170718 04:02:39.467" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.467" starttime="20170718 04:02:39.281" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.468" starttime="20170718 04:02:39.280" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.468" starttime="20170718 04:02:39.280" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.468">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170718 04:02:39.468" starttime="20170718 04:02:39.468" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.470">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:39.470" starttime="20170718 04:02:39.470" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.472">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170718 04:02:39.472" starttime="20170718 04:02:39.471" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.472" starttime="20170718 04:02:39.471" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.472" starttime="20170718 04:02:39.469" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.472" starttime="20170718 04:02:39.469" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.538">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:39.538">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:39.538" starttime="20170718 04:02:39.472" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.540">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:39.540" starttime="20170718 04:02:39.539" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.541">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170718 04:02:39.541" starttime="20170718 04:02:39.540" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.541" starttime="20170718 04:02:39.540" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.541" starttime="20170718 04:02:39.539" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:39.541" starttime="20170718 04:02:39.538" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.541">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:39.541" starttime="20170718 04:02:39.279" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:39.542" starttime="20170718 04:02:39.541" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.542">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:39.542">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:02:39.543">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170718 04:02:39.543" starttime="20170718 04:02:39.542" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.543">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170718 04:02:39.543" starttime="20170718 04:02:39.278" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.543">${host_state} = Running</msg>
<status endtime="20170718 04:02:39.543" starttime="20170718 04:02:39.278" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:39.544">Running != Quiesced</msg>
<status endtime="20170718 04:02:39.544" starttime="20170718 04:02:39.544" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.544">${status} = False</msg>
<status endtime="20170718 04:02:39.544" starttime="20170718 04:02:39.543" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:39.545">${status} = False</msg>
<status endtime="20170718 04:02:39.545" starttime="20170718 04:02:39.277" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:39.573">Length is 9</msg>
<status endtime="20170718 04:02:39.573" starttime="20170718 04:02:39.573" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:39.581">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170718 04:02:42.587">${RC} = 0</msg>
<msg level="INFO" timestamp="20170718 04:02:42.587">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.34 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.33 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl...</msg>
<status endtime="20170718 04:02:42.588" starttime="20170718 04:02:39.574" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.591">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.34 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.33 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.570 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.549 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.549/0.949/1.343/0.389 ms</msg>
<status endtime="20170718 04:02:42.591" starttime="20170718 04:02:42.590" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170718 04:02:42.592" starttime="20170718 04:02:42.592" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.592" starttime="20170718 04:02:39.572" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:42.610">${cur_time} = 2017-07-18 04:02:42:610223</msg>
<status endtime="20170718 04:02:42.610" starttime="20170718 04:02:42.610" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:42.611">${cur_time} = 20170718040242610223</msg>
<status endtime="20170718 04:02:42.611" starttime="20170718 04:02:42.611" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.611" starttime="20170718 04:02:42.609" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:42.612">${FFDC_TIME} = 20170718040242610223</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:42.622">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170718 04:02:42.622" starttime="20170718 04:02:42.621" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:42.622">${suite_name} = 20170718040242610223_TestsTestBasicPoweron</msg>
<status endtime="20170718 04:02:42.622" starttime="20170718 04:02:42.622" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:42.623">${test_name} = PowerOnTest</msg>
<status endtime="20170718 04:02:42.623" starttime="20170718 04:02:42.623" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:42.623">${test_name} = 20170718040242610223_PowerOnTest</msg>
<status endtime="20170718 04:02:42.624" starttime="20170718 04:02:42.623" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.624" starttime="20170718 04:02:42.620" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:42.624">${FFDC_DIR_PATH} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170718 04:02:42.624">${FFDC_PREFIX} = 20170718040242610223_</msg>
<msg level="INFO" timestamp="20170718 04:02:42.651">${LOG_PREFIX} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.652" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.654" starttime="20170718 04:02:42.651" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:42.658">${FFDC_FILE_PATH} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.692" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.693" starttime="20170718 04:02:42.692" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.693" starttime="20170718 04:02:42.691" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.694" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.694" starttime="20170718 04:02:42.693" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.694" starttime="20170718 04:02:42.693" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.695" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.696" starttime="20170718 04:02:42.695" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.696" starttime="20170718 04:02:42.694" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.699" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.699" starttime="20170718 04:02:42.698" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.699" starttime="20170718 04:02:42.696" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.700" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.700" starttime="20170718 04:02:42.699" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.700" starttime="20170718 04:02:42.699" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.701" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.701" starttime="20170718 04:02:42.701" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.701" starttime="20170718 04:02:42.700" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.703" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.703" starttime="20170718 04:02:42.702" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.703" starttime="20170718 04:02:42.702" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.704" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.704" starttime="20170718 04:02:42.704" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.704" starttime="20170718 04:02:42.703" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.705" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.705" starttime="20170718 04:02:42.705" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.705" starttime="20170718 04:02:42.704" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.707" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.707" starttime="20170718 04:02:42.707" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.707" starttime="20170718 04:02:42.706" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.708" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.708" starttime="20170718 04:02:42.708" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.708" starttime="20170718 04:02:42.707" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.710" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.710" starttime="20170718 04:02:42.709" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.710" starttime="20170718 04:02:42.709" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.711" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:42.712" starttime="20170718 04:02:42.711" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.712" starttime="20170718 04:02:42.710" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:42.714">Dictionary does not contain key 'host'.</msg>
<status endtime="20170718 04:02:42.714" starttime="20170718 04:02:42.713" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:42.714">${has_host} = False</msg>
<status endtime="20170718 04:02:42.714" starttime="20170718 04:02:42.713" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170718 04:02:42.715" starttime="20170718 04:02:42.715" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.715" starttime="20170718 04:02:42.714" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:42.717">${port_num} = 22</msg>
<status endtime="20170718 04:02:42.717" starttime="20170718 04:02:42.717" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:42.718">${SSH_PORT} = 22</msg>
<status endtime="20170718 04:02:42.718" starttime="20170718 04:02:42.717" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:42.718">${https_num} = 443</msg>
<status endtime="20170718 04:02:42.718" starttime="20170718 04:02:42.718" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.719">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170718 04:02:42.719" starttime="20170718 04:02:42.718" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.719" starttime="20170718 04:02:42.716" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.719" starttime="20170718 04:02:42.716" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:42.720">Dictionary does not contain key 'port'.</msg>
<status endtime="20170718 04:02:42.720" starttime="20170718 04:02:42.720" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:42.720">${has_port} = False</msg>
<status endtime="20170718 04:02:42.720" starttime="20170718 04:02:42.719" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170718 04:02:42.722" starttime="20170718 04:02:42.722" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170718 04:02:42.724" starttime="20170718 04:02:42.723" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.724" starttime="20170718 04:02:42.722" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:42.724" starttime="20170718 04:02:42.721" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:42.725">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170718 04:02:44.550">Read output: root@witherspoon:~#</msg>
<status endtime="20170718 04:02:44.551" starttime="20170718 04:02:42.724" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.551" starttime="20170718 04:02:42.712" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:44.552">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170718 04:02:44.629">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:44.629">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170718 04:02:44.629">${stderr} = </msg>
<status endtime="20170718 04:02:44.629" starttime="20170718 04:02:44.551" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.630">Length is 0</msg>
<status endtime="20170718 04:02:44.630" starttime="20170718 04:02:44.630" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.631">Length is 11</msg>
<status endtime="20170718 04:02:44.631" starttime="20170718 04:02:44.630" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:44.631">${model_name} = Witherspoon</msg>
<status endtime="20170718 04:02:44.631" starttime="20170718 04:02:42.712" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.633" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:44.633" starttime="20170718 04:02:44.632" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.633" starttime="20170718 04:02:44.631" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.633" starttime="20170718 04:02:42.706" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.635" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:44.635" starttime="20170718 04:02:44.634" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.635" starttime="20170718 04:02:44.634" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:44.635">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170718 04:02:44.635" starttime="20170718 04:02:44.635" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.637" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:44.637" starttime="20170718 04:02:44.636" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.637" starttime="20170718 04:02:44.636" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.638" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:44.638" starttime="20170718 04:02:44.638" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.638" starttime="20170718 04:02:44.637" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.638" starttime="20170718 04:02:44.636" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.640" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:44.640" starttime="20170718 04:02:44.639" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.640" starttime="20170718 04:02:44.639" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.641" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:44.641" starttime="20170718 04:02:44.641" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.641" starttime="20170718 04:02:44.640" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.641" starttime="20170718 04:02:44.638" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.642" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:44.643" starttime="20170718 04:02:44.642" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.643" starttime="20170718 04:02:44.641" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.644" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:44.644" starttime="20170718 04:02:44.643" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.644" starttime="20170718 04:02:44.643" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.644" starttime="20170718 04:02:44.641" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.644" starttime="20170718 04:02:44.635" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.645" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:44.645" starttime="20170718 04:02:44.645" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.645" starttime="20170718 04:02:44.644" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.646" starttime="20170718 04:02:42.691" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:44.657">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170718 04:02:44.657" starttime="20170718 04:02:44.656" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:44.658">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('SEL Log', 'Collect eSEL Log') | ('OS FFDC', 'OS FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') |...</msg>
<status endtime="20170718 04:02:44.658" starttime="20170718 04:02:44.658" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170718 04:02:44.660" starttime="20170718 04:02:44.659" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:44.660">@{ffdc_function_list} = [ Core Files | SEL Log | OS FFDC | Get Request FFDC | FFDC Generic Report | BMC Specific Files ]</msg>
<status endtime="20170718 04:02:44.660" starttime="20170718 04:02:44.659" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170718 04:02:44.662" starttime="20170718 04:02:44.661" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:44.662">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:44.662">${ret_values} = None</msg>
<status endtime="20170718 04:02:44.662" starttime="20170718 04:02:44.661" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170718 04:02:44.663" starttime="20170718 04:02:44.662" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:44.715">Dictionary does not contain key 'host'.</msg>
<status endtime="20170718 04:02:44.715" starttime="20170718 04:02:44.714" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:44.715">${has_host} = False</msg>
<status endtime="20170718 04:02:44.715" starttime="20170718 04:02:44.714" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170718 04:02:44.716" starttime="20170718 04:02:44.716" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.716" starttime="20170718 04:02:44.715" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:44.718">${port_num} = 22</msg>
<status endtime="20170718 04:02:44.718" starttime="20170718 04:02:44.717" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:44.720">${SSH_PORT} = 22</msg>
<status endtime="20170718 04:02:44.720" starttime="20170718 04:02:44.718" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:44.721">${https_num} = 443</msg>
<status endtime="20170718 04:02:44.721" starttime="20170718 04:02:44.720" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.722">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170718 04:02:44.722" starttime="20170718 04:02:44.721" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.722" starttime="20170718 04:02:44.717" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.722" starttime="20170718 04:02:44.716" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:44.723">Dictionary does not contain key 'port'.</msg>
<status endtime="20170718 04:02:44.723" starttime="20170718 04:02:44.722" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:44.723">${has_port} = False</msg>
<status endtime="20170718 04:02:44.723" starttime="20170718 04:02:44.722" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170718 04:02:44.725" starttime="20170718 04:02:44.725" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170718 04:02:44.726" starttime="20170718 04:02:44.726" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.726" starttime="20170718 04:02:44.724" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:44.726" starttime="20170718 04:02:44.723" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:44.727">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170718 04:02:46.574">Read output: root@witherspoon:~#</msg>
<status endtime="20170718 04:02:46.574" starttime="20170718 04:02:44.727" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:46.574" starttime="20170718 04:02:44.713" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:46.575">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170718 04:02:46.632">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:46.632">${core_files} = /tmp/core_phosphor-hwmon-.1387
/tmp/core_phosphor-hwmon-.1390
/tmp/core_phosphor-hwmon-.1396
/tmp/core_phosphor-hwmon-.1398</msg>
<status endtime="20170718 04:02:46.632" starttime="20170718 04:02:46.574" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:46.633">@{core_list} = [ /tmp/core_phosphor-hwmon-.1387 | /tmp/core_phosphor-hwmon-.1390 | /tmp/core_phosphor-hwmon-.1396 | /tmp/core_phosphor-hwmon-.1398 ]</msg>
<status endtime="20170718 04:02:46.633" starttime="20170718 04:02:46.632" status="PASS"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170718 04:02:46.643" starttime="20170718 04:02:46.634" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170718 04:02:47.380" starttime="20170718 04:02:46.645" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:47.380" starttime="20170718 04:02:46.644" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:47.380" starttime="20170718 04:02:46.643" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:47.380" starttime="20170718 04:02:46.633" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_phosphor-hwmon-.1387" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170718 04:02:47.627" starttime="20170718 04:02:47.381" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:47.628">Executing command 'rm /tmp/core_phosphor-hwmon-.1387'.</msg>
<msg level="INFO" timestamp="20170718 04:02:47.685">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:47.685">${stdout} = </msg>
<msg level="INFO" timestamp="20170718 04:02:47.685">${stderr} = </msg>
<status endtime="20170718 04:02:47.685" starttime="20170718 04:02:47.628" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:47.686">Length is 0</msg>
<status endtime="20170718 04:02:47.686" starttime="20170718 04:02:47.686" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:47.686" starttime="20170718 04:02:47.627" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:47.686" starttime="20170718 04:02:47.380" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-hwmon-.1390" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170718 04:02:47.926" starttime="20170718 04:02:47.686" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:47.928">Executing command 'rm /tmp/core_phosphor-hwmon-.1390'.</msg>
<msg level="INFO" timestamp="20170718 04:02:47.976">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:47.976">${stdout} = </msg>
<msg level="INFO" timestamp="20170718 04:02:47.976">${stderr} = </msg>
<status endtime="20170718 04:02:47.976" starttime="20170718 04:02:47.928" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:47.977">Length is 0</msg>
<status endtime="20170718 04:02:47.977" starttime="20170718 04:02:47.977" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:47.977" starttime="20170718 04:02:47.927" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:47.977" starttime="20170718 04:02:47.686" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-hwmon-.1396" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170718 04:02:48.254" starttime="20170718 04:02:47.978" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:48.255">Executing command 'rm /tmp/core_phosphor-hwmon-.1396'.</msg>
<msg level="INFO" timestamp="20170718 04:02:48.322">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:48.322">${stdout} = </msg>
<msg level="INFO" timestamp="20170718 04:02:48.322">${stderr} = </msg>
<status endtime="20170718 04:02:48.322" starttime="20170718 04:02:48.255" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:48.322">Length is 0</msg>
<status endtime="20170718 04:02:48.323" starttime="20170718 04:02:48.322" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:48.323" starttime="20170718 04:02:48.254" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:48.323" starttime="20170718 04:02:47.977" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-hwmon-.1398" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170718 04:02:48.744" starttime="20170718 04:02:48.323" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:48.745">Executing command 'rm /tmp/core_phosphor-hwmon-.1398'.</msg>
<msg level="INFO" timestamp="20170718 04:02:48.793">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:48.793">${stdout} = </msg>
<msg level="INFO" timestamp="20170718 04:02:48.793">${stderr} = </msg>
<status endtime="20170718 04:02:48.793" starttime="20170718 04:02:48.745" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:48.793">Length is 0</msg>
<status endtime="20170718 04:02:48.793" starttime="20170718 04:02:48.793" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:48.794" starttime="20170718 04:02:48.744" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:48.794" starttime="20170718 04:02:48.323" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:48.794" starttime="20170718 04:02:47.380" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:48.794" starttime="20170718 04:02:44.713" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:48.794" starttime="20170718 04:02:44.663" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:48.794" starttime="20170718 04:02:44.660" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:48.794" starttime="20170718 04:02:44.660" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170718 04:02:48.796" starttime="20170718 04:02:48.796" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:48.796">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:48.796">${ret_values} = None</msg>
<status endtime="20170718 04:02:48.796" starttime="20170718 04:02:48.795" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170718 04:02:48.797" starttime="20170718 04:02:48.796" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:48.852">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:48.853" starttime="20170718 04:02:48.852" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:48.854">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:48.854" starttime="20170718 04:02:48.853" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:48.855">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:48.855" starttime="20170718 04:02:48.854" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:48.856">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:48.856" starttime="20170718 04:02:48.855" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.037">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:49.038" starttime="20170718 04:02:48.857" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.038">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:49.038">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:49.038" starttime="20170718 04:02:48.856" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.038">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:49.038" starttime="20170718 04:02:49.038" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:49.039" starttime="20170718 04:02:49.039" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.039" starttime="20170718 04:02:48.851" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.039" starttime="20170718 04:02:48.850" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.040" starttime="20170718 04:02:48.849" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.040">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170718 04:02:49.040" starttime="20170718 04:02:49.040" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170718 04:02:49.041" starttime="20170718 04:02:49.040" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:49.195">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:49.195" starttime="20170718 04:02:49.041" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170718 04:02:49.196" starttime="20170718 04:02:49.196" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.196">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:49.196" starttime="20170718 04:02:48.848" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:49.197" starttime="20170718 04:02:49.197" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.198">${status} = True</msg>
<status endtime="20170718 04:02:49.198" starttime="20170718 04:02:49.197" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170718 04:02:49.198" starttime="20170718 04:02:49.198" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.199">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1500350149465, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 10 f2 c0 35 fb 00 00 00 10 a0 63 9f b0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 18 90 00 00 18 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b1 c9 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 71 92 00 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 d1 94 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 db 1e 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd ac 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9b 58 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 89 d6 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 94 0a 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 5c 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 48 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 c8 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 52 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 c6 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 9c 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 7c 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 fa 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f f6 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a8 02 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 cc 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a7 32 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb c4 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d5 24 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3c ac 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 59 18 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 75 c0 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7f 0c 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9d 82 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 ab 98 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c8 3a 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e5 86 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 83 81 00 90 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 0c 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 02 04 10 04 02 03 12 00 00 00 00 80 00 00 00 00 00 00 00 00 40 5f 02 e0 00 00 00 00 00 00 00 00 02 08 10 04 02 03 12 00 00 00 01 00 00 00 00 00 00 00 00 00 40 5f 02 f8 00 00 00 00 00 4e 06 e0 00 00 00 9f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7c 77 1b 78 60 42 00 00 7e e4 bb 78 3b 39 00 08 38 60 00 08 3a f7 00 56 00 00 00 00 00 00 00 03 00 00 00 00 00 4e 09 80 f9 23 00 00 40 9e ff dc 7e a3 ab 78 4b fd 4a d5 e8 41 00 28 7e 54 92 14 7e f6 bb 78 7e 95 a3 78 7e c4 b3 78 38 60 00 08 4b fd 49 d9 e8 41 00 28 3a 73 00 08 3a d6 00 08 f9 e3 00 00 e9 21 00 78 00 00 00 00 00 00 00 04 00 00 00 00 00 4e 06 60 00 00 00 00 00 4e 09 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 e8 41 00 28 2f b5 00 00 41 9e 00 10 7e a3 ab 78 4b fd 4a 29 e8 41 00 56 00 00 00 00 00 00 00 06 00 00 00 00 00 4e 06 e0 00 00 00 a0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1500350153706, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:49.199">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:02:49.199">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Informational', u'Timestamp': 1500350149465, u'Id':...</msg>
<status endtime="20170718 04:02:49.199" starttime="20170718 04:02:49.198" status="PASS"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.200">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status endtime="20170718 04:02:49.200" starttime="20170718 04:02:49.200" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.200">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_esel</msg>
<status endtime="20170718 04:02:49.201" starttime="20170718 04:02:49.200" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.201" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_esel"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_esel&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:49.201" starttime="20170718 04:02:49.201" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/1" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.205">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:49.205" starttime="20170718 04:02:49.204" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.206">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:49.206" starttime="20170718 04:02:49.205" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.206">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:49.206" starttime="20170718 04:02:49.206" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.207">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:49.207" starttime="20170718 04:02:49.207" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:49.389" starttime="20170718 04:02:49.208" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.389">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:49.389">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:49.389" starttime="20170718 04:02:49.208" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:49.390" starttime="20170718 04:02:49.390" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:49.391" starttime="20170718 04:02:49.390" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.391" starttime="20170718 04:02:49.204" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.391" starttime="20170718 04:02:49.204" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.391" starttime="20170718 04:02:49.203" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.392">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status endtime="20170718 04:02:49.392" starttime="20170718 04:02:49.391" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170718 04:02:49.392" starttime="20170718 04:02:49.392" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.512">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:49.512">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:49.512" starttime="20170718 04:02:49.393" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170718 04:02:49.512" starttime="20170718 04:02:49.512" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.513">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:49.513" starttime="20170718 04:02:49.202" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:49.513" starttime="20170718 04:02:49.513" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.514">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:49.514">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:02:49.514">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170718 04:02:49.514" starttime="20170718 04:02:49.514" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.514">${esel_data} = []</msg>
<status endtime="20170718 04:02:49.514" starttime="20170718 04:02:49.202" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.515">Length is 0</msg>
<msg level="INFO" timestamp="20170718 04:02:49.515">${length} = 0</msg>
<status endtime="20170718 04:02:49.515" starttime="20170718 04:02:49.515" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.516">Continuing for loop from the next iteration.</msg>
<status endtime="20170718 04:02:49.516" starttime="20170718 04:02:49.515" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.516" starttime="20170718 04:02:49.202" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.519">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:49.520" starttime="20170718 04:02:49.519" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.520">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:49.520" starttime="20170718 04:02:49.520" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.521">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:49.521" starttime="20170718 04:02:49.521" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:49.522" starttime="20170718 04:02:49.521" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.816">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:49.816" starttime="20170718 04:02:49.522" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.817">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:49.817">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:49.817" starttime="20170718 04:02:49.522" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.817">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:49.817" starttime="20170718 04:02:49.817" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:49.818" starttime="20170718 04:02:49.818" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.818" starttime="20170718 04:02:49.518" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.818" starttime="20170718 04:02:49.518" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.818" starttime="20170718 04:02:49.517" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.819">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170718 04:02:49.819" starttime="20170718 04:02:49.819" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170718 04:02:49.820" starttime="20170718 04:02:49.819" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.916">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:49.916">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:49.916" starttime="20170718 04:02:49.820" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170718 04:02:49.917" starttime="20170718 04:02:49.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.917">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:49.917" starttime="20170718 04:02:49.517" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:49.918" starttime="20170718 04:02:49.917" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.918">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 10 f2 c0 35 fb 00 00 00 10 a0 63 9f b0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 18 90 00 00 18 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b1 c9 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 71 92 00 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 d1 94 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 db 1e 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd ac 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9b 58 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 89 d6 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 94 0a 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 5c 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 48 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 c8 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 52 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 c6 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 9c 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 7c 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 fa 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f f6 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a8 02 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 cc 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a7 32 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb c4 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d5 24 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3c ac 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 59 18 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 75 c0 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7f 0c 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9d 82 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 ab 98 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c8 3a 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e5 86 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 83 81 00 90 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 0c 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 02 04 10 04 02 03 12 00 00 00 00 80 00 00 00 00 00 00 00 00 40 5f 02 e0 00 00 00 00 00 00 00 00 02 08 10 04 02 03 12 00 00 00 01 00 00 00 00 00 00 00 00 00 40 5f 02 f8 00 00 00 00 00 4e 06 e0 00 00 00 9f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7c 77 1b 78 60 42 00 00 7e e4 bb 78 3b 39 00 08 38 60 00 08 3a f7 00 56 00 00 00 00 00 00 00 03 00 00 00 00 00 4e 09 80 f9 23 00 00 40 9e ff dc 7e a3 ab 78 4b fd 4a d5 e8 41 00 28 7e 54 92 14 7e f6 bb 78 7e 95 a3 78 7e c4 b3 78 38 60 00 08 4b fd 49 d9 e8 41 00 28 3a 73 00 08 3a d6 00 08 f9 e3 00 00 e9 21 00 78 00 00 00 00 00 00 00 04 00 00 00 00 00 4e 06 60 00 00 00 00 00 4e 09 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 e8 41 00 28 2f b5 00 00 41 9e 00 10 7e a3 ab 78 4b fd 4a 29 e8 41 00 56 00 00 00 00 00 00 00 06 00 00 00 00 00 4e 06 e0 00 00 00 a0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:49.919">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170718 04:02:49.919">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 10 f2 c0 35 fb 00 00 00 10 a0 63 9f b0 42 00 00 07 00 00 00 ...</msg>
<status endtime="20170718 04:02:49.919" starttime="20170718 04:02:49.918" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.919">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 10 f2 c0 35 fb 00 00 00 10 a0 63 9f b0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 18 90 00 00 18 ...</msg>
<status endtime="20170718 04:02:49.919" starttime="20170718 04:02:49.516" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.920">Length is 1</msg>
<msg level="INFO" timestamp="20170718 04:02:49.920">${length} = 1</msg>
<status endtime="20170718 04:02:49.920" starttime="20170718 04:02:49.920" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170718 04:02:49.921" starttime="20170718 04:02:49.920" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.922" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_esel"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_esel&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:49.922" starttime="20170718 04:02:49.921" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.922" starttime="20170718 04:02:49.921" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.923" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_esel"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_esel&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:49.923" starttime="20170718 04:02:49.923" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.924" starttime="20170718 04:02:49.922" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.924" starttime="20170718 04:02:49.516" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.924" starttime="20170718 04:02:49.201" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:49.931">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170718 04:02:49.934">${out} = </msg>
<status endtime="20170718 04:02:49.935" starttime="20170718 04:02:49.924" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:49.938">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170718 04:02:49.938" starttime="20170718 04:02:49.938" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.939">${status} = False</msg>
<status endtime="20170718 04:02:49.939" starttime="20170718 04:02:49.937" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.939">Returning from the enclosing user keyword.</msg>
<status endtime="20170718 04:02:49.939" starttime="20170718 04:02:49.939" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.940" starttime="20170718 04:02:48.848" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.940" starttime="20170718 04:02:48.797" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.940" starttime="20170718 04:02:48.794" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.940" starttime="20170718 04:02:48.794" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170718 04:02:49.943" starttime="20170718 04:02:49.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.943">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:49.943">${ret_values} = None</msg>
<status endtime="20170718 04:02:49.943" starttime="20170718 04:02:49.942" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170718 04:02:49.943" starttime="20170718 04:02:49.943" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:49.987">Returning from the enclosing user keyword.</msg>
<status endtime="20170718 04:02:49.987" starttime="20170718 04:02:49.986" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.987" starttime="20170718 04:02:49.984" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.987" starttime="20170718 04:02:49.944" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.987" starttime="20170718 04:02:49.941" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:49.987" starttime="20170718 04:02:49.941" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170718 04:02:49.989" starttime="20170718 04:02:49.989" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:49.989">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:49.989">${ret_values} = None</msg>
<status endtime="20170718 04:02:49.990" starttime="20170718 04:02:49.989" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170718 04:02:49.990" starttime="20170718 04:02:49.990" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:50.031">Dictionary does not contain key 'host'.</msg>
<status endtime="20170718 04:02:50.031" starttime="20170718 04:02:50.030" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:50.031">${has_host} = False</msg>
<status endtime="20170718 04:02:50.031" starttime="20170718 04:02:50.030" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170718 04:02:50.039" starttime="20170718 04:02:50.032" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:50.039" starttime="20170718 04:02:50.031" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:50.041">${port_num} = 22</msg>
<status endtime="20170718 04:02:50.041" starttime="20170718 04:02:50.041" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:50.042">${SSH_PORT} = 22</msg>
<status endtime="20170718 04:02:50.042" starttime="20170718 04:02:50.041" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:50.042">${https_num} = 443</msg>
<status endtime="20170718 04:02:50.042" starttime="20170718 04:02:50.042" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:50.043">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170718 04:02:50.043" starttime="20170718 04:02:50.042" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:50.043" starttime="20170718 04:02:50.040" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:50.043" starttime="20170718 04:02:50.040" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:50.044">Dictionary does not contain key 'port'.</msg>
<status endtime="20170718 04:02:50.044" starttime="20170718 04:02:50.044" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:50.045">${has_port} = False</msg>
<status endtime="20170718 04:02:50.045" starttime="20170718 04:02:50.044" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170718 04:02:50.046" starttime="20170718 04:02:50.046" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170718 04:02:50.048" starttime="20170718 04:02:50.047" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:50.048" starttime="20170718 04:02:50.046" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:50.048" starttime="20170718 04:02:50.045" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:50.048">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170718 04:02:51.734">Read output: root@witherspoon:~#</msg>
<status endtime="20170718 04:02:51.734" starttime="20170718 04:02:50.048" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:51.735" starttime="20170718 04:02:50.029" status="PASS"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:51.735">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170718 04:02:51.735" starttime="20170718 04:02:51.735" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:51.737">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_elog', '/xyz/open...</msg>
<status endtime="20170718 04:02:51.737" starttime="20170718 04:02:51.736" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:51.737">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_inventory.txt</msg>
<status endtime="20170718 04:02:51.738" starttime="20170718 04:02:51.737" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:51.740">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:51.742" starttime="20170718 04:02:51.740" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:51.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:51.743" starttime="20170718 04:02:51.743" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:51.744">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:51.744" starttime="20170718 04:02:51.744" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:51.745">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:51.745" starttime="20170718 04:02:51.744" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:51.936">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:51.936" starttime="20170718 04:02:51.745" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:51.936">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:51.936">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:51.937" starttime="20170718 04:02:51.745" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:51.937">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:51.937" starttime="20170718 04:02:51.937" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:51.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:51.938" starttime="20170718 04:02:51.937" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:51.938" starttime="20170718 04:02:51.739" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:51.938" starttime="20170718 04:02:51.739" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:51.938" starttime="20170718 04:02:51.738" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:51.939">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170718 04:02:51.939" starttime="20170718 04:02:51.938" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170718 04:02:51.939" starttime="20170718 04:02:51.939" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:53.983">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:53.984">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:53.984" starttime="20170718 04:02:51.940" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170718 04:02:53.984" starttime="20170718 04:02:53.984" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:53.985">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:53.985" starttime="20170718 04:02:51.738" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:53.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:53.986" starttime="20170718 04:02:53.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:53.986">${status} = True</msg>
<status endtime="20170718 04:02:53.986" starttime="20170718 04:02:53.985" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170718 04:02:53.986" starttime="20170718 04:02:53.986" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:53.989">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:53.989">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170718 04:02:53.990">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170718 04:02:53.990" starttime="20170718 04:02:53.987" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:53.991" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_inventory.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:53.992" starttime="20170718 04:02:53.991" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:53.992" starttime="20170718 04:02:53.990" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:53.992" starttime="20170718 04:02:51.737" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:53.992">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_led.txt</msg>
<status endtime="20170718 04:02:53.992" starttime="20170718 04:02:53.992" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:53.995">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:53.996" starttime="20170718 04:02:53.995" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:53.996">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:53.996" starttime="20170718 04:02:53.996" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:53.997">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:53.997" starttime="20170718 04:02:53.997" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:53.998">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:53.998" starttime="20170718 04:02:53.997" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.188">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:54.188" starttime="20170718 04:02:53.998" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:54.188">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:54.188">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:54.188" starttime="20170718 04:02:53.998" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.189">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:54.189" starttime="20170718 04:02:54.188" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:54.189" starttime="20170718 04:02:54.189" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.189" starttime="20170718 04:02:53.994" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.189" starttime="20170718 04:02:53.994" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.190" starttime="20170718 04:02:53.993" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.190">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170718 04:02:54.190" starttime="20170718 04:02:54.190" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170718 04:02:54.191" starttime="20170718 04:02:54.190" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.236">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:54.236">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170718 04:02:54.236" starttime="20170718 04:02:54.191" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170718 04:02:54.237" starttime="20170718 04:02:54.236" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:54.237">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170718 04:02:54.237" starttime="20170718 04:02:53.993" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170718 04:02:54.238">404 != 200</msg>
<status endtime="20170718 04:02:54.238" starttime="20170718 04:02:54.238" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:54.238">${status} = False</msg>
<status endtime="20170718 04:02:54.238" starttime="20170718 04:02:54.237" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170718 04:02:54.239">Continuing for loop from the next iteration.</msg>
<status endtime="20170718 04:02:54.239" starttime="20170718 04:02:54.239" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.239" starttime="20170718 04:02:54.239" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.239" starttime="20170718 04:02:53.992" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.240">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_sensor_list.txt</msg>
<status endtime="20170718 04:02:54.240" starttime="20170718 04:02:54.240" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.243">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:54.244" starttime="20170718 04:02:54.243" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.244">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:54.244" starttime="20170718 04:02:54.244" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.245">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:54.245" starttime="20170718 04:02:54.244" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.245">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:54.245" starttime="20170718 04:02:54.245" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:54.433" starttime="20170718 04:02:54.246" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:54.433">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:54.433">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:54.433" starttime="20170718 04:02:54.246" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.434">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:54.434" starttime="20170718 04:02:54.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:54.435" starttime="20170718 04:02:54.434" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.435" starttime="20170718 04:02:54.242" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.435" starttime="20170718 04:02:54.242" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.435" starttime="20170718 04:02:54.241" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.436">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170718 04:02:54.436" starttime="20170718 04:02:54.435" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170718 04:02:54.436" starttime="20170718 04:02:54.436" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.743">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:54.743">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:54.743" starttime="20170718 04:02:54.437" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170718 04:02:54.744" starttime="20170718 04:02:54.743" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:54.744">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:54.744" starttime="20170718 04:02:54.240" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:54.745" starttime="20170718 04:02:54.744" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:54.745">${status} = True</msg>
<status endtime="20170718 04:02:54.745" starttime="20170718 04:02:54.744" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170718 04:02:54.746" starttime="20170718 04:02:54.745" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.746">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:54.746">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170718 04:02:54.747">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170718 04:02:54.747" starttime="20170718 04:02:54.746" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.748" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_sensor_list.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:54.748" starttime="20170718 04:02:54.747" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.748" starttime="20170718 04:02:54.747" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:54.748" starttime="20170718 04:02:54.240" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.749">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_elog.txt</msg>
<status endtime="20170718 04:02:54.749" starttime="20170718 04:02:54.749" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:54.752">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:54.752" starttime="20170718 04:02:54.752" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.753">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:54.753" starttime="20170718 04:02:54.753" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.754">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:54.754" starttime="20170718 04:02:54.753" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:54.754">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:54.754" starttime="20170718 04:02:54.754" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.022">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:55.022" starttime="20170718 04:02:54.755" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:55.022">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:55.022">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:55.022" starttime="20170718 04:02:54.755" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.023">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:55.023" starttime="20170718 04:02:55.022" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:55.024" starttime="20170718 04:02:55.023" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.024" starttime="20170718 04:02:54.751" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.024" starttime="20170718 04:02:54.750" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.024" starttime="20170718 04:02:54.750" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.025">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170718 04:02:55.025" starttime="20170718 04:02:55.024" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170718 04:02:55.025" starttime="20170718 04:02:55.025" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.167">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:55.167">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:55.167" starttime="20170718 04:02:55.025" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170718 04:02:55.168" starttime="20170718 04:02:55.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:55.168">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:55.168" starttime="20170718 04:02:54.749" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:55.170" starttime="20170718 04:02:55.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:55.170">${status} = True</msg>
<status endtime="20170718 04:02:55.170" starttime="20170718 04:02:55.168" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170718 04:02:55.171" starttime="20170718 04:02:55.170" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.172">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1500350149465, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 10 f2 c0 35 fb 00 00 00 10 a0 63 9f b0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 18 90 00 00 18 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 00 01 00 00 00 01 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 a6 fc 00 00 00 00 55 44 04 dc 01 00 2a 00 b1 c9 01 01 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 00 00 03 71 92 00 01 01 80 00 00 00 01 00 00 00 01 00 00 00 00 04 d4 04 5c 00 01 04 34 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00 6c 00 00 00 02 00 00 00 00 00 00 00 00 00 06 d1 94 00 00 00 01 00 08 46 54 74 fc e4 c9 00 00 02 77 80 3c 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 06 db 1e 00 00 00 01 00 04 46 54 5d ac e6 35 00 00 05 25 00 00 00 01 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bc 00 00 00 00 00 00 00 bc 00 00 00 04 00 00 00 00 00 00 00 00 00 01 dd ac 00 00 00 01 00 08 46 54 90 52 f3 90 00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 9b 58 00 00 00 01 00 04 46 54 9b c8 e8 24 00 00 02 7f ff f8 f2 58 00 00 00 20 00 00 00 00 00 06 89 d6 00 00 00 01 00 08 46 54 e7 28 2c 11 00 00 02 db ff f2 b8 00 ff f2 b8 04 00 00 00 24 00 00 00 00 00 06 94 0a 00 00 00 01 00 10 46 54 a7 f5 5a b9 00 00 02 e2 00 00 00 00 00 00 00 00 ff f2 b8 20 ff f2 b8 18 00 00 00 2c 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 0c 00 00 00 00 00 00 03 0c 00 00 00 16 00 00 00 00 00 00 00 00 00 01 52 5c 00 00 00 00 00 04 46 54 51 ba 56 0f 00 00 07 cf ff fa 34 e0 00 00 00 20 00 00 00 00 00 01 5d 48 00 00 00 00 00 04 46 54 ed a3 95 d1 00 00 07 d3 ff fa 3f 38 00 00 00 20 00 00 00 00 00 01 65 c8 00 00 00 00 00 0c 46 54 33 b3 ad 6e 00 00 07 e4 00 00 00 00 00 00 00 90 00 00 00 00 00 00 00 28 00 00 00 00 00 01 6e 52 00 00 00 00 00 0c 46 54 bc 0d c8 47 00 00 07 e7 00 00 00 00 1d cd 65 00 00 00 00 00 00 00 00 28 00 00 00 00 00 01 78 c6 00 00 00 00 00 0c 46 54 f4 73 1e 62 00 00 08 0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 28 00 00 00 00 00 01 86 9c 00 00 00 00 00 04 46 54 0a dc 26 00 00 00 04 b4 ff f9 fb 30 00 00 00 20 00 00 00 00 00 01 90 7c 00 00 00 00 00 04 46 54 98 89 c1 e3 00 00 04 ba 00 00 10 00 00 00 00 20 00 00 00 00 00 01 97 fa 00 00 00 00 00 04 46 54 27 60 c3 45 00 00 04 bd ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 9f f6 00 00 00 00 00 04 46 54 2e 0f 9e bb 00 00 04 c0 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 a8 02 00 00 00 00 00 04 46 54 e7 4b a0 ca 00 00 04 c3 ff fa 3f 18 00 00 00 20 00 00 00 00 00 01 d3 cc 00 00 00 01 00 04 46 54 9c b6 b2 72 00 00 06 27 00 00 08 08 00 00 00 20 00 00 00 00 00 04 a7 32 00 00 00 01 00 08 46 54 81 6a 8c 3c 00 00 01 44 00 00 03 00 00 00 00 00 00 00 00 24 00 00 00 00 00 04 cb c4 00 00 00 00 00 0c 46 54 de 96 27 53 00 00 00 7c 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 28 00 00 00 00 00 04 d5 24 00 00 00 01 00 04 46 54 68 af 80 4f 00 00 05 81 ff f9 fa e0 00 00 00 20 00 00 00 00 00 06 3c ac 00 00 00 01 00 04 46 54 8e 8a c0 53 00 00 03 39 80 30 00 00 00 00 00 20 00 00 00 00 00 06 59 18 00 00 00 01 00 04 46 54 6d 4d 98 fd 00 00 03 b8 80 32 00 00 00 00 00 20 00 00 00 00 00 06 75 c0 00 00 00 01 00 04 46 54 c5 9b 22 99 00 00 04 3e 00 00 03 e8 00 00 00 20 00 00 00 00 00 06 7f 0c 00 00 00 01 00 04 46 54 2b 09 df a5 00 00 02 c6 ff f2 01 80 00 00 00 20 00 00 00 00 00 06 9d 82 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 27 00 00 00 00 00 00 00 20 00 00 00 00 00 06 ab 98 00 00 00 01 00 04 46 54 c6 98 87 9a 00 00 02 32 80 3c 00 00 00 00 00 20 00 00 00 00 00 06 c8 3a 00 00 00 01 00 04 46 54 ac d1 13 d0 00 00 02 66 00 00 00 00 00 00 00 20 00 00 00 00 00 06 e5 86 00 00 00 01 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 83 81 00 90 55 44 00 60 01 03 01 00 00 00 00 00 00 03 e3 f4 00 00 00 00 00 03 a6 fc 00 00 00 00 40 3f e7 94 00 00 00 00 40 40 22 80 00 00 00 00 40 3f dc 98 00 00 00 00 40 3f e2 f0 00 00 00 00 40 3f e5 0c 00 00 00 00 40 3f e5 ec 00 00 00 00 40 3f 6c 60 00 00 00 00 40 19 bc 7c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 64 30 61 38 66 31 38 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 02 04 10 04 02 03 12 00 00 00 00 80 00 00 00 00 00 00 00 00 40 5f 02 e0 00 00 00 00 00 00 00 00 02 08 10 04 02 03 12 00 00 00 01 00 00 00 00 00 00 00 00 00 40 5f 02 f8 00 00 00 00 00 4e 06 e0 00 00 00 9f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7c 77 1b 78 60 42 00 00 7e e4 bb 78 3b 39 00 08 38 60 00 08 3a f7 00 56 00 00 00 00 00 00 00 03 00 00 00 00 00 4e 09 80 f9 23 00 00 40 9e ff dc 7e a3 ab 78 4b fd 4a d5 e8 41 00 28 7e 54 92 14 7e f6 bb 78 7e 95 a3 78 7e c4 b3 78 38 60 00 08 4b fd 49 d9 e8 41 00 28 3a 73 00 08 3a d6 00 08 f9 e3 00 00 e9 21 00 78 00 00 00 00 00 00 00 04 00 00 00 00 00 4e 06 60 00 00 00 00 00 4e 09 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 e8 41 00 28 2f b5 00 00 41 9e 00 10 7e a3 ab 78 4b fd 4a 29 e8 41 00 56 00 00 00 00 00 00 00 06 00 00 00 00 00 4e 06 e0 00 00 00 a0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1500350153706, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170718 04:02:55.172">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170718 04:02:55.172">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "org.open_power.Error.Host.Event.Event",
            "Re...</msg>
<status endtime="20170718 04:02:55.172" starttime="20170718 04:02:55.171" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.174" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_elog.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:55.174" starttime="20170718 04:02:55.173" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.174" starttime="20170718 04:02:55.173" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.174" starttime="20170718 04:02:54.748" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.175">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_record_log.txt</msg>
<status endtime="20170718 04:02:55.175" starttime="20170718 04:02:55.175" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.180">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170718 04:02:55.180" starttime="20170718 04:02:55.180" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170718 04:02:55.181" starttime="20170718 04:02:55.181" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.182">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170718 04:02:55.182" starttime="20170718 04:02:55.181" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.182">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170718 04:02:55.182" starttime="20170718 04:02:55.182" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.365">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170718 04:02:55.365" starttime="20170718 04:02:55.183" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:55.365">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:55.365">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170718 04:02:55.365" starttime="20170718 04:02:55.183" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.366">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:55.366" starttime="20170718 04:02:55.366" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170718 04:02:55.367" starttime="20170718 04:02:55.366" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.367" starttime="20170718 04:02:55.179" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.367" starttime="20170718 04:02:55.176" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.367" starttime="20170718 04:02:55.176" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.368">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170718 04:02:55.368" starttime="20170718 04:02:55.368" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170718 04:02:55.369" starttime="20170718 04:02:55.369" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.413">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170718 04:02:55.414">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170718 04:02:55.414" starttime="20170718 04:02:55.370" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170718 04:02:55.414" starttime="20170718 04:02:55.414" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:55.415">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170718 04:02:55.415" starttime="20170718 04:02:55.175" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170718 04:02:55.416">404 != 200</msg>
<status endtime="20170718 04:02:55.416" starttime="20170718 04:02:55.415" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:55.416">${status} = False</msg>
<status endtime="20170718 04:02:55.416" starttime="20170718 04:02:55.415" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170718 04:02:55.417">Continuing for loop from the next iteration.</msg>
<status endtime="20170718 04:02:55.417" starttime="20170718 04:02:55.417" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.417" starttime="20170718 04:02:55.417" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.417" starttime="20170718 04:02:55.174" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.417" starttime="20170718 04:02:51.737" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.418" starttime="20170718 04:02:51.736" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.418" starttime="20170718 04:02:51.735" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.418" starttime="20170718 04:02:51.735" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.418" starttime="20170718 04:02:50.029" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.418" starttime="20170718 04:02:49.990" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.418" starttime="20170718 04:02:49.988" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.418" starttime="20170718 04:02:49.988" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170718 04:02:55.420" starttime="20170718 04:02:55.420" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:55.420">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:55.420">${ret_values} = None</msg>
<status endtime="20170718 04:02:55.420" starttime="20170718 04:02:55.419" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170718 04:02:55.421" starttime="20170718 04:02:55.420" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:55.464">Dictionary does not contain key 'host'.</msg>
<status endtime="20170718 04:02:55.464" starttime="20170718 04:02:55.463" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:55.464">${has_host} = False</msg>
<status endtime="20170718 04:02:55.464" starttime="20170718 04:02:55.463" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170718 04:02:55.465" starttime="20170718 04:02:55.465" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.465" starttime="20170718 04:02:55.465" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.467">${port_num} = 22</msg>
<status endtime="20170718 04:02:55.467" starttime="20170718 04:02:55.467" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.468">${SSH_PORT} = 22</msg>
<status endtime="20170718 04:02:55.468" starttime="20170718 04:02:55.467" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:55.468">${https_num} = 443</msg>
<status endtime="20170718 04:02:55.468" starttime="20170718 04:02:55.468" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.469">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170718 04:02:55.469" starttime="20170718 04:02:55.469" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.469" starttime="20170718 04:02:55.466" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.470" starttime="20170718 04:02:55.466" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:55.471">Dictionary does not contain key 'port'.</msg>
<status endtime="20170718 04:02:55.471" starttime="20170718 04:02:55.470" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:55.471">${has_port} = False</msg>
<status endtime="20170718 04:02:55.471" starttime="20170718 04:02:55.470" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170718 04:02:55.474" starttime="20170718 04:02:55.473" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170718 04:02:55.475" starttime="20170718 04:02:55.474" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.475" starttime="20170718 04:02:55.473" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:55.475" starttime="20170718 04:02:55.471" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:55.475">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170718 04:02:57.257">Read output: root@witherspoon:~#</msg>
<status endtime="20170718 04:02:57.257" starttime="20170718 04:02:55.475" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.257" starttime="20170718 04:02:55.462" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:57.258">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170718 04:02:57.258" starttime="20170718 04:02:57.257" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:57.259">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170718 04:02:57.259" starttime="20170718 04:02:57.259" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.266">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170718 04:02:57.266" starttime="20170718 04:02:57.260" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.269" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.269" starttime="20170718 04:02:57.268" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.269" starttime="20170718 04:02:57.268" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.271" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.271" starttime="20170718 04:02:57.270" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.271" starttime="20170718 04:02:57.269" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.272" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.272" starttime="20170718 04:02:57.271" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.272" starttime="20170718 04:02:57.271" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.273" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.273" starttime="20170718 04:02:57.273" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.273" starttime="20170718 04:02:57.272" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.274" starttime="20170718 04:02:57.267" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.274" starttime="20170718 04:02:57.267" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:57.274">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170718 04:02:57.331">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:57.331">${stdout} = Linux witherspoon 4.10.17-9f6d91f5597d0b09da1caac45574e24c6aeadc44 #1 Tue Jul 18 03:29:28 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170718 04:02:57.331">${stderr} = </msg>
<status endtime="20170718 04:02:57.331" starttime="20170718 04:02:57.274" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.337" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.337" starttime="20170718 04:02:57.337" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.337" starttime="20170718 04:02:57.336" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.337" starttime="20170718 04:02:57.331" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.337" starttime="20170718 04:02:57.266" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.337" starttime="20170718 04:02:57.266" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.341" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.341" starttime="20170718 04:02:57.340" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.341" starttime="20170718 04:02:57.340" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.342" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.342" starttime="20170718 04:02:57.342" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.342" starttime="20170718 04:02:57.341" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.343" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.343" starttime="20170718 04:02:57.343" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.344" starttime="20170718 04:02:57.342" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.345" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.345" starttime="20170718 04:02:57.344" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.345" starttime="20170718 04:02:57.344" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.345" starttime="20170718 04:02:57.339" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.345" starttime="20170718 04:02:57.338" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:57.346">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170718 04:02:57.431">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:57.431">${stdout} =  04:02:59 up 15 min,  load average: 0.54, 0.69, 0.75</msg>
<msg level="INFO" timestamp="20170718 04:02:57.431">${stderr} = </msg>
<status endtime="20170718 04:02:57.431" starttime="20170718 04:02:57.345" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.437" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.438" starttime="20170718 04:02:57.437" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.438" starttime="20170718 04:02:57.436" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.438" starttime="20170718 04:02:57.432" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.438" starttime="20170718 04:02:57.338" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.438" starttime="20170718 04:02:57.337" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.441" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.441" starttime="20170718 04:02:57.440" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.441" starttime="20170718 04:02:57.440" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.442" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.442" starttime="20170718 04:02:57.442" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.442" starttime="20170718 04:02:57.441" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.444" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.444" starttime="20170718 04:02:57.443" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.444" starttime="20170718 04:02:57.443" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.445" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.445" starttime="20170718 04:02:57.444" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.445" starttime="20170718 04:02:57.444" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.446" starttime="20170718 04:02:57.439" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.446" starttime="20170718 04:02:57.439" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:57.446">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170718 04:02:57.531">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:57.531">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg level="INFO" timestamp="20170718 04:02:57.531">${stderr} = </msg>
<status endtime="20170718 04:02:57.531" starttime="20170718 04:02:57.446" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.537" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.538" starttime="20170718 04:02:57.537" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.538" starttime="20170718 04:02:57.536" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.538" starttime="20170718 04:02:57.532" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.538" starttime="20170718 04:02:57.438" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.538" starttime="20170718 04:02:57.438" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.538" starttime="20170718 04:02:57.266" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.538" starttime="20170718 04:02:57.259" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.538" starttime="20170718 04:02:57.258" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:57.539">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170718 04:02:57.539" starttime="20170718 04:02:57.539" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.540">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170718 04:02:57.540" starttime="20170718 04:02:57.539" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.543" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.543" starttime="20170718 04:02:57.543" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.543" starttime="20170718 04:02:57.542" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.544" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.544" starttime="20170718 04:02:57.544" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.545" starttime="20170718 04:02:57.543" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.546" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.546" starttime="20170718 04:02:57.545" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.546" starttime="20170718 04:02:57.545" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:57.547" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:57.547" starttime="20170718 04:02:57.547" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.547" starttime="20170718 04:02:57.546" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.547" starttime="20170718 04:02:57.541" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:57.547" starttime="20170718 04:02:57.541" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:57.548">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170718 04:02:59.025">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:59.025">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170718 04:02:59.026">${stderr} = </msg>
<status endtime="20170718 04:02:59.026" starttime="20170718 04:02:57.548" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.032" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.032" starttime="20170718 04:02:59.032" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.032" starttime="20170718 04:02:59.031" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.032" starttime="20170718 04:02:59.026" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.032" starttime="20170718 04:02:57.540" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.032" starttime="20170718 04:02:57.540" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.033" starttime="20170718 04:02:57.540" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.033" starttime="20170718 04:02:57.538" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.033" starttime="20170718 04:02:57.538" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:59.034">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170718 04:02:59.034" starttime="20170718 04:02:59.034" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.035">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170718 04:02:59.035" starttime="20170718 04:02:59.034" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.038" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.038" starttime="20170718 04:02:59.038" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.038" starttime="20170718 04:02:59.037" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.040" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.040" starttime="20170718 04:02:59.039" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.040" starttime="20170718 04:02:59.038" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.041" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.041" starttime="20170718 04:02:59.040" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.041" starttime="20170718 04:02:59.040" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.042" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.042" starttime="20170718 04:02:59.042" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.042" starttime="20170718 04:02:59.041" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.043" starttime="20170718 04:02:59.037" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.043" starttime="20170718 04:02:59.036" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:59.043">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170718 04:02:59.128">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170718 04:02:59.128">${stdout} = </msg>
<msg level="INFO" timestamp="20170718 04:02:59.128">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170718 04:02:59.128" starttime="20170718 04:02:59.043" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.134" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.134" starttime="20170718 04:02:59.134" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.135" starttime="20170718 04:02:59.133" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.135" starttime="20170718 04:02:59.128" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.135" starttime="20170718 04:02:59.035" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.135" starttime="20170718 04:02:59.035" status="PASS"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.138" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.138" starttime="20170718 04:02:59.137" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.138" starttime="20170718 04:02:59.137" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.139" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.139" starttime="20170718 04:02:59.139" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.139" starttime="20170718 04:02:59.138" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.141" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.141" starttime="20170718 04:02:59.140" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.141" starttime="20170718 04:02:59.140" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.142" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.142" starttime="20170718 04:02:59.142" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.142" starttime="20170718 04:02:59.141" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.143" starttime="20170718 04:02:59.136" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.143" starttime="20170718 04:02:59.136" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:59.143">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170718 04:02:59.228">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:02:59.228">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-26"
VERSION_ID="v1.99.7-26-gd1fca41"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170718 04:02:59.228">${stderr} = </msg>
<status endtime="20170718 04:02:59.228" starttime="20170718 04:02:59.143" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.234" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:02:59.234" starttime="20170718 04:02:59.234" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.234" starttime="20170718 04:02:59.233" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:59.229" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:59.135" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:59.135" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:59.035" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:59.033" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:59.033" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:57.258" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:55.461" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:55.421" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:55.418" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.235" starttime="20170718 04:02:55.418" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170718 04:02:59.237" starttime="20170718 04:02:59.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:59.237">${status} = PASS</msg>
<msg level="INFO" timestamp="20170718 04:02:59.237">${ret_values} = None</msg>
<status endtime="20170718 04:02:59.237" starttime="20170718 04:02:59.236" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170718 04:02:59.238" starttime="20170718 04:02:59.238" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:59.279">Dictionary does not contain key 'host'.</msg>
<status endtime="20170718 04:02:59.279" starttime="20170718 04:02:59.279" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:59.279">${has_host} = False</msg>
<status endtime="20170718 04:02:59.279" starttime="20170718 04:02:59.278" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170718 04:02:59.281" starttime="20170718 04:02:59.281" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.281" starttime="20170718 04:02:59.280" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:59.283">${port_num} = 22</msg>
<status endtime="20170718 04:02:59.283" starttime="20170718 04:02:59.282" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:59.283">${SSH_PORT} = 22</msg>
<status endtime="20170718 04:02:59.283" starttime="20170718 04:02:59.283" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:02:59.284">${https_num} = 443</msg>
<status endtime="20170718 04:02:59.284" starttime="20170718 04:02:59.283" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.285">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170718 04:02:59.285" starttime="20170718 04:02:59.284" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.285" starttime="20170718 04:02:59.282" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.285" starttime="20170718 04:02:59.281" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170718 04:02:59.287">Dictionary does not contain key 'port'.</msg>
<status endtime="20170718 04:02:59.287" starttime="20170718 04:02:59.286" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:02:59.287">${has_port} = False</msg>
<status endtime="20170718 04:02:59.287" starttime="20170718 04:02:59.285" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170718 04:02:59.290" starttime="20170718 04:02:59.290" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170718 04:02:59.291" starttime="20170718 04:02:59.290" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.291" starttime="20170718 04:02:59.289" status="PASS"></status>
</kw>
<status endtime="20170718 04:02:59.291" starttime="20170718 04:02:59.288" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:02:59.292">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170718 04:03:01.039">Read output: root@witherspoon:~#</msg>
<status endtime="20170718 04:03:01.039" starttime="20170718 04:02:59.292" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.039" starttime="20170718 04:02:59.278" status="PASS"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.040">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170718 04:03:01.040" starttime="20170718 04:03:01.040" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.042">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status endtime="20170718 04:03:01.042" starttime="20170718 04:03:01.041" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.043">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_meminfo.txt</msg>
<status endtime="20170718 04:03:01.043" starttime="20170718 04:03:01.042" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170718 04:03:01.044" starttime="20170718 04:03:01.044" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.045">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170718 04:03:01.101">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:03:01.101">${stdout} = MemTotal:         432336 kB
MemFree:          275300 kB
MemAvailable:     319328 kB
Buffers:           10844 kB
Cached:            50680 kB
SwapCached:            0 kB
Active:           106012 kB
Inac...</msg>
<msg level="INFO" timestamp="20170718 04:03:01.102">${stderr} = </msg>
<status endtime="20170718 04:03:01.102" starttime="20170718 04:03:01.044" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:01.108" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_meminfo.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:03:01.108" starttime="20170718 04:03:01.107" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.108" starttime="20170718 04:03:01.107" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.108" starttime="20170718 04:03:01.102" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.109" starttime="20170718 04:03:01.043" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.109" starttime="20170718 04:03:01.042" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.109">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_procinfo.txt</msg>
<status endtime="20170718 04:03:01.109" starttime="20170718 04:03:01.109" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170718 04:03:01.111" starttime="20170718 04:03:01.110" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.111">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170718 04:03:01.228">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:03:01.228">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170718 04:03:01.228">${stderr} = </msg>
<status endtime="20170718 04:03:01.228" starttime="20170718 04:03:01.111" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:01.235" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_procinfo.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:03:01.235" starttime="20170718 04:03:01.234" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.235" starttime="20170718 04:03:01.233" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.235" starttime="20170718 04:03:01.229" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.235" starttime="20170718 04:03:01.110" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.235" starttime="20170718 04:03:01.109" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.236">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_dmesg.txt</msg>
<status endtime="20170718 04:03:01.236" starttime="20170718 04:03:01.235" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170718 04:03:01.237" starttime="20170718 04:03:01.237" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.238">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170718 04:03:01.332">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:03:01.333">${stdout} = [    1.910000] io scheduler deadline registered
[    1.910000] io scheduler cfq registered (default)
[    2.060000] ipmi-bt-host 1e789140.ibt: Found bt bmc device
[    2.060000] ipmi-bt-host 1e789140....</msg>
<msg level="INFO" timestamp="20170718 04:03:01.333">${stderr} = </msg>
<status endtime="20170718 04:03:01.333" starttime="20170718 04:03:01.237" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:01.339" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_dmesg.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:03:01.339" starttime="20170718 04:03:01.339" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.339" starttime="20170718 04:03:01.338" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.339" starttime="20170718 04:03:01.333" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.339" starttime="20170718 04:03:01.236" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:01.340" starttime="20170718 04:03:01.235" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.340">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_journalctl.txt</msg>
<status endtime="20170718 04:03:01.340" starttime="20170718 04:03:01.340" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170718 04:03:01.342" starttime="20170718 04:03:01.341" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:01.342">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170718 04:03:03.562">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:03:03.563">${stdout} = -- Logs begin at Tue 2017-07-18 03:47:27 UTC, end at Tue 2017-07-18 04:03:02 UTC. --
Jul 18 03:47:27 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 18 03:47:27 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170718 04:03:03.563">${stderr} = </msg>
<status endtime="20170718 04:03:03.563" starttime="20170718 04:03:01.342" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:03.571" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_journalctl.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:03:03.571" starttime="20170718 04:03:03.570" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.571" starttime="20170718 04:03:03.568" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.571" starttime="20170718 04:03:03.564" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.572" starttime="20170718 04:03:01.341" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.572" starttime="20170718 04:03:01.340" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:03.573">${logpath} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_proc_list.txt</msg>
<status endtime="20170718 04:03:03.573" starttime="20170718 04:03:03.572" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170718 04:03:03.575" starttime="20170718 04:03:03.574" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:03.575">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170718 04:03:03.912">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170718 04:03:03.912">${stdout} = Mem: 157316K used, 275020K free, 14620K shrd, 10844K buff, 50688K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.54 0.69 0.75 1/143 1530
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170718 04:03:03.912">${stderr} = </msg>
<status endtime="20170718 04:03:03.912" starttime="20170718 04:03:03.575" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:03.919" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_proc_list.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/20170718040242610223_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:03:03.919" starttime="20170718 04:03:03.918" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.919" starttime="20170718 04:03:03.917" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.919" starttime="20170718 04:03:03.913" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:03:03.573" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:03:03.572" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:03:01.042" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:03:01.041" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:03:01.041" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:03:01.040" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:02:59.277" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:02:59.238" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:02:59.236" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:02:59.235" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:02:44.660" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:02:44.657" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:02:44.657" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:03.920" starttime="20170718 04:02:44.657" status="PASS"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170718 04:03:04.069" starttime="20170718 04:03:03.921" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:04.069" starttime="20170718 04:02:44.655" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:04.069" starttime="20170718 04:02:39.545" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:04.069" starttime="20170718 04:02:39.545" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170718 04:03:04.070" starttime="20170718 04:03:04.070" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.084">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170718 04:03:04.084" starttime="20170718 04:03:04.071" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.085">${FFDC_DIR_PATH} = /tmp/fspcibld/6791/obmc-robot/logs/20170718040242610223_TestsTestBasicPoweron/20170718040242610223_PowerOnTest/</msg>
<status endtime="20170718 04:03:04.085" starttime="20170718 04:03:04.085" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170718 04:03:04.086" starttime="20170718 04:03:04.085" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170718 04:03:04.087" starttime="20170718 04:03:04.086" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:04.088" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs"&gt;/tmp/fspcibld/6791/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170718 04:03:04.088" starttime="20170718 04:03:04.087" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:04.089" html="yes">File '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170718 04:03:04.089" starttime="20170718 04:03:04.088" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:03:04.089">${exist} = True</msg>
<status endtime="20170718 04:03:04.089" starttime="20170718 04:03:04.088" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170718 04:03:04.090" starttime="20170718 04:03:04.089" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170718 04:03:04.090" starttime="20170718 04:03:04.090" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.091">${cur_time} = 2017-07-18 04:03:04:090894</msg>
<status endtime="20170718 04:03:04.091" starttime="20170718 04:03:04.091" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.092">${cur_time} = 20170718040304090894</msg>
<status endtime="20170718 04:03:04.092" starttime="20170718 04:03:04.091" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:03:04.092">${cur_time} = 20170718040304090894</msg>
<status endtime="20170718 04:03:04.092" starttime="20170718 04:03:04.090" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:04.093" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6791/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170718 04:03:04.093" starttime="20170718 04:03:04.092" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:04.093" starttime="20170718 04:03:04.070" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:04.093" starttime="20170718 04:02:39.277" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.095">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170718 04:03:04.095" starttime="20170718 04:03:04.095" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.096">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170718 04:03:04.096" starttime="20170718 04:03:04.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:03:04.096">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170718 04:03:04.096" starttime="20170718 04:03:04.094" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.097">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170718 04:03:04.097" starttime="20170718 04:03:04.097" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170718 04:03:04.097" starttime="20170718 04:03:04.097" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.105">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170718 04:03:04.108">${rc} = 0</msg>
<msg level="INFO" timestamp="20170718 04:03:04.108">${output} = /tmp/fspcibld/6791/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170718 04:03:04.108" starttime="20170718 04:03:04.098" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170718 04:03:04.111" starttime="20170718 04:03:04.111" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170718 04:03:04.112" starttime="20170718 04:03:04.112" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.113">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170718 04:03:04.113" starttime="20170718 04:03:04.113" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:03:04.114">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170718 04:03:04.114" starttime="20170718 04:03:04.096" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.114">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170718 04:03:04.114" starttime="20170718 04:03:04.114" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170718 04:03:04.115" starttime="20170718 04:03:04.115" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.118">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170718 04:03:04.137">${rc} = 0</msg>
<msg level="INFO" timestamp="20170718 04:03:04.137">${os_con_pid} = </msg>
<status endtime="20170718 04:03:04.137" starttime="20170718 04:03:04.115" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170718 04:03:04.140" starttime="20170718 04:03:04.139" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.144">${cmd_buf} = kill -9 </msg>
<status endtime="20170718 04:03:04.144" starttime="20170718 04:03:04.140" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170718 04:03:04.145" starttime="20170718 04:03:04.144" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.145">${rc} = None</msg>
<msg level="INFO" timestamp="20170718 04:03:04.145">${output} = None</msg>
<status endtime="20170718 04:03:04.146" starttime="20170718 04:03:04.145" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170718 04:03:04.146" starttime="20170718 04:03:04.146" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:04.150" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/6791/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/6791/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170718 04:03:04.151" starttime="20170718 04:03:04.148" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:04.151" starttime="20170718 04:03:04.147" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:04.151" starttime="20170718 04:03:04.147" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.151">${output} = </msg>
<status endtime="20170718 04:03:04.151" starttime="20170718 04:03:04.151" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170718 04:03:04.152">${loc_quiet} = 1</msg>
<status endtime="20170718 04:03:04.152" starttime="20170718 04:03:04.152" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170718 04:03:04.211" starttime="20170718 04:03:04.153" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:03:04.213">${rc} = 0</msg>
<msg level="INFO" timestamp="20170718 04:03:04.213">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;13H1[24;26H[24;10HUb...</msg>
<status endtime="20170718 04:03:04.213" starttime="20170718 04:03:04.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170718 04:03:04.214">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;13H1[24;26H[24;10HUb...</msg>
<status endtime="20170718 04:03:04.214" starttime="20170718 04:03:04.093" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170718 04:03:04.216">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;13H1[24;26H[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   49.419066224,5] IPMI: Soft shutdown requested
[   29.362046] kexec_core: Starting new kernel
[   50.340716608,5] OPAL: Switch to big-endian OS
[   50.507934272,5] OPAL: Switch to little-endian OS
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[    1.572464] Unable to open file: /etc/keys/x509_ima.der (-2)
[    1.572470] Unable to open file: /etc/keys/x509_evm.der (-2)
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[49m[2J[-1;-1f[?25h
Ubuntu 17.04 ws017p1 hvc0

ws017p1 login: </msg>
<status endtime="20170718 04:03:04.216" starttime="20170718 04:03:04.216" status="PASS"></status>
</kw>
<status endtime="20170718 04:03:04.217" starttime="20170718 04:02:39.276" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170718 04:03:04.217" starttime="20170718 03:56:30.511" status="FAIL" critical="yes">Keyword 'Is Host Off' failed after retrying for 6 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170718 04:03:04.219" starttime="20170718 03:56:30.477" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170718 04:03:04.223" starttime="20170718 03:56:23.123" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" name="Tests" fail="1">Tests</stat>
<stat id="s1-s1" pass="1" name="Security" fail="0">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" name="Test Basic Poweron" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
