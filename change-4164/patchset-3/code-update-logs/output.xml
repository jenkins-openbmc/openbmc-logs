<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170511 16:46:58.695" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170511 16:46:59.735" level="INFO">Length is 31</msg>
<status status="PASS" endtime="20170511 16:46:59.735" starttime="20170511 16:46:59.734"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170511 16:46:59.736" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon.pnor"&gt;/home/fspcibld/witherspoon.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170511 16:46:59.736" starttime="20170511 16:46:59.735"></status>
</kw>
<status status="PASS" endtime="20170511 16:46:59.737" starttime="20170511 16:46:59.733"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170511 16:46:59.746" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 16:46:59.811" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 16:46:59.811" starttime="20170511 16:46:59.810"></status>
</kw>
<msg timestamp="20170511 16:46:59.811" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 16:46:59.811" starttime="20170511 16:46:59.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:46:59.812" starttime="20170511 16:46:59.812"></status>
</kw>
<status status="PASS" endtime="20170511 16:46:59.812" starttime="20170511 16:46:59.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 16:46:59.813" starttime="20170511 16:46:59.813"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 16:46:59.814" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 16:46:59.814" starttime="20170511 16:46:59.814"></status>
</kw>
<msg timestamp="20170511 16:46:59.814" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 16:46:59.814" starttime="20170511 16:46:59.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:46:59.816" starttime="20170511 16:46:59.816"></status>
</kw>
<status status="PASS" endtime="20170511 16:46:59.817" starttime="20170511 16:46:59.815"></status>
</kw>
<status status="PASS" endtime="20170511 16:46:59.817" starttime="20170511 16:46:59.815"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 16:46:59.817" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 16:47:01.717" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 16:47:01.718" starttime="20170511 16:46:59.817"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:01.718" starttime="20170511 16:46:59.809"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 16:47:01.719" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170511 16:47:01.828" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 16:47:01.828" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170511 16:47:01.828" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 16:47:01.828" starttime="20170511 16:47:01.718"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170511 16:47:01.829" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170511 16:47:01.829" starttime="20170511 16:47:01.829"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170511 16:47:01.830" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170511 16:47:01.830" starttime="20170511 16:47:01.829"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:01.830" starttime="20170511 16:46:59.808"></status>
</kw>
<msg timestamp="20170511 16:47:01.831" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170511 16:47:02.130" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170511 16:47:02.147" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170511 16:47:02.147" starttime="20170511 16:47:02.145"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:02.148" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170511 16:47:02.148" starttime="20170511 16:47:02.147"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:02.151" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:02.152" starttime="20170511 16:47:02.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:02.152" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:02.152" starttime="20170511 16:47:02.152"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:02.153" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:02.153" starttime="20170511 16:47:02.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:02.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:02.154" starttime="20170511 16:47:02.153"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:02.433" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:02.433" starttime="20170511 16:47:02.154"></status>
</kw>
<msg timestamp="20170511 16:47:02.433" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:02.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:02.435" starttime="20170511 16:47:02.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:02.436" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:02.436" starttime="20170511 16:47:02.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:02.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:02.437" starttime="20170511 16:47:02.436"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.437" starttime="20170511 16:47:02.150"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.437" starttime="20170511 16:47:02.149"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.437" starttime="20170511 16:47:02.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:02.438" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170511 16:47:02.438" starttime="20170511 16:47:02.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:02.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:02.439" starttime="20170511 16:47:02.438"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:02.440" starttime="20170511 16:47:02.439"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170511 16:47:02.443" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170511 16:47:02.443" starttime="20170511 16:47:02.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170511 16:47:02.444" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170511 16:47:02.444" starttime="20170511 16:47:02.443"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.444" starttime="20170511 16:47:02.443"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.444" starttime="20170511 16:47:02.440"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:02.663" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170511 16:47:02.663" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:02.663" starttime="20170511 16:47:02.444"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170511 16:47:02.665" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170511 16:47:02.665" starttime="20170511 16:47:02.664"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170511 16:47:02.666" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170511 16:47:02.666" starttime="20170511 16:47:02.665"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.666" starttime="20170511 16:47:02.665"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.666" starttime="20170511 16:47:02.663"></status>
</kw>
<msg timestamp="20170511 16:47:02.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:02.666" starttime="20170511 16:47:02.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:02.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:02.667" starttime="20170511 16:47:02.667"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170511 16:47:02.667" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:47:02.668" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:47:02.668" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170511 16:47:02.668" starttime="20170511 16:47:02.667"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.668" starttime="20170511 16:47:02.147"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:02.672" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:02.672" starttime="20170511 16:47:02.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:02.673" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:02.673" starttime="20170511 16:47:02.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:02.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:02.673" starttime="20170511 16:47:02.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:02.674" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:02.674" starttime="20170511 16:47:02.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:02.938" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:02.938" starttime="20170511 16:47:02.675"></status>
</kw>
<msg timestamp="20170511 16:47:02.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:02.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:02.939" starttime="20170511 16:47:02.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:02.939" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:02.940" starttime="20170511 16:47:02.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:02.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:02.940" starttime="20170511 16:47:02.940"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.940" starttime="20170511 16:47:02.671"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.940" starttime="20170511 16:47:02.670"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:02.941" starttime="20170511 16:47:02.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:02.941" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170511 16:47:02.941" starttime="20170511 16:47:02.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:02.942" starttime="20170511 16:47:02.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:03.050" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20170511 16:47:03.050" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:03.050" starttime="20170511 16:47:02.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:03.051" starttime="20170511 16:47:03.051"></status>
</kw>
<msg timestamp="20170511 16:47:03.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:03.051" starttime="20170511 16:47:02.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:03.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:03.052" starttime="20170511 16:47:03.052"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:47:03.053" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:47:03.053" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:47:03.053" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170511 16:47:03.053" starttime="20170511 16:47:03.052"></status>
</kw>
<msg timestamp="20170511 16:47:03.053" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170511 16:47:03.053" starttime="20170511 16:47:02.668"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170511 16:47:03.054" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:03.054" starttime="20170511 16:47:03.053"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:03.054" starttime="20170511 16:47:02.144"></status>
</kw>
<msg timestamp="20170511 16:47:03.089" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170511 16:47:03.105" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170511 16:47:03.110" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170511 16:47:03.110" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 16:47:03.113" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 16:47:03.113" starttime="20170511 16:47:03.112"></status>
</kw>
<msg timestamp="20170511 16:47:03.113" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 16:47:03.113" starttime="20170511 16:47:03.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:03.114" starttime="20170511 16:47:03.114"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:03.114" starttime="20170511 16:47:03.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:03.115" starttime="20170511 16:47:03.114"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 16:47:03.116" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 16:47:03.116" starttime="20170511 16:47:03.116"></status>
</kw>
<msg timestamp="20170511 16:47:03.116" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 16:47:03.116" starttime="20170511 16:47:03.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:03.118" starttime="20170511 16:47:03.117"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:03.118" starttime="20170511 16:47:03.117"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:03.118" starttime="20170511 16:47:03.116"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 16:47:03.119" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 16:47:04.899" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 16:47:04.899" starttime="20170511 16:47:03.118"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:04.900" starttime="20170511 16:47:03.111"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:04.942" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:04.943" starttime="20170511 16:47:04.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:04.943" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:04.943" starttime="20170511 16:47:04.943"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:04.944" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:04.944" starttime="20170511 16:47:04.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:04.945" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:04.945" starttime="20170511 16:47:04.944"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.212" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:05.213" starttime="20170511 16:47:04.945"></status>
</kw>
<msg timestamp="20170511 16:47:05.213" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:05.213" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.213" starttime="20170511 16:47:04.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.215" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.215" starttime="20170511 16:47:05.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.216" starttime="20170511 16:47:05.215"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.216" starttime="20170511 16:47:04.940"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.216" starttime="20170511 16:47:04.940"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.217" starttime="20170511 16:47:04.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:05.218" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:47:05.218" starttime="20170511 16:47:05.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:05.219" starttime="20170511 16:47:05.218"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:05.303" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:47:05.303" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.303" starttime="20170511 16:47:05.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:05.304" starttime="20170511 16:47:05.303"></status>
</kw>
<msg timestamp="20170511 16:47:05.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.304" starttime="20170511 16:47:04.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.305" starttime="20170511 16:47:05.304"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:47:05.305" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:47:05.306" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:47:05.306" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170511 16:47:05.306" starttime="20170511 16:47:05.305"></status>
</kw>
<msg timestamp="20170511 16:47:05.306" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170511 16:47:05.306" starttime="20170511 16:47:04.937"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.306" starttime="20170511 16:47:04.935"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:05.310" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:05.311" starttime="20170511 16:47:05.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:05.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:05.311" starttime="20170511 16:47:05.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:05.312" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:05.312" starttime="20170511 16:47:05.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:05.316" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:05.316" starttime="20170511 16:47:05.316"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.577" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:05.577" starttime="20170511 16:47:05.317"></status>
</kw>
<msg timestamp="20170511 16:47:05.577" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:05.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.577" starttime="20170511 16:47:05.317"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.578" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.578" starttime="20170511 16:47:05.578"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.579" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.579" starttime="20170511 16:47:05.579"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.579" starttime="20170511 16:47:05.309"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.579" starttime="20170511 16:47:05.309"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.580" starttime="20170511 16:47:05.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:05.580" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170511 16:47:05.580" starttime="20170511 16:47:05.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:05.581" starttime="20170511 16:47:05.580"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:05.677" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170511 16:47:05.678" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.678" starttime="20170511 16:47:05.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:05.679" starttime="20170511 16:47:05.679"></status>
</kw>
<msg timestamp="20170511 16:47:05.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.680" starttime="20170511 16:47:05.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.682" starttime="20170511 16:47:05.680"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:47:05.683" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:47:05.683" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:47:05.683" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170511 16:47:05.683" starttime="20170511 16:47:05.682"></status>
</kw>
<msg timestamp="20170511 16:47:05.683" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170511 16:47:05.684" starttime="20170511 16:47:05.307"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.684" starttime="20170511 16:47:05.307"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:05.689" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:05.689" starttime="20170511 16:47:05.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:05.690" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:05.690" starttime="20170511 16:47:05.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:05.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:05.690" starttime="20170511 16:47:05.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:05.691" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:05.691" starttime="20170511 16:47:05.691"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.965" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:05.965" starttime="20170511 16:47:05.692"></status>
</kw>
<msg timestamp="20170511 16:47:05.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:05.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.965" starttime="20170511 16:47:05.692"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.966" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.966" starttime="20170511 16:47:05.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:05.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:05.967" starttime="20170511 16:47:05.967"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.967" starttime="20170511 16:47:05.688"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.967" starttime="20170511 16:47:05.687"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:05.967" starttime="20170511 16:47:05.687"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:05.968" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:47:05.968" starttime="20170511 16:47:05.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:05.969" starttime="20170511 16:47:05.968"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:06.058" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:47:06.058" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.058" starttime="20170511 16:47:05.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:06.059" starttime="20170511 16:47:06.058"></status>
</kw>
<msg timestamp="20170511 16:47:06.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.059" starttime="20170511 16:47:05.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:06.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.060" starttime="20170511 16:47:06.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:47:06.060" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:47:06.060" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:47:06.060" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:47:06.060" starttime="20170511 16:47:06.060"></status>
</kw>
<msg timestamp="20170511 16:47:06.061" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:47:06.061" starttime="20170511 16:47:05.685"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.061" starttime="20170511 16:47:05.684"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:06.065" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:06.066" starttime="20170511 16:47:06.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:06.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:06.067" starttime="20170511 16:47:06.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:06.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:06.067" starttime="20170511 16:47:06.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:06.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:06.068" starttime="20170511 16:47:06.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:06.339" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:06.339" starttime="20170511 16:47:06.068"></status>
</kw>
<msg timestamp="20170511 16:47:06.339" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:06.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.339" starttime="20170511 16:47:06.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:06.341" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.341" starttime="20170511 16:47:06.340"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:06.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.342" starttime="20170511 16:47:06.341"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.342" starttime="20170511 16:47:06.065"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.342" starttime="20170511 16:47:06.064"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.342" starttime="20170511 16:47:06.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:06.343" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:47:06.343" starttime="20170511 16:47:06.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:06.344" starttime="20170511 16:47:06.343"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:06.431" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:47:06.432" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.432" starttime="20170511 16:47:06.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:06.433" starttime="20170511 16:47:06.432"></status>
</kw>
<msg timestamp="20170511 16:47:06.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.433" starttime="20170511 16:47:06.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:06.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.434" starttime="20170511 16:47:06.433"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:47:06.434" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:47:06.434" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:47:06.434" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170511 16:47:06.434" starttime="20170511 16:47:06.434"></status>
</kw>
<msg timestamp="20170511 16:47:06.435" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170511 16:47:06.435" starttime="20170511 16:47:06.062"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.435" starttime="20170511 16:47:06.061"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.500" starttime="20170511 16:46:59.746"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170511 16:47:06.504" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170511 16:47:06.506" starttime="20170511 16:47:06.500"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.506" starttime="20170511 16:46:59.745"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.506" starttime="20170511 16:46:59.737"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Clear BMC Record Log</arg>
</arguments>
<kw name="Clear BMC Record Log" library="utils">
<doc>Clears all the event logs on the BMC. This would be</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170511 16:47:06.516" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20170511 16:47:06.516" starttime="20170511 16:47:06.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170511 16:47:06.517" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20170511 16:47:06.517" starttime="20170511 16:47:06.516"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}records/events/</arg>
<arg>clear</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:06.518" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20170511 16:47:06.518" starttime="20170511 16:47:06.518"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:06.521" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:06.522" starttime="20170511 16:47:06.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:06.522" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:06.522" starttime="20170511 16:47:06.522"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:06.523" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:06.523" starttime="20170511 16:47:06.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:06.523" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:06.523" starttime="20170511 16:47:06.523"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:06.793" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:06.793" starttime="20170511 16:47:06.525"></status>
</kw>
<msg timestamp="20170511 16:47:06.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:06.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.794" starttime="20170511 16:47:06.524"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:06.794" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.794" starttime="20170511 16:47:06.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:06.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:06.795" starttime="20170511 16:47:06.795"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.795" starttime="20170511 16:47:06.520"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.795" starttime="20170511 16:47:06.520"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:06.796" starttime="20170511 16:47:06.519"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:06.796" level="INFO">${base_uri} = /org/openbmc/records/events//action/clear</msg>
<status status="PASS" endtime="20170511 16:47:06.796" starttime="20170511 16:47:06.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:06.797" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:06.797" starttime="20170511 16:47:06.796"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:06.797" starttime="20170511 16:47:06.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:06.798" starttime="20170511 16:47:06.798"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:07.029" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events//action/clear, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170511 16:47:07.029" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:07.029" starttime="20170511 16:47:06.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:07.030" starttime="20170511 16:47:07.030"></status>
</kw>
<msg timestamp="20170511 16:47:07.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:07.031" starttime="20170511 16:47:06.518"></status>
</kw>
<msg timestamp="20170511 16:47:07.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:07.031" starttime="20170511 16:47:06.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:07.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:07.032" starttime="20170511 16:47:07.031"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:07.032" starttime="20170511 16:47:06.515"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:07.032" starttime="20170511 16:47:06.506"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:07.032" starttime="20170511 16:46:59.737"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:07.050" starttime="20170511 16:47:07.042"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:07.052" starttime="20170511 16:47:07.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:07.891" starttime="20170511 16:47:07.053"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:07.891" starttime="20170511 16:47:07.052"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:07.891" starttime="20170511 16:47:07.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170511 16:47:07.892" level="INFO">Copying /home/fspcibld/witherspoon.pnor to /tmp</msg>
<status status="PASS" endtime="20170511 16:47:07.892" starttime="20170511 16:47:07.892"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:50.780" starttime="20170511 16:47:07.892"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:50.781" starttime="20170511 16:47:07.041"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:50.781" starttime="20170511 16:47:07.033"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170511 16:47:50.782" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170511 16:47:50.782" level="INFO">${pnor_basename} = witherspoon.pnor</msg>
<status status="PASS" endtime="20170511 16:47:50.782" starttime="20170511 16:47:50.782"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170511 16:47:50.792" level="INFO">@{arglist} = [ /tmp/witherspoon.pnor ]</msg>
<status status="PASS" endtime="20170511 16:47:50.792" starttime="20170511 16:47:50.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170511 16:47:50.793" level="INFO">${args} = {u'data': [u'/tmp/witherspoon.pnor']}</msg>
<status status="PASS" endtime="20170511 16:47:50.793" starttime="20170511 16:47:50.793"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:50.794" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170511 16:47:50.794" starttime="20170511 16:47:50.794"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:50.798" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:50.799" starttime="20170511 16:47:50.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:50.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:50.800" starttime="20170511 16:47:50.799"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:50.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:50.801" starttime="20170511 16:47:50.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:50.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:50.802" starttime="20170511 16:47:50.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:51.037" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:51.037" starttime="20170511 16:47:50.803"></status>
</kw>
<msg timestamp="20170511 16:47:51.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:51.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.037" starttime="20170511 16:47:50.803"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:51.038" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.039" starttime="20170511 16:47:51.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:51.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.040" starttime="20170511 16:47:51.039"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.040" starttime="20170511 16:47:50.797"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.040" starttime="20170511 16:47:50.797"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.040" starttime="20170511 16:47:50.796"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:51.041" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170511 16:47:51.041" starttime="20170511 16:47:51.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:51.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:51.042" starttime="20170511 16:47:51.041"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:51.043" starttime="20170511 16:47:51.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:51.044" starttime="20170511 16:47:51.043"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:51.287" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170511 16:47:51.287" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.287" starttime="20170511 16:47:51.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:51.288" starttime="20170511 16:47:51.287"></status>
</kw>
<msg timestamp="20170511 16:47:51.288" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.288" starttime="20170511 16:47:50.795"></status>
</kw>
<msg timestamp="20170511 16:47:51.288" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.288" starttime="20170511 16:47:50.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:51.289" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.289" starttime="20170511 16:47:51.289"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flashing</arg>
</arguments>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:51.293" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:51.294" starttime="20170511 16:47:51.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:51.294" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:51.294" starttime="20170511 16:47:51.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:51.295" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:51.295" starttime="20170511 16:47:51.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:51.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:51.296" starttime="20170511 16:47:51.295"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:51.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:51.756" starttime="20170511 16:47:51.297"></status>
</kw>
<msg timestamp="20170511 16:47:51.757" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:51.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.757" starttime="20170511 16:47:51.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:51.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.758" starttime="20170511 16:47:51.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:51.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.759" starttime="20170511 16:47:51.758"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.759" starttime="20170511 16:47:51.293"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.759" starttime="20170511 16:47:51.292"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.759" starttime="20170511 16:47:51.292"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:51.760" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:47:51.760" starttime="20170511 16:47:51.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:51.761" starttime="20170511 16:47:51.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:51.935" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:47:51.936" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.936" starttime="20170511 16:47:51.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:51.936" starttime="20170511 16:47:51.936"></status>
</kw>
<msg timestamp="20170511 16:47:51.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.937" starttime="20170511 16:47:51.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:51.937" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:51.937" starttime="20170511 16:47:51.937"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:47:51.938" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:47:51.938" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:47:51.938" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:47:51.938" starttime="20170511 16:47:51.938"></status>
</kw>
<msg timestamp="20170511 16:47:51.938" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:47:51.938" starttime="20170511 16:47:51.291"></status>
</kw>
<msg timestamp="20170511 16:47:51.939" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:47:51.939" starttime="20170511 16:47:51.290"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flashing</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:51.939" starttime="20170511 16:47:51.939"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.939" starttime="20170511 16:47:51.290"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.939" starttime="20170511 16:47:51.289"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.940" starttime="20170511 16:47:50.792"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:51.940" starttime="20170511 16:47:50.782"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds \ 7 min \ 10 sec \ Is PNOR Flash Done</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>7 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flash Done</arg>
</arguments>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:47:51.952" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:47:51.953" starttime="20170511 16:47:51.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:47:51.954" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:47:51.954" starttime="20170511 16:47:51.953"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:47:51.954" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:47:51.954" starttime="20170511 16:47:51.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:47:51.955" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:47:51.955" starttime="20170511 16:47:51.955"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:47:52.304" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:47:52.305" starttime="20170511 16:47:51.956"></status>
</kw>
<msg timestamp="20170511 16:47:52.305" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:47:52.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:52.305" starttime="20170511 16:47:51.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:47:52.306" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:52.306" starttime="20170511 16:47:52.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:52.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:52.306" starttime="20170511 16:47:52.306"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:52.307" starttime="20170511 16:47:51.951"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:52.307" starttime="20170511 16:47:51.951"></status>
</kw>
<status status="PASS" endtime="20170511 16:47:52.307" starttime="20170511 16:47:51.950"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:47:52.307" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:47:52.307" starttime="20170511 16:47:52.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:52.308" starttime="20170511 16:47:52.308"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:47:52.523" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:47:52.523" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:52.523" starttime="20170511 16:47:52.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:47:52.524" starttime="20170511 16:47:52.524"></status>
</kw>
<msg timestamp="20170511 16:47:52.524" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:47:52.524" starttime="20170511 16:47:51.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:47:52.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:47:52.525" starttime="20170511 16:47:52.525"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:47:52.526" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:47:52.526" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:47:52.526" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:47:52.526" starttime="20170511 16:47:52.525"></status>
</kw>
<msg timestamp="20170511 16:47:52.526" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:47:52.526" starttime="20170511 16:47:51.949"></status>
</kw>
<msg timestamp="20170511 16:47:52.527" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:47:52.527" starttime="20170511 16:47:51.949"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:47:52.527" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:47:52.527" starttime="20170511 16:47:52.527"></status>
</kw>
<status status="FAIL" endtime="20170511 16:47:52.528" starttime="20170511 16:47:51.949"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:48:02.534" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:48:02.535" starttime="20170511 16:48:02.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:48:02.535" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:48:02.535" starttime="20170511 16:48:02.535"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:48:02.536" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:48:02.536" starttime="20170511 16:48:02.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:48:02.537" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:48:02.537" starttime="20170511 16:48:02.537"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:48:02.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:48:02.939" starttime="20170511 16:48:02.538"></status>
</kw>
<msg timestamp="20170511 16:48:02.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:48:02.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:02.939" starttime="20170511 16:48:02.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:48:02.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:02.940" starttime="20170511 16:48:02.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:02.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:02.940" starttime="20170511 16:48:02.940"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:02.941" starttime="20170511 16:48:02.532"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:02.941" starttime="20170511 16:48:02.532"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:02.941" starttime="20170511 16:48:02.531"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:48:02.941" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:48:02.941" starttime="20170511 16:48:02.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:02.942" starttime="20170511 16:48:02.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:48:03.089" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:48:03.089" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:03.089" starttime="20170511 16:48:02.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:03.091" starttime="20170511 16:48:03.090"></status>
</kw>
<msg timestamp="20170511 16:48:03.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:03.091" starttime="20170511 16:48:02.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:03.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:03.091" starttime="20170511 16:48:03.091"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:48:03.092" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:48:03.092" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:48:03.092" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:48:03.092" starttime="20170511 16:48:03.092"></status>
</kw>
<msg timestamp="20170511 16:48:03.093" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:48:03.093" starttime="20170511 16:48:02.529"></status>
</kw>
<msg timestamp="20170511 16:48:03.093" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:48:03.093" starttime="20170511 16:48:02.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:48:03.093" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:48:03.094" starttime="20170511 16:48:03.093"></status>
</kw>
<status status="FAIL" endtime="20170511 16:48:03.094" starttime="20170511 16:48:02.528"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:48:13.102" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:48:13.102" starttime="20170511 16:48:13.102"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:48:13.103" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:48:13.103" starttime="20170511 16:48:13.103"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:48:13.103" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:48:13.104" starttime="20170511 16:48:13.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:48:13.104" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:48:13.104" starttime="20170511 16:48:13.104"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:48:13.441" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:48:13.441" starttime="20170511 16:48:13.105"></status>
</kw>
<msg timestamp="20170511 16:48:13.441" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:48:13.441" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:13.441" starttime="20170511 16:48:13.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:48:13.442" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:13.442" starttime="20170511 16:48:13.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:13.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:13.443" starttime="20170511 16:48:13.442"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:13.443" starttime="20170511 16:48:13.101"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:13.443" starttime="20170511 16:48:13.100"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:13.443" starttime="20170511 16:48:13.099"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:48:13.444" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:48:13.444" starttime="20170511 16:48:13.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:13.444" starttime="20170511 16:48:13.444"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:48:13.562" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:48:13.562" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:13.562" starttime="20170511 16:48:13.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:13.562" starttime="20170511 16:48:13.562"></status>
</kw>
<msg timestamp="20170511 16:48:13.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:13.563" starttime="20170511 16:48:13.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:13.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:13.563" starttime="20170511 16:48:13.563"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:48:13.564" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:48:13.564" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:48:13.564" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:48:13.564" starttime="20170511 16:48:13.564"></status>
</kw>
<msg timestamp="20170511 16:48:13.564" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:48:13.564" starttime="20170511 16:48:13.097"></status>
</kw>
<msg timestamp="20170511 16:48:13.565" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:48:13.565" starttime="20170511 16:48:13.096"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:48:13.565" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:48:13.565" starttime="20170511 16:48:13.565"></status>
</kw>
<status status="FAIL" endtime="20170511 16:48:13.566" starttime="20170511 16:48:13.096"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:48:23.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:48:23.576" starttime="20170511 16:48:23.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:48:23.577" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:48:23.577" starttime="20170511 16:48:23.576"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:48:23.578" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:48:23.578" starttime="20170511 16:48:23.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:48:23.579" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:48:23.579" starttime="20170511 16:48:23.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:48:23.972" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:48:23.972" starttime="20170511 16:48:23.580"></status>
</kw>
<msg timestamp="20170511 16:48:23.972" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:48:23.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:23.972" starttime="20170511 16:48:23.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:48:23.973" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:23.973" starttime="20170511 16:48:23.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:23.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:23.974" starttime="20170511 16:48:23.973"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:23.974" starttime="20170511 16:48:23.573"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:23.974" starttime="20170511 16:48:23.570"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:23.974" starttime="20170511 16:48:23.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:48:23.975" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:48:23.975" starttime="20170511 16:48:23.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:23.976" starttime="20170511 16:48:23.975"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:48:24.383" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:48:24.384" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:24.384" starttime="20170511 16:48:23.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:24.385" starttime="20170511 16:48:24.384"></status>
</kw>
<msg timestamp="20170511 16:48:24.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:24.385" starttime="20170511 16:48:23.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:24.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:24.386" starttime="20170511 16:48:24.386"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:48:24.387" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:48:24.387" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:48:24.387" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:48:24.387" starttime="20170511 16:48:24.387"></status>
</kw>
<msg timestamp="20170511 16:48:24.388" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:48:24.388" starttime="20170511 16:48:23.568"></status>
</kw>
<msg timestamp="20170511 16:48:24.388" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:48:24.388" starttime="20170511 16:48:23.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:48:24.389" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:48:24.389" starttime="20170511 16:48:24.389"></status>
</kw>
<status status="FAIL" endtime="20170511 16:48:24.389" starttime="20170511 16:48:23.567"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:48:34.397" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:48:34.398" starttime="20170511 16:48:34.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:48:34.399" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:48:34.399" starttime="20170511 16:48:34.399"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:48:34.401" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:48:34.401" starttime="20170511 16:48:34.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:48:34.402" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:48:34.402" starttime="20170511 16:48:34.401"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:48:34.589" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:48:34.589" starttime="20170511 16:48:34.403"></status>
</kw>
<msg timestamp="20170511 16:48:34.589" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:48:34.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:34.589" starttime="20170511 16:48:34.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:48:34.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:34.591" starttime="20170511 16:48:34.590"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:34.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:34.594" starttime="20170511 16:48:34.592"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:34.594" starttime="20170511 16:48:34.396"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:34.595" starttime="20170511 16:48:34.394"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:34.595" starttime="20170511 16:48:34.393"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:48:34.596" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:48:34.596" starttime="20170511 16:48:34.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:34.598" starttime="20170511 16:48:34.597"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:48:35.096" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:48:35.096" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:35.097" starttime="20170511 16:48:34.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:35.098" starttime="20170511 16:48:35.097"></status>
</kw>
<msg timestamp="20170511 16:48:35.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:35.099" starttime="20170511 16:48:34.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:35.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:35.100" starttime="20170511 16:48:35.099"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:48:35.101" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:48:35.101" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:48:35.101" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:48:35.101" starttime="20170511 16:48:35.100"></status>
</kw>
<msg timestamp="20170511 16:48:35.101" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:48:35.101" starttime="20170511 16:48:34.392"></status>
</kw>
<msg timestamp="20170511 16:48:35.101" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:48:35.101" starttime="20170511 16:48:34.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:48:35.102" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:48:35.102" starttime="20170511 16:48:35.102"></status>
</kw>
<status status="FAIL" endtime="20170511 16:48:35.102" starttime="20170511 16:48:34.390"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:48:45.112" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:48:45.113" starttime="20170511 16:48:45.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:48:45.113" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:48:45.114" starttime="20170511 16:48:45.113"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:48:45.115" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:48:45.115" starttime="20170511 16:48:45.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:48:45.116" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:48:45.116" starttime="20170511 16:48:45.115"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:48:45.296" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:48:45.297" starttime="20170511 16:48:45.117"></status>
</kw>
<msg timestamp="20170511 16:48:45.297" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:48:45.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:45.297" starttime="20170511 16:48:45.116"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:48:45.298" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:45.299" starttime="20170511 16:48:45.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:45.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:45.300" starttime="20170511 16:48:45.299"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:45.300" starttime="20170511 16:48:45.110"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:45.300" starttime="20170511 16:48:45.110"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:45.301" starttime="20170511 16:48:45.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:48:45.302" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:48:45.302" starttime="20170511 16:48:45.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:45.303" starttime="20170511 16:48:45.303"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:48:45.388" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:48:45.389" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:45.389" starttime="20170511 16:48:45.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:45.389" starttime="20170511 16:48:45.389"></status>
</kw>
<msg timestamp="20170511 16:48:45.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:45.390" starttime="20170511 16:48:45.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:45.390" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:45.390" starttime="20170511 16:48:45.390"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:48:45.391" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:48:45.391" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:48:45.391" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:48:45.391" starttime="20170511 16:48:45.391"></status>
</kw>
<msg timestamp="20170511 16:48:45.391" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:48:45.392" starttime="20170511 16:48:45.106"></status>
</kw>
<msg timestamp="20170511 16:48:45.392" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:48:45.392" starttime="20170511 16:48:45.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:48:45.392" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:48:45.393" starttime="20170511 16:48:45.392"></status>
</kw>
<status status="FAIL" endtime="20170511 16:48:45.393" starttime="20170511 16:48:45.104"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:48:55.414" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:48:55.414" starttime="20170511 16:48:55.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:48:55.415" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:48:55.415" starttime="20170511 16:48:55.414"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:48:55.415" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:48:55.415" starttime="20170511 16:48:55.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:48:55.416" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:48:55.416" starttime="20170511 16:48:55.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:48:55.791" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:48:55.791" starttime="20170511 16:48:55.417"></status>
</kw>
<msg timestamp="20170511 16:48:55.791" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:48:55.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:55.791" starttime="20170511 16:48:55.416"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:48:55.792" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:55.792" starttime="20170511 16:48:55.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:55.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:55.793" starttime="20170511 16:48:55.792"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:55.793" starttime="20170511 16:48:55.412"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:55.793" starttime="20170511 16:48:55.412"></status>
</kw>
<status status="PASS" endtime="20170511 16:48:55.793" starttime="20170511 16:48:55.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:48:55.794" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:48:55.794" starttime="20170511 16:48:55.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:55.794" starttime="20170511 16:48:55.794"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:48:56.551" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:48:56.551" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:56.551" starttime="20170511 16:48:55.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:48:56.552" starttime="20170511 16:48:56.552"></status>
</kw>
<msg timestamp="20170511 16:48:56.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:48:56.553" starttime="20170511 16:48:55.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:48:56.553" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:48:56.553" starttime="20170511 16:48:56.553"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:48:56.554" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:48:56.554" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:48:56.554" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:48:56.554" starttime="20170511 16:48:56.553"></status>
</kw>
<msg timestamp="20170511 16:48:56.554" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:48:56.554" starttime="20170511 16:48:55.410"></status>
</kw>
<msg timestamp="20170511 16:48:56.555" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:48:56.555" starttime="20170511 16:48:55.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:48:56.555" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:48:56.555" starttime="20170511 16:48:56.555"></status>
</kw>
<status status="FAIL" endtime="20170511 16:48:56.556" starttime="20170511 16:48:55.408"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:49:06.560" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:49:06.561" starttime="20170511 16:49:06.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:49:06.561" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:49:06.561" starttime="20170511 16:49:06.561"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:49:06.562" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:49:06.562" starttime="20170511 16:49:06.562"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:49:06.563" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:49:06.563" starttime="20170511 16:49:06.562"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:49:06.937" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:49:06.937" starttime="20170511 16:49:06.563"></status>
</kw>
<msg timestamp="20170511 16:49:06.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:49:06.938" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:06.938" starttime="20170511 16:49:06.563"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:49:06.938" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:06.938" starttime="20170511 16:49:06.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:06.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:06.939" starttime="20170511 16:49:06.939"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:06.939" starttime="20170511 16:49:06.560"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:06.939" starttime="20170511 16:49:06.559"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:06.940" starttime="20170511 16:49:06.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:49:06.940" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:49:06.940" starttime="20170511 16:49:06.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:06.941" starttime="20170511 16:49:06.940"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:49:07.070" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:49:07.071" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:07.071" starttime="20170511 16:49:06.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:07.071" starttime="20170511 16:49:07.071"></status>
</kw>
<msg timestamp="20170511 16:49:07.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:07.072" starttime="20170511 16:49:06.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:07.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:07.072" starttime="20170511 16:49:07.072"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:49:07.073" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:49:07.073" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:49:07.073" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:49:07.073" starttime="20170511 16:49:07.073"></status>
</kw>
<msg timestamp="20170511 16:49:07.073" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:49:07.074" starttime="20170511 16:49:06.557"></status>
</kw>
<msg timestamp="20170511 16:49:07.074" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:49:07.074" starttime="20170511 16:49:06.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:49:07.074" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:49:07.075" starttime="20170511 16:49:07.074"></status>
</kw>
<status status="FAIL" endtime="20170511 16:49:07.075" starttime="20170511 16:49:06.556"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:49:17.080" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:49:17.081" starttime="20170511 16:49:17.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:49:17.081" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:49:17.081" starttime="20170511 16:49:17.081"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:49:17.082" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:49:17.082" starttime="20170511 16:49:17.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:49:17.082" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:49:17.082" starttime="20170511 16:49:17.082"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:49:17.259" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:49:17.259" starttime="20170511 16:49:17.083"></status>
</kw>
<msg timestamp="20170511 16:49:17.259" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:49:17.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:17.259" starttime="20170511 16:49:17.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:49:17.260" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:17.260" starttime="20170511 16:49:17.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:17.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:17.261" starttime="20170511 16:49:17.260"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:17.261" starttime="20170511 16:49:17.079"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:17.261" starttime="20170511 16:49:17.079"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:17.261" starttime="20170511 16:49:17.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:49:17.261" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:49:17.262" starttime="20170511 16:49:17.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:17.262" starttime="20170511 16:49:17.262"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:49:17.346" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:49:17.346" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:17.346" starttime="20170511 16:49:17.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:17.347" starttime="20170511 16:49:17.347"></status>
</kw>
<msg timestamp="20170511 16:49:17.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:17.347" starttime="20170511 16:49:17.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:17.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:17.348" starttime="20170511 16:49:17.347"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:49:17.349" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:49:17.349" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:49:17.349" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:49:17.349" starttime="20170511 16:49:17.348"></status>
</kw>
<msg timestamp="20170511 16:49:17.349" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:49:17.349" starttime="20170511 16:49:17.076"></status>
</kw>
<msg timestamp="20170511 16:49:17.349" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:49:17.349" starttime="20170511 16:49:17.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:49:17.350" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:49:17.350" starttime="20170511 16:49:17.350"></status>
</kw>
<status status="FAIL" endtime="20170511 16:49:17.350" starttime="20170511 16:49:17.075"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:49:27.355" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:49:27.356" starttime="20170511 16:49:27.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:49:27.356" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:49:27.356" starttime="20170511 16:49:27.356"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:49:27.357" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:49:27.357" starttime="20170511 16:49:27.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:49:27.358" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:49:27.358" starttime="20170511 16:49:27.357"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:49:27.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:49:27.532" starttime="20170511 16:49:27.358"></status>
</kw>
<msg timestamp="20170511 16:49:27.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:49:27.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:27.532" starttime="20170511 16:49:27.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:49:27.533" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:27.533" starttime="20170511 16:49:27.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:27.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:27.534" starttime="20170511 16:49:27.533"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:27.534" starttime="20170511 16:49:27.354"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:27.534" starttime="20170511 16:49:27.354"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:27.534" starttime="20170511 16:49:27.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:49:27.535" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:49:27.535" starttime="20170511 16:49:27.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:27.535" starttime="20170511 16:49:27.535"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:49:27.620" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:49:27.620" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:27.620" starttime="20170511 16:49:27.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:27.621" starttime="20170511 16:49:27.620"></status>
</kw>
<msg timestamp="20170511 16:49:27.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:27.621" starttime="20170511 16:49:27.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:27.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:27.622" starttime="20170511 16:49:27.621"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:49:27.622" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:49:27.622" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:49:27.622" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:49:27.622" starttime="20170511 16:49:27.622"></status>
</kw>
<msg timestamp="20170511 16:49:27.623" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:49:27.623" starttime="20170511 16:49:27.352"></status>
</kw>
<msg timestamp="20170511 16:49:27.623" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:49:27.623" starttime="20170511 16:49:27.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:49:27.624" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:49:27.624" starttime="20170511 16:49:27.623"></status>
</kw>
<status status="FAIL" endtime="20170511 16:49:27.624" starttime="20170511 16:49:27.351"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:49:37.654" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:49:37.654" starttime="20170511 16:49:37.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:49:37.655" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:49:37.655" starttime="20170511 16:49:37.654"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:49:37.655" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:49:37.655" starttime="20170511 16:49:37.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:49:37.656" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:49:37.656" starttime="20170511 16:49:37.656"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:49:37.852" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:49:37.852" starttime="20170511 16:49:37.657"></status>
</kw>
<msg timestamp="20170511 16:49:37.852" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:49:37.853" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:37.853" starttime="20170511 16:49:37.656"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:49:37.854" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:37.854" starttime="20170511 16:49:37.853"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:37.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:37.855" starttime="20170511 16:49:37.854"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:37.855" starttime="20170511 16:49:37.653"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:37.855" starttime="20170511 16:49:37.652"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:37.855" starttime="20170511 16:49:37.652"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:49:37.856" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:49:37.856" starttime="20170511 16:49:37.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:37.857" starttime="20170511 16:49:37.857"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:49:37.940" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:49:37.940" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:37.940" starttime="20170511 16:49:37.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:37.941" starttime="20170511 16:49:37.940"></status>
</kw>
<msg timestamp="20170511 16:49:37.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:37.941" starttime="20170511 16:49:37.651"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:37.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:37.942" starttime="20170511 16:49:37.941"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:49:37.943" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:49:37.943" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:49:37.943" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:49:37.943" starttime="20170511 16:49:37.942"></status>
</kw>
<msg timestamp="20170511 16:49:37.943" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:49:37.943" starttime="20170511 16:49:37.650"></status>
</kw>
<msg timestamp="20170511 16:49:37.944" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:49:37.944" starttime="20170511 16:49:37.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:49:37.944" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:49:37.944" starttime="20170511 16:49:37.944"></status>
</kw>
<status status="FAIL" endtime="20170511 16:49:37.944" starttime="20170511 16:49:37.648"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:49:47.951" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:49:47.951" starttime="20170511 16:49:47.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:49:47.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:49:47.952" starttime="20170511 16:49:47.952"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:49:47.953" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:49:47.953" starttime="20170511 16:49:47.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:49:47.953" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:49:47.953" starttime="20170511 16:49:47.953"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:49:48.133" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:49:48.133" starttime="20170511 16:49:47.954"></status>
</kw>
<msg timestamp="20170511 16:49:48.133" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:49:48.133" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:48.133" starttime="20170511 16:49:47.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:49:48.134" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:48.134" starttime="20170511 16:49:48.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:48.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:48.135" starttime="20170511 16:49:48.134"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:48.135" starttime="20170511 16:49:47.950"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:48.135" starttime="20170511 16:49:47.950"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:48.135" starttime="20170511 16:49:47.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:49:48.136" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:49:48.136" starttime="20170511 16:49:48.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:48.136" starttime="20170511 16:49:48.136"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:49:48.230" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:49:48.230" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:48.230" starttime="20170511 16:49:48.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:48.231" starttime="20170511 16:49:48.230"></status>
</kw>
<msg timestamp="20170511 16:49:48.231" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:48.231" starttime="20170511 16:49:47.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:48.232" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:48.232" starttime="20170511 16:49:48.231"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:49:48.232" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:49:48.232" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:49:48.233" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:49:48.233" starttime="20170511 16:49:48.232"></status>
</kw>
<msg timestamp="20170511 16:49:48.233" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:49:48.233" starttime="20170511 16:49:47.946"></status>
</kw>
<msg timestamp="20170511 16:49:48.233" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:49:48.233" starttime="20170511 16:49:47.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:49:48.234" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:49:48.234" starttime="20170511 16:49:48.233"></status>
</kw>
<status status="FAIL" endtime="20170511 16:49:48.234" starttime="20170511 16:49:47.945"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:49:58.239" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:49:58.239" starttime="20170511 16:49:58.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:49:58.240" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:49:58.240" starttime="20170511 16:49:58.239"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:49:58.240" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:49:58.240" starttime="20170511 16:49:58.240"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:49:58.241" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:49:58.241" starttime="20170511 16:49:58.241"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:49:58.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:49:58.799" starttime="20170511 16:49:58.242"></status>
</kw>
<msg timestamp="20170511 16:49:58.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:49:58.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:58.799" starttime="20170511 16:49:58.241"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:49:58.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:58.800" starttime="20170511 16:49:58.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:58.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:58.801" starttime="20170511 16:49:58.800"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:58.801" starttime="20170511 16:49:58.238"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:58.801" starttime="20170511 16:49:58.237"></status>
</kw>
<status status="PASS" endtime="20170511 16:49:58.801" starttime="20170511 16:49:58.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:49:58.802" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:49:58.802" starttime="20170511 16:49:58.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:58.802" starttime="20170511 16:49:58.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:49:59.295" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:49:59.296" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:59.296" starttime="20170511 16:49:58.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:49:59.296" starttime="20170511 16:49:59.296"></status>
</kw>
<msg timestamp="20170511 16:49:59.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:49:59.297" starttime="20170511 16:49:58.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:49:59.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:49:59.297" starttime="20170511 16:49:59.297"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:49:59.298" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:49:59.298" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:49:59.298" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:49:59.298" starttime="20170511 16:49:59.298"></status>
</kw>
<msg timestamp="20170511 16:49:59.298" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:49:59.298" starttime="20170511 16:49:58.236"></status>
</kw>
<msg timestamp="20170511 16:49:59.299" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:49:59.299" starttime="20170511 16:49:58.235"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:49:59.299" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:49:59.299" starttime="20170511 16:49:59.299"></status>
</kw>
<status status="FAIL" endtime="20170511 16:49:59.300" starttime="20170511 16:49:58.235"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:50:09.304" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:50:09.305" starttime="20170511 16:50:09.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:50:09.305" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:50:09.305" starttime="20170511 16:50:09.305"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:50:09.306" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:50:09.306" starttime="20170511 16:50:09.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:50:09.306" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:50:09.307" starttime="20170511 16:50:09.306"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:50:10.130" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:50:10.130" starttime="20170511 16:50:09.307"></status>
</kw>
<msg timestamp="20170511 16:50:10.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:50:10.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:10.131" starttime="20170511 16:50:09.307"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:50:10.131" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:10.132" starttime="20170511 16:50:10.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:10.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:10.133" starttime="20170511 16:50:10.132"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:10.133" starttime="20170511 16:50:09.303"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:10.133" starttime="20170511 16:50:09.303"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:10.133" starttime="20170511 16:50:09.302"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:50:10.134" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:50:10.134" starttime="20170511 16:50:10.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:10.134" starttime="20170511 16:50:10.134"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:50:10.218" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:50:10.218" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:10.218" starttime="20170511 16:50:10.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:10.218" starttime="20170511 16:50:10.218"></status>
</kw>
<msg timestamp="20170511 16:50:10.219" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:10.219" starttime="20170511 16:50:09.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:10.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:10.219" starttime="20170511 16:50:10.219"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:50:10.220" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:50:10.220" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:50:10.220" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/...</msg>
<status status="PASS" endtime="20170511 16:50:10.220" starttime="20170511 16:50:10.220"></status>
</kw>
<msg timestamp="20170511 16:50:10.220" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:50:10.221" starttime="20170511 16:50:09.301"></status>
</kw>
<msg timestamp="20170511 16:50:10.221" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170511 16:50:10.221" starttime="20170511 16:50:09.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:50:10.221" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:50:10.222" starttime="20170511 16:50:10.221"></status>
</kw>
<status status="FAIL" endtime="20170511 16:50:10.222" starttime="20170511 16:50:09.300"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:50:20.227" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:50:20.227" starttime="20170511 16:50:20.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:50:20.228" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:50:20.228" starttime="20170511 16:50:20.227"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:50:20.229" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:50:20.229" starttime="20170511 16:50:20.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:50:20.229" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:50:20.229" starttime="20170511 16:50:20.229"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:50:20.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:50:20.406" starttime="20170511 16:50:20.230"></status>
</kw>
<msg timestamp="20170511 16:50:20.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:50:20.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:20.406" starttime="20170511 16:50:20.230"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:50:20.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:20.407" starttime="20170511 16:50:20.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:20.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:20.407" starttime="20170511 16:50:20.407"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:20.408" starttime="20170511 16:50:20.226"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:20.408" starttime="20170511 16:50:20.225"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:20.408" starttime="20170511 16:50:20.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:50:20.408" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:50:20.408" starttime="20170511 16:50:20.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:20.409" starttime="20170511 16:50:20.409"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:50:20.492" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:50:20.493" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:20.493" starttime="20170511 16:50:20.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:20.493" starttime="20170511 16:50:20.493"></status>
</kw>
<msg timestamp="20170511 16:50:20.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:20.494" starttime="20170511 16:50:20.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:20.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:20.494" starttime="20170511 16:50:20.494"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:50:20.495" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 10%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:50:20.495" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:50:20.495" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 10%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170511 16:50:20.495" starttime="20170511 16:50:20.494"></status>
</kw>
<msg timestamp="20170511 16:50:20.495" level="INFO">${data} = {u'status': u'Flashing: 10%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:50:20.495" starttime="20170511 16:50:20.224"></status>
</kw>
<msg timestamp="20170511 16:50:20.496" level="INFO">${status} = Flashing: 10%</msg>
<status status="PASS" endtime="20170511 16:50:20.496" starttime="20170511 16:50:20.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:50:20.496" level="FAIL">Flashing: 10% != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:50:20.496" starttime="20170511 16:50:20.496"></status>
</kw>
<status status="FAIL" endtime="20170511 16:50:20.496" starttime="20170511 16:50:20.222"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:50:30.501" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:50:30.502" starttime="20170511 16:50:30.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:50:30.502" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:50:30.502" starttime="20170511 16:50:30.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:50:30.503" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:50:30.503" starttime="20170511 16:50:30.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:50:30.503" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:50:30.504" starttime="20170511 16:50:30.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:50:30.830" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:50:30.830" starttime="20170511 16:50:30.504"></status>
</kw>
<msg timestamp="20170511 16:50:30.830" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:50:30.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:30.831" starttime="20170511 16:50:30.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:50:30.831" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:30.831" starttime="20170511 16:50:30.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:30.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:30.832" starttime="20170511 16:50:30.831"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:30.832" starttime="20170511 16:50:30.500"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:30.832" starttime="20170511 16:50:30.500"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:30.832" starttime="20170511 16:50:30.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:50:30.833" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:50:30.833" starttime="20170511 16:50:30.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:30.834" starttime="20170511 16:50:30.833"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:50:30.917" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:50:30.918" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:30.918" starttime="20170511 16:50:30.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:30.918" starttime="20170511 16:50:30.918"></status>
</kw>
<msg timestamp="20170511 16:50:30.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:30.919" starttime="20170511 16:50:30.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:30.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:30.919" starttime="20170511 16:50:30.919"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:50:30.920" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 22%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:50:30.920" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:50:30.920" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 22%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170511 16:50:30.920" starttime="20170511 16:50:30.919"></status>
</kw>
<msg timestamp="20170511 16:50:30.920" level="INFO">${data} = {u'status': u'Flashing: 22%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:50:30.920" starttime="20170511 16:50:30.498"></status>
</kw>
<msg timestamp="20170511 16:50:30.921" level="INFO">${status} = Flashing: 22%</msg>
<status status="PASS" endtime="20170511 16:50:30.921" starttime="20170511 16:50:30.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:50:30.921" level="FAIL">Flashing: 22% != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:50:30.921" starttime="20170511 16:50:30.921"></status>
</kw>
<status status="FAIL" endtime="20170511 16:50:30.922" starttime="20170511 16:50:30.497"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:50:40.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:50:40.928" starttime="20170511 16:50:40.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:50:40.929" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:50:40.929" starttime="20170511 16:50:40.929"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:50:40.930" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:50:40.930" starttime="20170511 16:50:40.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:50:40.931" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:50:40.931" starttime="20170511 16:50:40.930"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:50:41.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:50:41.939" starttime="20170511 16:50:40.932"></status>
</kw>
<msg timestamp="20170511 16:50:41.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:50:41.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:41.939" starttime="20170511 16:50:40.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:50:41.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:41.940" starttime="20170511 16:50:41.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:41.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:41.941" starttime="20170511 16:50:41.940"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:41.941" starttime="20170511 16:50:40.927"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:41.941" starttime="20170511 16:50:40.927"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:41.941" starttime="20170511 16:50:40.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:50:41.942" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:50:41.942" starttime="20170511 16:50:41.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:41.943" starttime="20170511 16:50:41.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:50:42.055" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:50:42.055" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:42.055" starttime="20170511 16:50:41.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:42.056" starttime="20170511 16:50:42.055"></status>
</kw>
<msg timestamp="20170511 16:50:42.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:42.056" starttime="20170511 16:50:40.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:42.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:42.057" starttime="20170511 16:50:42.056"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:50:42.057" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 36%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:50:42.057" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:50:42.057" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 36%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170511 16:50:42.057" starttime="20170511 16:50:42.057"></status>
</kw>
<msg timestamp="20170511 16:50:42.058" level="INFO">${data} = {u'status': u'Flashing: 36%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:50:42.058" starttime="20170511 16:50:40.925"></status>
</kw>
<msg timestamp="20170511 16:50:42.058" level="INFO">${status} = Flashing: 36%</msg>
<status status="PASS" endtime="20170511 16:50:42.058" starttime="20170511 16:50:40.924"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:50:42.059" level="FAIL">Flashing: 36% != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:50:42.059" starttime="20170511 16:50:42.058"></status>
</kw>
<status status="FAIL" endtime="20170511 16:50:42.059" starttime="20170511 16:50:40.924"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:50:52.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:50:52.064" starttime="20170511 16:50:52.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:50:52.065" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:50:52.065" starttime="20170511 16:50:52.064"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:50:52.065" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:50:52.065" starttime="20170511 16:50:52.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:50:52.066" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:50:52.066" starttime="20170511 16:50:52.066"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:50:52.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:50:52.336" starttime="20170511 16:50:52.067"></status>
</kw>
<msg timestamp="20170511 16:50:52.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:50:52.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:52.336" starttime="20170511 16:50:52.066"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:50:52.337" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:52.337" starttime="20170511 16:50:52.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:52.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:52.337" starttime="20170511 16:50:52.337"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:52.338" starttime="20170511 16:50:52.063"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:52.338" starttime="20170511 16:50:52.062"></status>
</kw>
<status status="PASS" endtime="20170511 16:50:52.338" starttime="20170511 16:50:52.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:50:52.338" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:50:52.338" starttime="20170511 16:50:52.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:52.339" starttime="20170511 16:50:52.339"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:50:52.450" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:50:52.451" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:52.451" starttime="20170511 16:50:52.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:50:52.451" starttime="20170511 16:50:52.451"></status>
</kw>
<msg timestamp="20170511 16:50:52.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:50:52.452" starttime="20170511 16:50:52.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:50:52.452" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:50:52.452" starttime="20170511 16:50:52.452"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:50:52.453" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 47%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:50:52.453" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:50:52.453" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 47%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170511 16:50:52.453" starttime="20170511 16:50:52.453"></status>
</kw>
<msg timestamp="20170511 16:50:52.453" level="INFO">${data} = {u'status': u'Flashing: 47%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:50:52.453" starttime="20170511 16:50:52.061"></status>
</kw>
<msg timestamp="20170511 16:50:52.454" level="INFO">${status} = Flashing: 47%</msg>
<status status="PASS" endtime="20170511 16:50:52.454" starttime="20170511 16:50:52.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:50:52.454" level="FAIL">Flashing: 47% != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:50:52.454" starttime="20170511 16:50:52.454"></status>
</kw>
<status status="FAIL" endtime="20170511 16:50:52.455" starttime="20170511 16:50:52.059"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:02.460" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:02.460" starttime="20170511 16:51:02.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:02.461" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:02.461" starttime="20170511 16:51:02.460"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:02.461" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:02.461" starttime="20170511 16:51:02.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:02.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:02.462" starttime="20170511 16:51:02.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:02.764" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:02.764" starttime="20170511 16:51:02.463"></status>
</kw>
<msg timestamp="20170511 16:51:02.764" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:02.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:02.764" starttime="20170511 16:51:02.463"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:02.765" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:02.765" starttime="20170511 16:51:02.765"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:02.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:02.766" starttime="20170511 16:51:02.765"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:02.766" starttime="20170511 16:51:02.459"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:02.766" starttime="20170511 16:51:02.458"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:02.766" starttime="20170511 16:51:02.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:02.767" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:51:02.767" starttime="20170511 16:51:02.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:02.767" starttime="20170511 16:51:02.767"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:02.881" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:51:02.881" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:02.881" starttime="20170511 16:51:02.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:02.882" starttime="20170511 16:51:02.881"></status>
</kw>
<msg timestamp="20170511 16:51:02.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:02.882" starttime="20170511 16:51:02.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:02.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:02.883" starttime="20170511 16:51:02.882"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:02.883" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 60%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:02.883" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:02.883" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 60%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170511 16:51:02.883" starttime="20170511 16:51:02.883"></status>
</kw>
<msg timestamp="20170511 16:51:02.884" level="INFO">${data} = {u'status': u'Flashing: 60%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:51:02.884" starttime="20170511 16:51:02.457"></status>
</kw>
<msg timestamp="20170511 16:51:02.884" level="INFO">${status} = Flashing: 60%</msg>
<status status="PASS" endtime="20170511 16:51:02.884" starttime="20170511 16:51:02.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:51:02.885" level="FAIL">Flashing: 60% != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:51:02.885" starttime="20170511 16:51:02.884"></status>
</kw>
<status status="FAIL" endtime="20170511 16:51:02.885" starttime="20170511 16:51:02.455"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:12.890" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:12.891" starttime="20170511 16:51:12.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:12.891" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:12.891" starttime="20170511 16:51:12.891"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:12.892" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:12.892" starttime="20170511 16:51:12.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:12.893" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:12.893" starttime="20170511 16:51:12.892"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:13.070" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:13.070" starttime="20170511 16:51:12.893"></status>
</kw>
<msg timestamp="20170511 16:51:13.070" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:13.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:13.071" starttime="20170511 16:51:12.893"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:13.071" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:13.071" starttime="20170511 16:51:13.071"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:13.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:13.072" starttime="20170511 16:51:13.072"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:13.072" starttime="20170511 16:51:12.889"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:13.072" starttime="20170511 16:51:12.888"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:13.072" starttime="20170511 16:51:12.888"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:13.073" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:51:13.073" starttime="20170511 16:51:13.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:13.074" starttime="20170511 16:51:13.073"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:14.085" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:51:14.086" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:14.086" starttime="20170511 16:51:13.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:14.086" starttime="20170511 16:51:14.086"></status>
</kw>
<msg timestamp="20170511 16:51:14.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:14.087" starttime="20170511 16:51:12.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:14.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:14.087" starttime="20170511 16:51:14.087"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:14.088" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 15%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:14.088" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:14.088" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 15%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170511 16:51:14.088" starttime="20170511 16:51:14.088"></status>
</kw>
<msg timestamp="20170511 16:51:14.088" level="INFO">${data} = {u'status': u'Flashing: 15%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:51:14.088" starttime="20170511 16:51:12.886"></status>
</kw>
<msg timestamp="20170511 16:51:14.089" level="INFO">${status} = Flashing: 15%</msg>
<status status="PASS" endtime="20170511 16:51:14.089" starttime="20170511 16:51:12.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:51:14.089" level="FAIL">Flashing: 15% != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:51:14.089" starttime="20170511 16:51:14.089"></status>
</kw>
<status status="FAIL" endtime="20170511 16:51:14.090" starttime="20170511 16:51:12.885"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:24.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:24.095" starttime="20170511 16:51:24.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:24.096" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:24.096" starttime="20170511 16:51:24.095"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:24.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:24.096" starttime="20170511 16:51:24.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:24.097" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:24.097" starttime="20170511 16:51:24.097"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:24.276" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:24.276" starttime="20170511 16:51:24.098"></status>
</kw>
<msg timestamp="20170511 16:51:24.276" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:24.276" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:24.276" starttime="20170511 16:51:24.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:24.277" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:24.277" starttime="20170511 16:51:24.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:24.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:24.277" starttime="20170511 16:51:24.277"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:24.278" starttime="20170511 16:51:24.093"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:24.278" starttime="20170511 16:51:24.093"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:24.278" starttime="20170511 16:51:24.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:24.278" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:51:24.278" starttime="20170511 16:51:24.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:24.279" starttime="20170511 16:51:24.279"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:24.574" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:51:24.575" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:24.575" starttime="20170511 16:51:24.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:24.575" starttime="20170511 16:51:24.575"></status>
</kw>
<msg timestamp="20170511 16:51:24.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:24.576" starttime="20170511 16:51:24.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:24.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:24.576" starttime="20170511 16:51:24.576"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:24.577" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 35%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:24.577" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:24.577" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 35%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/...</msg>
<status status="PASS" endtime="20170511 16:51:24.577" starttime="20170511 16:51:24.576"></status>
</kw>
<msg timestamp="20170511 16:51:24.577" level="INFO">${data} = {u'status': u'Flashing: 35%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:51:24.577" starttime="20170511 16:51:24.091"></status>
</kw>
<msg timestamp="20170511 16:51:24.578" level="INFO">${status} = Flashing: 35%</msg>
<status status="PASS" endtime="20170511 16:51:24.578" starttime="20170511 16:51:24.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170511 16:51:24.578" level="FAIL">Flashing: 35% != Flash Done</msg>
<status status="FAIL" endtime="20170511 16:51:24.578" starttime="20170511 16:51:24.578"></status>
</kw>
<status status="FAIL" endtime="20170511 16:51:24.579" starttime="20170511 16:51:24.090"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:34.583" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:34.584" starttime="20170511 16:51:34.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:34.585" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:34.585" starttime="20170511 16:51:34.585"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:34.586" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:34.586" starttime="20170511 16:51:34.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:34.586" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:34.586" starttime="20170511 16:51:34.586"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:34.776" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:34.776" starttime="20170511 16:51:34.587"></status>
</kw>
<msg timestamp="20170511 16:51:34.776" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:34.776" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:34.776" starttime="20170511 16:51:34.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:34.777" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:34.777" starttime="20170511 16:51:34.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:34.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:34.778" starttime="20170511 16:51:34.778"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:34.778" starttime="20170511 16:51:34.583"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:34.778" starttime="20170511 16:51:34.582"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:34.778" starttime="20170511 16:51:34.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:34.779" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170511 16:51:34.779" starttime="20170511 16:51:34.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:34.780" starttime="20170511 16:51:34.779"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:34.865" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None </msg>
<msg timestamp="20170511 16:51:34.865" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:34.865" starttime="20170511 16:51:34.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:34.866" starttime="20170511 16:51:34.865"></status>
</kw>
<msg timestamp="20170511 16:51:34.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:34.866" starttime="20170511 16:51:34.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:34.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:34.867" starttime="20170511 16:51:34.866"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:34.867" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flash Done"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:34.867" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:34.867" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbi...</msg>
<status status="PASS" endtime="20170511 16:51:34.868" starttime="20170511 16:51:34.867"></status>
</kw>
<msg timestamp="20170511 16:51:34.868" level="INFO">${data} = {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher.exe'}</msg>
<status status="PASS" endtime="20170511 16:51:34.868" starttime="20170511 16:51:34.580"></status>
</kw>
<msg timestamp="20170511 16:51:34.868" level="INFO">${status} = Flash Done</msg>
<status status="PASS" endtime="20170511 16:51:34.868" starttime="20170511 16:51:34.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:34.869" starttime="20170511 16:51:34.868"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:34.869" starttime="20170511 16:51:34.579"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:34.869" starttime="20170511 16:47:51.948"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:34.869" starttime="20170511 16:47:51.940"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:34.869" starttime="20170511 16:47:07.032"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170511 16:51:34.870" starttime="20170511 16:51:34.870"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:34.886" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:34.886" starttime="20170511 16:51:34.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:34.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:34.887" starttime="20170511 16:51:34.886"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:34.887" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:34.887" starttime="20170511 16:51:34.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:34.888" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:34.888" starttime="20170511 16:51:34.888"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.066" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:35.067" starttime="20170511 16:51:34.889"></status>
</kw>
<msg timestamp="20170511 16:51:35.067" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:35.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:35.067" starttime="20170511 16:51:34.888"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.068" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:35.068" starttime="20170511 16:51:35.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:35.068" starttime="20170511 16:51:35.068"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.069" starttime="20170511 16:51:34.885"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.069" starttime="20170511 16:51:34.884"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.069" starttime="20170511 16:51:34.883"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:35.069" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:51:35.069" starttime="20170511 16:51:35.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.070" starttime="20170511 16:51:35.070"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:35.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:51:35.146" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:35.146" starttime="20170511 16:51:35.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.147" starttime="20170511 16:51:35.146"></status>
</kw>
<msg timestamp="20170511 16:51:35.147" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:35.147" starttime="20170511 16:51:34.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:35.148" starttime="20170511 16:51:35.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:35.148" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:35.148" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:35.148" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170511 16:51:35.149" starttime="20170511 16:51:35.148"></status>
</kw>
<msg timestamp="20170511 16:51:35.149" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170511 16:51:35.149" starttime="20170511 16:51:34.882"></status>
</kw>
<msg timestamp="20170511 16:51:35.151" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170511 16:51:35.151" starttime="20170511 16:51:34.882"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170511 16:51:35.153" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170511 16:51:35.153" starttime="20170511 16:51:35.153"></status>
</kw>
<msg timestamp="20170511 16:51:35.153" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 16:51:35.153" starttime="20170511 16:51:35.152"></status>
</kw>
<msg timestamp="20170511 16:51:35.153" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 16:51:35.154" starttime="20170511 16:51:34.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.154" starttime="20170511 16:51:35.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.155" starttime="20170511 16:51:35.155"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170511 16:51:35.156" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170511 16:51:35.156" starttime="20170511 16:51:35.156"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170511 16:51:35.156" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20170511 16:51:35.157" starttime="20170511 16:51:35.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.157" starttime="20170511 16:51:35.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.158" starttime="20170511 16:51:35.157"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.158" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170511 16:51:35.158" starttime="20170511 16:51:35.158"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.159" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170511 16:51:35.160" starttime="20170511 16:51:35.159"></status>
</kw>
<msg timestamp="20170511 16:51:35.160" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170511 16:51:35.160" starttime="20170511 16:51:35.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.160" starttime="20170511 16:51:35.160"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.161" starttime="20170511 16:51:35.161"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 16:51:35.162" level="INFO">${cur_time} = 2017-05-11 16:51:35:162100</msg>
<status status="PASS" endtime="20170511 16:51:35.163" starttime="20170511 16:51:35.162"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 16:51:35.163" level="INFO">${cur_time} = 20170511165135162100</msg>
<status status="PASS" endtime="20170511 16:51:35.163" starttime="20170511 16:51:35.163"></status>
</kw>
<msg timestamp="20170511 16:51:35.164" level="INFO">${cur_time} = 20170511165135162100</msg>
<status status="PASS" endtime="20170511 16:51:35.164" starttime="20170511 16:51:35.161"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.164" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 16:51:35.165" starttime="20170511 16:51:35.164"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.165" starttime="20170511 16:51:35.155"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.165" starttime="20170511 16:51:34.881"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.165" starttime="20170511 16:51:34.871"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.165" starttime="20170511 16:51:34.869"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170511 16:51:35.165" critical="yes" starttime="20170511 16:46:59.731"></status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<kw name="Validate Power On">
<doc>Power the host on, and validate that the sytem booted.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Start SOL Console Logging</arg>
</arguments>
<kw name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170511 16:51:35.180" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170511 16:51:35.180" starttime="20170511 16:51:35.180"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170511 16:51:35.181" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170511 16:51:35.181" starttime="20170511 16:51:35.180"></status>
</kw>
<msg timestamp="20170511 16:51:35.181" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170511 16:51:35.181" starttime="20170511 16:51:35.179"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170511 16:51:35.183" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170511 16:51:35.183" starttime="20170511 16:51:35.182"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170511 16:51:35.183" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170511 16:51:35.183" starttime="20170511 16:51:35.183"></status>
</kw>
<msg timestamp="20170511 16:51:35.184" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170511 16:51:35.184" starttime="20170511 16:51:35.182"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:51:35.184" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170511 16:51:35.184" starttime="20170511 16:51:35.184"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.185" starttime="20170511 16:51:35.185"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170511 16:51:35.190" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170511 16:51:35.193" level="INFO">${rc} = 0</msg>
<msg timestamp="20170511 16:51:35.193" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170511 16:51:35.193" starttime="20170511 16:51:35.185"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.197" starttime="20170511 16:51:35.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.198" starttime="20170511 16:51:35.197"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:51:35.199" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" endtime="20170511 16:51:35.199" starttime="20170511 16:51:35.198"></status>
</kw>
<msg timestamp="20170511 16:51:35.199" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" endtime="20170511 16:51:35.199" starttime="20170511 16:51:35.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:51:35.200" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170511 16:51:35.200" starttime="20170511 16:51:35.200"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.200" starttime="20170511 16:51:35.200"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170511 16:51:35.206" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170511 16:51:35.216" level="INFO">${rc} = 0</msg>
<msg timestamp="20170511 16:51:35.216" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170511 16:51:35.216" starttime="20170511 16:51:35.201"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.218" starttime="20170511 16:51:35.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:51:35.218" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170511 16:51:35.218" starttime="20170511 16:51:35.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.219" starttime="20170511 16:51:35.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170511 16:51:35.220" level="INFO">${rc} = None</msg>
<msg timestamp="20170511 16:51:35.220" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170511 16:51:35.220" starttime="20170511 16:51:35.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.221" starttime="20170511 16:51:35.220"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:51:35.222" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170511 16:51:35.222" starttime="20170511 16:51:35.221"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.222" starttime="20170511 16:51:35.222"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170511 16:51:35.226" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170511 16:51:35.228" level="INFO">${rc} = 1</msg>
<msg timestamp="20170511 16:51:35.228" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status status="PASS" endtime="20170511 16:51:35.229" starttime="20170511 16:51:35.222"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.232" starttime="20170511 16:51:35.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.233" starttime="20170511 16:51:35.233"></status>
</kw>
<msg timestamp="20170511 16:51:35.234" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status status="PASS" endtime="20170511 16:51:35.234" starttime="20170511 16:51:35.181"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.235" html="yes" level="INFO">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 16:51:35.235" starttime="20170511 16:51:35.234"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:51:35.237" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170511 16:51:35.237" starttime="20170511 16:51:35.236"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.237" starttime="20170511 16:51:35.237"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170511 16:51:35.240" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170511 16:51:35.243" level="INFO">${rc} = 0</msg>
<msg timestamp="20170511 16:51:35.243" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170511 16:51:35.243" starttime="20170511 16:51:35.237"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.247" starttime="20170511 16:51:35.246"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.248" starttime="20170511 16:51:35.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:51:35.248" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" endtime="20170511 16:51:35.248" starttime="20170511 16:51:35.248"></status>
</kw>
<msg timestamp="20170511 16:51:35.249" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" endtime="20170511 16:51:35.249" starttime="20170511 16:51:35.236"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:51:35.250" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170511 16:51:35.250" starttime="20170511 16:51:35.249"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.250" starttime="20170511 16:51:35.250"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170511 16:51:35.253" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170511 16:51:35.256" level="INFO">${rc} = 0</msg>
<msg timestamp="20170511 16:51:35.256" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170511 16:51:35.256" starttime="20170511 16:51:35.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.260" starttime="20170511 16:51:35.259"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.260" starttime="20170511 16:51:35.179"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.261" starttime="20170511 16:51:35.167"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power On</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power On</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.277" level="INFO">${boot_stack} = REST Power On</msg>
<msg timestamp="20170511 16:51:35.599" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170511 16:51:35.618" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170511 16:51:35.618" starttime="20170511 16:51:35.618"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:35.620" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170511 16:51:35.620" starttime="20170511 16:51:35.619"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:35.623" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:35.624" starttime="20170511 16:51:35.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:35.630" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:35.630" starttime="20170511 16:51:35.624"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:35.631" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:35.631" starttime="20170511 16:51:35.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:35.632" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:35.632" starttime="20170511 16:51:35.631"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:35.988" starttime="20170511 16:51:35.633"></status>
</kw>
<msg timestamp="20170511 16:51:35.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:35.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:35.988" starttime="20170511 16:51:35.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:35.989" starttime="20170511 16:51:35.988"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:35.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:35.990" starttime="20170511 16:51:35.989"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.990" starttime="20170511 16:51:35.622"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.990" starttime="20170511 16:51:35.621"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.990" starttime="20170511 16:51:35.620"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:35.991" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170511 16:51:35.991" starttime="20170511 16:51:35.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:35.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:35.991" starttime="20170511 16:51:35.991"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:35.992" starttime="20170511 16:51:35.992"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170511 16:51:35.993" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170511 16:51:35.993" starttime="20170511 16:51:35.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170511 16:51:35.994" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170511 16:51:35.994" starttime="20170511 16:51:35.994"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.995" starttime="20170511 16:51:35.994"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:35.995" starttime="20170511 16:51:35.992"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:36.255" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170511 16:51:36.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.255" starttime="20170511 16:51:35.995"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170511 16:51:36.257" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170511 16:51:36.257" starttime="20170511 16:51:36.256"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170511 16:51:36.258" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170511 16:51:36.258" starttime="20170511 16:51:36.258"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.258" starttime="20170511 16:51:36.257"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.258" starttime="20170511 16:51:36.256"></status>
</kw>
<msg timestamp="20170511 16:51:36.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.259" starttime="20170511 16:51:35.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:36.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.260" starttime="20170511 16:51:36.259"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170511 16:51:36.260" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:36.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:36.260" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170511 16:51:36.260" starttime="20170511 16:51:36.260"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.260" starttime="20170511 16:51:35.618"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:36.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:36.265" starttime="20170511 16:51:36.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:36.265" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:36.265" starttime="20170511 16:51:36.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:36.266" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:36.266" starttime="20170511 16:51:36.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:36.266" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:36.266" starttime="20170511 16:51:36.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:36.444" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:36.444" starttime="20170511 16:51:36.267"></status>
</kw>
<msg timestamp="20170511 16:51:36.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:36.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.445" starttime="20170511 16:51:36.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:36.446" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.446" starttime="20170511 16:51:36.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:36.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.446" starttime="20170511 16:51:36.446"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.447" starttime="20170511 16:51:36.263"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.447" starttime="20170511 16:51:36.263"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.447" starttime="20170511 16:51:36.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:36.447" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170511 16:51:36.447" starttime="20170511 16:51:36.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:36.448" starttime="20170511 16:51:36.448"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:36.535" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20170511 16:51:36.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.535" starttime="20170511 16:51:36.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:36.536" starttime="20170511 16:51:36.536"></status>
</kw>
<msg timestamp="20170511 16:51:36.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.536" starttime="20170511 16:51:36.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:36.537" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.537" starttime="20170511 16:51:36.537"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:36.538" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:36.538" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:36.538" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170511 16:51:36.538" starttime="20170511 16:51:36.537"></status>
</kw>
<msg timestamp="20170511 16:51:36.538" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170511 16:51:36.538" starttime="20170511 16:51:36.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170511 16:51:36.539" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:36.539" starttime="20170511 16:51:36.539"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.539" starttime="20170511 16:51:35.616"></status>
</kw>
<msg timestamp="20170511 16:51:36.566" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170511 16:51:36.571" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170511 16:51:36.571" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170511 16:51:36.571" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 16:51:36.574" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 16:51:36.574" starttime="20170511 16:51:36.574"></status>
</kw>
<msg timestamp="20170511 16:51:36.574" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 16:51:36.574" starttime="20170511 16:51:36.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:36.575" starttime="20170511 16:51:36.575"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.575" starttime="20170511 16:51:36.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:36.576" starttime="20170511 16:51:36.576"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 16:51:36.577" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 16:51:36.577" starttime="20170511 16:51:36.577"></status>
</kw>
<msg timestamp="20170511 16:51:36.577" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 16:51:36.577" starttime="20170511 16:51:36.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:36.580" starttime="20170511 16:51:36.579"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.580" starttime="20170511 16:51:36.578"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:36.580" starttime="20170511 16:51:36.578"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 16:51:36.580" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 16:51:38.334" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 16:51:38.334" starttime="20170511 16:51:36.580"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:38.335" starttime="20170511 16:51:36.573"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:38.375" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:38.376" starttime="20170511 16:51:38.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:38.377" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:38.377" starttime="20170511 16:51:38.376"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:38.377" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:38.377" starttime="20170511 16:51:38.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:38.378" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:38.378" starttime="20170511 16:51:38.378"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:38.555" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:38.556" starttime="20170511 16:51:38.379"></status>
</kw>
<msg timestamp="20170511 16:51:38.556" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:38.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.556" starttime="20170511 16:51:38.378"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:38.556" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.557" starttime="20170511 16:51:38.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:38.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.557" starttime="20170511 16:51:38.557"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:38.557" starttime="20170511 16:51:38.373"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:38.557" starttime="20170511 16:51:38.372"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:38.558" starttime="20170511 16:51:38.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:38.558" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:51:38.558" starttime="20170511 16:51:38.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:38.559" starttime="20170511 16:51:38.559"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:38.626" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:51:38.626" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.626" starttime="20170511 16:51:38.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:38.627" starttime="20170511 16:51:38.626"></status>
</kw>
<msg timestamp="20170511 16:51:38.627" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.627" starttime="20170511 16:51:38.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:38.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.628" starttime="20170511 16:51:38.627"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:38.629" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:38.629" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:38.629" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170511 16:51:38.629" starttime="20170511 16:51:38.628"></status>
</kw>
<msg timestamp="20170511 16:51:38.629" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170511 16:51:38.629" starttime="20170511 16:51:38.368"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:38.629" starttime="20170511 16:51:38.365"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:38.635" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:38.635" starttime="20170511 16:51:38.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:38.636" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:38.636" starttime="20170511 16:51:38.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:38.636" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:38.636" starttime="20170511 16:51:38.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:38.637" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:38.637" starttime="20170511 16:51:38.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:38.814" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:38.814" starttime="20170511 16:51:38.638"></status>
</kw>
<msg timestamp="20170511 16:51:38.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:38.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.814" starttime="20170511 16:51:38.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:38.815" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.815" starttime="20170511 16:51:38.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:38.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.815" starttime="20170511 16:51:38.815"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:38.816" starttime="20170511 16:51:38.634"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:38.816" starttime="20170511 16:51:38.633"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:38.816" starttime="20170511 16:51:38.633"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:38.816" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170511 16:51:38.816" starttime="20170511 16:51:38.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:38.817" starttime="20170511 16:51:38.817"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:38.921" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170511 16:51:38.921" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.921" starttime="20170511 16:51:38.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:38.922" starttime="20170511 16:51:38.921"></status>
</kw>
<msg timestamp="20170511 16:51:38.922" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.922" starttime="20170511 16:51:38.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:38.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:38.923" starttime="20170511 16:51:38.922"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:38.923" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:38.923" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:38.924" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170511 16:51:38.924" starttime="20170511 16:51:38.923"></status>
</kw>
<msg timestamp="20170511 16:51:38.924" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170511 16:51:38.924" starttime="20170511 16:51:38.630"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:38.924" starttime="20170511 16:51:38.630"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:38.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:38.928" starttime="20170511 16:51:38.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:38.929" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:38.929" starttime="20170511 16:51:38.929"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:38.929" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:38.930" starttime="20170511 16:51:38.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:38.930" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:38.930" starttime="20170511 16:51:38.930"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.111" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:39.111" starttime="20170511 16:51:38.931"></status>
</kw>
<msg timestamp="20170511 16:51:39.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:39.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.111" starttime="20170511 16:51:38.930"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.112" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.112" starttime="20170511 16:51:39.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.113" starttime="20170511 16:51:39.112"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.113" starttime="20170511 16:51:38.927"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.113" starttime="20170511 16:51:38.927"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.113" starttime="20170511 16:51:38.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:39.114" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:51:39.114" starttime="20170511 16:51:39.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:39.115" starttime="20170511 16:51:39.114"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:39.183" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:51:39.184" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.184" starttime="20170511 16:51:39.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:39.185" starttime="20170511 16:51:39.184"></status>
</kw>
<msg timestamp="20170511 16:51:39.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.185" starttime="20170511 16:51:38.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.186" starttime="20170511 16:51:39.185"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:39.186" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:39.186" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:39.186" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:51:39.186" starttime="20170511 16:51:39.186"></status>
</kw>
<msg timestamp="20170511 16:51:39.187" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:51:39.187" starttime="20170511 16:51:38.925"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.187" starttime="20170511 16:51:38.924"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:39.191" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:39.191" starttime="20170511 16:51:39.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:39.192" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:39.192" starttime="20170511 16:51:39.191"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:39.192" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:39.192" starttime="20170511 16:51:39.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:39.193" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:39.193" starttime="20170511 16:51:39.193"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.376" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:39.376" starttime="20170511 16:51:39.194"></status>
</kw>
<msg timestamp="20170511 16:51:39.376" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:39.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.377" starttime="20170511 16:51:39.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.377" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.377" starttime="20170511 16:51:39.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.378" starttime="20170511 16:51:39.378"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.378" starttime="20170511 16:51:39.190"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.378" starttime="20170511 16:51:39.189"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.378" starttime="20170511 16:51:39.189"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:39.379" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:51:39.379" starttime="20170511 16:51:39.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:39.380" starttime="20170511 16:51:39.379"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:39.443" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:51:39.444" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.444" starttime="20170511 16:51:39.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:39.444" starttime="20170511 16:51:39.444"></status>
</kw>
<msg timestamp="20170511 16:51:39.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.445" starttime="20170511 16:51:39.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.445" starttime="20170511 16:51:39.445"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:39.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:39.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:39.446" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170511 16:51:39.446" starttime="20170511 16:51:39.446"></status>
</kw>
<msg timestamp="20170511 16:51:39.447" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170511 16:51:39.447" starttime="20170511 16:51:39.188"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.447" starttime="20170511 16:51:39.187"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>REST Power On</arg>
</arguments>
<msg timestamp="20170511 16:51:39.453" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170511 16:51:39.469" level="INFO">${QUIET} = 1</msg>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<arguments>
<arg>wait=${0}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170511 16:51:39.471" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20170511 16:51:39.471" starttime="20170511 16:51:39.470"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:39.472" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170511 16:51:39.472" starttime="20170511 16:51:39.471"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:39.476" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:39.476" starttime="20170511 16:51:39.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:39.477" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:39.477" starttime="20170511 16:51:39.477"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:39.478" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:39.478" starttime="20170511 16:51:39.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:39.479" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:39.479" starttime="20170511 16:51:39.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.668" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:39.668" starttime="20170511 16:51:39.480"></status>
</kw>
<msg timestamp="20170511 16:51:39.668" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:39.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.668" starttime="20170511 16:51:39.480"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.669" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.669" starttime="20170511 16:51:39.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.670" starttime="20170511 16:51:39.669"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.670" starttime="20170511 16:51:39.474"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.670" starttime="20170511 16:51:39.474"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.670" starttime="20170511 16:51:39.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:39.671" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170511 16:51:39.671" starttime="20170511 16:51:39.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:39.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:39.672" starttime="20170511 16:51:39.671"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:39.672" starttime="20170511 16:51:39.672"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170511 16:51:39.674" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Typ...</msg>
<status status="PASS" endtime="20170511 16:51:39.674" starttime="20170511 16:51:39.673"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170511 16:51:39.675" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170511 16:51:39.675" starttime="20170511 16:51:39.674"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.675" starttime="20170511 16:51:39.674"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.675" starttime="20170511 16:51:39.672"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:39.867" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170511 16:51:39.868" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.868" starttime="20170511 16:51:39.675"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170511 16:51:39.869" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170511 16:51:39.869" starttime="20170511 16:51:39.869"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170511 16:51:39.870" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170511 16:51:39.870" starttime="20170511 16:51:39.870"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.870" starttime="20170511 16:51:39.869"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.870" starttime="20170511 16:51:39.868"></status>
</kw>
<msg timestamp="20170511 16:51:39.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.871" starttime="20170511 16:51:39.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:39.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:39.871" starttime="20170511 16:51:39.871"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170511 16:51:39.872" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:39.872" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:39.872" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170511 16:51:39.872" starttime="20170511 16:51:39.872"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.872" starttime="20170511 16:51:39.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170511 16:51:39.873" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170511 16:51:39.874" starttime="20170511 16:51:39.873"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.874" starttime="20170511 16:51:39.873"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:39.874" starttime="20170511 16:51:39.469"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:39.895" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:39.895" starttime="20170511 16:51:39.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:39.896" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:39.896" starttime="20170511 16:51:39.895"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:39.897" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:39.897" starttime="20170511 16:51:39.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:39.897" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:39.897" starttime="20170511 16:51:39.897"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:40.841" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:40.842" starttime="20170511 16:51:39.898"></status>
</kw>
<msg timestamp="20170511 16:51:40.842" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:40.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:40.842" starttime="20170511 16:51:39.898"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:40.843" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:40.843" starttime="20170511 16:51:40.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:40.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:40.844" starttime="20170511 16:51:40.843"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:40.844" starttime="20170511 16:51:39.894"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:40.844" starttime="20170511 16:51:39.893"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:40.844" starttime="20170511 16:51:39.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:40.844" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:51:40.845" starttime="20170511 16:51:40.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:40.845" starttime="20170511 16:51:40.845"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:41.938" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:51:41.938" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:41.938" starttime="20170511 16:51:40.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:41.939" starttime="20170511 16:51:41.938"></status>
</kw>
<msg timestamp="20170511 16:51:41.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:41.939" starttime="20170511 16:51:39.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:41.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:41.940" starttime="20170511 16:51:41.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:41.940" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:41.940" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:41.940" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170511 16:51:41.940" starttime="20170511 16:51:41.940"></status>
</kw>
<msg timestamp="20170511 16:51:41.941" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170511 16:51:41.941" starttime="20170511 16:51:39.891"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:41.941" starttime="20170511 16:51:39.891"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:41.945" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:41.945" starttime="20170511 16:51:41.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:41.946" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:41.946" starttime="20170511 16:51:41.946"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:41.947" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:41.947" starttime="20170511 16:51:41.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:41.947" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:41.947" starttime="20170511 16:51:41.947"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:42.462" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:42.462" starttime="20170511 16:51:41.948"></status>
</kw>
<msg timestamp="20170511 16:51:42.462" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:42.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:42.462" starttime="20170511 16:51:41.948"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:42.463" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:42.463" starttime="20170511 16:51:42.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:42.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:42.464" starttime="20170511 16:51:42.463"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:42.464" starttime="20170511 16:51:41.944"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:42.464" starttime="20170511 16:51:41.944"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:42.464" starttime="20170511 16:51:41.943"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:42.465" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170511 16:51:42.465" starttime="20170511 16:51:42.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:42.465" starttime="20170511 16:51:42.465"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:42.604" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170511 16:51:42.604" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:42.605" starttime="20170511 16:51:42.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:42.605" starttime="20170511 16:51:42.605"></status>
</kw>
<msg timestamp="20170511 16:51:42.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:42.605" starttime="20170511 16:51:41.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:42.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:42.606" starttime="20170511 16:51:42.606"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:42.607" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:42.607" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:42.607" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170511 16:51:42.607" starttime="20170511 16:51:42.606"></status>
</kw>
<msg timestamp="20170511 16:51:42.607" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170511 16:51:42.607" starttime="20170511 16:51:41.942"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:42.608" starttime="20170511 16:51:41.941"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:42.611" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:42.612" starttime="20170511 16:51:42.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:42.612" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:42.612" starttime="20170511 16:51:42.612"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:42.613" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:42.613" starttime="20170511 16:51:42.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:42.614" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:42.614" starttime="20170511 16:51:42.613"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:43.109" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:43.109" starttime="20170511 16:51:42.614"></status>
</kw>
<msg timestamp="20170511 16:51:43.110" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:43.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.110" starttime="20170511 16:51:42.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:43.110" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.110" starttime="20170511 16:51:43.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:43.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.111" starttime="20170511 16:51:43.111"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:43.111" starttime="20170511 16:51:42.610"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:43.111" starttime="20170511 16:51:42.610"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:43.112" starttime="20170511 16:51:42.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:43.112" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:51:43.112" starttime="20170511 16:51:43.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:43.113" starttime="20170511 16:51:43.112"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:43.286" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:51:43.286" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.286" starttime="20170511 16:51:43.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:43.287" starttime="20170511 16:51:43.287"></status>
</kw>
<msg timestamp="20170511 16:51:43.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.287" starttime="20170511 16:51:42.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:43.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.288" starttime="20170511 16:51:43.288"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:43.289" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:43.289" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:43.289" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:51:43.289" starttime="20170511 16:51:43.289"></status>
</kw>
<msg timestamp="20170511 16:51:43.290" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:51:43.290" starttime="20170511 16:51:42.608"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:43.290" starttime="20170511 16:51:42.608"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:43.294" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:43.294" starttime="20170511 16:51:43.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:43.295" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:43.295" starttime="20170511 16:51:43.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:43.295" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:43.295" starttime="20170511 16:51:43.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:43.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:43.296" starttime="20170511 16:51:43.295"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:43.800" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:43.800" starttime="20170511 16:51:43.297"></status>
</kw>
<msg timestamp="20170511 16:51:43.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:43.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.800" starttime="20170511 16:51:43.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:43.801" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.801" starttime="20170511 16:51:43.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:43.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.802" starttime="20170511 16:51:43.801"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:43.802" starttime="20170511 16:51:43.293"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:43.802" starttime="20170511 16:51:43.292"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:43.802" starttime="20170511 16:51:43.292"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:43.802" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:51:43.802" starttime="20170511 16:51:43.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:43.803" starttime="20170511 16:51:43.803"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:43.996" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:51:43.996" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.996" starttime="20170511 16:51:43.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:43.997" starttime="20170511 16:51:43.997"></status>
</kw>
<msg timestamp="20170511 16:51:43.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.997" starttime="20170511 16:51:43.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:43.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:43.999" starttime="20170511 16:51:43.998"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:44.000" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:44.000" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:44.000" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170511 16:51:44.000" starttime="20170511 16:51:43.999"></status>
</kw>
<msg timestamp="20170511 16:51:44.000" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170511 16:51:44.000" starttime="20170511 16:51:43.291"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:44.001" starttime="20170511 16:51:43.290"></status>
</kw>
<msg timestamp="20170511 16:51:44.003" level="FAIL">
#(UTC) 2017/05/11 16:51:44.002422 -    4.553492 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170511 16:51:44.003" starttime="20170511 16:51:39.888"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:47.009" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:47.010" starttime="20170511 16:51:47.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:47.010" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:47.010" starttime="20170511 16:51:47.010"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:47.011" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:47.011" starttime="20170511 16:51:47.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:47.013" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:47.013" starttime="20170511 16:51:47.011"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:48.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:48.062" starttime="20170511 16:51:47.014"></status>
</kw>
<msg timestamp="20170511 16:51:48.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:48.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:48.062" starttime="20170511 16:51:47.013"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:48.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:48.063" starttime="20170511 16:51:48.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:48.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:48.064" starttime="20170511 16:51:48.063"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:48.064" starttime="20170511 16:51:47.008"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:48.064" starttime="20170511 16:51:47.008"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:48.064" starttime="20170511 16:51:47.007"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:48.065" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:51:48.065" starttime="20170511 16:51:48.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:48.066" starttime="20170511 16:51:48.065"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:55.828" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:51:55.828" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:55.828" starttime="20170511 16:51:48.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:55.829" starttime="20170511 16:51:55.828"></status>
</kw>
<msg timestamp="20170511 16:51:55.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:55.829" starttime="20170511 16:51:47.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:55.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:55.830" starttime="20170511 16:51:55.829"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:55.830" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:55.830" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:55.831" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170511 16:51:55.831" starttime="20170511 16:51:55.830"></status>
</kw>
<msg timestamp="20170511 16:51:55.831" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170511 16:51:55.831" starttime="20170511 16:51:47.006"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:55.831" starttime="20170511 16:51:47.006"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:55.835" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:55.835" starttime="20170511 16:51:55.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:55.836" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:55.836" starttime="20170511 16:51:55.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:55.837" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:55.837" starttime="20170511 16:51:55.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:55.837" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:55.837" starttime="20170511 16:51:55.837"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:56.449" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:56.449" starttime="20170511 16:51:55.838"></status>
</kw>
<msg timestamp="20170511 16:51:56.449" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:56.449" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:56.449" starttime="20170511 16:51:55.838"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:56.450" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:56.450" starttime="20170511 16:51:56.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:56.451" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:56.451" starttime="20170511 16:51:56.450"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:56.451" starttime="20170511 16:51:55.834"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:56.451" starttime="20170511 16:51:55.834"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:56.451" starttime="20170511 16:51:55.833"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:56.452" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170511 16:51:56.452" starttime="20170511 16:51:56.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:56.453" starttime="20170511 16:51:56.452"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:56.993" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170511 16:51:56.994" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:56.994" starttime="20170511 16:51:56.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:56.994" starttime="20170511 16:51:56.994"></status>
</kw>
<msg timestamp="20170511 16:51:56.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:56.995" starttime="20170511 16:51:55.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:56.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:56.995" starttime="20170511 16:51:56.995"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:56.996" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:56.996" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:56.996" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170511 16:51:56.996" starttime="20170511 16:51:56.996"></status>
</kw>
<msg timestamp="20170511 16:51:56.996" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170511 16:51:56.996" starttime="20170511 16:51:55.832"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:56.997" starttime="20170511 16:51:55.832"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:57.001" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:57.001" starttime="20170511 16:51:57.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:57.001" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:57.002" starttime="20170511 16:51:57.001"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:57.002" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:57.002" starttime="20170511 16:51:57.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:57.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:57.003" starttime="20170511 16:51:57.002"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:57.247" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:57.247" starttime="20170511 16:51:57.004"></status>
</kw>
<msg timestamp="20170511 16:51:57.247" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:57.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:57.247" starttime="20170511 16:51:57.003"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:57.248" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:57.248" starttime="20170511 16:51:57.247"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:57.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:57.249" starttime="20170511 16:51:57.248"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:57.249" starttime="20170511 16:51:57.000"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:57.249" starttime="20170511 16:51:56.999"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:57.249" starttime="20170511 16:51:56.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:57.250" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:51:57.250" starttime="20170511 16:51:57.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:57.250" starttime="20170511 16:51:57.250"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:57.351" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:51:57.351" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:57.351" starttime="20170511 16:51:57.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:57.352" starttime="20170511 16:51:57.351"></status>
</kw>
<msg timestamp="20170511 16:51:57.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:57.352" starttime="20170511 16:51:56.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:57.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:57.353" starttime="20170511 16:51:57.352"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:57.353" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:57.353" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:57.353" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:51:57.353" starttime="20170511 16:51:57.353"></status>
</kw>
<msg timestamp="20170511 16:51:57.354" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:51:57.354" starttime="20170511 16:51:56.997"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:57.354" starttime="20170511 16:51:56.997"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:51:57.358" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:51:57.358" starttime="20170511 16:51:57.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:51:57.358" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:51:57.359" starttime="20170511 16:51:57.358"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:51:57.359" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:51:57.359" starttime="20170511 16:51:57.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:51:57.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:51:57.360" starttime="20170511 16:51:57.359"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:51:58.645" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:51:58.645" starttime="20170511 16:51:57.360"></status>
</kw>
<msg timestamp="20170511 16:51:58.645" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:51:58.645" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:58.645" starttime="20170511 16:51:57.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:51:58.646" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:58.646" starttime="20170511 16:51:58.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:58.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:58.647" starttime="20170511 16:51:58.646"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:58.647" starttime="20170511 16:51:57.357"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:58.647" starttime="20170511 16:51:57.356"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:58.647" starttime="20170511 16:51:57.356"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:51:58.648" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:51:58.648" starttime="20170511 16:51:58.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:58.648" starttime="20170511 16:51:58.648"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:51:58.991" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:51:58.991" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:58.991" starttime="20170511 16:51:58.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:51:58.992" starttime="20170511 16:51:58.992"></status>
</kw>
<msg timestamp="20170511 16:51:58.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:51:58.992" starttime="20170511 16:51:57.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:51:58.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:51:58.993" starttime="20170511 16:51:58.993"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:51:58.994" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:51:58.994" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:51:58.994" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170511 16:51:58.994" starttime="20170511 16:51:58.993"></status>
</kw>
<msg timestamp="20170511 16:51:58.994" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170511 16:51:58.994" starttime="20170511 16:51:57.355"></status>
</kw>
<status status="PASS" endtime="20170511 16:51:58.994" starttime="20170511 16:51:57.354"></status>
</kw>
<msg timestamp="20170511 16:51:58.995" level="FAIL">
#(UTC) 2017/05/11 16:51:58.994604 -   14.992182 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170511 16:51:58.995" starttime="20170511 16:51:47.004"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:02.001" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:02.001" starttime="20170511 16:52:02.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:02.002" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:02.002" starttime="20170511 16:52:02.001"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:02.002" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:02.002" starttime="20170511 16:52:02.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:02.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:02.003" starttime="20170511 16:52:02.003"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:02.290" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:02.290" starttime="20170511 16:52:02.004"></status>
</kw>
<msg timestamp="20170511 16:52:02.290" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:02.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.290" starttime="20170511 16:52:02.003"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:02.291" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.291" starttime="20170511 16:52:02.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:02.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.292" starttime="20170511 16:52:02.291"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:02.292" starttime="20170511 16:52:02.000"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:02.292" starttime="20170511 16:52:01.999"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:02.292" starttime="20170511 16:52:01.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:02.293" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:02.293" starttime="20170511 16:52:02.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:02.293" starttime="20170511 16:52:02.293"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:02.374" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:02.375" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.375" starttime="20170511 16:52:02.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:02.375" starttime="20170511 16:52:02.375"></status>
</kw>
<msg timestamp="20170511 16:52:02.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.375" starttime="20170511 16:52:01.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:02.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.376" starttime="20170511 16:52:02.376"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:02.377" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:02.377" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:02.377" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:02.377" starttime="20170511 16:52:02.376"></status>
</kw>
<msg timestamp="20170511 16:52:02.377" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:02.377" starttime="20170511 16:52:01.997"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:02.378" starttime="20170511 16:52:01.997"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:02.381" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:02.382" starttime="20170511 16:52:02.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:02.382" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:02.383" starttime="20170511 16:52:02.382"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:02.384" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:02.384" starttime="20170511 16:52:02.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:02.385" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:02.385" starttime="20170511 16:52:02.385"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:02.678" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:02.678" starttime="20170511 16:52:02.386"></status>
</kw>
<msg timestamp="20170511 16:52:02.678" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:02.678" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.678" starttime="20170511 16:52:02.385"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:02.678" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.679" starttime="20170511 16:52:02.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:02.679" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.679" starttime="20170511 16:52:02.679"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:02.679" starttime="20170511 16:52:02.381"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:02.679" starttime="20170511 16:52:02.380"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:02.680" starttime="20170511 16:52:02.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:02.680" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170511 16:52:02.680" starttime="20170511 16:52:02.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:02.681" starttime="20170511 16:52:02.680"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:02.766" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170511 16:52:02.766" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.766" starttime="20170511 16:52:02.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:02.767" starttime="20170511 16:52:02.767"></status>
</kw>
<msg timestamp="20170511 16:52:02.767" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.767" starttime="20170511 16:52:02.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:02.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:02.768" starttime="20170511 16:52:02.767"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:02.768" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:02.768" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:02.769" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170511 16:52:02.769" starttime="20170511 16:52:02.768"></status>
</kw>
<msg timestamp="20170511 16:52:02.769" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170511 16:52:02.769" starttime="20170511 16:52:02.378"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:02.770" starttime="20170511 16:52:02.378"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:02.775" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:02.776" starttime="20170511 16:52:02.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:02.776" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:02.776" starttime="20170511 16:52:02.776"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:02.777" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:02.777" starttime="20170511 16:52:02.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:02.777" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:02.778" starttime="20170511 16:52:02.777"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.035" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:03.035" starttime="20170511 16:52:02.778"></status>
</kw>
<msg timestamp="20170511 16:52:03.035" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:03.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.035" starttime="20170511 16:52:02.778"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.036" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.036" starttime="20170511 16:52:03.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.037" starttime="20170511 16:52:03.036"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.037" starttime="20170511 16:52:02.774"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.037" starttime="20170511 16:52:02.773"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.037" starttime="20170511 16:52:02.773"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:03.038" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:03.038" starttime="20170511 16:52:03.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:03.038" starttime="20170511 16:52:03.038"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:03.157" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:03.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.158" starttime="20170511 16:52:03.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:03.158" starttime="20170511 16:52:03.158"></status>
</kw>
<msg timestamp="20170511 16:52:03.158" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.158" starttime="20170511 16:52:02.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.159" starttime="20170511 16:52:03.159"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:03.160" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:03.160" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:03.160" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:52:03.160" starttime="20170511 16:52:03.159"></status>
</kw>
<msg timestamp="20170511 16:52:03.160" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:52:03.160" starttime="20170511 16:52:02.772"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.160" starttime="20170511 16:52:02.771"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:03.164" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:03.165" starttime="20170511 16:52:03.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:03.165" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:03.165" starttime="20170511 16:52:03.165"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:03.166" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:03.166" starttime="20170511 16:52:03.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:03.167" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:03.167" starttime="20170511 16:52:03.166"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.415" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:03.415" starttime="20170511 16:52:03.167"></status>
</kw>
<msg timestamp="20170511 16:52:03.415" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:03.415" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.415" starttime="20170511 16:52:03.167"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.415" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.416" starttime="20170511 16:52:03.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.416" starttime="20170511 16:52:03.416"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.416" starttime="20170511 16:52:03.163"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.416" starttime="20170511 16:52:03.163"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.417" starttime="20170511 16:52:03.162"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:03.417" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:03.417" starttime="20170511 16:52:03.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:03.418" starttime="20170511 16:52:03.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:03.492" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:03.492" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.492" starttime="20170511 16:52:03.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:03.493" starttime="20170511 16:52:03.493"></status>
</kw>
<msg timestamp="20170511 16:52:03.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.493" starttime="20170511 16:52:03.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.494" starttime="20170511 16:52:03.493"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:03.494" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:03.494" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:03.495" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:03.495" starttime="20170511 16:52:03.494"></status>
</kw>
<msg timestamp="20170511 16:52:03.495" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:03.495" starttime="20170511 16:52:03.161"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.495" starttime="20170511 16:52:03.161"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.496" starttime="20170511 16:52:01.996"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:03.509" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:03.511" starttime="20170511 16:52:03.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:03.511" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:03.511" starttime="20170511 16:52:03.511"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:03.512" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:03.512" starttime="20170511 16:52:03.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:03.513" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:03.513" starttime="20170511 16:52:03.512"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.760" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:03.760" starttime="20170511 16:52:03.513"></status>
</kw>
<msg timestamp="20170511 16:52:03.760" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:03.760" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.760" starttime="20170511 16:52:03.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.761" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.761" starttime="20170511 16:52:03.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.761" starttime="20170511 16:52:03.761"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.762" starttime="20170511 16:52:03.509"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.762" starttime="20170511 16:52:03.508"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.762" starttime="20170511 16:52:03.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:03.762" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:03.762" starttime="20170511 16:52:03.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:03.763" starttime="20170511 16:52:03.763"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:03.848" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:03.848" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.848" starttime="20170511 16:52:03.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:03.848" starttime="20170511 16:52:03.848"></status>
</kw>
<msg timestamp="20170511 16:52:03.849" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.849" starttime="20170511 16:52:03.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:03.850" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:03.850" starttime="20170511 16:52:03.849"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:03.850" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:03.850" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:03.850" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:03.851" starttime="20170511 16:52:03.850"></status>
</kw>
<msg timestamp="20170511 16:52:03.851" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:03.851" starttime="20170511 16:52:03.506"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:03.851" starttime="20170511 16:52:03.506"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:03.855" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:03.855" starttime="20170511 16:52:03.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:03.856" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:03.856" starttime="20170511 16:52:03.856"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:03.856" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:03.857" starttime="20170511 16:52:03.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:03.857" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:03.857" starttime="20170511 16:52:03.857"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:04.066" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:04.066" starttime="20170511 16:52:03.858"></status>
</kw>
<msg timestamp="20170511 16:52:04.067" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:04.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.067" starttime="20170511 16:52:03.857"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:04.067" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.067" starttime="20170511 16:52:04.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:04.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.068" starttime="20170511 16:52:04.068"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:04.068" starttime="20170511 16:52:03.854"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:04.068" starttime="20170511 16:52:03.854"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:04.068" starttime="20170511 16:52:03.853"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:04.069" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:04.069" starttime="20170511 16:52:04.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:04.070" starttime="20170511 16:52:04.069"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:04.151" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:04.151" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.151" starttime="20170511 16:52:04.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:04.152" starttime="20170511 16:52:04.152"></status>
</kw>
<msg timestamp="20170511 16:52:04.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.152" starttime="20170511 16:52:03.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:04.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.153" starttime="20170511 16:52:04.152"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:04.153" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:04.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:04.154" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:52:04.154" starttime="20170511 16:52:04.153"></status>
</kw>
<msg timestamp="20170511 16:52:04.154" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:52:04.154" starttime="20170511 16:52:03.852"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:04.154" starttime="20170511 16:52:03.851"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:04.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:04.158" starttime="20170511 16:52:04.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:04.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:04.159" starttime="20170511 16:52:04.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:04.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:04.159" starttime="20170511 16:52:04.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:04.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:04.160" starttime="20170511 16:52:04.160"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:04.378" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:04.378" starttime="20170511 16:52:04.161"></status>
</kw>
<msg timestamp="20170511 16:52:04.378" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:04.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.378" starttime="20170511 16:52:04.160"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:04.379" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.379" starttime="20170511 16:52:04.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:04.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.379" starttime="20170511 16:52:04.379"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:04.379" starttime="20170511 16:52:04.157"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:04.380" starttime="20170511 16:52:04.157"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:04.380" starttime="20170511 16:52:04.156"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:04.380" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:04.380" starttime="20170511 16:52:04.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:04.381" starttime="20170511 16:52:04.381"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:04.457" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:04.457" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.457" starttime="20170511 16:52:04.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:04.457" starttime="20170511 16:52:04.457"></status>
</kw>
<msg timestamp="20170511 16:52:04.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.458" starttime="20170511 16:52:04.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:04.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:04.458" starttime="20170511 16:52:04.458"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:04.459" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:04.459" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:04.459" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:04.459" starttime="20170511 16:52:04.459"></status>
</kw>
<msg timestamp="20170511 16:52:04.459" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:04.459" starttime="20170511 16:52:04.155"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:04.460" starttime="20170511 16:52:04.154"></status>
</kw>
<msg timestamp="20170511 16:52:04.460" level="FAIL">
#(UTC) 2017/05/11 16:52:04.459976 -    5.465372 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:04.460" starttime="20170511 16:52:03.505"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:07.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:07.467" starttime="20170511 16:52:07.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:07.468" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:07.468" starttime="20170511 16:52:07.467"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:07.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:07.468" starttime="20170511 16:52:07.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:07.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:07.469" starttime="20170511 16:52:07.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:07.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:07.673" starttime="20170511 16:52:07.470"></status>
</kw>
<msg timestamp="20170511 16:52:07.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:07.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:07.673" starttime="20170511 16:52:07.469"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:07.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:07.674" starttime="20170511 16:52:07.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:07.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:07.675" starttime="20170511 16:52:07.674"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:07.675" starttime="20170511 16:52:07.465"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:07.675" starttime="20170511 16:52:07.465"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:07.675" starttime="20170511 16:52:07.464"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:07.676" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:07.676" starttime="20170511 16:52:07.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:07.676" starttime="20170511 16:52:07.676"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:07.741" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:07.741" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:07.741" starttime="20170511 16:52:07.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:07.742" starttime="20170511 16:52:07.742"></status>
</kw>
<msg timestamp="20170511 16:52:07.742" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:07.742" starttime="20170511 16:52:07.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:07.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:07.743" starttime="20170511 16:52:07.743"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:07.744" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:07.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:07.744" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:07.744" starttime="20170511 16:52:07.743"></status>
</kw>
<msg timestamp="20170511 16:52:07.744" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:07.744" starttime="20170511 16:52:07.463"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:07.744" starttime="20170511 16:52:07.463"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:07.748" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:07.749" starttime="20170511 16:52:07.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:07.749" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:07.749" starttime="20170511 16:52:07.749"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:07.750" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:07.750" starttime="20170511 16:52:07.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:07.751" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:07.751" starttime="20170511 16:52:07.750"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:07.968" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:07.968" starttime="20170511 16:52:07.751"></status>
</kw>
<msg timestamp="20170511 16:52:07.968" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:07.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:07.968" starttime="20170511 16:52:07.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:07.969" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:07.969" starttime="20170511 16:52:07.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:07.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:07.970" starttime="20170511 16:52:07.969"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:07.970" starttime="20170511 16:52:07.747"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:07.970" starttime="20170511 16:52:07.747"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:07.970" starttime="20170511 16:52:07.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:07.970" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:07.970" starttime="20170511 16:52:07.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:07.971" starttime="20170511 16:52:07.971"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:08.039" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:08.039" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:08.039" starttime="20170511 16:52:07.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:08.040" starttime="20170511 16:52:08.039"></status>
</kw>
<msg timestamp="20170511 16:52:08.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:08.040" starttime="20170511 16:52:07.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:08.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:08.041" starttime="20170511 16:52:08.040"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:08.041" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:08.041" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:08.041" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:52:08.041" starttime="20170511 16:52:08.041"></status>
</kw>
<msg timestamp="20170511 16:52:08.042" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:52:08.042" starttime="20170511 16:52:07.745"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:08.042" starttime="20170511 16:52:07.745"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:08.046" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:08.046" starttime="20170511 16:52:08.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:08.047" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:08.047" starttime="20170511 16:52:08.047"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:08.048" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:08.048" starttime="20170511 16:52:08.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:08.048" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:08.048" starttime="20170511 16:52:08.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:08.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:08.233" starttime="20170511 16:52:08.049"></status>
</kw>
<msg timestamp="20170511 16:52:08.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:08.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:08.233" starttime="20170511 16:52:08.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:08.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:08.234" starttime="20170511 16:52:08.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:08.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:08.234" starttime="20170511 16:52:08.234"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:08.235" starttime="20170511 16:52:08.045"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:08.235" starttime="20170511 16:52:08.044"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:08.235" starttime="20170511 16:52:08.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:08.235" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:08.235" starttime="20170511 16:52:08.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:08.236" starttime="20170511 16:52:08.236"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:08.300" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:08.300" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:08.300" starttime="20170511 16:52:08.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:08.301" starttime="20170511 16:52:08.300"></status>
</kw>
<msg timestamp="20170511 16:52:08.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:08.301" starttime="20170511 16:52:08.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:08.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:08.302" starttime="20170511 16:52:08.301"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:08.302" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:08.302" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:08.302" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:08.303" starttime="20170511 16:52:08.302"></status>
</kw>
<msg timestamp="20170511 16:52:08.303" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:08.303" starttime="20170511 16:52:08.043"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:08.303" starttime="20170511 16:52:08.042"></status>
</kw>
<msg timestamp="20170511 16:52:08.304" level="FAIL">
#(UTC) 2017/05/11 16:52:08.303302 -    3.843326 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:08.304" starttime="20170511 16:52:07.461"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:11.310" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:11.311" starttime="20170511 16:52:11.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:11.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:11.311" starttime="20170511 16:52:11.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:11.312" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:11.312" starttime="20170511 16:52:11.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:11.313" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:11.313" starttime="20170511 16:52:11.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:11.488" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:11.488" starttime="20170511 16:52:11.314"></status>
</kw>
<msg timestamp="20170511 16:52:11.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:11.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.488" starttime="20170511 16:52:11.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:11.489" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.489" starttime="20170511 16:52:11.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:11.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.490" starttime="20170511 16:52:11.489"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:11.490" starttime="20170511 16:52:11.309"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:11.490" starttime="20170511 16:52:11.309"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:11.490" starttime="20170511 16:52:11.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:11.490" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:11.490" starttime="20170511 16:52:11.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:11.491" starttime="20170511 16:52:11.491"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:11.561" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:11.561" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.561" starttime="20170511 16:52:11.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:11.562" starttime="20170511 16:52:11.562"></status>
</kw>
<msg timestamp="20170511 16:52:11.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.562" starttime="20170511 16:52:11.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:11.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.563" starttime="20170511 16:52:11.563"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:11.564" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:11.564" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:11.564" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:11.564" starttime="20170511 16:52:11.563"></status>
</kw>
<msg timestamp="20170511 16:52:11.564" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:11.564" starttime="20170511 16:52:11.307"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:11.565" starttime="20170511 16:52:11.307"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:11.569" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:11.569" starttime="20170511 16:52:11.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:11.570" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:11.570" starttime="20170511 16:52:11.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:11.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:11.571" starttime="20170511 16:52:11.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:11.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:11.571" starttime="20170511 16:52:11.571"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:11.750" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:11.750" starttime="20170511 16:52:11.572"></status>
</kw>
<msg timestamp="20170511 16:52:11.750" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:11.750" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.750" starttime="20170511 16:52:11.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:11.751" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.751" starttime="20170511 16:52:11.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:11.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.752" starttime="20170511 16:52:11.751"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:11.752" starttime="20170511 16:52:11.568"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:11.752" starttime="20170511 16:52:11.567"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:11.752" starttime="20170511 16:52:11.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:11.753" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:11.753" starttime="20170511 16:52:11.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:11.753" starttime="20170511 16:52:11.753"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:11.821" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:11.821" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.821" starttime="20170511 16:52:11.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:11.822" starttime="20170511 16:52:11.821"></status>
</kw>
<msg timestamp="20170511 16:52:11.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.822" starttime="20170511 16:52:11.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:11.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:11.823" starttime="20170511 16:52:11.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:11.823" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:11.823" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:11.823" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:52:11.823" starttime="20170511 16:52:11.823"></status>
</kw>
<msg timestamp="20170511 16:52:11.823" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:52:11.824" starttime="20170511 16:52:11.565"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:11.824" starttime="20170511 16:52:11.565"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:11.828" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:11.828" starttime="20170511 16:52:11.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:11.829" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:11.829" starttime="20170511 16:52:11.829"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:11.830" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:11.830" starttime="20170511 16:52:11.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:11.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:11.830" starttime="20170511 16:52:11.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:12.046" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:12.046" starttime="20170511 16:52:11.831"></status>
</kw>
<msg timestamp="20170511 16:52:12.046" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:12.046" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:12.046" starttime="20170511 16:52:11.831"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:12.047" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:12.047" starttime="20170511 16:52:12.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:12.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:12.048" starttime="20170511 16:52:12.047"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:12.048" starttime="20170511 16:52:11.827"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:12.048" starttime="20170511 16:52:11.826"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:12.048" starttime="20170511 16:52:11.826"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:12.049" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:12.049" starttime="20170511 16:52:12.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:12.049" starttime="20170511 16:52:12.049"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:12.115" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:12.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:12.115" starttime="20170511 16:52:12.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:12.116" starttime="20170511 16:52:12.116"></status>
</kw>
<msg timestamp="20170511 16:52:12.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:12.116" starttime="20170511 16:52:11.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:12.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:12.117" starttime="20170511 16:52:12.116"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:12.117" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:12.117" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:12.118" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:12.118" starttime="20170511 16:52:12.117"></status>
</kw>
<msg timestamp="20170511 16:52:12.118" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:12.118" starttime="20170511 16:52:11.824"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:12.118" starttime="20170511 16:52:11.824"></status>
</kw>
<msg timestamp="20170511 16:52:12.119" level="FAIL">
#(UTC) 2017/05/11 16:52:12.118475 -    3.815173 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:12.119" starttime="20170511 16:52:11.305"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:15.126" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:15.126" starttime="20170511 16:52:15.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:15.127" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:15.127" starttime="20170511 16:52:15.127"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:15.128" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:15.128" starttime="20170511 16:52:15.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:15.128" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:15.128" starttime="20170511 16:52:15.128"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.305" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:15.305" starttime="20170511 16:52:15.129"></status>
</kw>
<msg timestamp="20170511 16:52:15.305" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:15.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.305" starttime="20170511 16:52:15.129"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.306" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.306" starttime="20170511 16:52:15.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.307" starttime="20170511 16:52:15.306"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.307" starttime="20170511 16:52:15.125"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.307" starttime="20170511 16:52:15.124"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.307" starttime="20170511 16:52:15.124"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:15.308" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:15.308" starttime="20170511 16:52:15.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:15.308" starttime="20170511 16:52:15.308"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:15.375" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:15.375" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.375" starttime="20170511 16:52:15.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:15.375" starttime="20170511 16:52:15.375"></status>
</kw>
<msg timestamp="20170511 16:52:15.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.376" starttime="20170511 16:52:15.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.376" starttime="20170511 16:52:15.376"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:15.377" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:15.377" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:15.377" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:15.377" starttime="20170511 16:52:15.377"></status>
</kw>
<msg timestamp="20170511 16:52:15.378" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:15.378" starttime="20170511 16:52:15.122"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.378" starttime="20170511 16:52:15.122"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:15.382" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:15.383" starttime="20170511 16:52:15.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:15.383" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:15.383" starttime="20170511 16:52:15.383"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:15.384" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:15.384" starttime="20170511 16:52:15.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:15.385" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:15.385" starttime="20170511 16:52:15.384"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.561" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:15.561" starttime="20170511 16:52:15.385"></status>
</kw>
<msg timestamp="20170511 16:52:15.561" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:15.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.561" starttime="20170511 16:52:15.385"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.562" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.562" starttime="20170511 16:52:15.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.563" starttime="20170511 16:52:15.562"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.563" starttime="20170511 16:52:15.381"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.563" starttime="20170511 16:52:15.381"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.563" starttime="20170511 16:52:15.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:15.564" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:15.564" starttime="20170511 16:52:15.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:15.564" starttime="20170511 16:52:15.564"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:15.632" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:15.632" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.632" starttime="20170511 16:52:15.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:15.633" starttime="20170511 16:52:15.632"></status>
</kw>
<msg timestamp="20170511 16:52:15.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.633" starttime="20170511 16:52:15.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.634" starttime="20170511 16:52:15.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:15.634" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:15.634" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:15.635" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:52:15.635" starttime="20170511 16:52:15.634"></status>
</kw>
<msg timestamp="20170511 16:52:15.635" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:52:15.635" starttime="20170511 16:52:15.379"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.635" starttime="20170511 16:52:15.378"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:15.639" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:15.640" starttime="20170511 16:52:15.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:15.641" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:15.641" starttime="20170511 16:52:15.641"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:15.642" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:15.642" starttime="20170511 16:52:15.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:15.643" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:15.643" starttime="20170511 16:52:15.642"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:15.819" starttime="20170511 16:52:15.644"></status>
</kw>
<msg timestamp="20170511 16:52:15.819" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:15.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.819" starttime="20170511 16:52:15.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.820" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.820" starttime="20170511 16:52:15.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.821" starttime="20170511 16:52:15.820"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.821" starttime="20170511 16:52:15.638"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.821" starttime="20170511 16:52:15.638"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.821" starttime="20170511 16:52:15.637"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:15.822" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:15.822" starttime="20170511 16:52:15.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:15.823" starttime="20170511 16:52:15.822"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:15.893" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:15.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.893" starttime="20170511 16:52:15.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:15.894" starttime="20170511 16:52:15.893"></status>
</kw>
<msg timestamp="20170511 16:52:15.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.894" starttime="20170511 16:52:15.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:15.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:15.895" starttime="20170511 16:52:15.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:15.895" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:15.895" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:15.895" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:15.895" starttime="20170511 16:52:15.895"></status>
</kw>
<msg timestamp="20170511 16:52:15.896" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:15.896" starttime="20170511 16:52:15.636"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:15.896" starttime="20170511 16:52:15.635"></status>
</kw>
<msg timestamp="20170511 16:52:15.897" level="FAIL">
#(UTC) 2017/05/11 16:52:15.896088 -    3.777613 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:15.897" starttime="20170511 16:52:15.119"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:18.903" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:18.903" starttime="20170511 16:52:18.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:18.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:18.904" starttime="20170511 16:52:18.903"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:18.904" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:18.904" starttime="20170511 16:52:18.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:18.905" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:18.905" starttime="20170511 16:52:18.904"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.082" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:19.083" starttime="20170511 16:52:18.906"></status>
</kw>
<msg timestamp="20170511 16:52:19.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:19.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.083" starttime="20170511 16:52:18.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.084" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.084" starttime="20170511 16:52:19.083"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.084" starttime="20170511 16:52:19.084"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.084" starttime="20170511 16:52:18.901"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.084" starttime="20170511 16:52:18.901"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.085" starttime="20170511 16:52:18.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:19.085" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:19.085" starttime="20170511 16:52:19.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:19.086" starttime="20170511 16:52:19.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:19.152" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:19.152" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.152" starttime="20170511 16:52:19.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:19.153" starttime="20170511 16:52:19.152"></status>
</kw>
<msg timestamp="20170511 16:52:19.153" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.153" starttime="20170511 16:52:18.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.154" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.154" starttime="20170511 16:52:19.153"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:19.154" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:19.154" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:19.154" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:19.154" starttime="20170511 16:52:19.154"></status>
</kw>
<msg timestamp="20170511 16:52:19.155" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:19.155" starttime="20170511 16:52:18.899"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.155" starttime="20170511 16:52:18.899"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:19.159" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:19.159" starttime="20170511 16:52:19.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:19.160" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:19.160" starttime="20170511 16:52:19.160"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:19.161" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:19.161" starttime="20170511 16:52:19.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:19.161" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:19.161" starttime="20170511 16:52:19.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.362" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:19.362" starttime="20170511 16:52:19.162"></status>
</kw>
<msg timestamp="20170511 16:52:19.362" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:19.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.362" starttime="20170511 16:52:19.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.363" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.363" starttime="20170511 16:52:19.362"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.364" starttime="20170511 16:52:19.363"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.364" starttime="20170511 16:52:19.158"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.364" starttime="20170511 16:52:19.158"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.364" starttime="20170511 16:52:19.157"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:19.364" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:19.364" starttime="20170511 16:52:19.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:19.365" starttime="20170511 16:52:19.365"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:19.440" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:19.440" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.440" starttime="20170511 16:52:19.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:19.440" starttime="20170511 16:52:19.440"></status>
</kw>
<msg timestamp="20170511 16:52:19.441" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.441" starttime="20170511 16:52:19.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.441" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.441" starttime="20170511 16:52:19.441"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:19.442" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:19.442" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:19.442" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170511 16:52:19.442" starttime="20170511 16:52:19.442"></status>
</kw>
<msg timestamp="20170511 16:52:19.442" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170511 16:52:19.443" starttime="20170511 16:52:19.156"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.443" starttime="20170511 16:52:19.155"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:19.449" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:19.449" starttime="20170511 16:52:19.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:19.450" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:19.450" starttime="20170511 16:52:19.449"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:19.451" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:19.451" starttime="20170511 16:52:19.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:19.452" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:19.452" starttime="20170511 16:52:19.451"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.629" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:19.629" starttime="20170511 16:52:19.453"></status>
</kw>
<msg timestamp="20170511 16:52:19.629" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:19.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.629" starttime="20170511 16:52:19.452"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.630" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.630" starttime="20170511 16:52:19.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.630" starttime="20170511 16:52:19.630"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.630" starttime="20170511 16:52:19.446"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.631" starttime="20170511 16:52:19.445"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.631" starttime="20170511 16:52:19.445"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:19.631" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:19.631" starttime="20170511 16:52:19.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:19.632" starttime="20170511 16:52:19.632"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:19.696" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:19.696" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.696" starttime="20170511 16:52:19.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:19.697" starttime="20170511 16:52:19.696"></status>
</kw>
<msg timestamp="20170511 16:52:19.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.697" starttime="20170511 16:52:19.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:19.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:19.698" starttime="20170511 16:52:19.697"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:19.698" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:19.698" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:19.698" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:19.699" starttime="20170511 16:52:19.698"></status>
</kw>
<msg timestamp="20170511 16:52:19.699" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:19.699" starttime="20170511 16:52:19.443"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:19.699" starttime="20170511 16:52:19.443"></status>
</kw>
<msg timestamp="20170511 16:52:19.700" level="FAIL">
#(UTC) 2017/05/11 16:52:19.699316 -    3.803228 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:19.700" starttime="20170511 16:52:18.897"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:22.706" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:22.706" starttime="20170511 16:52:22.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:22.707" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:22.707" starttime="20170511 16:52:22.706"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:22.707" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:22.707" starttime="20170511 16:52:22.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:22.708" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:22.708" starttime="20170511 16:52:22.708"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:22.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:22.939" starttime="20170511 16:52:22.709"></status>
</kw>
<msg timestamp="20170511 16:52:22.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:22.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:22.939" starttime="20170511 16:52:22.708"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:22.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:22.940" starttime="20170511 16:52:22.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:22.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:22.941" starttime="20170511 16:52:22.940"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:22.941" starttime="20170511 16:52:22.705"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:22.941" starttime="20170511 16:52:22.704"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:22.941" starttime="20170511 16:52:22.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:22.942" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:22.942" starttime="20170511 16:52:22.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:22.942" starttime="20170511 16:52:22.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:23.008" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:23.008" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.008" starttime="20170511 16:52:22.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:23.009" starttime="20170511 16:52:23.008"></status>
</kw>
<msg timestamp="20170511 16:52:23.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.009" starttime="20170511 16:52:22.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:23.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.010" starttime="20170511 16:52:23.009"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:23.010" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:23.010" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:23.010" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:23.010" starttime="20170511 16:52:23.010"></status>
</kw>
<msg timestamp="20170511 16:52:23.011" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:23.011" starttime="20170511 16:52:22.702"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:23.011" starttime="20170511 16:52:22.702"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:23.015" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:23.015" starttime="20170511 16:52:23.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:23.016" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:23.016" starttime="20170511 16:52:23.016"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:23.017" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:23.017" starttime="20170511 16:52:23.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:23.017" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:23.017" starttime="20170511 16:52:23.017"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:23.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:23.196" starttime="20170511 16:52:23.018"></status>
</kw>
<msg timestamp="20170511 16:52:23.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:23.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.196" starttime="20170511 16:52:23.018"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:23.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.197" starttime="20170511 16:52:23.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:23.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.198" starttime="20170511 16:52:23.197"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:23.198" starttime="20170511 16:52:23.014"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:23.198" starttime="20170511 16:52:23.013"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:23.198" starttime="20170511 16:52:23.013"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:23.198" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:23.199" starttime="20170511 16:52:23.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:23.199" starttime="20170511 16:52:23.199"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:23.270" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:23.270" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.270" starttime="20170511 16:52:23.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:23.271" starttime="20170511 16:52:23.270"></status>
</kw>
<msg timestamp="20170511 16:52:23.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.271" starttime="20170511 16:52:23.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:23.271" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.272" starttime="20170511 16:52:23.271"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:23.272" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:23.272" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:23.272" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:52:23.272" starttime="20170511 16:52:23.272"></status>
</kw>
<msg timestamp="20170511 16:52:23.273" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:52:23.273" starttime="20170511 16:52:23.011"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:23.273" starttime="20170511 16:52:23.011"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:23.277" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:23.277" starttime="20170511 16:52:23.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:23.278" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:23.278" starttime="20170511 16:52:23.277"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:23.279" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:23.279" starttime="20170511 16:52:23.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:23.279" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:23.279" starttime="20170511 16:52:23.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:23.492" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:23.492" starttime="20170511 16:52:23.280"></status>
</kw>
<msg timestamp="20170511 16:52:23.492" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:23.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.492" starttime="20170511 16:52:23.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:23.493" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.493" starttime="20170511 16:52:23.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:23.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.494" starttime="20170511 16:52:23.493"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:23.494" starttime="20170511 16:52:23.276"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:23.494" starttime="20170511 16:52:23.275"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:23.494" starttime="20170511 16:52:23.275"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:23.495" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:23.495" starttime="20170511 16:52:23.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:23.495" starttime="20170511 16:52:23.495"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:23.560" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:23.560" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.560" starttime="20170511 16:52:23.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:23.560" starttime="20170511 16:52:23.560"></status>
</kw>
<msg timestamp="20170511 16:52:23.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.561" starttime="20170511 16:52:23.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:23.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:23.561" starttime="20170511 16:52:23.561"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:23.562" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:23.562" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:23.562" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:23.562" starttime="20170511 16:52:23.562"></status>
</kw>
<msg timestamp="20170511 16:52:23.563" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:23.563" starttime="20170511 16:52:23.273"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:23.563" starttime="20170511 16:52:23.273"></status>
</kw>
<msg timestamp="20170511 16:52:23.563" level="FAIL">
#(UTC) 2017/05/11 16:52:23.563095 -    3.863779 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:23.564" starttime="20170511 16:52:22.700"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:26.570" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:26.570" starttime="20170511 16:52:26.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:26.571" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:26.571" starttime="20170511 16:52:26.570"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:26.571" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:26.571" starttime="20170511 16:52:26.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:26.572" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:26.572" starttime="20170511 16:52:26.572"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:26.752" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:26.753" starttime="20170511 16:52:26.573"></status>
</kw>
<msg timestamp="20170511 16:52:26.753" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:26.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:26.753" starttime="20170511 16:52:26.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:26.753" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:26.754" starttime="20170511 16:52:26.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:26.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:26.754" starttime="20170511 16:52:26.754"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:26.754" starttime="20170511 16:52:26.569"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:26.754" starttime="20170511 16:52:26.569"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:26.755" starttime="20170511 16:52:26.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:26.755" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:26.755" starttime="20170511 16:52:26.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:26.756" starttime="20170511 16:52:26.755"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:26.820" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:26.820" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:26.820" starttime="20170511 16:52:26.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:26.821" starttime="20170511 16:52:26.821"></status>
</kw>
<msg timestamp="20170511 16:52:26.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:26.821" starttime="20170511 16:52:26.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:26.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:26.822" starttime="20170511 16:52:26.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:26.823" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:26.823" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:26.823" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:26.823" starttime="20170511 16:52:26.822"></status>
</kw>
<msg timestamp="20170511 16:52:26.823" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:26.823" starttime="20170511 16:52:26.566"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:26.823" starttime="20170511 16:52:26.566"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:26.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:26.828" starttime="20170511 16:52:26.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:26.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:26.828" starttime="20170511 16:52:26.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:26.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:26.829" starttime="20170511 16:52:26.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:26.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:26.830" starttime="20170511 16:52:26.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:27.016" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:27.016" starttime="20170511 16:52:26.830"></status>
</kw>
<msg timestamp="20170511 16:52:27.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:27.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.016" starttime="20170511 16:52:26.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:27.017" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.017" starttime="20170511 16:52:27.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:27.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.018" starttime="20170511 16:52:27.017"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:27.018" starttime="20170511 16:52:26.827"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:27.018" starttime="20170511 16:52:26.826"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:27.018" starttime="20170511 16:52:26.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:27.018" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:27.019" starttime="20170511 16:52:27.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:27.019" starttime="20170511 16:52:27.019"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:27.087" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:27.087" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.087" starttime="20170511 16:52:27.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:27.088" starttime="20170511 16:52:27.088"></status>
</kw>
<msg timestamp="20170511 16:52:27.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.088" starttime="20170511 16:52:26.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:27.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.089" starttime="20170511 16:52:27.088"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:27.089" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:27.089" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:27.090" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:52:27.090" starttime="20170511 16:52:27.089"></status>
</kw>
<msg timestamp="20170511 16:52:27.090" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:52:27.090" starttime="20170511 16:52:26.824"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:27.090" starttime="20170511 16:52:26.824"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:27.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:27.095" starttime="20170511 16:52:27.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:27.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:27.095" starttime="20170511 16:52:27.095"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:27.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:27.096" starttime="20170511 16:52:27.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:27.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:27.096" starttime="20170511 16:52:27.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:27.274" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:27.274" starttime="20170511 16:52:27.097"></status>
</kw>
<msg timestamp="20170511 16:52:27.275" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:27.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.275" starttime="20170511 16:52:27.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:27.275" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.275" starttime="20170511 16:52:27.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:27.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.276" starttime="20170511 16:52:27.276"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:27.276" starttime="20170511 16:52:27.093"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:27.276" starttime="20170511 16:52:27.093"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:27.276" starttime="20170511 16:52:27.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:27.277" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:27.277" starttime="20170511 16:52:27.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:27.278" starttime="20170511 16:52:27.277"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:27.342" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:27.342" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.342" starttime="20170511 16:52:27.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:27.343" starttime="20170511 16:52:27.342"></status>
</kw>
<msg timestamp="20170511 16:52:27.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.343" starttime="20170511 16:52:27.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:27.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:27.344" starttime="20170511 16:52:27.343"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:27.344" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:27.344" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:27.344" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:27.344" starttime="20170511 16:52:27.344"></status>
</kw>
<msg timestamp="20170511 16:52:27.345" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:27.345" starttime="20170511 16:52:27.091"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:27.345" starttime="20170511 16:52:27.090"></status>
</kw>
<msg timestamp="20170511 16:52:27.346" level="FAIL">
#(UTC) 2017/05/11 16:52:27.345222 -    3.782127 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:27.346" starttime="20170511 16:52:26.564"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:30.352" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:30.352" starttime="20170511 16:52:30.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:30.353" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:30.353" starttime="20170511 16:52:30.352"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:30.353" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:30.353" starttime="20170511 16:52:30.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:30.354" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:30.354" starttime="20170511 16:52:30.353"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:30.529" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:30.529" starttime="20170511 16:52:30.355"></status>
</kw>
<msg timestamp="20170511 16:52:30.529" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:30.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.529" starttime="20170511 16:52:30.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:30.530" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.530" starttime="20170511 16:52:30.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:30.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.531" starttime="20170511 16:52:30.530"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:30.531" starttime="20170511 16:52:30.351"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:30.531" starttime="20170511 16:52:30.350"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:30.531" starttime="20170511 16:52:30.349"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:30.532" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:30.532" starttime="20170511 16:52:30.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:30.532" starttime="20170511 16:52:30.532"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:30.598" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:30.598" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.598" starttime="20170511 16:52:30.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:30.598" starttime="20170511 16:52:30.598"></status>
</kw>
<msg timestamp="20170511 16:52:30.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.599" starttime="20170511 16:52:30.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:30.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.599" starttime="20170511 16:52:30.599"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:30.600" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:30.600" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:30.600" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:30.600" starttime="20170511 16:52:30.600"></status>
</kw>
<msg timestamp="20170511 16:52:30.600" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:30.600" starttime="20170511 16:52:30.348"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:30.601" starttime="20170511 16:52:30.348"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:30.605" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:30.605" starttime="20170511 16:52:30.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:30.606" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:30.606" starttime="20170511 16:52:30.605"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:30.606" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:30.606" starttime="20170511 16:52:30.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:30.607" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:30.607" starttime="20170511 16:52:30.607"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:30.823" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:30.823" starttime="20170511 16:52:30.608"></status>
</kw>
<msg timestamp="20170511 16:52:30.823" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:30.823" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.823" starttime="20170511 16:52:30.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:30.824" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.824" starttime="20170511 16:52:30.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:30.824" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.824" starttime="20170511 16:52:30.824"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:30.825" starttime="20170511 16:52:30.604"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:30.825" starttime="20170511 16:52:30.603"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:30.825" starttime="20170511 16:52:30.603"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:30.825" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:30.825" starttime="20170511 16:52:30.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:30.826" starttime="20170511 16:52:30.826"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:30.893" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:30.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.893" starttime="20170511 16:52:30.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:30.894" starttime="20170511 16:52:30.894"></status>
</kw>
<msg timestamp="20170511 16:52:30.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.894" starttime="20170511 16:52:30.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:30.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:30.895" starttime="20170511 16:52:30.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:30.895" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:30.895" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:30.895" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:52:30.896" starttime="20170511 16:52:30.895"></status>
</kw>
<msg timestamp="20170511 16:52:30.896" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:52:30.896" starttime="20170511 16:52:30.601"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:30.896" starttime="20170511 16:52:30.601"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:30.900" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:30.900" starttime="20170511 16:52:30.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:30.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:30.901" starttime="20170511 16:52:30.901"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:30.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:30.902" starttime="20170511 16:52:30.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:30.902" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:30.902" starttime="20170511 16:52:30.902"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:31.081" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:31.081" starttime="20170511 16:52:30.903"></status>
</kw>
<msg timestamp="20170511 16:52:31.082" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:31.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:31.082" starttime="20170511 16:52:30.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:31.082" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:31.082" starttime="20170511 16:52:31.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:31.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:31.083" starttime="20170511 16:52:31.083"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:31.083" starttime="20170511 16:52:30.899"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:31.083" starttime="20170511 16:52:30.899"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:31.084" starttime="20170511 16:52:30.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:31.084" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:31.084" starttime="20170511 16:52:31.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:31.085" starttime="20170511 16:52:31.084"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:31.150" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:31.150" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:31.150" starttime="20170511 16:52:31.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:31.151" starttime="20170511 16:52:31.150"></status>
</kw>
<msg timestamp="20170511 16:52:31.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:31.151" starttime="20170511 16:52:30.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:31.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:31.152" starttime="20170511 16:52:31.151"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:31.152" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:31.152" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:31.153" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:31.153" starttime="20170511 16:52:31.152"></status>
</kw>
<msg timestamp="20170511 16:52:31.153" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:31.153" starttime="20170511 16:52:30.897"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:31.153" starttime="20170511 16:52:30.896"></status>
</kw>
<msg timestamp="20170511 16:52:31.154" level="FAIL">
#(UTC) 2017/05/11 16:52:31.153342 -    3.808120 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:31.154" starttime="20170511 16:52:30.346"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:34.161" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:34.162" starttime="20170511 16:52:34.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:34.163" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:34.163" starttime="20170511 16:52:34.162"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:34.163" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:34.163" starttime="20170511 16:52:34.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:34.164" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:34.164" starttime="20170511 16:52:34.164"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.341" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:34.341" starttime="20170511 16:52:34.165"></status>
</kw>
<msg timestamp="20170511 16:52:34.341" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:34.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.341" starttime="20170511 16:52:34.164"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.342" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.342" starttime="20170511 16:52:34.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.343" starttime="20170511 16:52:34.343"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.343" starttime="20170511 16:52:34.160"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.343" starttime="20170511 16:52:34.159"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.343" starttime="20170511 16:52:34.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:34.344" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:34.344" starttime="20170511 16:52:34.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:34.345" starttime="20170511 16:52:34.344"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:34.408" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:34.408" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.408" starttime="20170511 16:52:34.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:34.409" starttime="20170511 16:52:34.409"></status>
</kw>
<msg timestamp="20170511 16:52:34.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.409" starttime="20170511 16:52:34.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.410" starttime="20170511 16:52:34.409"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:34.410" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:34.410" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:34.411" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:34.411" starttime="20170511 16:52:34.410"></status>
</kw>
<msg timestamp="20170511 16:52:34.411" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:34.411" starttime="20170511 16:52:34.157"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.411" starttime="20170511 16:52:34.156"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:34.415" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:34.416" starttime="20170511 16:52:34.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:34.416" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:34.416" starttime="20170511 16:52:34.416"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:34.417" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:34.417" starttime="20170511 16:52:34.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:34.418" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:34.418" starttime="20170511 16:52:34.417"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.595" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:34.595" starttime="20170511 16:52:34.418"></status>
</kw>
<msg timestamp="20170511 16:52:34.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:34.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.595" starttime="20170511 16:52:34.418"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.596" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.596" starttime="20170511 16:52:34.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.597" starttime="20170511 16:52:34.596"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.597" starttime="20170511 16:52:34.415"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.597" starttime="20170511 16:52:34.414"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.597" starttime="20170511 16:52:34.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:34.598" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:34.598" starttime="20170511 16:52:34.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:34.598" starttime="20170511 16:52:34.598"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:34.668" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:34.669" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.669" starttime="20170511 16:52:34.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:34.669" starttime="20170511 16:52:34.669"></status>
</kw>
<msg timestamp="20170511 16:52:34.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.670" starttime="20170511 16:52:34.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.671" starttime="20170511 16:52:34.670"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:34.671" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:34.672" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:34.672" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:52:34.672" starttime="20170511 16:52:34.671"></status>
</kw>
<msg timestamp="20170511 16:52:34.672" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:52:34.672" starttime="20170511 16:52:34.412"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.672" starttime="20170511 16:52:34.411"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:34.679" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:34.679" starttime="20170511 16:52:34.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:34.680" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:34.680" starttime="20170511 16:52:34.680"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:34.681" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:34.681" starttime="20170511 16:52:34.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:34.682" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:34.682" starttime="20170511 16:52:34.681"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.861" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:34.861" starttime="20170511 16:52:34.683"></status>
</kw>
<msg timestamp="20170511 16:52:34.861" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:34.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.862" starttime="20170511 16:52:34.682"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.862" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.862" starttime="20170511 16:52:34.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.863" starttime="20170511 16:52:34.863"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.863" starttime="20170511 16:52:34.678"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.863" starttime="20170511 16:52:34.677"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.864" starttime="20170511 16:52:34.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:34.864" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:34.864" starttime="20170511 16:52:34.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:34.865" starttime="20170511 16:52:34.864"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:34.986" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:34.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.986" starttime="20170511 16:52:34.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:34.987" starttime="20170511 16:52:34.986"></status>
</kw>
<msg timestamp="20170511 16:52:34.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.987" starttime="20170511 16:52:34.674"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:34.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:34.988" starttime="20170511 16:52:34.987"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:34.988" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:34.989" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:34.989" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:34.989" starttime="20170511 16:52:34.988"></status>
</kw>
<msg timestamp="20170511 16:52:34.989" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:34.989" starttime="20170511 16:52:34.673"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:34.989" starttime="20170511 16:52:34.673"></status>
</kw>
<msg timestamp="20170511 16:52:34.990" level="FAIL">
#(UTC) 2017/05/11 16:52:34.989528 -    3.836186 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:34.990" starttime="20170511 16:52:34.154"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:37.996" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:37.997" starttime="20170511 16:52:37.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:37.997" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:37.997" starttime="20170511 16:52:37.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:37.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:37.998" starttime="20170511 16:52:37.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:37.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:37.999" starttime="20170511 16:52:37.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:38.537" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:38.537" starttime="20170511 16:52:37.999"></status>
</kw>
<msg timestamp="20170511 16:52:38.537" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:38.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:38.538" starttime="20170511 16:52:37.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:38.538" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:38.538" starttime="20170511 16:52:38.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:38.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:38.539" starttime="20170511 16:52:38.539"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:38.539" starttime="20170511 16:52:37.995"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:38.539" starttime="20170511 16:52:37.995"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:38.539" starttime="20170511 16:52:37.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:38.540" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:38.540" starttime="20170511 16:52:38.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:38.541" starttime="20170511 16:52:38.540"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:38.662" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:38.662" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:38.662" starttime="20170511 16:52:38.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:38.663" starttime="20170511 16:52:38.663"></status>
</kw>
<msg timestamp="20170511 16:52:38.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:38.663" starttime="20170511 16:52:37.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:38.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:38.664" starttime="20170511 16:52:38.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:38.664" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:38.665" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:38.665" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:38.665" starttime="20170511 16:52:38.664"></status>
</kw>
<msg timestamp="20170511 16:52:38.665" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:38.665" starttime="20170511 16:52:37.993"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:38.665" starttime="20170511 16:52:37.992"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:38.669" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:38.670" starttime="20170511 16:52:38.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:38.670" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:38.670" starttime="20170511 16:52:38.670"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:38.671" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:38.671" starttime="20170511 16:52:38.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:38.671" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:38.672" starttime="20170511 16:52:38.671"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:38.964" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:38.964" starttime="20170511 16:52:38.672"></status>
</kw>
<msg timestamp="20170511 16:52:38.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:38.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:38.964" starttime="20170511 16:52:38.672"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:38.965" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:38.965" starttime="20170511 16:52:38.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:38.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:38.966" starttime="20170511 16:52:38.965"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:38.966" starttime="20170511 16:52:38.668"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:38.966" starttime="20170511 16:52:38.668"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:38.966" starttime="20170511 16:52:38.667"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:38.967" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:38.967" starttime="20170511 16:52:38.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:38.968" starttime="20170511 16:52:38.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:39.291" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:39.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:39.291" starttime="20170511 16:52:38.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:39.292" starttime="20170511 16:52:39.291"></status>
</kw>
<msg timestamp="20170511 16:52:39.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:39.292" starttime="20170511 16:52:38.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:39.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:39.293" starttime="20170511 16:52:39.292"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:39.293" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:39.293" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:39.294" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:52:39.294" starttime="20170511 16:52:39.293"></status>
</kw>
<msg timestamp="20170511 16:52:39.294" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:52:39.294" starttime="20170511 16:52:38.666"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:39.294" starttime="20170511 16:52:38.665"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:39.298" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:39.298" starttime="20170511 16:52:39.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:39.299" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:39.299" starttime="20170511 16:52:39.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:39.300" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:39.300" starttime="20170511 16:52:39.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:39.300" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:39.300" starttime="20170511 16:52:39.300"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:39.610" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:39.610" starttime="20170511 16:52:39.301"></status>
</kw>
<msg timestamp="20170511 16:52:39.610" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:39.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:39.611" starttime="20170511 16:52:39.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:39.611" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:39.611" starttime="20170511 16:52:39.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:39.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:39.612" starttime="20170511 16:52:39.611"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:39.612" starttime="20170511 16:52:39.297"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:39.612" starttime="20170511 16:52:39.297"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:39.612" starttime="20170511 16:52:39.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:39.613" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:39.613" starttime="20170511 16:52:39.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:39.614" starttime="20170511 16:52:39.613"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:39.712" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:39.712" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:39.712" starttime="20170511 16:52:39.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:39.713" starttime="20170511 16:52:39.713"></status>
</kw>
<msg timestamp="20170511 16:52:39.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:39.713" starttime="20170511 16:52:39.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:39.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:39.714" starttime="20170511 16:52:39.713"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:39.714" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:39.715" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:39.715" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:39.715" starttime="20170511 16:52:39.714"></status>
</kw>
<msg timestamp="20170511 16:52:39.715" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:39.715" starttime="20170511 16:52:39.295"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:39.716" starttime="20170511 16:52:39.294"></status>
</kw>
<msg timestamp="20170511 16:52:39.716" level="FAIL">
#(UTC) 2017/05/11 16:52:39.715748 -    4.726220 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:39.716" starttime="20170511 16:52:37.991"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:42.722" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:42.726" starttime="20170511 16:52:42.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:42.727" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:42.727" starttime="20170511 16:52:42.726"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:42.727" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:42.727" starttime="20170511 16:52:42.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:42.728" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:42.728" starttime="20170511 16:52:42.728"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:43.075" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:43.075" starttime="20170511 16:52:42.729"></status>
</kw>
<msg timestamp="20170511 16:52:43.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:43.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.075" starttime="20170511 16:52:42.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:43.076" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.076" starttime="20170511 16:52:43.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:43.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.077" starttime="20170511 16:52:43.076"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:43.077" starttime="20170511 16:52:42.721"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:43.077" starttime="20170511 16:52:42.721"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:43.077" starttime="20170511 16:52:42.720"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:43.078" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:43.078" starttime="20170511 16:52:43.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:43.079" starttime="20170511 16:52:43.078"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:43.165" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:43.165" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.165" starttime="20170511 16:52:43.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:43.166" starttime="20170511 16:52:43.166"></status>
</kw>
<msg timestamp="20170511 16:52:43.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.166" starttime="20170511 16:52:42.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:43.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.167" starttime="20170511 16:52:43.167"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:43.168" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:43.168" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:43.168" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:43.168" starttime="20170511 16:52:43.167"></status>
</kw>
<msg timestamp="20170511 16:52:43.168" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:43.168" starttime="20170511 16:52:42.719"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:43.168" starttime="20170511 16:52:42.719"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:43.172" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:43.172" starttime="20170511 16:52:43.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:43.173" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:43.173" starttime="20170511 16:52:43.173"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:43.174" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:43.174" starttime="20170511 16:52:43.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:43.174" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:43.174" starttime="20170511 16:52:43.174"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:43.509" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:43.509" starttime="20170511 16:52:43.175"></status>
</kw>
<msg timestamp="20170511 16:52:43.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:43.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.509" starttime="20170511 16:52:43.175"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:43.510" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.510" starttime="20170511 16:52:43.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:43.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.511" starttime="20170511 16:52:43.510"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:43.511" starttime="20170511 16:52:43.171"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:43.511" starttime="20170511 16:52:43.171"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:43.511" starttime="20170511 16:52:43.170"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:43.512" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:43.512" starttime="20170511 16:52:43.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:43.512" starttime="20170511 16:52:43.512"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:43.651" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:43.652" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.652" starttime="20170511 16:52:43.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:43.652" starttime="20170511 16:52:43.652"></status>
</kw>
<msg timestamp="20170511 16:52:43.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.653" starttime="20170511 16:52:43.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:43.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:43.653" starttime="20170511 16:52:43.653"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:43.654" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:43.654" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:43.654" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:52:43.654" starttime="20170511 16:52:43.654"></status>
</kw>
<msg timestamp="20170511 16:52:43.654" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:52:43.654" starttime="20170511 16:52:43.169"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:43.655" starttime="20170511 16:52:43.169"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:43.658" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:43.659" starttime="20170511 16:52:43.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:43.659" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:43.659" starttime="20170511 16:52:43.659"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:43.660" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:43.660" starttime="20170511 16:52:43.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:43.661" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:43.661" starttime="20170511 16:52:43.660"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:44.311" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:44.311" starttime="20170511 16:52:43.661"></status>
</kw>
<msg timestamp="20170511 16:52:44.312" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:44.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:44.312" starttime="20170511 16:52:43.661"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:44.313" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:44.313" starttime="20170511 16:52:44.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:44.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:44.314" starttime="20170511 16:52:44.313"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:44.314" starttime="20170511 16:52:43.657"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:44.314" starttime="20170511 16:52:43.657"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:44.314" starttime="20170511 16:52:43.657"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:44.315" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:44.315" starttime="20170511 16:52:44.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:44.316" starttime="20170511 16:52:44.315"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:44.547" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:44.547" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:44.547" starttime="20170511 16:52:44.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:44.548" starttime="20170511 16:52:44.548"></status>
</kw>
<msg timestamp="20170511 16:52:44.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:44.549" starttime="20170511 16:52:43.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:44.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:44.549" starttime="20170511 16:52:44.549"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:44.550" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:44.550" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:44.550" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:44.550" starttime="20170511 16:52:44.549"></status>
</kw>
<msg timestamp="20170511 16:52:44.550" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:44.550" starttime="20170511 16:52:43.655"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:44.551" starttime="20170511 16:52:43.655"></status>
</kw>
<msg timestamp="20170511 16:52:44.551" level="FAIL">
#(UTC) 2017/05/11 16:52:44.550828 -    4.835080 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:44.551" starttime="20170511 16:52:42.717"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:47.557" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:47.558" starttime="20170511 16:52:47.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:47.559" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:47.559" starttime="20170511 16:52:47.558"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:47.559" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:47.559" starttime="20170511 16:52:47.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:47.560" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:47.560" starttime="20170511 16:52:47.559"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:47.847" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:47.847" starttime="20170511 16:52:47.561"></status>
</kw>
<msg timestamp="20170511 16:52:47.847" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:47.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:47.847" starttime="20170511 16:52:47.560"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:47.848" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:47.848" starttime="20170511 16:52:47.847"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:47.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:47.848" starttime="20170511 16:52:47.848"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:47.849" starttime="20170511 16:52:47.557"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:47.849" starttime="20170511 16:52:47.556"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:47.849" starttime="20170511 16:52:47.556"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:47.849" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:47.849" starttime="20170511 16:52:47.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:47.850" starttime="20170511 16:52:47.850"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:47.938" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:47.938" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:47.938" starttime="20170511 16:52:47.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:47.938" starttime="20170511 16:52:47.938"></status>
</kw>
<msg timestamp="20170511 16:52:47.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:47.939" starttime="20170511 16:52:47.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:47.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:47.939" starttime="20170511 16:52:47.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:47.940" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:47.940" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:47.940" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:47.940" starttime="20170511 16:52:47.940"></status>
</kw>
<msg timestamp="20170511 16:52:47.940" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:47.940" starttime="20170511 16:52:47.554"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:47.941" starttime="20170511 16:52:47.554"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:47.944" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:47.945" starttime="20170511 16:52:47.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:47.945" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:47.945" starttime="20170511 16:52:47.945"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:47.946" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:47.946" starttime="20170511 16:52:47.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:47.947" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:47.947" starttime="20170511 16:52:47.946"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:48.216" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:48.216" starttime="20170511 16:52:47.948"></status>
</kw>
<msg timestamp="20170511 16:52:48.217" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:48.217" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.217" starttime="20170511 16:52:47.947"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:48.217" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.218" starttime="20170511 16:52:48.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:48.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.218" starttime="20170511 16:52:48.218"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:48.218" starttime="20170511 16:52:47.944"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:48.218" starttime="20170511 16:52:47.943"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:48.219" starttime="20170511 16:52:47.943"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:48.219" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:48.220" starttime="20170511 16:52:48.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:48.221" starttime="20170511 16:52:48.220"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:48.311" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:48.311" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.311" starttime="20170511 16:52:48.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:48.312" starttime="20170511 16:52:48.312"></status>
</kw>
<msg timestamp="20170511 16:52:48.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.312" starttime="20170511 16:52:47.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:48.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.313" starttime="20170511 16:52:48.313"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:48.314" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:48.314" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:48.314" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:52:48.314" starttime="20170511 16:52:48.313"></status>
</kw>
<msg timestamp="20170511 16:52:48.314" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:52:48.314" starttime="20170511 16:52:47.941"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:48.314" starttime="20170511 16:52:47.941"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:48.318" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:48.319" starttime="20170511 16:52:48.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:48.319" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:48.319" starttime="20170511 16:52:48.319"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:48.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:48.321" starttime="20170511 16:52:48.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:48.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:48.322" starttime="20170511 16:52:48.321"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:48.597" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:48.597" starttime="20170511 16:52:48.322"></status>
</kw>
<msg timestamp="20170511 16:52:48.597" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:48.597" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.597" starttime="20170511 16:52:48.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:48.598" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.598" starttime="20170511 16:52:48.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:48.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.599" starttime="20170511 16:52:48.598"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:48.599" starttime="20170511 16:52:48.317"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:48.599" starttime="20170511 16:52:48.317"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:48.599" starttime="20170511 16:52:48.316"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:48.600" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:48.600" starttime="20170511 16:52:48.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:48.601" starttime="20170511 16:52:48.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:48.690" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:48.690" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.690" starttime="20170511 16:52:48.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:48.691" starttime="20170511 16:52:48.691"></status>
</kw>
<msg timestamp="20170511 16:52:48.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.691" starttime="20170511 16:52:48.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:48.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:48.692" starttime="20170511 16:52:48.692"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:48.693" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:48.693" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:48.693" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:48.693" starttime="20170511 16:52:48.692"></status>
</kw>
<msg timestamp="20170511 16:52:48.693" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:48.693" starttime="20170511 16:52:48.315"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:48.694" starttime="20170511 16:52:48.315"></status>
</kw>
<msg timestamp="20170511 16:52:48.694" level="FAIL">
#(UTC) 2017/05/11 16:52:48.693779 -    4.142951 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:48.694" starttime="20170511 16:52:47.552"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:51.700" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:51.701" starttime="20170511 16:52:51.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:51.701" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:51.701" starttime="20170511 16:52:51.701"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:51.702" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:51.702" starttime="20170511 16:52:51.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:51.703" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:51.703" starttime="20170511 16:52:51.702"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:51.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:51.967" starttime="20170511 16:52:51.704"></status>
</kw>
<msg timestamp="20170511 16:52:51.967" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:51.967" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:51.967" starttime="20170511 16:52:51.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:51.967" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:51.968" starttime="20170511 16:52:51.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:51.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:51.968" starttime="20170511 16:52:51.968"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:51.968" starttime="20170511 16:52:51.699"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:51.968" starttime="20170511 16:52:51.699"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:51.969" starttime="20170511 16:52:51.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:51.969" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:51.969" starttime="20170511 16:52:51.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:51.970" starttime="20170511 16:52:51.970"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:52.060" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:52.060" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.060" starttime="20170511 16:52:51.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:52.061" starttime="20170511 16:52:52.061"></status>
</kw>
<msg timestamp="20170511 16:52:52.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.061" starttime="20170511 16:52:51.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:52.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.062" starttime="20170511 16:52:52.061"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:52.062" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:52.063" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:52.063" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:52.063" starttime="20170511 16:52:52.062"></status>
</kw>
<msg timestamp="20170511 16:52:52.063" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:52.063" starttime="20170511 16:52:51.697"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:52.063" starttime="20170511 16:52:51.697"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:52.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:52.069" starttime="20170511 16:52:52.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:52.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:52.070" starttime="20170511 16:52:52.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:52.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:52.071" starttime="20170511 16:52:52.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:52.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:52.071" starttime="20170511 16:52:52.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:52.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:52.356" starttime="20170511 16:52:52.072"></status>
</kw>
<msg timestamp="20170511 16:52:52.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:52.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.356" starttime="20170511 16:52:52.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:52.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.357" starttime="20170511 16:52:52.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:52.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.358" starttime="20170511 16:52:52.357"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:52.358" starttime="20170511 16:52:52.066"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:52.358" starttime="20170511 16:52:52.066"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:52.358" starttime="20170511 16:52:52.065"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:52.359" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:52.359" starttime="20170511 16:52:52.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:52.359" starttime="20170511 16:52:52.359"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:52.446" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:52.446" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.446" starttime="20170511 16:52:52.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:52.447" starttime="20170511 16:52:52.447"></status>
</kw>
<msg timestamp="20170511 16:52:52.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.448" starttime="20170511 16:52:52.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:52.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.448" starttime="20170511 16:52:52.448"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:52.449" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:52.449" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:52.449" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:52:52.449" starttime="20170511 16:52:52.449"></status>
</kw>
<msg timestamp="20170511 16:52:52.449" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:52:52.449" starttime="20170511 16:52:52.064"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:52.450" starttime="20170511 16:52:52.064"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:52.516" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:52.517" starttime="20170511 16:52:52.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:52.518" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:52.518" starttime="20170511 16:52:52.517"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:52.519" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:52.519" starttime="20170511 16:52:52.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:52.520" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:52.520" starttime="20170511 16:52:52.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:52.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:52.805" starttime="20170511 16:52:52.521"></status>
</kw>
<msg timestamp="20170511 16:52:52.805" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:52.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.805" starttime="20170511 16:52:52.520"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:52.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.806" starttime="20170511 16:52:52.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:52.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.806" starttime="20170511 16:52:52.806"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:52.807" starttime="20170511 16:52:52.452"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:52.807" starttime="20170511 16:52:52.452"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:52.807" starttime="20170511 16:52:52.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:52.807" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:52.807" starttime="20170511 16:52:52.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:52.808" starttime="20170511 16:52:52.808"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:52.886" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:52.886" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.886" starttime="20170511 16:52:52.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:52.887" starttime="20170511 16:52:52.887"></status>
</kw>
<msg timestamp="20170511 16:52:52.887" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.887" starttime="20170511 16:52:52.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:52.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:52.888" starttime="20170511 16:52:52.887"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:52.888" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:52.888" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:52.889" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:52.889" starttime="20170511 16:52:52.888"></status>
</kw>
<msg timestamp="20170511 16:52:52.889" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:52.889" starttime="20170511 16:52:52.450"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:52.889" starttime="20170511 16:52:52.450"></status>
</kw>
<msg timestamp="20170511 16:52:52.890" level="FAIL">
#(UTC) 2017/05/11 16:52:52.889425 -    4.195646 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:52.890" starttime="20170511 16:52:51.695"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:55.896" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:55.897" starttime="20170511 16:52:55.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:55.897" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:55.897" starttime="20170511 16:52:55.897"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:55.898" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:55.898" starttime="20170511 16:52:55.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:55.898" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:55.899" starttime="20170511 16:52:55.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:56.280" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:56.280" starttime="20170511 16:52:55.899"></status>
</kw>
<msg timestamp="20170511 16:52:56.280" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:56.280" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.281" starttime="20170511 16:52:55.899"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:56.281" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.281" starttime="20170511 16:52:56.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:56.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.282" starttime="20170511 16:52:56.281"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:56.282" starttime="20170511 16:52:55.895"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:56.282" starttime="20170511 16:52:55.895"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:56.282" starttime="20170511 16:52:55.894"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:56.283" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:52:56.283" starttime="20170511 16:52:56.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:56.284" starttime="20170511 16:52:56.283"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:56.383" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:52:56.383" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.383" starttime="20170511 16:52:56.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:56.384" starttime="20170511 16:52:56.383"></status>
</kw>
<msg timestamp="20170511 16:52:56.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.384" starttime="20170511 16:52:55.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:56.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.385" starttime="20170511 16:52:56.384"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:56.385" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:56.385" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:56.385" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:52:56.386" starttime="20170511 16:52:56.385"></status>
</kw>
<msg timestamp="20170511 16:52:56.386" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:52:56.386" starttime="20170511 16:52:55.893"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:56.386" starttime="20170511 16:52:55.892"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:56.390" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:56.390" starttime="20170511 16:52:56.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:56.391" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:56.391" starttime="20170511 16:52:56.391"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:56.392" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:56.392" starttime="20170511 16:52:56.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:56.392" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:56.392" starttime="20170511 16:52:56.392"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:56.747" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:56.747" starttime="20170511 16:52:56.393"></status>
</kw>
<msg timestamp="20170511 16:52:56.747" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:56.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.747" starttime="20170511 16:52:56.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:56.748" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.748" starttime="20170511 16:52:56.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:56.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.749" starttime="20170511 16:52:56.748"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:56.749" starttime="20170511 16:52:56.389"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:56.749" starttime="20170511 16:52:56.389"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:56.749" starttime="20170511 16:52:56.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:56.750" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:52:56.750" starttime="20170511 16:52:56.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:56.750" starttime="20170511 16:52:56.750"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:56.887" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:52:56.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.888" starttime="20170511 16:52:56.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:56.888" starttime="20170511 16:52:56.888"></status>
</kw>
<msg timestamp="20170511 16:52:56.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.888" starttime="20170511 16:52:56.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:56.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:56.889" starttime="20170511 16:52:56.889"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:56.890" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:56.890" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:56.890" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:52:56.890" starttime="20170511 16:52:56.889"></status>
</kw>
<msg timestamp="20170511 16:52:56.890" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:52:56.890" starttime="20170511 16:52:56.387"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:56.890" starttime="20170511 16:52:56.386"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:52:56.895" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:52:56.895" starttime="20170511 16:52:56.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:52:56.896" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:52:56.896" starttime="20170511 16:52:56.895"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:52:56.896" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:52:56.896" starttime="20170511 16:52:56.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:52:56.897" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:52:56.897" starttime="20170511 16:52:56.896"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:52:57.203" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:52:57.203" starttime="20170511 16:52:56.898"></status>
</kw>
<msg timestamp="20170511 16:52:57.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:52:57.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:57.203" starttime="20170511 16:52:56.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:52:57.204" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:57.204" starttime="20170511 16:52:57.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:57.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:57.204" starttime="20170511 16:52:57.204"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:57.205" starttime="20170511 16:52:56.894"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:57.205" starttime="20170511 16:52:56.893"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:57.205" starttime="20170511 16:52:56.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:52:57.205" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:52:57.205" starttime="20170511 16:52:57.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:57.206" starttime="20170511 16:52:57.206"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:52:57.309" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:52:57.309" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:57.309" starttime="20170511 16:52:57.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:52:57.310" starttime="20170511 16:52:57.310"></status>
</kw>
<msg timestamp="20170511 16:52:57.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:52:57.310" starttime="20170511 16:52:56.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:52:57.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:52:57.311" starttime="20170511 16:52:57.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:52:57.311" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:52:57.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:52:57.311" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:52:57.312" starttime="20170511 16:52:57.311"></status>
</kw>
<msg timestamp="20170511 16:52:57.312" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:52:57.312" starttime="20170511 16:52:56.891"></status>
</kw>
<status status="PASS" endtime="20170511 16:52:57.312" starttime="20170511 16:52:56.891"></status>
</kw>
<msg timestamp="20170511 16:52:57.313" level="FAIL">
#(UTC) 2017/05/11 16:52:57.312342 -    4.422917 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:52:57.313" starttime="20170511 16:52:55.891"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:00.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:00.320" starttime="20170511 16:53:00.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:00.320" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:00.320" starttime="20170511 16:53:00.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:00.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:00.321" starttime="20170511 16:53:00.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:00.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:00.322" starttime="20170511 16:53:00.321"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:00.626" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:00.627" starttime="20170511 16:53:00.322"></status>
</kw>
<msg timestamp="20170511 16:53:00.627" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:00.627" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:00.627" starttime="20170511 16:53:00.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:00.627" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:00.628" starttime="20170511 16:53:00.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:00.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:00.628" starttime="20170511 16:53:00.628"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:00.629" starttime="20170511 16:53:00.319"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:00.629" starttime="20170511 16:53:00.318"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:00.629" starttime="20170511 16:53:00.318"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:00.629" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:00.629" starttime="20170511 16:53:00.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:00.630" starttime="20170511 16:53:00.630"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:00.719" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:00.720" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:00.720" starttime="20170511 16:53:00.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:00.720" starttime="20170511 16:53:00.720"></status>
</kw>
<msg timestamp="20170511 16:53:00.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:00.722" starttime="20170511 16:53:00.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:00.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:00.723" starttime="20170511 16:53:00.722"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:00.723" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:00.723" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:00.723" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:00.723" starttime="20170511 16:53:00.723"></status>
</kw>
<msg timestamp="20170511 16:53:00.724" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:00.724" starttime="20170511 16:53:00.316"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:00.724" starttime="20170511 16:53:00.316"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:00.728" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:00.728" starttime="20170511 16:53:00.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:00.729" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:00.729" starttime="20170511 16:53:00.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:00.729" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:00.729" starttime="20170511 16:53:00.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:00.730" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:00.730" starttime="20170511 16:53:00.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:01.020" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:01.020" starttime="20170511 16:53:00.731"></status>
</kw>
<msg timestamp="20170511 16:53:01.020" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:01.021" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.021" starttime="20170511 16:53:00.730"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:01.023" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.023" starttime="20170511 16:53:01.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:01.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.024" starttime="20170511 16:53:01.023"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:01.024" starttime="20170511 16:53:00.727"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:01.024" starttime="20170511 16:53:00.726"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:01.024" starttime="20170511 16:53:00.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:01.025" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:01.025" starttime="20170511 16:53:01.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:01.025" starttime="20170511 16:53:01.025"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:01.148" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:01.148" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.148" starttime="20170511 16:53:01.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:01.149" starttime="20170511 16:53:01.149"></status>
</kw>
<msg timestamp="20170511 16:53:01.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.149" starttime="20170511 16:53:00.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:01.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.150" starttime="20170511 16:53:01.149"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:01.150" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:01.150" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:01.151" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:01.151" starttime="20170511 16:53:01.150"></status>
</kw>
<msg timestamp="20170511 16:53:01.151" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:01.151" starttime="20170511 16:53:00.725"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:01.151" starttime="20170511 16:53:00.724"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:01.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:01.155" starttime="20170511 16:53:01.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:01.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:01.156" starttime="20170511 16:53:01.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:01.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:01.156" starttime="20170511 16:53:01.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:01.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:01.157" starttime="20170511 16:53:01.157"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:01.487" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:01.487" starttime="20170511 16:53:01.158"></status>
</kw>
<msg timestamp="20170511 16:53:01.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:01.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.488" starttime="20170511 16:53:01.157"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:01.488" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.488" starttime="20170511 16:53:01.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:01.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.489" starttime="20170511 16:53:01.489"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:01.489" starttime="20170511 16:53:01.154"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:01.489" starttime="20170511 16:53:01.154"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:01.489" starttime="20170511 16:53:01.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:01.490" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:01.490" starttime="20170511 16:53:01.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:01.491" starttime="20170511 16:53:01.490"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:01.597" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:01.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.597" starttime="20170511 16:53:01.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:01.598" starttime="20170511 16:53:01.597"></status>
</kw>
<msg timestamp="20170511 16:53:01.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.598" starttime="20170511 16:53:01.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:01.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:01.599" starttime="20170511 16:53:01.598"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:01.599" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:01.599" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:01.599" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:01.600" starttime="20170511 16:53:01.599"></status>
</kw>
<msg timestamp="20170511 16:53:01.600" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:01.600" starttime="20170511 16:53:01.152"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:01.600" starttime="20170511 16:53:01.151"></status>
</kw>
<msg timestamp="20170511 16:53:01.601" level="FAIL">
#(UTC) 2017/05/11 16:53:01.600317 -    4.287975 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:01.601" starttime="20170511 16:53:00.314"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:04.607" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:04.607" starttime="20170511 16:53:04.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:04.608" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:04.608" starttime="20170511 16:53:04.607"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:04.608" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:04.608" starttime="20170511 16:53:04.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:04.609" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:04.609" starttime="20170511 16:53:04.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:04.878" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:04.878" starttime="20170511 16:53:04.610"></status>
</kw>
<msg timestamp="20170511 16:53:04.878" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:04.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:04.878" starttime="20170511 16:53:04.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:04.879" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:04.879" starttime="20170511 16:53:04.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:04.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:04.879" starttime="20170511 16:53:04.879"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:04.880" starttime="20170511 16:53:04.606"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:04.880" starttime="20170511 16:53:04.605"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:04.880" starttime="20170511 16:53:04.605"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:04.880" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:04.880" starttime="20170511 16:53:04.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:04.881" starttime="20170511 16:53:04.881"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:04.962" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:04.962" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:04.962" starttime="20170511 16:53:04.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:04.963" starttime="20170511 16:53:04.963"></status>
</kw>
<msg timestamp="20170511 16:53:04.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:04.963" starttime="20170511 16:53:04.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:04.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:04.964" starttime="20170511 16:53:04.963"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:04.964" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:04.964" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:04.965" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:04.965" starttime="20170511 16:53:04.964"></status>
</kw>
<msg timestamp="20170511 16:53:04.965" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:04.965" starttime="20170511 16:53:04.604"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:04.965" starttime="20170511 16:53:04.603"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:04.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:04.969" starttime="20170511 16:53:04.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:04.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:04.970" starttime="20170511 16:53:04.969"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:04.970" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:04.970" starttime="20170511 16:53:04.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:04.971" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:04.971" starttime="20170511 16:53:04.971"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:05.235" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:05.235" starttime="20170511 16:53:04.972"></status>
</kw>
<msg timestamp="20170511 16:53:05.235" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:05.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.236" starttime="20170511 16:53:04.971"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:05.236" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.236" starttime="20170511 16:53:05.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:05.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.237" starttime="20170511 16:53:05.237"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:05.237" starttime="20170511 16:53:04.968"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:05.237" starttime="20170511 16:53:04.968"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:05.237" starttime="20170511 16:53:04.967"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:05.238" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:05.238" starttime="20170511 16:53:05.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:05.239" starttime="20170511 16:53:05.238"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:05.325" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:05.325" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.325" starttime="20170511 16:53:05.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:05.326" starttime="20170511 16:53:05.325"></status>
</kw>
<msg timestamp="20170511 16:53:05.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.326" starttime="20170511 16:53:04.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:05.326" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.327" starttime="20170511 16:53:05.326"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:05.327" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:05.327" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:05.327" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:05.327" starttime="20170511 16:53:05.327"></status>
</kw>
<msg timestamp="20170511 16:53:05.328" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:05.328" starttime="20170511 16:53:04.966"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:05.328" starttime="20170511 16:53:04.965"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:05.331" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:05.332" starttime="20170511 16:53:05.331"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:05.332" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:05.332" starttime="20170511 16:53:05.332"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:05.333" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:05.333" starttime="20170511 16:53:05.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:05.334" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:05.334" starttime="20170511 16:53:05.333"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:05.609" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:05.609" starttime="20170511 16:53:05.334"></status>
</kw>
<msg timestamp="20170511 16:53:05.609" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:05.609" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.609" starttime="20170511 16:53:05.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:05.610" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.610" starttime="20170511 16:53:05.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:05.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.611" starttime="20170511 16:53:05.610"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:05.611" starttime="20170511 16:53:05.331"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:05.611" starttime="20170511 16:53:05.330"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:05.611" starttime="20170511 16:53:05.330"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:05.612" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:05.612" starttime="20170511 16:53:05.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:05.612" starttime="20170511 16:53:05.612"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:05.697" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:05.697" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.697" starttime="20170511 16:53:05.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:05.698" starttime="20170511 16:53:05.697"></status>
</kw>
<msg timestamp="20170511 16:53:05.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.698" starttime="20170511 16:53:05.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:05.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:05.699" starttime="20170511 16:53:05.698"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:05.699" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:05.699" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:05.699" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:05.699" starttime="20170511 16:53:05.699"></status>
</kw>
<msg timestamp="20170511 16:53:05.700" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:05.700" starttime="20170511 16:53:05.328"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:05.700" starttime="20170511 16:53:05.328"></status>
</kw>
<msg timestamp="20170511 16:53:05.701" level="FAIL">
#(UTC) 2017/05/11 16:53:05.700246 -    4.099929 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:05.701" starttime="20170511 16:53:04.601"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:08.706" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:08.707" starttime="20170511 16:53:08.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:08.707" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:08.707" starttime="20170511 16:53:08.707"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:08.708" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:08.709" starttime="20170511 16:53:08.708"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:08.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:08.709" starttime="20170511 16:53:08.709"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:08.890" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:08.890" starttime="20170511 16:53:08.710"></status>
</kw>
<msg timestamp="20170511 16:53:08.890" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:08.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:08.890" starttime="20170511 16:53:08.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:08.891" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:08.891" starttime="20170511 16:53:08.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:08.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:08.892" starttime="20170511 16:53:08.891"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:08.892" starttime="20170511 16:53:08.706"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:08.892" starttime="20170511 16:53:08.705"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:08.892" starttime="20170511 16:53:08.705"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:08.893" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:08.893" starttime="20170511 16:53:08.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:08.893" starttime="20170511 16:53:08.893"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:08.965" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:08.965" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:08.965" starttime="20170511 16:53:08.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:08.966" starttime="20170511 16:53:08.966"></status>
</kw>
<msg timestamp="20170511 16:53:08.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:08.966" starttime="20170511 16:53:08.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:08.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:08.967" starttime="20170511 16:53:08.967"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:08.967" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:08.968" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:08.968" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:08.968" starttime="20170511 16:53:08.967"></status>
</kw>
<msg timestamp="20170511 16:53:08.968" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:08.968" starttime="20170511 16:53:08.703"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:08.968" starttime="20170511 16:53:08.703"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:08.972" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:08.974" starttime="20170511 16:53:08.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:08.975" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:08.975" starttime="20170511 16:53:08.974"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:08.976" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:08.976" starttime="20170511 16:53:08.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:08.976" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:08.976" starttime="20170511 16:53:08.976"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:09.175" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:09.175" starttime="20170511 16:53:08.977"></status>
</kw>
<msg timestamp="20170511 16:53:09.176" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:09.176" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.176" starttime="20170511 16:53:08.977"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:09.176" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.176" starttime="20170511 16:53:09.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:09.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.177" starttime="20170511 16:53:09.177"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:09.177" starttime="20170511 16:53:08.971"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:09.177" starttime="20170511 16:53:08.971"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:09.177" starttime="20170511 16:53:08.970"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:09.178" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:09.178" starttime="20170511 16:53:09.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:09.179" starttime="20170511 16:53:09.178"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:09.247" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:09.247" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.247" starttime="20170511 16:53:09.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:09.248" starttime="20170511 16:53:09.247"></status>
</kw>
<msg timestamp="20170511 16:53:09.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.248" starttime="20170511 16:53:08.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:09.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.249" starttime="20170511 16:53:09.248"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:09.249" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:09.249" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:09.249" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:09.249" starttime="20170511 16:53:09.249"></status>
</kw>
<msg timestamp="20170511 16:53:09.250" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:09.250" starttime="20170511 16:53:08.969"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:09.250" starttime="20170511 16:53:08.968"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:09.255" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:09.256" starttime="20170511 16:53:09.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:09.257" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:09.257" starttime="20170511 16:53:09.256"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:09.257" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:09.257" starttime="20170511 16:53:09.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:09.258" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:09.258" starttime="20170511 16:53:09.258"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:09.435" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:09.435" starttime="20170511 16:53:09.259"></status>
</kw>
<msg timestamp="20170511 16:53:09.435" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:09.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.436" starttime="20170511 16:53:09.258"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:09.436" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.436" starttime="20170511 16:53:09.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:09.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.437" starttime="20170511 16:53:09.437"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:09.437" starttime="20170511 16:53:09.254"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:09.437" starttime="20170511 16:53:09.254"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:09.437" starttime="20170511 16:53:09.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:09.438" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:09.438" starttime="20170511 16:53:09.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:09.439" starttime="20170511 16:53:09.438"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:09.505" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:09.505" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.505" starttime="20170511 16:53:09.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:09.506" starttime="20170511 16:53:09.505"></status>
</kw>
<msg timestamp="20170511 16:53:09.506" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.506" starttime="20170511 16:53:09.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:09.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:09.507" starttime="20170511 16:53:09.506"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:09.507" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:09.507" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:09.507" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:09.507" starttime="20170511 16:53:09.507"></status>
</kw>
<msg timestamp="20170511 16:53:09.507" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:09.508" starttime="20170511 16:53:09.251"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:09.508" starttime="20170511 16:53:09.251"></status>
</kw>
<msg timestamp="20170511 16:53:09.508" level="FAIL">
#(UTC) 2017/05/11 16:53:09.508040 -    3.807794 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:09.509" starttime="20170511 16:53:08.701"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:12.514" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:12.515" starttime="20170511 16:53:12.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:12.516" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:12.516" starttime="20170511 16:53:12.515"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:12.516" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:12.516" starttime="20170511 16:53:12.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:12.517" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:12.517" starttime="20170511 16:53:12.517"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:12.697" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:12.697" starttime="20170511 16:53:12.518"></status>
</kw>
<msg timestamp="20170511 16:53:12.697" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:12.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:12.697" starttime="20170511 16:53:12.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:12.698" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:12.698" starttime="20170511 16:53:12.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:12.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:12.699" starttime="20170511 16:53:12.698"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:12.699" starttime="20170511 16:53:12.513"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:12.699" starttime="20170511 16:53:12.513"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:12.699" starttime="20170511 16:53:12.512"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:12.700" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:12.700" starttime="20170511 16:53:12.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:12.700" starttime="20170511 16:53:12.700"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:12.769" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:12.769" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:12.769" starttime="20170511 16:53:12.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:12.769" starttime="20170511 16:53:12.769"></status>
</kw>
<msg timestamp="20170511 16:53:12.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:12.770" starttime="20170511 16:53:12.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:12.770" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:12.770" starttime="20170511 16:53:12.770"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:12.771" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:12.771" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:12.771" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:12.771" starttime="20170511 16:53:12.771"></status>
</kw>
<msg timestamp="20170511 16:53:12.771" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:12.771" starttime="20170511 16:53:12.511"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:12.772" starttime="20170511 16:53:12.511"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:12.776" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:12.776" starttime="20170511 16:53:12.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:12.777" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:12.777" starttime="20170511 16:53:12.777"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:12.778" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:12.778" starttime="20170511 16:53:12.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:12.778" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:12.778" starttime="20170511 16:53:12.778"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:12.969" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:12.969" starttime="20170511 16:53:12.779"></status>
</kw>
<msg timestamp="20170511 16:53:12.969" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:12.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:12.969" starttime="20170511 16:53:12.779"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:12.970" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:12.970" starttime="20170511 16:53:12.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:12.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:12.971" starttime="20170511 16:53:12.970"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:12.971" starttime="20170511 16:53:12.775"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:12.971" starttime="20170511 16:53:12.774"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:12.971" starttime="20170511 16:53:12.774"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:12.971" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:12.971" starttime="20170511 16:53:12.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:12.972" starttime="20170511 16:53:12.972"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:13.041" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:13.041" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:13.041" starttime="20170511 16:53:12.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:13.042" starttime="20170511 16:53:13.042"></status>
</kw>
<msg timestamp="20170511 16:53:13.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:13.043" starttime="20170511 16:53:12.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:13.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:13.043" starttime="20170511 16:53:13.043"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:13.044" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:13.044" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:13.044" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:13.044" starttime="20170511 16:53:13.043"></status>
</kw>
<msg timestamp="20170511 16:53:13.044" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:13.044" starttime="20170511 16:53:12.772"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:13.044" starttime="20170511 16:53:12.772"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:13.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:13.049" starttime="20170511 16:53:13.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:13.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:13.049" starttime="20170511 16:53:13.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:13.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:13.050" starttime="20170511 16:53:13.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:13.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:13.051" starttime="20170511 16:53:13.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:13.265" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:13.265" starttime="20170511 16:53:13.052"></status>
</kw>
<msg timestamp="20170511 16:53:13.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:13.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:13.265" starttime="20170511 16:53:13.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:13.266" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:13.266" starttime="20170511 16:53:13.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:13.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:13.266" starttime="20170511 16:53:13.266"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:13.267" starttime="20170511 16:53:13.047"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:13.267" starttime="20170511 16:53:13.047"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:13.267" starttime="20170511 16:53:13.046"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:13.267" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:13.267" starttime="20170511 16:53:13.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:13.268" starttime="20170511 16:53:13.268"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:13.334" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:13.334" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:13.334" starttime="20170511 16:53:13.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:13.335" starttime="20170511 16:53:13.335"></status>
</kw>
<msg timestamp="20170511 16:53:13.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:13.335" starttime="20170511 16:53:13.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:13.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:13.336" starttime="20170511 16:53:13.335"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:13.336" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:13.336" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:13.337" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:13.337" starttime="20170511 16:53:13.336"></status>
</kw>
<msg timestamp="20170511 16:53:13.337" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:13.337" starttime="20170511 16:53:13.045"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:13.337" starttime="20170511 16:53:13.045"></status>
</kw>
<msg timestamp="20170511 16:53:13.338" level="FAIL">
#(UTC) 2017/05/11 16:53:13.337406 -    3.829366 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:13.338" starttime="20170511 16:53:12.509"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:16.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:16.344" starttime="20170511 16:53:16.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:16.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:16.345" starttime="20170511 16:53:16.344"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:16.345" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:16.345" starttime="20170511 16:53:16.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:16.346" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:16.346" starttime="20170511 16:53:16.346"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:16.531" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:16.531" starttime="20170511 16:53:16.347"></status>
</kw>
<msg timestamp="20170511 16:53:16.531" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:16.531" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.531" starttime="20170511 16:53:16.346"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:16.532" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.532" starttime="20170511 16:53:16.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:16.532" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.533" starttime="20170511 16:53:16.532"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:16.533" starttime="20170511 16:53:16.343"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:16.533" starttime="20170511 16:53:16.342"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:16.533" starttime="20170511 16:53:16.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:16.533" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:16.533" starttime="20170511 16:53:16.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:16.534" starttime="20170511 16:53:16.534"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:16.597" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:16.598" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.598" starttime="20170511 16:53:16.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:16.598" starttime="20170511 16:53:16.598"></status>
</kw>
<msg timestamp="20170511 16:53:16.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.599" starttime="20170511 16:53:16.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:16.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.599" starttime="20170511 16:53:16.599"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:16.600" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:16.600" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:16.600" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:16.600" starttime="20170511 16:53:16.599"></status>
</kw>
<msg timestamp="20170511 16:53:16.600" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:16.600" starttime="20170511 16:53:16.340"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:16.600" starttime="20170511 16:53:16.340"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:16.605" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:16.605" starttime="20170511 16:53:16.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:16.606" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:16.606" starttime="20170511 16:53:16.605"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:16.606" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:16.606" starttime="20170511 16:53:16.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:16.607" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:16.607" starttime="20170511 16:53:16.606"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:16.797" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:16.797" starttime="20170511 16:53:16.608"></status>
</kw>
<msg timestamp="20170511 16:53:16.797" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:16.797" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.797" starttime="20170511 16:53:16.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:16.798" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.798" starttime="20170511 16:53:16.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:16.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.799" starttime="20170511 16:53:16.798"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:16.799" starttime="20170511 16:53:16.604"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:16.799" starttime="20170511 16:53:16.603"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:16.799" starttime="20170511 16:53:16.602"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:16.800" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:16.800" starttime="20170511 16:53:16.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:16.800" starttime="20170511 16:53:16.800"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:16.869" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:16.869" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.869" starttime="20170511 16:53:16.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:16.876" starttime="20170511 16:53:16.875"></status>
</kw>
<msg timestamp="20170511 16:53:16.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.876" starttime="20170511 16:53:16.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:16.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:16.877" starttime="20170511 16:53:16.876"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:16.877" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:16.877" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:16.877" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:16.877" starttime="20170511 16:53:16.877"></status>
</kw>
<msg timestamp="20170511 16:53:16.878" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:16.878" starttime="20170511 16:53:16.601"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:16.878" starttime="20170511 16:53:16.601"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:16.882" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:16.882" starttime="20170511 16:53:16.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:16.883" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:16.883" starttime="20170511 16:53:16.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:16.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:16.883" starttime="20170511 16:53:16.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:16.884" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:16.884" starttime="20170511 16:53:16.884"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:17.066" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:17.066" starttime="20170511 16:53:16.885"></status>
</kw>
<msg timestamp="20170511 16:53:17.066" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:17.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:17.066" starttime="20170511 16:53:16.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:17.067" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:17.067" starttime="20170511 16:53:17.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:17.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:17.068" starttime="20170511 16:53:17.067"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:17.068" starttime="20170511 16:53:16.881"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:17.068" starttime="20170511 16:53:16.880"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:17.068" starttime="20170511 16:53:16.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:17.069" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:17.069" starttime="20170511 16:53:17.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:17.070" starttime="20170511 16:53:17.070"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:17.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:17.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:17.138" starttime="20170511 16:53:17.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:17.138" starttime="20170511 16:53:17.138"></status>
</kw>
<msg timestamp="20170511 16:53:17.139" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:17.139" starttime="20170511 16:53:16.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:17.139" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:17.139" starttime="20170511 16:53:17.139"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:17.140" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:17.140" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:17.140" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:17.140" starttime="20170511 16:53:17.140"></status>
</kw>
<msg timestamp="20170511 16:53:17.140" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:17.140" starttime="20170511 16:53:16.878"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:17.141" starttime="20170511 16:53:16.878"></status>
</kw>
<msg timestamp="20170511 16:53:17.141" level="FAIL">
#(UTC) 2017/05/11 16:53:17.140820 -    3.803414 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:17.141" starttime="20170511 16:53:16.338"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:20.147" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:20.148" starttime="20170511 16:53:20.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:20.148" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:20.148" starttime="20170511 16:53:20.148"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:20.149" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:20.149" starttime="20170511 16:53:20.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:20.150" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:20.150" starttime="20170511 16:53:20.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.368" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:20.368" starttime="20170511 16:53:20.150"></status>
</kw>
<msg timestamp="20170511 16:53:20.368" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:20.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.369" starttime="20170511 16:53:20.150"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.369" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.369" starttime="20170511 16:53:20.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.370" starttime="20170511 16:53:20.369"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.370" starttime="20170511 16:53:20.146"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.370" starttime="20170511 16:53:20.146"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.370" starttime="20170511 16:53:20.145"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:20.371" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:20.371" starttime="20170511 16:53:20.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:20.371" starttime="20170511 16:53:20.371"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:20.436" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:20.436" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.436" starttime="20170511 16:53:20.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:20.437" starttime="20170511 16:53:20.436"></status>
</kw>
<msg timestamp="20170511 16:53:20.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.437" starttime="20170511 16:53:20.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.438" starttime="20170511 16:53:20.437"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:20.438" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:20.438" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:20.438" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:20.438" starttime="20170511 16:53:20.438"></status>
</kw>
<msg timestamp="20170511 16:53:20.439" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:20.439" starttime="20170511 16:53:20.144"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.439" starttime="20170511 16:53:20.143"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:20.443" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:20.443" starttime="20170511 16:53:20.443"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:20.444" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:20.444" starttime="20170511 16:53:20.444"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:20.445" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:20.445" starttime="20170511 16:53:20.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:20.445" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:20.445" starttime="20170511 16:53:20.445"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.639" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:20.639" starttime="20170511 16:53:20.446"></status>
</kw>
<msg timestamp="20170511 16:53:20.640" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:20.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.640" starttime="20170511 16:53:20.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.640" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.640" starttime="20170511 16:53:20.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.641" starttime="20170511 16:53:20.641"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.641" starttime="20170511 16:53:20.442"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.641" starttime="20170511 16:53:20.442"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.641" starttime="20170511 16:53:20.441"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:20.642" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:20.642" starttime="20170511 16:53:20.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:20.643" starttime="20170511 16:53:20.642"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:20.710" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:20.710" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.711" starttime="20170511 16:53:20.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:20.711" starttime="20170511 16:53:20.711"></status>
</kw>
<msg timestamp="20170511 16:53:20.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.711" starttime="20170511 16:53:20.440"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.712" starttime="20170511 16:53:20.712"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:20.713" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:20.713" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:20.713" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:20.713" starttime="20170511 16:53:20.712"></status>
</kw>
<msg timestamp="20170511 16:53:20.713" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:20.713" starttime="20170511 16:53:20.440"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.713" starttime="20170511 16:53:20.439"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:20.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:20.718" starttime="20170511 16:53:20.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:20.718" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:20.719" starttime="20170511 16:53:20.718"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:20.719" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:20.719" starttime="20170511 16:53:20.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:20.720" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:20.720" starttime="20170511 16:53:20.719"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.896" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:20.896" starttime="20170511 16:53:20.721"></status>
</kw>
<msg timestamp="20170511 16:53:20.896" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:20.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.897" starttime="20170511 16:53:20.720"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.897" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.897" starttime="20170511 16:53:20.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.898" starttime="20170511 16:53:20.897"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.898" starttime="20170511 16:53:20.717"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.898" starttime="20170511 16:53:20.716"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.898" starttime="20170511 16:53:20.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:20.899" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:20.899" starttime="20170511 16:53:20.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:20.899" starttime="20170511 16:53:20.899"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:20.967" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:20.967" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.967" starttime="20170511 16:53:20.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:20.967" starttime="20170511 16:53:20.967"></status>
</kw>
<msg timestamp="20170511 16:53:20.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.968" starttime="20170511 16:53:20.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:20.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:20.968" starttime="20170511 16:53:20.968"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:20.969" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:20.969" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:20.969" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:20.969" starttime="20170511 16:53:20.969"></status>
</kw>
<msg timestamp="20170511 16:53:20.969" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:20.969" starttime="20170511 16:53:20.714"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:20.970" starttime="20170511 16:53:20.714"></status>
</kw>
<msg timestamp="20170511 16:53:20.970" level="FAIL">
#(UTC) 2017/05/11 16:53:20.969909 -    3.829089 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:20.970" starttime="20170511 16:53:20.142"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:23.976" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:23.977" starttime="20170511 16:53:23.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:23.977" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:23.977" starttime="20170511 16:53:23.977"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:23.978" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:23.978" starttime="20170511 16:53:23.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:23.978" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:23.978" starttime="20170511 16:53:23.978"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.161" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:24.161" starttime="20170511 16:53:23.979"></status>
</kw>
<msg timestamp="20170511 16:53:24.162" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:24.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.162" starttime="20170511 16:53:23.979"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.162" starttime="20170511 16:53:24.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.163" starttime="20170511 16:53:24.163"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.163" starttime="20170511 16:53:23.975"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.163" starttime="20170511 16:53:23.975"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.163" starttime="20170511 16:53:23.974"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:24.164" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:24.164" starttime="20170511 16:53:24.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:24.165" starttime="20170511 16:53:24.164"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:24.230" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:24.230" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.230" starttime="20170511 16:53:24.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:24.231" starttime="20170511 16:53:24.231"></status>
</kw>
<msg timestamp="20170511 16:53:24.231" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.231" starttime="20170511 16:53:23.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.232" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.232" starttime="20170511 16:53:24.232"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:24.233" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:24.233" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:24.233" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:24.233" starttime="20170511 16:53:24.232"></status>
</kw>
<msg timestamp="20170511 16:53:24.233" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:24.233" starttime="20170511 16:53:23.973"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.233" starttime="20170511 16:53:23.972"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:24.239" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:24.240" starttime="20170511 16:53:24.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:24.240" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:24.240" starttime="20170511 16:53:24.240"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:24.241" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:24.241" starttime="20170511 16:53:24.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:24.242" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:24.242" starttime="20170511 16:53:24.241"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.426" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:24.427" starttime="20170511 16:53:24.242"></status>
</kw>
<msg timestamp="20170511 16:53:24.427" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:24.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.427" starttime="20170511 16:53:24.242"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.427" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.427" starttime="20170511 16:53:24.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.428" starttime="20170511 16:53:24.428"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.428" starttime="20170511 16:53:24.238"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.428" starttime="20170511 16:53:24.238"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.428" starttime="20170511 16:53:24.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:24.429" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:24.429" starttime="20170511 16:53:24.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:24.430" starttime="20170511 16:53:24.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:24.499" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:24.499" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.499" starttime="20170511 16:53:24.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:24.500" starttime="20170511 16:53:24.500"></status>
</kw>
<msg timestamp="20170511 16:53:24.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.500" starttime="20170511 16:53:24.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.501" starttime="20170511 16:53:24.501"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:24.502" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:24.502" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:24.502" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:24.502" starttime="20170511 16:53:24.501"></status>
</kw>
<msg timestamp="20170511 16:53:24.502" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:24.502" starttime="20170511 16:53:24.234"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.502" starttime="20170511 16:53:24.234"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:24.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:24.507" starttime="20170511 16:53:24.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:24.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:24.508" starttime="20170511 16:53:24.507"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:24.508" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:24.508" starttime="20170511 16:53:24.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:24.509" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:24.509" starttime="20170511 16:53:24.509"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.728" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:24.728" starttime="20170511 16:53:24.510"></status>
</kw>
<msg timestamp="20170511 16:53:24.729" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:24.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.729" starttime="20170511 16:53:24.509"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.729" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.729" starttime="20170511 16:53:24.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.730" starttime="20170511 16:53:24.730"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.730" starttime="20170511 16:53:24.506"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.730" starttime="20170511 16:53:24.505"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.730" starttime="20170511 16:53:24.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:24.731" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:24.731" starttime="20170511 16:53:24.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:24.732" starttime="20170511 16:53:24.731"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:24.803" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:24.803" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.804" starttime="20170511 16:53:24.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:24.804" starttime="20170511 16:53:24.804"></status>
</kw>
<msg timestamp="20170511 16:53:24.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.804" starttime="20170511 16:53:24.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:24.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:24.805" starttime="20170511 16:53:24.805"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:24.806" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:24.806" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:24.806" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:24.806" starttime="20170511 16:53:24.805"></status>
</kw>
<msg timestamp="20170511 16:53:24.806" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:24.806" starttime="20170511 16:53:24.503"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:24.806" starttime="20170511 16:53:24.503"></status>
</kw>
<msg timestamp="20170511 16:53:24.807" level="FAIL">
#(UTC) 2017/05/11 16:53:24.806737 -    3.836828 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:24.807" starttime="20170511 16:53:23.971"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:27.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:27.813" starttime="20170511 16:53:27.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:27.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:27.814" starttime="20170511 16:53:27.814"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:27.815" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:27.815" starttime="20170511 16:53:27.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:27.815" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:27.815" starttime="20170511 16:53:27.815"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:27.997" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:27.997" starttime="20170511 16:53:27.816"></status>
</kw>
<msg timestamp="20170511 16:53:27.997" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:27.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:27.997" starttime="20170511 16:53:27.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:27.998" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:27.998" starttime="20170511 16:53:27.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:27.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:27.998" starttime="20170511 16:53:27.998"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:27.999" starttime="20170511 16:53:27.812"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:27.999" starttime="20170511 16:53:27.812"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:27.999" starttime="20170511 16:53:27.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:27.999" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:27.999" starttime="20170511 16:53:27.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:28.000" starttime="20170511 16:53:28.000"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:28.069" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:28.069" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.069" starttime="20170511 16:53:28.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:28.070" starttime="20170511 16:53:28.070"></status>
</kw>
<msg timestamp="20170511 16:53:28.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.070" starttime="20170511 16:53:27.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:28.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.071" starttime="20170511 16:53:28.070"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:28.071" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:28.072" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:28.072" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:28.072" starttime="20170511 16:53:28.071"></status>
</kw>
<msg timestamp="20170511 16:53:28.072" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:28.072" starttime="20170511 16:53:27.810"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:28.072" starttime="20170511 16:53:27.809"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:28.078" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:28.079" starttime="20170511 16:53:28.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:28.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:28.079" starttime="20170511 16:53:28.079"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:28.080" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:28.080" starttime="20170511 16:53:28.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:28.081" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:28.081" starttime="20170511 16:53:28.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:28.267" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:28.267" starttime="20170511 16:53:28.082"></status>
</kw>
<msg timestamp="20170511 16:53:28.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:28.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.267" starttime="20170511 16:53:28.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:28.268" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.268" starttime="20170511 16:53:28.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:28.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.268" starttime="20170511 16:53:28.268"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:28.269" starttime="20170511 16:53:28.077"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:28.269" starttime="20170511 16:53:28.076"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:28.269" starttime="20170511 16:53:28.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:28.269" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:28.269" starttime="20170511 16:53:28.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:28.270" starttime="20170511 16:53:28.270"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:28.341" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:28.341" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.341" starttime="20170511 16:53:28.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:28.341" starttime="20170511 16:53:28.341"></status>
</kw>
<msg timestamp="20170511 16:53:28.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.342" starttime="20170511 16:53:28.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:28.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.342" starttime="20170511 16:53:28.342"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:28.343" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:28.343" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:28.343" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:28.343" starttime="20170511 16:53:28.343"></status>
</kw>
<msg timestamp="20170511 16:53:28.343" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:28.343" starttime="20170511 16:53:28.073"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:28.344" starttime="20170511 16:53:28.073"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:28.348" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:28.348" starttime="20170511 16:53:28.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:28.349" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:28.349" starttime="20170511 16:53:28.348"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:28.349" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:28.349" starttime="20170511 16:53:28.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:28.350" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:28.350" starttime="20170511 16:53:28.350"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:28.534" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:28.534" starttime="20170511 16:53:28.351"></status>
</kw>
<msg timestamp="20170511 16:53:28.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:28.534" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.534" starttime="20170511 16:53:28.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:28.535" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.535" starttime="20170511 16:53:28.535"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:28.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.536" starttime="20170511 16:53:28.535"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:28.536" starttime="20170511 16:53:28.347"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:28.536" starttime="20170511 16:53:28.346"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:28.536" starttime="20170511 16:53:28.346"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:28.537" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:28.537" starttime="20170511 16:53:28.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:28.537" starttime="20170511 16:53:28.537"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:28.601" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:28.601" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.601" starttime="20170511 16:53:28.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:28.602" starttime="20170511 16:53:28.601"></status>
</kw>
<msg timestamp="20170511 16:53:28.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.602" starttime="20170511 16:53:28.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:28.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:28.603" starttime="20170511 16:53:28.602"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:28.603" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:28.603" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:28.603" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:28.603" starttime="20170511 16:53:28.603"></status>
</kw>
<msg timestamp="20170511 16:53:28.604" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:28.604" starttime="20170511 16:53:28.344"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:28.604" starttime="20170511 16:53:28.344"></status>
</kw>
<msg timestamp="20170511 16:53:28.605" level="FAIL">
#(UTC) 2017/05/11 16:53:28.604185 -    3.797448 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:28.605" starttime="20170511 16:53:27.808"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:31.611" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:31.611" starttime="20170511 16:53:31.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:31.612" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:31.612" starttime="20170511 16:53:31.612"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:31.612" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:31.613" starttime="20170511 16:53:31.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:31.613" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:31.613" starttime="20170511 16:53:31.613"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:31.795" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:31.795" starttime="20170511 16:53:31.614"></status>
</kw>
<msg timestamp="20170511 16:53:31.795" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:31.795" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:31.795" starttime="20170511 16:53:31.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:31.796" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:31.796" starttime="20170511 16:53:31.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:31.796" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:31.796" starttime="20170511 16:53:31.796"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:31.797" starttime="20170511 16:53:31.610"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:31.797" starttime="20170511 16:53:31.609"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:31.797" starttime="20170511 16:53:31.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:31.797" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:31.797" starttime="20170511 16:53:31.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:31.798" starttime="20170511 16:53:31.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:31.864" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:31.864" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:31.864" starttime="20170511 16:53:31.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:31.864" starttime="20170511 16:53:31.864"></status>
</kw>
<msg timestamp="20170511 16:53:31.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:31.865" starttime="20170511 16:53:31.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:31.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:31.866" starttime="20170511 16:53:31.865"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:31.866" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:31.866" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:31.866" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:31.866" starttime="20170511 16:53:31.866"></status>
</kw>
<msg timestamp="20170511 16:53:31.867" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:31.867" starttime="20170511 16:53:31.608"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:31.867" starttime="20170511 16:53:31.607"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:31.871" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:31.871" starttime="20170511 16:53:31.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:31.872" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:31.872" starttime="20170511 16:53:31.871"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:31.872" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:31.872" starttime="20170511 16:53:31.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:31.873" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:31.873" starttime="20170511 16:53:31.873"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:32.088" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:32.088" starttime="20170511 16:53:31.874"></status>
</kw>
<msg timestamp="20170511 16:53:32.088" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:32.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.088" starttime="20170511 16:53:31.873"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:32.089" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.089" starttime="20170511 16:53:32.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:32.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.090" starttime="20170511 16:53:32.089"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:32.090" starttime="20170511 16:53:31.870"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:32.090" starttime="20170511 16:53:31.869"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:32.090" starttime="20170511 16:53:31.869"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:32.091" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:32.091" starttime="20170511 16:53:32.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:32.092" starttime="20170511 16:53:32.091"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:32.168" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:32.168" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.168" starttime="20170511 16:53:32.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:32.169" starttime="20170511 16:53:32.169"></status>
</kw>
<msg timestamp="20170511 16:53:32.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.169" starttime="20170511 16:53:31.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:32.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.170" starttime="20170511 16:53:32.169"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:32.170" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:32.170" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:32.171" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:32.171" starttime="20170511 16:53:32.170"></status>
</kw>
<msg timestamp="20170511 16:53:32.171" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:32.171" starttime="20170511 16:53:31.868"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:32.171" starttime="20170511 16:53:31.867"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:32.175" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:32.175" starttime="20170511 16:53:32.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:32.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:32.176" starttime="20170511 16:53:32.175"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:32.176" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:32.176" starttime="20170511 16:53:32.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:32.177" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:32.177" starttime="20170511 16:53:32.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:32.355" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:32.355" starttime="20170511 16:53:32.178"></status>
</kw>
<msg timestamp="20170511 16:53:32.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:32.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.355" starttime="20170511 16:53:32.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:32.356" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.356" starttime="20170511 16:53:32.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:32.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.356" starttime="20170511 16:53:32.356"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:32.357" starttime="20170511 16:53:32.174"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:32.357" starttime="20170511 16:53:32.173"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:32.357" starttime="20170511 16:53:32.173"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:32.357" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:32.357" starttime="20170511 16:53:32.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:32.358" starttime="20170511 16:53:32.358"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:32.423" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:32.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.423" starttime="20170511 16:53:32.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:32.424" starttime="20170511 16:53:32.423"></status>
</kw>
<msg timestamp="20170511 16:53:32.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.424" starttime="20170511 16:53:32.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:32.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:32.425" starttime="20170511 16:53:32.424"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:32.425" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:32.425" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:32.425" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:32.425" starttime="20170511 16:53:32.425"></status>
</kw>
<msg timestamp="20170511 16:53:32.426" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:32.426" starttime="20170511 16:53:32.172"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:32.426" starttime="20170511 16:53:32.171"></status>
</kw>
<msg timestamp="20170511 16:53:32.427" level="FAIL">
#(UTC) 2017/05/11 16:53:32.426159 -    3.821974 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:32.427" starttime="20170511 16:53:31.605"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:35.433" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:35.434" starttime="20170511 16:53:35.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:35.434" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:35.435" starttime="20170511 16:53:35.434"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:35.435" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:35.435" starttime="20170511 16:53:35.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:35.436" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:35.436" starttime="20170511 16:53:35.435"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:35.614" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:35.614" starttime="20170511 16:53:35.436"></status>
</kw>
<msg timestamp="20170511 16:53:35.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:35.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.614" starttime="20170511 16:53:35.436"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:35.615" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.615" starttime="20170511 16:53:35.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:35.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.616" starttime="20170511 16:53:35.615"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:35.616" starttime="20170511 16:53:35.432"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:35.616" starttime="20170511 16:53:35.432"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:35.616" starttime="20170511 16:53:35.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:35.617" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:35.617" starttime="20170511 16:53:35.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:35.617" starttime="20170511 16:53:35.617"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:35.683" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:35.683" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.683" starttime="20170511 16:53:35.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:35.684" starttime="20170511 16:53:35.683"></status>
</kw>
<msg timestamp="20170511 16:53:35.684" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.684" starttime="20170511 16:53:35.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:35.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.685" starttime="20170511 16:53:35.684"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:35.685" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:35.685" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:35.685" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:35.685" starttime="20170511 16:53:35.685"></status>
</kw>
<msg timestamp="20170511 16:53:35.686" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:35.686" starttime="20170511 16:53:35.430"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:35.686" starttime="20170511 16:53:35.430"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:35.690" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:35.690" starttime="20170511 16:53:35.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:35.691" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:35.691" starttime="20170511 16:53:35.690"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:35.691" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:35.691" starttime="20170511 16:53:35.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:35.692" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:35.692" starttime="20170511 16:53:35.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:35.871" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:35.871" starttime="20170511 16:53:35.693"></status>
</kw>
<msg timestamp="20170511 16:53:35.871" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:35.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.871" starttime="20170511 16:53:35.692"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:35.872" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.872" starttime="20170511 16:53:35.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:35.873" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.873" starttime="20170511 16:53:35.872"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:35.873" starttime="20170511 16:53:35.689"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:35.873" starttime="20170511 16:53:35.688"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:35.873" starttime="20170511 16:53:35.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:35.874" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:35.874" starttime="20170511 16:53:35.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:35.874" starttime="20170511 16:53:35.874"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:35.942" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:35.942" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.942" starttime="20170511 16:53:35.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:35.943" starttime="20170511 16:53:35.942"></status>
</kw>
<msg timestamp="20170511 16:53:35.943" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.943" starttime="20170511 16:53:35.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:35.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:35.944" starttime="20170511 16:53:35.943"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:35.944" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:35.944" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:35.944" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:35.944" starttime="20170511 16:53:35.944"></status>
</kw>
<msg timestamp="20170511 16:53:35.945" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:35.945" starttime="20170511 16:53:35.687"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:35.945" starttime="20170511 16:53:35.686"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:35.949" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:35.949" starttime="20170511 16:53:35.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:35.950" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:35.950" starttime="20170511 16:53:35.949"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:35.950" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:35.950" starttime="20170511 16:53:35.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:35.951" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:35.951" starttime="20170511 16:53:35.951"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:36.164" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:36.164" starttime="20170511 16:53:35.952"></status>
</kw>
<msg timestamp="20170511 16:53:36.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:36.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:36.165" starttime="20170511 16:53:35.951"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:36.165" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:36.165" starttime="20170511 16:53:36.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:36.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:36.166" starttime="20170511 16:53:36.166"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:36.166" starttime="20170511 16:53:35.948"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:36.166" starttime="20170511 16:53:35.947"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:36.166" starttime="20170511 16:53:35.947"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:36.167" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:36.167" starttime="20170511 16:53:36.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:36.168" starttime="20170511 16:53:36.167"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:36.231" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:36.232" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:36.232" starttime="20170511 16:53:36.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:36.232" starttime="20170511 16:53:36.232"></status>
</kw>
<msg timestamp="20170511 16:53:36.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:36.233" starttime="20170511 16:53:35.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:36.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:36.233" starttime="20170511 16:53:36.233"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:36.234" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:36.234" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:36.234" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:36.234" starttime="20170511 16:53:36.234"></status>
</kw>
<msg timestamp="20170511 16:53:36.234" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:36.235" starttime="20170511 16:53:35.946"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:36.235" starttime="20170511 16:53:35.945"></status>
</kw>
<msg timestamp="20170511 16:53:36.236" level="FAIL">
#(UTC) 2017/05/11 16:53:36.235035 -    3.808876 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:36.236" starttime="20170511 16:53:35.428"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:39.242" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:39.242" starttime="20170511 16:53:39.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:39.243" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:39.243" starttime="20170511 16:53:39.242"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:39.243" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:39.243" starttime="20170511 16:53:39.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:39.246" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:39.246" starttime="20170511 16:53:39.243"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.445" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:39.445" starttime="20170511 16:53:39.247"></status>
</kw>
<msg timestamp="20170511 16:53:39.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:39.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.445" starttime="20170511 16:53:39.246"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.446" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.446" starttime="20170511 16:53:39.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.446" starttime="20170511 16:53:39.446"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.447" starttime="20170511 16:53:39.241"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.447" starttime="20170511 16:53:39.240"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.447" starttime="20170511 16:53:39.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:39.447" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:39.447" starttime="20170511 16:53:39.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:39.448" starttime="20170511 16:53:39.448"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:39.519" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:39.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.519" starttime="20170511 16:53:39.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:39.520" starttime="20170511 16:53:39.520"></status>
</kw>
<msg timestamp="20170511 16:53:39.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.520" starttime="20170511 16:53:39.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.521" starttime="20170511 16:53:39.521"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:39.522" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:39.522" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:39.522" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:39.522" starttime="20170511 16:53:39.521"></status>
</kw>
<msg timestamp="20170511 16:53:39.522" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:39.522" starttime="20170511 16:53:39.238"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.523" starttime="20170511 16:53:39.238"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:39.527" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:39.527" starttime="20170511 16:53:39.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:39.528" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:39.528" starttime="20170511 16:53:39.527"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:39.528" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:39.528" starttime="20170511 16:53:39.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:39.529" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:39.529" starttime="20170511 16:53:39.528"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.715" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:39.715" starttime="20170511 16:53:39.530"></status>
</kw>
<msg timestamp="20170511 16:53:39.715" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:39.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.715" starttime="20170511 16:53:39.530"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.716" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.716" starttime="20170511 16:53:39.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.716" starttime="20170511 16:53:39.716"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.717" starttime="20170511 16:53:39.526"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.717" starttime="20170511 16:53:39.525"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.717" starttime="20170511 16:53:39.525"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:39.717" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:39.717" starttime="20170511 16:53:39.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:39.718" starttime="20170511 16:53:39.718"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:39.785" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:39.786" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.786" starttime="20170511 16:53:39.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:39.786" starttime="20170511 16:53:39.786"></status>
</kw>
<msg timestamp="20170511 16:53:39.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.787" starttime="20170511 16:53:39.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.787" starttime="20170511 16:53:39.787"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:39.788" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:39.788" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:39.788" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:39.788" starttime="20170511 16:53:39.788"></status>
</kw>
<msg timestamp="20170511 16:53:39.788" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:39.788" starttime="20170511 16:53:39.524"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.789" starttime="20170511 16:53:39.523"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:39.792" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:39.793" starttime="20170511 16:53:39.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:39.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:39.794" starttime="20170511 16:53:39.793"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:39.794" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:39.794" starttime="20170511 16:53:39.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:39.795" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:39.795" starttime="20170511 16:53:39.795"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.974" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:39.974" starttime="20170511 16:53:39.796"></status>
</kw>
<msg timestamp="20170511 16:53:39.974" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:39.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.974" starttime="20170511 16:53:39.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.975" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.975" starttime="20170511 16:53:39.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:39.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:39.976" starttime="20170511 16:53:39.975"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.976" starttime="20170511 16:53:39.791"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.976" starttime="20170511 16:53:39.791"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:39.976" starttime="20170511 16:53:39.790"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:39.976" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:39.977" starttime="20170511 16:53:39.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:39.977" starttime="20170511 16:53:39.977"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:40.041" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:40.041" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:40.041" starttime="20170511 16:53:39.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:40.042" starttime="20170511 16:53:40.042"></status>
</kw>
<msg timestamp="20170511 16:53:40.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:40.042" starttime="20170511 16:53:39.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:40.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:40.043" starttime="20170511 16:53:40.043"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:40.043" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:40.044" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:40.044" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:40.044" starttime="20170511 16:53:40.043"></status>
</kw>
<msg timestamp="20170511 16:53:40.044" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:40.044" starttime="20170511 16:53:39.789"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:40.044" starttime="20170511 16:53:39.789"></status>
</kw>
<msg timestamp="20170511 16:53:40.045" level="FAIL">
#(UTC) 2017/05/11 16:53:40.044565 -    3.809530 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:40.045" starttime="20170511 16:53:39.236"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:43.051" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:43.052" starttime="20170511 16:53:43.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:43.053" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:43.053" starttime="20170511 16:53:43.052"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:43.053" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:43.053" starttime="20170511 16:53:43.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:43.054" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:43.054" starttime="20170511 16:53:43.054"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:43.316" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:43.316" starttime="20170511 16:53:43.055"></status>
</kw>
<msg timestamp="20170511 16:53:43.317" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:43.317" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.317" starttime="20170511 16:53:43.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:43.317" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.317" starttime="20170511 16:53:43.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:43.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.318" starttime="20170511 16:53:43.318"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:43.319" starttime="20170511 16:53:43.050"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:43.319" starttime="20170511 16:53:43.050"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:43.319" starttime="20170511 16:53:43.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:43.319" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:43.319" starttime="20170511 16:53:43.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:43.320" starttime="20170511 16:53:43.320"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:43.444" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:43.444" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.444" starttime="20170511 16:53:43.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:43.445" starttime="20170511 16:53:43.445"></status>
</kw>
<msg timestamp="20170511 16:53:43.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.445" starttime="20170511 16:53:43.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:43.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.446" starttime="20170511 16:53:43.445"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:43.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:43.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:43.447" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:43.447" starttime="20170511 16:53:43.446"></status>
</kw>
<msg timestamp="20170511 16:53:43.447" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:43.447" starttime="20170511 16:53:43.048"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:43.447" starttime="20170511 16:53:43.047"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:43.451" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:43.452" starttime="20170511 16:53:43.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:43.452" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:43.452" starttime="20170511 16:53:43.452"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:43.453" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:43.453" starttime="20170511 16:53:43.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:43.454" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:43.454" starttime="20170511 16:53:43.453"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:43.721" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:43.722" starttime="20170511 16:53:43.454"></status>
</kw>
<msg timestamp="20170511 16:53:43.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:43.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.722" starttime="20170511 16:53:43.454"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:43.722" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.723" starttime="20170511 16:53:43.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:43.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.723" starttime="20170511 16:53:43.723"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:43.723" starttime="20170511 16:53:43.450"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:43.724" starttime="20170511 16:53:43.450"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:43.724" starttime="20170511 16:53:43.449"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:43.724" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:43.724" starttime="20170511 16:53:43.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:43.725" starttime="20170511 16:53:43.725"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:43.820" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:43.820" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.820" starttime="20170511 16:53:43.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:43.821" starttime="20170511 16:53:43.820"></status>
</kw>
<msg timestamp="20170511 16:53:43.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.821" starttime="20170511 16:53:43.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:43.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:43.822" starttime="20170511 16:53:43.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:43.822" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:43.822" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:43.823" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:43.823" starttime="20170511 16:53:43.822"></status>
</kw>
<msg timestamp="20170511 16:53:43.823" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:43.823" starttime="20170511 16:53:43.448"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:43.823" starttime="20170511 16:53:43.448"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:43.833" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:43.833" starttime="20170511 16:53:43.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:43.834" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:43.834" starttime="20170511 16:53:43.833"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:43.834" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:43.834" starttime="20170511 16:53:43.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:43.835" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:43.835" starttime="20170511 16:53:43.835"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:44.109" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:44.109" starttime="20170511 16:53:43.836"></status>
</kw>
<msg timestamp="20170511 16:53:44.109" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:44.109" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:44.109" starttime="20170511 16:53:43.835"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:44.110" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:44.110" starttime="20170511 16:53:44.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:44.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:44.111" starttime="20170511 16:53:44.110"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:44.111" starttime="20170511 16:53:43.826"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:44.111" starttime="20170511 16:53:43.826"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:44.111" starttime="20170511 16:53:43.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:44.112" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:44.112" starttime="20170511 16:53:44.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:44.113" starttime="20170511 16:53:44.113"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:44.203" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:44.203" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:44.203" starttime="20170511 16:53:44.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:44.204" starttime="20170511 16:53:44.203"></status>
</kw>
<msg timestamp="20170511 16:53:44.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:44.204" starttime="20170511 16:53:43.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:44.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:44.205" starttime="20170511 16:53:44.204"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:44.205" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:44.205" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:44.205" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:44.205" starttime="20170511 16:53:44.205"></status>
</kw>
<msg timestamp="20170511 16:53:44.206" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:44.206" starttime="20170511 16:53:43.824"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:44.206" starttime="20170511 16:53:43.823"></status>
</kw>
<msg timestamp="20170511 16:53:44.207" level="FAIL">
#(UTC) 2017/05/11 16:53:44.206299 -    4.161734 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:44.207" starttime="20170511 16:53:43.046"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:47.213" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:47.214" starttime="20170511 16:53:47.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:47.214" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:47.214" starttime="20170511 16:53:47.214"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:47.215" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:47.215" starttime="20170511 16:53:47.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:47.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:47.216" starttime="20170511 16:53:47.215"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:47.530" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:47.531" starttime="20170511 16:53:47.216"></status>
</kw>
<msg timestamp="20170511 16:53:47.531" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:47.531" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:47.531" starttime="20170511 16:53:47.216"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:47.531" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:47.532" starttime="20170511 16:53:47.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:47.532" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:47.532" starttime="20170511 16:53:47.532"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:47.532" starttime="20170511 16:53:47.212"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:47.533" starttime="20170511 16:53:47.211"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:47.533" starttime="20170511 16:53:47.211"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:47.533" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:47.533" starttime="20170511 16:53:47.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:47.534" starttime="20170511 16:53:47.534"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:47.631" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:47.631" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:47.631" starttime="20170511 16:53:47.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:47.632" starttime="20170511 16:53:47.632"></status>
</kw>
<msg timestamp="20170511 16:53:47.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:47.632" starttime="20170511 16:53:47.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:47.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:47.633" starttime="20170511 16:53:47.632"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:47.633" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:47.633" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:47.634" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:47.634" starttime="20170511 16:53:47.633"></status>
</kw>
<msg timestamp="20170511 16:53:47.634" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:47.634" starttime="20170511 16:53:47.210"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:47.634" starttime="20170511 16:53:47.209"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:47.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:47.639" starttime="20170511 16:53:47.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:47.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:47.639" starttime="20170511 16:53:47.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:47.640" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:47.640" starttime="20170511 16:53:47.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:47.641" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:47.641" starttime="20170511 16:53:47.640"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:47.948" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:47.948" starttime="20170511 16:53:47.641"></status>
</kw>
<msg timestamp="20170511 16:53:47.948" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:47.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:47.948" starttime="20170511 16:53:47.641"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:47.949" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:47.949" starttime="20170511 16:53:47.948"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:47.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:47.950" starttime="20170511 16:53:47.949"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:47.950" starttime="20170511 16:53:47.637"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:47.950" starttime="20170511 16:53:47.637"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:47.950" starttime="20170511 16:53:47.636"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:47.951" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:47.951" starttime="20170511 16:53:47.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:47.951" starttime="20170511 16:53:47.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:48.052" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:48.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:48.052" starttime="20170511 16:53:47.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:48.053" starttime="20170511 16:53:48.053"></status>
</kw>
<msg timestamp="20170511 16:53:48.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:48.053" starttime="20170511 16:53:47.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:48.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:48.054" starttime="20170511 16:53:48.054"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:48.055" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:48.055" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:48.055" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170511 16:53:48.055" starttime="20170511 16:53:48.054"></status>
</kw>
<msg timestamp="20170511 16:53:48.055" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170511 16:53:48.055" starttime="20170511 16:53:47.635"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:48.055" starttime="20170511 16:53:47.635"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:48.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:48.060" starttime="20170511 16:53:48.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:48.060" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:48.060" starttime="20170511 16:53:48.060"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:48.061" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:48.061" starttime="20170511 16:53:48.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:48.062" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:48.062" starttime="20170511 16:53:48.061"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:48.371" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:48.371" starttime="20170511 16:53:48.062"></status>
</kw>
<msg timestamp="20170511 16:53:48.371" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:48.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:48.371" starttime="20170511 16:53:48.062"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:48.372" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:48.372" starttime="20170511 16:53:48.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:48.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:48.373" starttime="20170511 16:53:48.372"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:48.373" starttime="20170511 16:53:48.059"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:48.373" starttime="20170511 16:53:48.058"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:48.373" starttime="20170511 16:53:48.057"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:48.374" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:48.374" starttime="20170511 16:53:48.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:48.375" starttime="20170511 16:53:48.374"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:48.473" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:48.473" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:48.473" starttime="20170511 16:53:48.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:48.474" starttime="20170511 16:53:48.474"></status>
</kw>
<msg timestamp="20170511 16:53:48.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:48.474" starttime="20170511 16:53:48.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:48.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:48.475" starttime="20170511 16:53:48.475"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:48.476" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:48.476" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:48.476" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:48.476" starttime="20170511 16:53:48.475"></status>
</kw>
<msg timestamp="20170511 16:53:48.476" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:48.476" starttime="20170511 16:53:48.056"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:48.476" starttime="20170511 16:53:48.056"></status>
</kw>
<msg timestamp="20170511 16:53:48.477" level="FAIL">
#(UTC) 2017/05/11 16:53:48.476573 -    4.270274 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170511 16:53:48.477" starttime="20170511 16:53:47.207"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:51.484" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:51.484" starttime="20170511 16:53:51.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:51.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:51.485" starttime="20170511 16:53:51.484"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:51.485" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:51.485" starttime="20170511 16:53:51.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:51.486" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:51.486" starttime="20170511 16:53:51.486"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:51.866" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:51.866" starttime="20170511 16:53:51.487"></status>
</kw>
<msg timestamp="20170511 16:53:51.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:51.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:51.867" starttime="20170511 16:53:51.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:51.867" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:51.867" starttime="20170511 16:53:51.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:51.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:51.868" starttime="20170511 16:53:51.868"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:51.868" starttime="20170511 16:53:51.483"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:51.868" starttime="20170511 16:53:51.482"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:51.868" starttime="20170511 16:53:51.481"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:51.869" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170511 16:53:51.869" starttime="20170511 16:53:51.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:51.870" starttime="20170511 16:53:51.869"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:51.976" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170511 16:53:51.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:51.977" starttime="20170511 16:53:51.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:51.977" starttime="20170511 16:53:51.977"></status>
</kw>
<msg timestamp="20170511 16:53:51.977" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:51.978" starttime="20170511 16:53:51.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:51.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:51.978" starttime="20170511 16:53:51.978"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:51.979" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:51.979" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:51.979" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170511 16:53:51.979" starttime="20170511 16:53:51.978"></status>
</kw>
<msg timestamp="20170511 16:53:51.979" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170511 16:53:51.979" starttime="20170511 16:53:51.480"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:51.980" starttime="20170511 16:53:51.480"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:51.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:51.984" starttime="20170511 16:53:51.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:51.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:51.985" starttime="20170511 16:53:51.984"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:51.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:51.985" starttime="20170511 16:53:51.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:51.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:51.986" starttime="20170511 16:53:51.986"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:52.328" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:52.328" starttime="20170511 16:53:51.987"></status>
</kw>
<msg timestamp="20170511 16:53:52.328" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:52.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.328" starttime="20170511 16:53:51.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:52.329" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.329" starttime="20170511 16:53:52.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:52.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.330" starttime="20170511 16:53:52.329"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.330" starttime="20170511 16:53:51.983"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.330" starttime="20170511 16:53:51.982"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.330" starttime="20170511 16:53:51.982"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:52.331" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170511 16:53:52.331" starttime="20170511 16:53:52.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:52.331" starttime="20170511 16:53:52.331"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:52.447" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170511 16:53:52.447" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.447" starttime="20170511 16:53:52.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:52.448" starttime="20170511 16:53:52.447"></status>
</kw>
<msg timestamp="20170511 16:53:52.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.448" starttime="20170511 16:53:51.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:52.449" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.449" starttime="20170511 16:53:52.448"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:52.449" level="INFO">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:52.449" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:52.449" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Starting OS'}</msg>
<status status="PASS" endtime="20170511 16:53:52.449" starttime="20170511 16:53:52.449"></status>
</kw>
<msg timestamp="20170511 16:53:52.450" level="INFO">${state} = FW Progress, Starting OS</msg>
<status status="PASS" endtime="20170511 16:53:52.450" starttime="20170511 16:53:51.980"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.450" starttime="20170511 16:53:51.980"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:53:52.454" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:53:52.455" starttime="20170511 16:53:52.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:53:52.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:53:52.455" starttime="20170511 16:53:52.455"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:53:52.456" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:53:52.456" starttime="20170511 16:53:52.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:53:52.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:53:52.475" starttime="20170511 16:53:52.456"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:53:52.795" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:53:52.796" starttime="20170511 16:53:52.475"></status>
</kw>
<msg timestamp="20170511 16:53:52.796" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:53:52.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.796" starttime="20170511 16:53:52.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:53:52.796" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.797" starttime="20170511 16:53:52.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:52.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.797" starttime="20170511 16:53:52.797"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.797" starttime="20170511 16:53:52.453"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.797" starttime="20170511 16:53:52.453"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.798" starttime="20170511 16:53:52.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:53:52.798" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:53:52.798" starttime="20170511 16:53:52.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:52.799" starttime="20170511 16:53:52.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:53:52.893" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:53:52.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.893" starttime="20170511 16:53:52.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:52.894" starttime="20170511 16:53:52.893"></status>
</kw>
<msg timestamp="20170511 16:53:52.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.894" starttime="20170511 16:53:52.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:53:52.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:53:52.895" starttime="20170511 16:53:52.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:53:52.895" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:53:52.895" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:53:52.895" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:53:52.895" starttime="20170511 16:53:52.895"></status>
</kw>
<msg timestamp="20170511 16:53:52.896" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:53:52.896" starttime="20170511 16:53:52.451"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.896" starttime="20170511 16:53:52.450"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.896" starttime="20170511 16:53:51.478"></status>
</kw>
<msg timestamp="20170511 16:53:52.901" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170511 16:53:52.901" starttime="20170511 16:51:39.449"></status>
</kw>
<msg timestamp="20170511 16:53:52.907" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170511 16:53:52.911" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Delete Error logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170511 16:53:52.932" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170511 16:53:52.932" starttime="20170511 16:53:52.931"></status>
</kw>
<msg timestamp="20170511 16:53:52.932" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170511 16:53:52.932" starttime="20170511 16:53:52.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:52.933" starttime="20170511 16:53:52.933"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.933" starttime="20170511 16:53:52.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:52.934" starttime="20170511 16:53:52.933"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170511 16:53:52.935" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170511 16:53:52.935" starttime="20170511 16:53:52.935"></status>
</kw>
<msg timestamp="20170511 16:53:52.935" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170511 16:53:52.935" starttime="20170511 16:53:52.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:53:52.937" starttime="20170511 16:53:52.936"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.937" starttime="20170511 16:53:52.936"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:52.937" starttime="20170511 16:53:52.935"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170511 16:53:52.937" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170511 16:53:54.975" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170511 16:53:54.975" starttime="20170511 16:53:52.937"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:54.975" starttime="20170511 16:53:52.930"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>systemctl restart xyz.openbmc_project.Logging.service</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170511 16:53:54.976" level="INFO">Executing command 'systemctl restart xyz.openbmc_project.Logging.service'.</msg>
<msg timestamp="20170511 16:53:55.465" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170511 16:53:55.465" level="INFO">${stdout} = </msg>
<msg timestamp="20170511 16:53:55.465" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170511 16:53:55.465" starttime="20170511 16:53:54.976"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170511 16:53:55.465" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170511 16:53:55.465" starttime="20170511 16:53:55.465"></status>
</kw>
<status status="PASS" endtime="20170511 16:53:55.466" starttime="20170511 16:53:54.976"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
<arg>reason=Wait for logging service to restart properly.</arg>
</arguments>
<msg timestamp="20170511 16:54:05.466" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20170511 16:54:05.467" level="INFO">Wait for logging service to restart properly.</msg>
<status status="PASS" endtime="20170511 16:54:05.467" starttime="20170511 16:53:55.466"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.467" starttime="20170511 16:53:52.925"></status>
</kw>
<msg timestamp="20170511 16:54:05.472" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170511 16:54:05.479" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170511 16:54:05.493" starttime="20170511 16:54:05.479"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.497" starttime="20170511 16:51:35.276"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170511 16:54:05.503" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170511 16:54:05.505" starttime="20170511 16:54:05.497"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.505" starttime="20170511 16:51:35.275"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.505" starttime="20170511 16:51:35.261"></status>
</kw>
<kw type="teardown" name="Validate Power On Teardown">
<doc>Teardown after Validate Power On.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Stop SOL Console Logging</arg>
<arg>\ targ_file_path=${EXECDIR}${/}logs${/}SOL.log</arg>
</arguments>
<assign>
<var>${keyword_buf}</var>
</assign>
<msg timestamp="20170511 16:54:05.506" level="INFO">${keyword_buf} = Stop SOL Console Logging  targ_file_path=/home/fspcibld/logs/SOL.log</msg>
<status status="PASS" endtime="20170511 16:54:05.506" starttime="20170511 16:54:05.506"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_buf}</arg>
</arguments>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>targ_file_path=/home/fspcibld/logs/SOL.log</arg>
</arguments>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170511 16:54:05.518" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170511 16:54:05.518" starttime="20170511 16:54:05.518"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170511 16:54:05.519" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170511 16:54:05.519" starttime="20170511 16:54:05.519"></status>
</kw>
<msg timestamp="20170511 16:54:05.520" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170511 16:54:05.520" starttime="20170511 16:54:05.517"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:54:05.520" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170511 16:54:05.520" starttime="20170511 16:54:05.520"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:05.521" starttime="20170511 16:54:05.521"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170511 16:54:05.535" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170511 16:54:05.538" level="INFO">${rc} = 0</msg>
<msg timestamp="20170511 16:54:05.539" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170511 16:54:05.539" starttime="20170511 16:54:05.521"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:05.542" starttime="20170511 16:54:05.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:05.544" starttime="20170511 16:54:05.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:54:05.545" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" endtime="20170511 16:54:05.545" starttime="20170511 16:54:05.544"></status>
</kw>
<msg timestamp="20170511 16:54:05.546" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" endtime="20170511 16:54:05.546" starttime="20170511 16:54:05.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:54:05.547" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170511 16:54:05.547" starttime="20170511 16:54:05.547"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:05.548" starttime="20170511 16:54:05.547"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170511 16:54:05.552" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170511 16:54:05.561" level="INFO">${rc} = 0</msg>
<msg timestamp="20170511 16:54:05.561" level="INFO">${os_con_pid} = 67</msg>
<status status="PASS" endtime="20170511 16:54:05.561" starttime="20170511 16:54:05.548"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:05.565" starttime="20170511 16:54:05.564"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:54:05.566" level="INFO">${cmd_buf} = kill -9 67</msg>
<status status="PASS" endtime="20170511 16:54:05.566" starttime="20170511 16:54:05.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:05.569" starttime="20170511 16:54:05.568"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.569" starttime="20170511 16:54:05.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170511 16:54:05.576" level="INFO">Running command 'kill -9 67 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20170511 16:54:05.581" starttime="20170511 16:54:05.570"></status>
</kw>
<msg timestamp="20170511 16:54:05.582" level="INFO">${rc} = 0</msg>
<msg timestamp="20170511 16:54:05.582" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170511 16:54:05.582" starttime="20170511 16:54:05.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:05.587" starttime="20170511 16:54:05.586"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.587" starttime="20170511 16:54:05.585"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170511 16:54:05.588" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170511 16:54:05.588" starttime="20170511 16:54:05.587"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:05.588" starttime="20170511 16:54:05.588"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170511 16:54:05.592" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170511 16:54:05.597" level="INFO">${rc} = 0</msg>
<msg timestamp="20170511 16:54:05.597" level="INFO">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status status="PASS" endtime="20170511 16:54:05.597" starttime="20170511 16:54:05.589"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:05.601" starttime="20170511 16:54:05.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170511 16:54:05.605" html="yes" level="INFO">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///home/fspcibld/logs/SOL.log"&gt;/home/fspcibld/logs/SOL.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 16:54:05.606" starttime="20170511 16:54:05.603"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.606" starttime="20170511 16:54:05.603"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.606" starttime="20170511 16:54:05.601"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.606" starttime="20170511 16:54:05.517"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.606" starttime="20170511 16:54:05.506"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.606" starttime="20170511 16:54:05.505"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.606" starttime="20170511 16:51:35.167"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:05.607" starttime="20170511 16:51:35.166"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170511 16:54:05.608" starttime="20170511 16:54:05.608"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170511 16:54:05.624" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170511 16:54:05.625" starttime="20170511 16:54:05.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170511 16:54:05.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170511 16:54:05.626" starttime="20170511 16:54:05.625"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170511 16:54:05.626" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170511 16:54:05.626" starttime="20170511 16:54:05.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170511 16:54:05.628" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170511 16:54:05.628" starttime="20170511 16:54:05.627"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170511 16:54:06.276" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170511 16:54:06.276" starttime="20170511 16:54:05.628"></status>
</kw>
<msg timestamp="20170511 16:54:06.276" level="INFO">${status} = PASS</msg>
<msg timestamp="20170511 16:54:06.276" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:54:06.276" starttime="20170511 16:54:05.628"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170511 16:54:06.277" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:54:06.277" starttime="20170511 16:54:06.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:54:06.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:54:06.278" starttime="20170511 16:54:06.277"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:06.278" starttime="20170511 16:54:05.623"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:06.278" starttime="20170511 16:54:05.622"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:06.278" starttime="20170511 16:54:05.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170511 16:54:06.279" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170511 16:54:06.279" starttime="20170511 16:54:06.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:06.280" starttime="20170511 16:54:06.279"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170511 16:54:06.377" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170511 16:54:06.377" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:54:06.377" starttime="20170511 16:54:06.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:06.378" starttime="20170511 16:54:06.378"></status>
</kw>
<msg timestamp="20170511 16:54:06.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170511 16:54:06.378" starttime="20170511 16:54:05.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170511 16:54:06.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170511 16:54:06.379" starttime="20170511 16:54:06.378"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170511 16:54:06.379" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170511 16:54:06.379" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170511 16:54:06.380" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170511 16:54:06.380" starttime="20170511 16:54:06.379"></status>
</kw>
<msg timestamp="20170511 16:54:06.380" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170511 16:54:06.380" starttime="20170511 16:54:05.619"></status>
</kw>
<msg timestamp="20170511 16:54:06.380" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170511 16:54:06.380" starttime="20170511 16:54:05.619"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170511 16:54:06.381" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" endtime="20170511 16:54:06.381" starttime="20170511 16:54:06.381"></status>
</kw>
<msg timestamp="20170511 16:54:06.382" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 16:54:06.382" starttime="20170511 16:54:06.381"></status>
</kw>
<msg timestamp="20170511 16:54:06.382" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170511 16:54:06.382" starttime="20170511 16:54:05.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:06.382" starttime="20170511 16:54:06.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:06.383" starttime="20170511 16:54:06.383"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170511 16:54:06.384" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170511 16:54:06.384" starttime="20170511 16:54:06.384"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170511 16:54:06.385" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20170511 16:54:06.385" starttime="20170511 16:54:06.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:06.385" starttime="20170511 16:54:06.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:06.386" starttime="20170511 16:54:06.386"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170511 16:54:06.387" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170511 16:54:06.387" starttime="20170511 16:54:06.386"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170511 16:54:06.388" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170511 16:54:06.388" starttime="20170511 16:54:06.387"></status>
</kw>
<msg timestamp="20170511 16:54:06.388" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170511 16:54:06.388" starttime="20170511 16:54:06.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:06.388" starttime="20170511 16:54:06.388"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170511 16:54:06.389" starttime="20170511 16:54:06.389"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 16:54:06.390" level="INFO">${cur_time} = 2017-05-11 16:54:06:390006</msg>
<status status="PASS" endtime="20170511 16:54:06.390" starttime="20170511 16:54:06.390"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170511 16:54:06.391" level="INFO">${cur_time} = 20170511165406390006</msg>
<status status="PASS" endtime="20170511 16:54:06.391" starttime="20170511 16:54:06.390"></status>
</kw>
<msg timestamp="20170511 16:54:06.391" level="INFO">${cur_time} = 20170511165406390006</msg>
<status status="PASS" endtime="20170511 16:54:06.391" starttime="20170511 16:54:06.389"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170511 16:54:06.392" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170511 16:54:06.392" starttime="20170511 16:54:06.392"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:06.392" starttime="20170511 16:54:06.383"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:06.392" starttime="20170511 16:54:05.618"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:06.393" starttime="20170511 16:54:05.608"></status>
</kw>
<status status="PASS" endtime="20170511 16:54:06.393" starttime="20170511 16:54:05.607"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170511 16:54:06.393" critical="yes" starttime="20170511 16:51:35.165"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="PASS" endtime="20170511 16:54:06.394" starttime="20170511 16:46:58.697"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="2">Critical Tests</stat>
<stat fail="0" pass="2">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="0" pass="1">Host_BIOS_Update</stat>
<stat fail="0" pass="2">open-power</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Test Bios Update" pass="2">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
