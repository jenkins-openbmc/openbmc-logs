<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170929 17:54:09.791" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:54:10.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:54:10.929" starttime="20170929 17:54:10.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:10.930" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:54:10.930" starttime="20170929 17:54:10.929"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:54:10.931" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:54:10.931" starttime="20170929 17:54:10.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:54:10.931" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:54:10.931" starttime="20170929 17:54:10.931"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:54:11.129" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:54:11.129" starttime="20170929 17:54:10.932"></status>
</kw>
<msg timestamp="20170929 17:54:11.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:11.129" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:11.129" starttime="20170929 17:54:10.932"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:54:11.130" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:11.130" starttime="20170929 17:54:11.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:11.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:11.131" starttime="20170929 17:54:11.130"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:11.131" starttime="20170929 17:54:10.927"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:11.131" starttime="20170929 17:54:10.927"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:11.131" starttime="20170929 17:54:10.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:54:11.132" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170929 17:54:11.132" starttime="20170929 17:54:11.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:11.133" starttime="20170929 17:54:11.132"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:54:11.176" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170929 17:54:11.176" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:11.176" starttime="20170929 17:54:11.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:11.177" starttime="20170929 17:54:11.176"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:54:11.177" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:54:11.177" starttime="20170929 17:54:11.177"></status>
</kw>
<msg timestamp="20170929 17:54:11.177" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:11.178" starttime="20170929 17:54:10.925"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 17:54:11.178" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 17:54:11.178" starttime="20170929 17:54:11.178"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:11.179" starttime="20170929 17:54:10.925"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:11.179" starttime="20170929 17:54:10.924"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170929 17:54:11.186" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170929 17:54:11.186" starttime="20170929 17:54:11.186"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170929 17:54:11.218" level="INFO">${image_version} = v1.99.10-78-g3f526eb</msg>
<status status="PASS" endtime="20170929 17:54:11.218" starttime="20170929 17:54:11.186"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170929 17:54:11.219" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170929 17:54:22.020" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170929 17:54:22.020" starttime="20170929 17:54:11.219"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:54:22.023" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:54:22.024" starttime="20170929 17:54:22.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:22.024" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:54:22.024" starttime="20170929 17:54:22.024"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:54:22.025" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:54:22.025" starttime="20170929 17:54:22.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:54:22.026" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:54:22.026" starttime="20170929 17:54:22.025"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:54:22.204" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:54:22.204" starttime="20170929 17:54:22.027"></status>
</kw>
<msg timestamp="20170929 17:54:22.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:22.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:22.204" starttime="20170929 17:54:22.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:54:22.205" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:22.205" starttime="20170929 17:54:22.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:22.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:22.206" starttime="20170929 17:54:22.205"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:22.206" starttime="20170929 17:54:22.022"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:22.206" starttime="20170929 17:54:22.022"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:22.206" starttime="20170929 17:54:22.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:54:22.207" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170929 17:54:22.207" starttime="20170929 17:54:22.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:22.207" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170929 17:54:22.207" starttime="20170929 17:54:22.207"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:22.208" starttime="20170929 17:54:22.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:22.209" starttime="20170929 17:54:22.208"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:54:32.225" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20170929 17:54:32.226" starttime="20170929 17:54:22.209"></status>
</kw>
<status status="FAIL" endtime="20170929 17:54:32.226" starttime="20170929 17:54:22.020"></status>
</kw>
<status status="FAIL" endtime="20170929 17:54:32.226" starttime="20170929 17:54:11.179"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170929 17:54:32.244" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170929 17:54:32.244" starttime="20170929 17:54:32.243"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170929 17:54:32.248" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170929 17:54:35.255" level="INFO">${RC} = 0</msg>
<msg timestamp="20170929 17:54:35.255" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.41 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.620 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170929 17:54:35.255" starttime="20170929 17:54:32.244"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.259" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.41 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.620 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.615 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.619 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.615/1.067/2.414/0.777 ms</msg>
<status status="PASS" endtime="20170929 17:54:35.259" starttime="20170929 17:54:35.258"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:35.259" starttime="20170929 17:54:35.259"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.260" starttime="20170929 17:54:32.242"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 17:54:35.275" level="INFO">${cur_time} = 2017-09-29 17:54:35:274673</msg>
<status status="PASS" endtime="20170929 17:54:35.275" starttime="20170929 17:54:35.274"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 17:54:35.276" level="INFO">${cur_time} = 20170929175435274673</msg>
<status status="PASS" endtime="20170929 17:54:35.276" starttime="20170929 17:54:35.275"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.276" starttime="20170929 17:54:35.274"></status>
</kw>
<msg timestamp="20170929 17:54:35.282" level="INFO">${FFDC_TIME} = 20170929175435274673</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170929 17:54:35.284" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170929 17:54:35.284" starttime="20170929 17:54:35.283"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170929 17:54:35.284" level="INFO">${suite_name} = 20170929175435274673_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170929 17:54:35.284" starttime="20170929 17:54:35.284"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170929 17:54:35.285" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170929 17:54:35.285" starttime="20170929 17:54:35.285"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170929 17:54:35.286" level="INFO">${test_name} = 20170929175435274673_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170929 17:54:35.286" starttime="20170929 17:54:35.285"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.286" starttime="20170929 17:54:35.283"></status>
</kw>
<msg timestamp="20170929 17:54:35.291" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170929 17:54:35.297" level="INFO">${FFDC_PREFIX} = 20170929175435274673_</msg>
<msg timestamp="20170929 17:54:35.321" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170929 17:54:35.322" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.322" starttime="20170929 17:54:35.322"></status>
</kw>
<msg timestamp="20170929 17:54:35.328" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.342" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.342" starttime="20170929 17:54:35.341"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.342" starttime="20170929 17:54:35.341"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.343" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.343" starttime="20170929 17:54:35.343"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.343" starttime="20170929 17:54:35.342"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.344" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.345" starttime="20170929 17:54:35.344"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.345" starttime="20170929 17:54:35.343"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.346" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.346" starttime="20170929 17:54:35.346"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.346" starttime="20170929 17:54:35.345"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.347" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.348" starttime="20170929 17:54:35.347"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.348" starttime="20170929 17:54:35.346"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.349" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.349" starttime="20170929 17:54:35.349"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.349" starttime="20170929 17:54:35.348"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.351" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.351" starttime="20170929 17:54:35.350"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.351" starttime="20170929 17:54:35.349"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.352" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.353" starttime="20170929 17:54:35.352"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.353" starttime="20170929 17:54:35.351"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.355" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.355" starttime="20170929 17:54:35.354"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.355" starttime="20170929 17:54:35.354"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.356" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.356" starttime="20170929 17:54:35.356"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.357" starttime="20170929 17:54:35.355"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.358" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.358" starttime="20170929 17:54:35.357"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.358" starttime="20170929 17:54:35.357"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.359" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.359" starttime="20170929 17:54:35.359"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.359" starttime="20170929 17:54:35.358"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:35.360" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:35.361" starttime="20170929 17:54:35.360"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:35.361" starttime="20170929 17:54:35.359"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170929 17:54:35.387" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:35.387" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170929 17:54:36.185" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170929 17:54:36.185" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170929 17:54:36.282" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170929 17:54:36.292" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170929 17:54:36.292" level="INFO">${stderr} = </msg>
<msg timestamp="20170929 17:54:36.292" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170929 17:54:36.292" starttime="20170929 17:54:35.361"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.293" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170929 17:54:36.293" starttime="20170929 17:54:36.293"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.294" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170929 17:54:36.294" starttime="20170929 17:54:36.293"></status>
</kw>
<msg timestamp="20170929 17:54:36.294" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170929 17:54:36.294" starttime="20170929 17:54:35.361"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.295" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.295" starttime="20170929 17:54:36.295"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.295" starttime="20170929 17:54:36.294"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.296" starttime="20170929 17:54:35.355"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.297" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.297" starttime="20170929 17:54:36.297"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.297" starttime="20170929 17:54:36.296"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 17:54:36.298" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170929 17:54:36.298" starttime="20170929 17:54:36.298"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.300" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.300" starttime="20170929 17:54:36.299"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.300" starttime="20170929 17:54:36.298"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.301" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.301" starttime="20170929 17:54:36.301"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.301" starttime="20170929 17:54:36.300"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.301" starttime="20170929 17:54:36.298"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.303" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.303" starttime="20170929 17:54:36.302"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.303" starttime="20170929 17:54:36.302"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.304" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.304" starttime="20170929 17:54:36.303"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.305" starttime="20170929 17:54:36.303"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.305" starttime="20170929 17:54:36.301"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.306" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.306" starttime="20170929 17:54:36.306"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.306" starttime="20170929 17:54:36.305"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.307" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.307" starttime="20170929 17:54:36.307"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.308" starttime="20170929 17:54:36.306"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.308" starttime="20170929 17:54:36.305"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.308" starttime="20170929 17:54:36.298"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.309" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.309" starttime="20170929 17:54:36.308"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.309" starttime="20170929 17:54:36.308"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.309" starttime="20170929 17:54:35.340"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 17:54:36.316" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170929 17:54:36.316" starttime="20170929 17:54:36.315"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170929 17:54:36.317" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170929 17:54:36.317" starttime="20170929 17:54:36.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:36.319" starttime="20170929 17:54:36.318"></status>
</kw>
<msg timestamp="20170929 17:54:36.319" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170929 17:54:36.319" starttime="20170929 17:54:36.318"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:36.321" starttime="20170929 17:54:36.321"></status>
</kw>
<msg timestamp="20170929 17:54:36.321" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:36.321" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 17:54:36.321" starttime="20170929 17:54:36.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:36.322" starttime="20170929 17:54:36.322"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 17:54:36.341" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170929 17:54:36.341" starttime="20170929 17:54:36.341"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 17:54:36.342" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170929 17:54:36.342" starttime="20170929 17:54:36.342"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.348" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170929 17:54:36.348" starttime="20170929 17:54:36.343"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.352" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.352" starttime="20170929 17:54:36.351"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.352" starttime="20170929 17:54:36.351"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.353" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.354" starttime="20170929 17:54:36.353"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.354" starttime="20170929 17:54:36.352"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.356" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.357" starttime="20170929 17:54:36.354"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.357" starttime="20170929 17:54:36.354"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:36.358" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:36.358" starttime="20170929 17:54:36.357"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.358" starttime="20170929 17:54:36.357"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.358" starttime="20170929 17:54:36.350"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:36.358" starttime="20170929 17:54:36.350"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:36.359" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:36.359" starttime="20170929 17:54:36.359"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:36.418" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:36.418" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170929 17:54:37.764" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:37.765" starttime="20170929 17:54:36.386"></status>
</kw>
<msg timestamp="20170929 17:54:37.765" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:37.765" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170929 17:54:37.765" starttime="20170929 17:54:36.359"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:54:37.766" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170929 17:54:37.766" starttime="20170929 17:54:37.765"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:54:37.766" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:54:37.766" starttime="20170929 17:54:37.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.774" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.774" starttime="20170929 17:54:37.774"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.774" starttime="20170929 17:54:37.773"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.774" starttime="20170929 17:54:37.767"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.774" starttime="20170929 17:54:36.349"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.774" starttime="20170929 17:54:36.349"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.774" starttime="20170929 17:54:36.348"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.775" starttime="20170929 17:54:36.341"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.775" starttime="20170929 17:54:36.341"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 17:54:37.776" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170929 17:54:37.776" starttime="20170929 17:54:37.775"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.777" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170929 17:54:37.777" starttime="20170929 17:54:37.776"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.780" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.780" starttime="20170929 17:54:37.779"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.780" starttime="20170929 17:54:37.779"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.782" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.782" starttime="20170929 17:54:37.781"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.782" starttime="20170929 17:54:37.780"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.783" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.783" starttime="20170929 17:54:37.783"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.783" starttime="20170929 17:54:37.782"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.784" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.784" starttime="20170929 17:54:37.784"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.784" starttime="20170929 17:54:37.783"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.785" starttime="20170929 17:54:37.778"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.785" starttime="20170929 17:54:37.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:37.785" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:37.785" starttime="20170929 17:54:37.785"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:37.842" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:37.842" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170929 17:54:37.911" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:37.911" starttime="20170929 17:54:37.809"></status>
</kw>
<msg timestamp="20170929 17:54:37.911" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:37.911" level="INFO">${ret_values} = (u'20170929172150', u'', 0)</msg>
<status status="PASS" endtime="20170929 17:54:37.911" starttime="20170929 17:54:37.786"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:54:37.912" level="INFO">${stdout} = 20170929172150</msg>
<status status="PASS" endtime="20170929 17:54:37.912" starttime="20170929 17:54:37.912"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:54:37.913" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:54:37.913" starttime="20170929 17:54:37.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.920" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.920" starttime="20170929 17:54:37.920"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.920" starttime="20170929 17:54:37.919"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.920" starttime="20170929 17:54:37.913"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.921" starttime="20170929 17:54:37.777"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.921" starttime="20170929 17:54:37.777"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.924" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.924" starttime="20170929 17:54:37.923"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.924" starttime="20170929 17:54:37.923"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.925" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.925" starttime="20170929 17:54:37.925"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.925" starttime="20170929 17:54:37.924"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.926" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.926" starttime="20170929 17:54:37.926"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.927" starttime="20170929 17:54:37.925"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:37.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:37.928" starttime="20170929 17:54:37.927"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.928" starttime="20170929 17:54:37.927"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.928" starttime="20170929 17:54:37.922"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:37.928" starttime="20170929 17:54:37.922"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:37.929" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:37.929" starttime="20170929 17:54:37.929"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:37.986" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:37.986" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170929 17:54:38.043" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:38.043" starttime="20170929 17:54:37.954"></status>
</kw>
<msg timestamp="20170929 17:54:38.043" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:38.044" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-77"\nVERSION_ID="v1.99.10-77-g348439b"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170929 17:54:38.044" starttime="20170929 17:54:37.930"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:54:38.044" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-77"
VERSION_ID="v1.99.10-77-g348439b"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170929 17:54:38.044" starttime="20170929 17:54:38.044"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:54:38.045" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:54:38.045" starttime="20170929 17:54:38.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.053" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.053" starttime="20170929 17:54:38.052"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.053" starttime="20170929 17:54:38.051"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.053" starttime="20170929 17:54:38.045"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.053" starttime="20170929 17:54:37.921"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.053" starttime="20170929 17:54:37.921"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.053" starttime="20170929 17:54:37.777"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.053" starttime="20170929 17:54:37.775"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.053" starttime="20170929 17:54:37.775"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 17:54:38.054" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170929 17:54:38.054" starttime="20170929 17:54:38.054"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.055" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170929 17:54:38.055" starttime="20170929 17:54:38.055"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.058" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.058" starttime="20170929 17:54:38.058"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.058" starttime="20170929 17:54:38.057"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.060" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.060" starttime="20170929 17:54:38.059"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.060" starttime="20170929 17:54:38.059"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.061" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.061" starttime="20170929 17:54:38.061"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.061" starttime="20170929 17:54:38.060"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.063" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.063" starttime="20170929 17:54:38.062"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.063" starttime="20170929 17:54:38.061"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.063" starttime="20170929 17:54:38.057"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.063" starttime="20170929 17:54:38.056"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:38.064" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:38.064" starttime="20170929 17:54:38.063"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:38.119" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:38.120" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170929 17:54:38.166" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:38.166" starttime="20170929 17:54:38.088"></status>
</kw>
<msg timestamp="20170929 17:54:38.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:38.167" level="INFO">${ret_values} = (u' 17:54:52 up 21 min,  load average: 0.75, 1.40, 1.37', u'', 0)</msg>
<status status="PASS" endtime="20170929 17:54:38.167" starttime="20170929 17:54:38.064"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:54:38.167" level="INFO">${stdout} =  17:54:52 up 21 min,  load average: 0.75, 1.40, 1.37</msg>
<status status="PASS" endtime="20170929 17:54:38.167" starttime="20170929 17:54:38.167"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:54:38.168" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:54:38.168" starttime="20170929 17:54:38.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.176" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.176" starttime="20170929 17:54:38.175"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.176" starttime="20170929 17:54:38.175"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.176" starttime="20170929 17:54:38.168"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.176" starttime="20170929 17:54:38.056"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.176" starttime="20170929 17:54:38.055"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.179" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.179" starttime="20170929 17:54:38.179"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.179" starttime="20170929 17:54:38.178"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.181" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.181" starttime="20170929 17:54:38.180"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.181" starttime="20170929 17:54:38.180"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.182" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.182" starttime="20170929 17:54:38.182"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.182" starttime="20170929 17:54:38.181"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.184" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.184" starttime="20170929 17:54:38.183"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.184" starttime="20170929 17:54:38.182"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.184" starttime="20170929 17:54:38.178"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.184" starttime="20170929 17:54:38.177"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:38.185" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:38.185" starttime="20170929 17:54:38.184"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:38.246" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:38.246" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170929 17:54:38.304" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:38.304" starttime="20170929 17:54:38.210"></status>
</kw>
<msg timestamp="20170929 17:54:38.304" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:38.304" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170929 17:54:38.304" starttime="20170929 17:54:38.185"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:54:38.305" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170929 17:54:38.305" starttime="20170929 17:54:38.305"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:54:38.306" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:54:38.306" starttime="20170929 17:54:38.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.314" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.314" starttime="20170929 17:54:38.313"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.314" starttime="20170929 17:54:38.312"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.314" starttime="20170929 17:54:38.306"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.314" starttime="20170929 17:54:38.177"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.314" starttime="20170929 17:54:38.176"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.317" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.317" starttime="20170929 17:54:38.317"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.317" starttime="20170929 17:54:38.316"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.319" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.319" starttime="20170929 17:54:38.318"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.319" starttime="20170929 17:54:38.318"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.320" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.320" starttime="20170929 17:54:38.320"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.320" starttime="20170929 17:54:38.319"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.321" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.321" starttime="20170929 17:54:38.321"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.322" starttime="20170929 17:54:38.320"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.322" starttime="20170929 17:54:38.316"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.322" starttime="20170929 17:54:38.315"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:38.323" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:38.323" starttime="20170929 17:54:38.322"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:38.381" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:38.382" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170929 17:54:38.440" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:38.440" starttime="20170929 17:54:38.347"></status>
</kw>
<msg timestamp="20170929 17:54:38.440" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:38.440" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170929 17:54:38.440" starttime="20170929 17:54:38.323"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:54:38.441" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170929 17:54:38.441" starttime="20170929 17:54:38.441"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:54:38.442" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:54:38.442" starttime="20170929 17:54:38.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.450" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:38.449"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:38.449"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:38.443"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:38.314"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:38.314"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:38.055"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:38.053"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:38.053"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:36.341"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.450" starttime="20170929 17:54:36.340"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.451" starttime="20170929 17:54:36.322"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.451" starttime="20170929 17:54:36.319"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.451" starttime="20170929 17:54:36.319"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:38.453" starttime="20170929 17:54:38.452"></status>
</kw>
<msg timestamp="20170929 17:54:38.453" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:38.453" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 17:54:38.453" starttime="20170929 17:54:38.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:38.453" starttime="20170929 17:54:38.453"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 17:54:38.472" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170929 17:54:38.472" starttime="20170929 17:54:38.472"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 17:54:38.474" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170929 17:54:38.474" starttime="20170929 17:54:38.473"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:38.475" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170929 17:54:38.475" starttime="20170929 17:54:38.474"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:54:38.478" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:54:38.478" starttime="20170929 17:54:38.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:38.479" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:54:38.479" starttime="20170929 17:54:38.478"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:54:38.479" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:54:38.480" starttime="20170929 17:54:38.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:54:38.481" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:54:38.481" starttime="20170929 17:54:38.480"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.700" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:54:38.700" starttime="20170929 17:54:38.482"></status>
</kw>
<msg timestamp="20170929 17:54:38.700" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:38.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:38.700" starttime="20170929 17:54:38.482"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.701" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:38.701" starttime="20170929 17:54:38.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:38.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:38.702" starttime="20170929 17:54:38.701"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.702" starttime="20170929 17:54:38.477"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.702" starttime="20170929 17:54:38.476"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:38.702" starttime="20170929 17:54:38.476"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:54:38.703" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170929 17:54:38.703" starttime="20170929 17:54:38.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:38.704" starttime="20170929 17:54:38.703"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:54:39.280" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 17:54:39.280" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.280" starttime="20170929 17:54:38.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:39.281" starttime="20170929 17:54:39.281"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:54:39.282" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:54:39.282" starttime="20170929 17:54:39.282"></status>
</kw>
<msg timestamp="20170929 17:54:39.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.282" starttime="20170929 17:54:38.475"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.283" starttime="20170929 17:54:39.283"></status>
</kw>
<msg timestamp="20170929 17:54:39.283" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 17:54:39.283" starttime="20170929 17:54:39.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:39.284" starttime="20170929 17:54:39.284"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 17:54:39.285" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 8000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24330
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 207000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 281
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 17:54:39.285" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 17:54:39.286" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170929 17:54:39.286" starttime="20170929 17:54:39.284"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.287" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:39.287" starttime="20170929 17:54:39.287"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.287" starttime="20170929 17:54:39.286"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.287" starttime="20170929 17:54:38.474"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:39.288" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_OCC_state.txt</msg>
<status status="PASS" endtime="20170929 17:54:39.288" starttime="20170929 17:54:39.288"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:54:39.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:54:39.292" starttime="20170929 17:54:39.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:39.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:54:39.292" starttime="20170929 17:54:39.292"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:54:39.293" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:54:39.293" starttime="20170929 17:54:39.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:54:39.293" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:54:39.294" starttime="20170929 17:54:39.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.478" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:54:39.478" starttime="20170929 17:54:39.294"></status>
</kw>
<msg timestamp="20170929 17:54:39.478" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:39.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.479" starttime="20170929 17:54:39.294"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.479" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.479" starttime="20170929 17:54:39.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.480" starttime="20170929 17:54:39.480"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.480" starttime="20170929 17:54:39.290"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.480" starttime="20170929 17:54:39.290"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.480" starttime="20170929 17:54:39.289"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:54:39.481" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170929 17:54:39.481" starttime="20170929 17:54:39.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:39.482" starttime="20170929 17:54:39.481"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:54:39.627" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 17:54:39.627" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.628" starttime="20170929 17:54:39.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:39.628" starttime="20170929 17:54:39.628"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:54:39.629" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:54:39.629" starttime="20170929 17:54:39.629"></status>
</kw>
<msg timestamp="20170929 17:54:39.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.629" starttime="20170929 17:54:39.289"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.630" starttime="20170929 17:54:39.630"></status>
</kw>
<msg timestamp="20170929 17:54:39.630" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 17:54:39.630" starttime="20170929 17:54:39.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:39.631" starttime="20170929 17:54:39.631"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 17:54:39.632" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 17:54:39.632" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 17:54:39.632" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170929 17:54:39.632" starttime="20170929 17:54:39.631"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.634" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_OCC_state.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:39.634" starttime="20170929 17:54:39.633"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.634" starttime="20170929 17:54:39.632"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.634" starttime="20170929 17:54:39.288"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:39.635" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170929 17:54:39.635" starttime="20170929 17:54:39.635"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:54:39.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:54:39.638" starttime="20170929 17:54:39.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:39.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:54:39.639" starttime="20170929 17:54:39.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:54:39.640" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:54:39.640" starttime="20170929 17:54:39.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:54:39.640" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:54:39.640" starttime="20170929 17:54:39.640"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.822" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:54:39.823" starttime="20170929 17:54:39.641"></status>
</kw>
<msg timestamp="20170929 17:54:39.823" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:39.823" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.823" starttime="20170929 17:54:39.641"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.823" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.824" starttime="20170929 17:54:39.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:39.824" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:39.824" starttime="20170929 17:54:39.824"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.824" starttime="20170929 17:54:39.637"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.825" starttime="20170929 17:54:39.637"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:39.825" starttime="20170929 17:54:39.636"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:54:39.825" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170929 17:54:39.825" starttime="20170929 17:54:39.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:39.826" starttime="20170929 17:54:39.826"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:54:40.169" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 17:54:40.169" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:40.169" starttime="20170929 17:54:39.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:40.170" starttime="20170929 17:54:40.170"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:54:40.170" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:54:40.171" starttime="20170929 17:54:40.170"></status>
</kw>
<msg timestamp="20170929 17:54:40.171" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:40.171" starttime="20170929 17:54:39.635"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:40.172" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:40.172" starttime="20170929 17:54:40.172"></status>
</kw>
<msg timestamp="20170929 17:54:40.172" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 17:54:40.172" starttime="20170929 17:54:40.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:40.173" starttime="20170929 17:54:40.172"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 17:54:40.174" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 17:54:40.174" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 17:54:40.174" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170929 17:54:40.174" starttime="20170929 17:54:40.173"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:40.175" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:40.175" starttime="20170929 17:54:40.175"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:40.175" starttime="20170929 17:54:40.174"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:40.175" starttime="20170929 17:54:39.634"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:40.176" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_led.txt</msg>
<status status="PASS" endtime="20170929 17:54:40.176" starttime="20170929 17:54:40.176"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:54:40.179" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:54:40.179" starttime="20170929 17:54:40.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:40.180" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:54:40.180" starttime="20170929 17:54:40.180"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:54:40.181" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:54:40.181" starttime="20170929 17:54:40.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:54:40.181" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:54:40.181" starttime="20170929 17:54:40.181"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:54:40.371" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:54:40.372" starttime="20170929 17:54:40.182"></status>
</kw>
<msg timestamp="20170929 17:54:40.372" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:40.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:40.372" starttime="20170929 17:54:40.182"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:54:40.372" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:40.372" starttime="20170929 17:54:40.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:40.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:40.373" starttime="20170929 17:54:40.373"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:40.373" starttime="20170929 17:54:40.178"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:40.373" starttime="20170929 17:54:40.178"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:40.373" starttime="20170929 17:54:40.177"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:54:40.374" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170929 17:54:40.374" starttime="20170929 17:54:40.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:40.375" starttime="20170929 17:54:40.374"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:54:41.982" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 17:54:41.982" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:41.982" starttime="20170929 17:54:40.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:41.983" starttime="20170929 17:54:41.982"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:54:41.983" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:54:41.983" starttime="20170929 17:54:41.983"></status>
</kw>
<msg timestamp="20170929 17:54:41.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:41.983" starttime="20170929 17:54:40.176"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:41.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:41.985" starttime="20170929 17:54:41.984"></status>
</kw>
<msg timestamp="20170929 17:54:41.985" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 17:54:41.985" starttime="20170929 17:54:41.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:41.985" starttime="20170929 17:54:41.985"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 17:54:41.987" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 17:54:41.988" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 17:54:41.988" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170929 17:54:41.988" starttime="20170929 17:54:41.986"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:41.989" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_led.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:41.990" starttime="20170929 17:54:41.989"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:41.990" starttime="20170929 17:54:41.988"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:41.990" starttime="20170929 17:54:40.176"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:41.991" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170929 17:54:41.991" starttime="20170929 17:54:41.990"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:54:41.993" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:54:41.994" starttime="20170929 17:54:41.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:41.994" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:54:41.994" starttime="20170929 17:54:41.994"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:54:41.995" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:54:41.995" starttime="20170929 17:54:41.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:54:41.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:54:41.996" starttime="20170929 17:54:41.996"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:54:42.177" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:54:42.177" starttime="20170929 17:54:41.997"></status>
</kw>
<msg timestamp="20170929 17:54:42.177" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:42.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.178" starttime="20170929 17:54:41.996"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:54:42.178" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.178" starttime="20170929 17:54:42.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:42.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.179" starttime="20170929 17:54:42.179"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.179" starttime="20170929 17:54:41.992"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.179" starttime="20170929 17:54:41.992"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.179" starttime="20170929 17:54:41.991"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:54:42.180" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170929 17:54:42.180" starttime="20170929 17:54:42.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:42.181" starttime="20170929 17:54:42.180"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:54:42.602" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 17:54:42.602" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.602" starttime="20170929 17:54:42.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:42.603" starttime="20170929 17:54:42.603"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:54:42.603" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:54:42.604" starttime="20170929 17:54:42.603"></status>
</kw>
<msg timestamp="20170929 17:54:42.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.604" starttime="20170929 17:54:41.991"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:42.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.605" starttime="20170929 17:54:42.605"></status>
</kw>
<msg timestamp="20170929 17:54:42.605" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 17:54:42.605" starttime="20170929 17:54:42.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:42.606" starttime="20170929 17:54:42.605"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 17:54:42.607" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7bf5cb2c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-77-g348439b", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7bf5cb2c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/7bf5cb2c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/dde6793f", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/7bf5cb2c"
      ]
    }, 
    "/xyz/openbmc_project/software/dde6793f": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-75-g8276d5b", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/dde6793f/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/dde6793f/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7bf5cb2c"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 17:54:42.607" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 17:54:42.607" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status status="PASS" endtime="20170929 17:54:42.607" starttime="20170929 17:54:42.606"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:42.609" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:42.609" starttime="20170929 17:54:42.608"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.609" starttime="20170929 17:54:42.607"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.609" starttime="20170929 17:54:41.990"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:42.610" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_elog.txt</msg>
<status status="PASS" endtime="20170929 17:54:42.610" starttime="20170929 17:54:42.609"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:54:42.612" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:54:42.613" starttime="20170929 17:54:42.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:42.614" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:54:42.614" starttime="20170929 17:54:42.613"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:54:42.614" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:54:42.614" starttime="20170929 17:54:42.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:54:42.615" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:54:42.615" starttime="20170929 17:54:42.615"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:54:42.809" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:54:42.809" starttime="20170929 17:54:42.616"></status>
</kw>
<msg timestamp="20170929 17:54:42.809" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:42.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.809" starttime="20170929 17:54:42.615"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:54:42.810" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.810" starttime="20170929 17:54:42.809"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:42.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.810" starttime="20170929 17:54:42.810"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.810" starttime="20170929 17:54:42.612"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.810" starttime="20170929 17:54:42.611"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.811" starttime="20170929 17:54:42.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:54:42.811" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170929 17:54:42.811" starttime="20170929 17:54:42.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:42.812" starttime="20170929 17:54:42.812"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:54:42.854" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 17:54:42.854" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.854" starttime="20170929 17:54:42.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:42.855" starttime="20170929 17:54:42.855"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:54:42.855" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:54:42.856" starttime="20170929 17:54:42.855"></status>
</kw>
<msg timestamp="20170929 17:54:42.856" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:42.856" starttime="20170929 17:54:42.610"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:42.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170929 17:54:42.857" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170929 17:54:42.857" starttime="20170929 17:54:42.857"></status>
</kw>
<msg timestamp="20170929 17:54:42.857" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170929 17:54:42.857" starttime="20170929 17:54:42.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170929 17:54:42.858" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170929 17:54:42.858" starttime="20170929 17:54:42.858"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.858" starttime="20170929 17:54:42.858"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:42.858" starttime="20170929 17:54:42.609"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:42.859" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170929 17:54:42.859" starttime="20170929 17:54:42.859"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:54:42.862" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:54:42.864" starttime="20170929 17:54:42.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:54:42.865" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:54:42.865" starttime="20170929 17:54:42.865"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:54:42.866" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:54:42.866" starttime="20170929 17:54:42.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:54:42.866" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:54:42.867" starttime="20170929 17:54:42.866"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:54:43.057" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:54:43.057" starttime="20170929 17:54:42.867"></status>
</kw>
<msg timestamp="20170929 17:54:43.057" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:43.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:43.057" starttime="20170929 17:54:42.867"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:54:43.058" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:43.058" starttime="20170929 17:54:43.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:43.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:43.058" starttime="20170929 17:54:43.058"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:43.058" starttime="20170929 17:54:42.861"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:43.059" starttime="20170929 17:54:42.861"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:43.059" starttime="20170929 17:54:42.860"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:54:43.060" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170929 17:54:43.060" starttime="20170929 17:54:43.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:43.060" starttime="20170929 17:54:43.060"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:54:45.254" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 17:54:45.254" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:45.254" starttime="20170929 17:54:43.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:45.255" starttime="20170929 17:54:45.255"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:54:45.256" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:54:45.256" starttime="20170929 17:54:45.256"></status>
</kw>
<msg timestamp="20170929 17:54:45.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:54:45.256" starttime="20170929 17:54:42.860"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:54:45.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:54:45.257" starttime="20170929 17:54:45.257"></status>
</kw>
<msg timestamp="20170929 17:54:45.258" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 17:54:45.258" starttime="20170929 17:54:45.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:45.258" starttime="20170929 17:54:45.258"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 17:54:45.261" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/dde6793f", 
        "/xyz/openbmc_project/software/7bf5cb2c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 17:54:45.262" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 17:54:45.262" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170929 17:54:45.262" starttime="20170929 17:54:45.258"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:45.264" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:45.264" starttime="20170929 17:54:45.263"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.264" starttime="20170929 17:54:45.262"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.264" starttime="20170929 17:54:42.859"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.264" starttime="20170929 17:54:38.474"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.264" starttime="20170929 17:54:38.473"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.264" starttime="20170929 17:54:38.473"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.264" starttime="20170929 17:54:38.472"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.264" starttime="20170929 17:54:38.471"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.265" starttime="20170929 17:54:38.454"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.265" starttime="20170929 17:54:38.451"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.265" starttime="20170929 17:54:38.451"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:45.267" starttime="20170929 17:54:45.266"></status>
</kw>
<msg timestamp="20170929 17:54:45.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:45.267" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 17:54:45.267" starttime="20170929 17:54:45.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:45.267" starttime="20170929 17:54:45.267"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:45.289" starttime="20170929 17:54:45.287"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170929 17:54:45.292" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170929 17:54:45.292" starttime="20170929 17:54:45.290"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.292" starttime="20170929 17:54:45.285"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.292" starttime="20170929 17:54:45.268"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.292" starttime="20170929 17:54:45.265"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:45.292" starttime="20170929 17:54:45.265"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:45.294" starttime="20170929 17:54:45.294"></status>
</kw>
<msg timestamp="20170929 17:54:45.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:45.294" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 17:54:45.294" starttime="20170929 17:54:45.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:45.295" starttime="20170929 17:54:45.295"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170929 17:54:45.347" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:45.350" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170929 17:54:45.396" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170929 17:54:45.409" level="INFO">${core_files} = /tmp/core_phosphor-hwmon-.2033</msg>
<msg timestamp="20170929 17:54:45.409" level="INFO">${stderr} = </msg>
<msg timestamp="20170929 17:54:45.409" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170929 17:54:45.409" starttime="20170929 17:54:45.316"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170929 17:54:45.410" level="INFO">@{core_list} = [ /tmp/core_phosphor-hwmon-.2033 ]</msg>
<status status="PASS" endtime="20170929 17:54:45.410" starttime="20170929 17:54:45.409"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:45.443" starttime="20170929 17:54:45.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:46.110" starttime="20170929 17:54:45.444"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.110" starttime="20170929 17:54:45.443"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.110" starttime="20170929 17:54:45.421"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.110" starttime="20170929 17:54:45.410"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2033">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:46.402" starttime="20170929 17:54:46.111"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170929 17:54:46.430" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:46.431" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.2033'.</msg>
<msg timestamp="20170929 17:54:46.478" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:46.490" starttime="20170929 17:54:46.403"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.490" starttime="20170929 17:54:46.111"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.490" starttime="20170929 17:54:46.111"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.490" starttime="20170929 17:54:45.315"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.491" starttime="20170929 17:54:45.295"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.491" starttime="20170929 17:54:45.292"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.491" starttime="20170929 17:54:45.292"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:46.493" starttime="20170929 17:54:46.493"></status>
</kw>
<msg timestamp="20170929 17:54:46.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:46.493" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 17:54:46.493" starttime="20170929 17:54:46.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:46.494" starttime="20170929 17:54:46.494"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 17:54:46.514" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170929 17:54:46.514" starttime="20170929 17:54:46.514"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 17:54:46.515" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170929 17:54:46.515" starttime="20170929 17:54:46.515"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:46.516" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170929 17:54:46.516" starttime="20170929 17:54:46.516"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:46.518" starttime="20170929 17:54:46.517"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:46.519" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:46.519" starttime="20170929 17:54:46.518"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:46.582" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:46.583" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170929 17:54:46.640" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:46.640" starttime="20170929 17:54:46.544"></status>
</kw>
<msg timestamp="20170929 17:54:46.640" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:46.640" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170929 17:54:46.640" starttime="20170929 17:54:46.519"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:54:46.641" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170929 17:54:46.641" starttime="20170929 17:54:46.640"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:54:46.641" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:54:46.641" starttime="20170929 17:54:46.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:46.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:46.649" starttime="20170929 17:54:46.648"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.649" starttime="20170929 17:54:46.648"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.649" starttime="20170929 17:54:46.642"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.649" starttime="20170929 17:54:46.517"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:46.649" starttime="20170929 17:54:46.516"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:46.650" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170929 17:54:46.650" starttime="20170929 17:54:46.650"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:46.652" starttime="20170929 17:54:46.651"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:46.652" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:46.652" starttime="20170929 17:54:46.652"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:46.713" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:46.713" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170929 17:54:47.219" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:47.219" starttime="20170929 17:54:46.677"></status>
</kw>
<msg timestamp="20170929 17:54:47.219" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:47.220" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 29 17:55 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 29 17:55 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170929 17:54:47.220" starttime="20170929 17:54:46.653"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:54:47.221" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 29 17:55 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 29 17:55 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170929 17:54:47.222" starttime="20170929 17:54:47.221"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:54:47.222" level="INFO">${stderr} = ls: /proc/3263/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170929 17:54:47.222" starttime="20170929 17:54:47.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:47.230" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:47.230" starttime="20170929 17:54:47.230"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:47.230" starttime="20170929 17:54:47.228"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:47.230" starttime="20170929 17:54:47.222"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:47.231" starttime="20170929 17:54:46.650"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:47.231" starttime="20170929 17:54:46.649"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:47.231" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170929 17:54:47.231" starttime="20170929 17:54:47.231"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:47.233" starttime="20170929 17:54:47.233"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:47.234" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:47.234" starttime="20170929 17:54:47.233"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:47.289" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:47.290" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170929 17:54:51.198" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:54:51.199" starttime="20170929 17:54:47.258"></status>
</kw>
<msg timestamp="20170929 17:54:51.199" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:54:51.204" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-09-29 17:33:55 UTC, end at Fri 2017-09-29 17:55:00 UTC. --\nSep 29 17:33:55 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 29 17:33:55 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170929 17:54:51.204" starttime="20170929 17:54:47.234"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:54:51.206" level="INFO">${stdout} = -- Logs begin at Fri 2017-09-29 17:33:55 UTC, end at Fri 2017-09-29 17:55:00 UTC. --
Sep 29 17:33:55 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 29 17:33:55 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170929 17:54:51.206" starttime="20170929 17:54:51.205"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:54:51.207" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:54:51.207" starttime="20170929 17:54:51.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:54:51.219" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:54:51.219" starttime="20170929 17:54:51.217"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:51.219" starttime="20170929 17:54:51.215"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:51.219" starttime="20170929 17:54:51.207"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:51.219" starttime="20170929 17:54:47.232"></status>
</kw>
<status status="PASS" endtime="20170929 17:54:51.219" starttime="20170929 17:54:47.231"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:54:51.220" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170929 17:54:51.220" starttime="20170929 17:54:51.220"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:54:51.222" starttime="20170929 17:54:51.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:54:51.222" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:54:51.222" starttime="20170929 17:54:51.222"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:54:51.283" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:54:51.283" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170929 17:55:02.000" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:55:02.005" starttime="20170929 17:54:51.248"></status>
</kw>
<msg timestamp="20170929 17:55:02.005" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:55:02.059" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=7d9199558e6d41a1a2b189f5e1fb5fe6;i=1;b=f55f5ffe46014def8744489b53116b01;m=cde174;t=55a576dd78d7b;x=64c48f17775b41f8",\n\t"__REALTIME_TIMESTAMP" : "1506706435050875",\n\t"__MONO...</msg>
<status status="PASS" endtime="20170929 17:55:02.059" starttime="20170929 17:54:51.223"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:55:02.072" level="INFO">${stdout} = {
	"__CURSOR" : "s=7d9199558e6d41a1a2b189f5e1fb5fe6;i=1;b=f55f5ffe46014def8744489b53116b01;m=cde174;t=55a576dd78d7b;x=64c48f17775b41f8",
	"__REALTIME_TIMESTAMP" : "1506706435050875",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20170929 17:55:02.072" starttime="20170929 17:55:02.060"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:55:02.073" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:55:02.073" starttime="20170929 17:55:02.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:55:02.106" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:55:02.106" starttime="20170929 17:55:02.098"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.106" starttime="20170929 17:55:02.083"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.106" starttime="20170929 17:55:02.074"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.106" starttime="20170929 17:54:51.220"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.107" starttime="20170929 17:54:51.219"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:55:02.107" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170929 17:55:02.107" starttime="20170929 17:55:02.107"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:02.109" starttime="20170929 17:55:02.109"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:55:02.110" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:55:02.110" starttime="20170929 17:55:02.109"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:55:02.172" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:55:02.172" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170929 17:55:02.252" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:55:02.252" starttime="20170929 17:55:02.138"></status>
</kw>
<msg timestamp="20170929 17:55:02.253" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:55:02.253" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          217340 kB\nMemAvailable:     321784 kB\nBuffers:           32100 kB\nCached:            82728 kB\nSwapCached:            0 kB\nActive:           16063...</msg>
<status status="PASS" endtime="20170929 17:55:02.253" starttime="20170929 17:55:02.110"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:55:02.254" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          217340 kB
MemAvailable:     321784 kB
Buffers:           32100 kB
Cached:            82728 kB
SwapCached:            0 kB
Active:           160632 kB
Inac...</msg>
<status status="PASS" endtime="20170929 17:55:02.254" starttime="20170929 17:55:02.253"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:55:02.254" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:55:02.254" starttime="20170929 17:55:02.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:55:02.262" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:55:02.262" starttime="20170929 17:55:02.261"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.262" starttime="20170929 17:55:02.261"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.262" starttime="20170929 17:55:02.255"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.262" starttime="20170929 17:55:02.108"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.262" starttime="20170929 17:55:02.107"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:55:02.263" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170929 17:55:02.263" starttime="20170929 17:55:02.263"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:02.264" starttime="20170929 17:55:02.264"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:55:02.265" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:55:02.265" starttime="20170929 17:55:02.265"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:55:02.324" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:55:02.325" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170929 17:55:02.624" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:55:02.624" starttime="20170929 17:55:02.289"></status>
</kw>
<msg timestamp="20170929 17:55:02.624" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:55:02.624" level="INFO">${ret_values} = (u'Mem: 214904K used, 217340K free, 8948K shrd, 32100K buff, 82728K cached\nCPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 1.03 1.42 1.38 2/163 3267\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170929 17:55:02.624" starttime="20170929 17:55:02.265"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:55:02.625" level="INFO">${stdout} = Mem: 214904K used, 217340K free, 8948K shrd, 32100K buff, 82728K cached
CPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 1.03 1.42 1.38 2/163 3267
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170929 17:55:02.625" starttime="20170929 17:55:02.625"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:55:02.626" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:55:02.626" starttime="20170929 17:55:02.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:55:02.633" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:55:02.633" starttime="20170929 17:55:02.633"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.634" starttime="20170929 17:55:02.632"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.634" starttime="20170929 17:55:02.626"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.634" starttime="20170929 17:55:02.263"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.634" starttime="20170929 17:55:02.262"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 17:55:02.635" level="INFO">${logpath} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170929 17:55:02.635" starttime="20170929 17:55:02.634"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:02.636" starttime="20170929 17:55:02.636"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 17:55:02.637" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170929 17:55:02.637" starttime="20170929 17:55:02.637"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 17:55:02.697" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 17:55:02.698" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170929 17:55:02.755" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 17:55:02.756" starttime="20170929 17:55:02.662"></status>
</kw>
<msg timestamp="20170929 17:55:02.756" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:55:02.756" level="INFO">${ret_values} = (u'[    0.780000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0xf00e2078 @ 1us\n[    0.800000] random: fast init done\n[    0.840000] brd: module loaded\n[    0.850000] random: crng init done\n[    0.8...</msg>
<status status="PASS" endtime="20170929 17:55:02.756" starttime="20170929 17:55:02.638"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 17:55:02.757" level="INFO">${stdout} = [    0.780000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0xf00e2078 @ 1us
[    0.800000] random: fast init done
[    0.840000] brd: module loaded
[    0.850000] random: crng init done
[    0.870000] ...</msg>
<status status="PASS" endtime="20170929 17:55:02.757" starttime="20170929 17:55:02.756"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 17:55:02.757" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 17:55:02.757" starttime="20170929 17:55:02.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 17:55:02.765" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/20170929175435274673_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:55:02.765" starttime="20170929 17:55:02.765"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.765" starttime="20170929 17:55:02.764"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.765" starttime="20170929 17:55:02.758"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:55:02.635"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:55:02.634"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:54:46.516"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:54:46.514"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:54:46.514"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:54:46.514"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:54:46.513"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:54:46.494"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:54:46.491"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.766" starttime="20170929 17:54:46.491"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:02.768" starttime="20170929 17:55:02.768"></status>
</kw>
<msg timestamp="20170929 17:55:02.768" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:55:02.768" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 17:55:02.768" starttime="20170929 17:55:02.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:02.769" starttime="20170929 17:55:02.769"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:55:02.791" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:55:02.791" starttime="20170929 17:55:02.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:55:02.792" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:55:02.792" starttime="20170929 17:55:02.791"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:55:02.793" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:55:02.793" starttime="20170929 17:55:02.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:55:02.793" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:55:02.793" starttime="20170929 17:55:02.793"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:55:02.982" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:55:02.982" starttime="20170929 17:55:02.794"></status>
</kw>
<msg timestamp="20170929 17:55:02.982" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:55:02.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:55:02.982" starttime="20170929 17:55:02.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:55:02.983" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:55:02.983" starttime="20170929 17:55:02.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:55:02.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:55:02.984" starttime="20170929 17:55:02.983"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.984" starttime="20170929 17:55:02.790"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.984" starttime="20170929 17:55:02.789"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:02.984" starttime="20170929 17:55:02.788"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:55:02.985" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170929 17:55:02.985" starttime="20170929 17:55:02.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:02.985" starttime="20170929 17:55:02.985"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:55:03.027" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170929 17:55:03.027" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.028" starttime="20170929 17:55:02.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.028" starttime="20170929 17:55:03.028"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:55:03.029" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:55:03.029" starttime="20170929 17:55:03.029"></status>
</kw>
<msg timestamp="20170929 17:55:03.029" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.029" starttime="20170929 17:55:02.787"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170929 17:55:03.031" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170929 17:55:03.031" starttime="20170929 17:55:03.030"></status>
</kw>
<msg timestamp="20170929 17:55:03.031" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170929 17:55:03.031" starttime="20170929 17:55:03.030"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170929 17:55:03.031" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 17:55:03.031" starttime="20170929 17:55:03.031"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.032" starttime="20170929 17:55:02.787"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.032" starttime="20170929 17:55:02.769"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.032" starttime="20170929 17:55:02.767"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.032" starttime="20170929 17:55:02.766"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.034" starttime="20170929 17:55:03.033"></status>
</kw>
<msg timestamp="20170929 17:55:03.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:55:03.034" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 17:55:03.034" starttime="20170929 17:55:03.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.034" starttime="20170929 17:55:03.034"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170929 17:55:03.054" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 17:55:03.055" starttime="20170929 17:55:03.054"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.055" starttime="20170929 17:55:03.053"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.055" starttime="20170929 17:55:03.035"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.055" starttime="20170929 17:55:03.032"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.055" starttime="20170929 17:55:03.032"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.055" starttime="20170929 17:54:36.319"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.055" starttime="20170929 17:54:36.316"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.056" starttime="20170929 17:54:36.316"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.056" starttime="20170929 17:54:36.316"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170929 17:55:03.067" starttime="20170929 17:55:03.066"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.067" starttime="20170929 17:55:03.057"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.067" starttime="20170929 17:54:36.315"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.067" starttime="20170929 17:54:32.229"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.067" starttime="20170929 17:54:32.228"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170929 17:55:03.069" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170929 17:55:03.069" starttime="20170929 17:55:03.068"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170929 17:55:03.069" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170929175435274673_BmcCodeUpdate/20170929175435274673_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170929 17:55:03.069" starttime="20170929 17:55:03.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.070" starttime="20170929 17:55:03.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.071" starttime="20170929 17:55:03.070"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.071" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170929 17:55:03.071" starttime="20170929 17:55:03.071"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.073" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170929 17:55:03.073" starttime="20170929 17:55:03.072"></status>
</kw>
<msg timestamp="20170929 17:55:03.073" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170929 17:55:03.073" starttime="20170929 17:55:03.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.074" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:55:03.074" starttime="20170929 17:55:03.074"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.075" starttime="20170929 17:55:03.073"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.075" starttime="20170929 17:55:03.075"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 17:55:03.077" level="INFO">${cur_time} = 2017-09-29 17:55:03:076448</msg>
<status status="PASS" endtime="20170929 17:55:03.077" starttime="20170929 17:55:03.076"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 17:55:03.077" level="INFO">${cur_time} = 20170929175503076448</msg>
<status status="PASS" endtime="20170929 17:55:03.077" starttime="20170929 17:55:03.077"></status>
</kw>
<msg timestamp="20170929 17:55:03.078" level="INFO">${cur_time} = 20170929175503076448</msg>
<status status="PASS" endtime="20170929 17:55:03.078" starttime="20170929 17:55:03.076"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.078" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 17:55:03.078" starttime="20170929 17:55:03.078"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.079" starttime="20170929 17:55:03.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:55:03.084" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:55:03.085" starttime="20170929 17:55:03.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:55:03.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:55:03.085" starttime="20170929 17:55:03.085"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:55:03.086" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:55:03.086" starttime="20170929 17:55:03.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:55:03.087" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:55:03.087" starttime="20170929 17:55:03.086"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.296" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:55:03.296" starttime="20170929 17:55:03.087"></status>
</kw>
<msg timestamp="20170929 17:55:03.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:55:03.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.296" starttime="20170929 17:55:03.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.297" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.297" starttime="20170929 17:55:03.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.298" starttime="20170929 17:55:03.297"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.298" starttime="20170929 17:55:03.083"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.298" starttime="20170929 17:55:03.083"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.298" starttime="20170929 17:55:03.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:55:03.299" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170929 17:55:03.299" starttime="20170929 17:55:03.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.300" starttime="20170929 17:55:03.299"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:55:03.346" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170929 17:55:03.346" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.346" starttime="20170929 17:55:03.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.347" starttime="20170929 17:55:03.346"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:55:03.347" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:55:03.347" starttime="20170929 17:55:03.347"></status>
</kw>
<msg timestamp="20170929 17:55:03.347" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.347" starttime="20170929 17:55:03.081"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.348" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 17:55:03.348" starttime="20170929 17:55:03.348"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.348" starttime="20170929 17:55:03.081"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 17:55:03.352" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 17:55:03.352" starttime="20170929 17:55:03.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 17:55:03.353" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 17:55:03.353" starttime="20170929 17:55:03.353"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 17:55:03.354" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 17:55:03.354" starttime="20170929 17:55:03.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 17:55:03.354" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 17:55:03.354" starttime="20170929 17:55:03.354"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.574" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 17:55:03.574" starttime="20170929 17:55:03.355"></status>
</kw>
<msg timestamp="20170929 17:55:03.574" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 17:55:03.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.575" starttime="20170929 17:55:03.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.575" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.576" starttime="20170929 17:55:03.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.576" starttime="20170929 17:55:03.576"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.576" starttime="20170929 17:55:03.351"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.576" starttime="20170929 17:55:03.350"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.577" starttime="20170929 17:55:03.350"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 17:55:03.577" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170929 17:55:03.577" starttime="20170929 17:55:03.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.578" starttime="20170929 17:55:03.578"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 17:55:03.638" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170929 17:55:03.638" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.638" starttime="20170929 17:55:03.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.639" starttime="20170929 17:55:03.638"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 17:55:03.639" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 17:55:03.639" starttime="20170929 17:55:03.639"></status>
</kw>
<msg timestamp="20170929 17:55:03.639" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 17:55:03.639" starttime="20170929 17:55:03.349"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 17:55:03.640" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 17:55:03.640" starttime="20170929 17:55:03.640"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.640" starttime="20170929 17:55:03.349"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.640" starttime="20170929 17:55:03.080"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.641" starttime="20170929 17:55:03.079"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.641" starttime="20170929 17:54:32.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170929 17:55:03.641" starttime="20170929 17:55:03.641"></status>
</kw>
<status status="PASS" endtime="20170929 17:55:03.641" starttime="20170929 17:54:32.227"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170929 17:55:03.642" critical="yes" starttime="20170929 17:54:10.923">SSLError: ('The write operation timed out',)</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170929 17:55:03.644" starttime="20170929 17:54:09.792"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
