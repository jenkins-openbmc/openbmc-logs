<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170916 02:04:11.164" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite id="s1" name="Tests" source="/tmp/fspcibld/236/obmc-robot/tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:04:11.898">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170916 02:04:11.897" endtime="20170916 02:04:11.898"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:11.898">${has_host} = False</msg>
<status status="PASS" starttime="20170916 02:04:11.897" endtime="20170916 02:04:11.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:11.899" endtime="20170916 02:04:11.899"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:11.898" endtime="20170916 02:04:11.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:11.901">${port_num} = 22</msg>
<status status="PASS" starttime="20170916 02:04:11.900" endtime="20170916 02:04:11.901"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:11.901">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170916 02:04:11.901" endtime="20170916 02:04:11.901"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:11.902">${https_num} = 443</msg>
<status status="PASS" starttime="20170916 02:04:11.902" endtime="20170916 02:04:11.902"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:11.903">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170916 02:04:11.902" endtime="20170916 02:04:11.903"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:11.900" endtime="20170916 02:04:11.903"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:11.900" endtime="20170916 02:04:11.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:04:11.904">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170916 02:04:11.904" endtime="20170916 02:04:11.904"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:11.904">${has_port} = False</msg>
<status status="PASS" starttime="20170916 02:04:11.903" endtime="20170916 02:04:11.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:11.906" endtime="20170916 02:04:11.906"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:11.906" endtime="20170916 02:04:11.907"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:11.905" endtime="20170916 02:04:11.907"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:11.904" endtime="20170916 02:04:11.907"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:11.908">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170916 02:04:13.674">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170916 02:04:11.907" endtime="20170916 02:04:13.675"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:11.896" endtime="20170916 02:04:13.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:13.676">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170916 02:04:13.746">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170916 02:04:13.746">${output} = VERSION_ID="v1.99.10-12-g7c53865"</msg>
<msg level="INFO" timestamp="20170916 02:04:13.746">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:04:13.676" endtime="20170916 02:04:13.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:13.747">Length is 0</msg>
<status status="PASS" starttime="20170916 02:04:13.747" endtime="20170916 02:04:13.747"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:13.748">VERSION_ID="v1.99.10-12-g7c53865"</msg>
<status status="PASS" starttime="20170916 02:04:13.747" endtime="20170916 02:04:13.748"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.676" endtime="20170916 02:04:13.748"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.675" endtime="20170916 02:04:13.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="code_update_utils" name="Get Host Software Objects Details">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:13.749">${software} = []</msg>
<status status="PASS" starttime="20170916 02:04:13.749" endtime="20170916 02:04:13.749"></status>
</kw>
<kw library="code_update_utils" name="Get Software Objects">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:13.750">${host_list} = []</msg>
<status status="PASS" starttime="20170916 02:04:13.750" endtime="20170916 02:04:13.750"></status>
</kw>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:13.754">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:13.753" endtime="20170916 02:04:13.754"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:13.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:13.754" endtime="20170916 02:04:13.755"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:13.755">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:13.755" endtime="20170916 02:04:13.755"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:13.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:13.756" endtime="20170916 02:04:13.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:13.951">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:13.757" endtime="20170916 02:04:13.951"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:13.951">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:13.951">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:13.756" endtime="20170916 02:04:13.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:13.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:13.952" endtime="20170916 02:04:13.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:13.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:13.954" endtime="20170916 02:04:13.954"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.753" endtime="20170916 02:04:13.955"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.752" endtime="20170916 02:04:13.955"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.752" endtime="20170916 02:04:13.955"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:13.956">${base_uri} = /xyz/openbmc_project/software/</msg>
<status status="PASS" starttime="20170916 02:04:13.955" endtime="20170916 02:04:13.956"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:13.960">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:13.958" endtime="20170916 02:04:13.960"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:13.961">URI:https://9.41.166.169:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:13.960" endtime="20170916 02:04:13.961"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.960" endtime="20170916 02:04:13.961"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.957" endtime="20170916 02:04:13.961"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.956" endtime="20170916 02:04:13.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.020">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:14.021">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:13.961" endtime="20170916 02:04:14.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.023">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:14.022" endtime="20170916 02:04:14.023"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.023">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:14.023" endtime="20170916 02:04:14.024"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.023" endtime="20170916 02:04:14.024"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.022" endtime="20170916 02:04:14.024"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.021" endtime="20170916 02:04:14.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:14.024">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:14.024" endtime="20170916 02:04:14.025"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.025">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:13.751" endtime="20170916 02:04:14.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.026">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.025" endtime="20170916 02:04:14.026"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.026">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:14.026">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:14.026">${content} = {u'data': [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:14.026" endtime="20170916 02:04:14.026"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.027">${sw_list} = [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active']</msg>
<status status="PASS" starttime="20170916 02:04:13.750" endtime="20170916 02:04:14.027"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.033">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:14.033" endtime="20170916 02:04:14.034"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:14.034" endtime="20170916 02:04:14.034"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.036">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:14.035" endtime="20170916 02:04:14.036"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.036">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:14.036" endtime="20170916 02:04:14.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.230">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:14.037" endtime="20170916 02:04:14.231"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.231">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:14.232">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.037" endtime="20170916 02:04:14.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.232">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.232" endtime="20170916 02:04:14.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.233" endtime="20170916 02:04:14.233"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.030" endtime="20170916 02:04:14.233"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.029" endtime="20170916 02:04:14.233"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.028" endtime="20170916 02:04:14.233"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.234">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status status="PASS" starttime="20170916 02:04:14.234" endtime="20170916 02:04:14.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:14.234" endtime="20170916 02:04:14.235"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.360">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:14.360">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.235" endtime="20170916 02:04:14.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:14.361" endtime="20170916 02:04:14.361"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:14.361">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:14.361" endtime="20170916 02:04:14.362"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.362">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.027" endtime="20170916 02:04:14.362"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:14.362" endtime="20170916 02:04:14.362"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.363">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:14.363">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:14.363">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:14.363" endtime="20170916 02:04:14.363"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.363">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" starttime="20170916 02:04:14.027" endtime="20170916 02:04:14.363"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:14.364" endtime="20170916 02:04:14.364"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:14.364" endtime="20170916 02:04:14.365"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.027" endtime="20170916 02:04:14.365"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.368">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:14.367" endtime="20170916 02:04:14.368"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:14.369" endtime="20170916 02:04:14.369"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.370">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:14.369" endtime="20170916 02:04:14.370"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.370">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:14.370" endtime="20170916 02:04:14.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.626">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:14.371" endtime="20170916 02:04:14.626"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.626">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:14.626">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.371" endtime="20170916 02:04:14.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.627">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.627" endtime="20170916 02:04:14.627"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.628">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.627" endtime="20170916 02:04:14.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.367" endtime="20170916 02:04:14.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.366" endtime="20170916 02:04:14.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.366" endtime="20170916 02:04:14.628"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.629">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status status="PASS" starttime="20170916 02:04:14.628" endtime="20170916 02:04:14.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:14.629" endtime="20170916 02:04:14.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.686">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:14.686">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.630" endtime="20170916 02:04:14.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:14.686" endtime="20170916 02:04:14.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:14.687">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:14.687" endtime="20170916 02:04:14.687"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.687">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.365" endtime="20170916 02:04:14.688"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.688">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170916 02:04:14.688" endtime="20170916 02:04:14.688"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.688">${attr_purpose} = None</msg>
<status status="PASS" starttime="20170916 02:04:14.365" endtime="20170916 02:04:14.688"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.689">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170916 02:04:14.689" endtime="20170916 02:04:14.689"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.365" endtime="20170916 02:04:14.689"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.027" endtime="20170916 02:04:14.689"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.690">${pnor_details} = [u'/xyz/openbmc_project/software/8764baa3']</msg>
<status status="PASS" starttime="20170916 02:04:13.750" endtime="20170916 02:04:14.690"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/8764baa3">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.692">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:14.692" endtime="20170916 02:04:14.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:14.693" endtime="20170916 02:04:14.694"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.694">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:14.694" endtime="20170916 02:04:14.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:14.695" endtime="20170916 02:04:14.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.886">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:14.696" endtime="20170916 02:04:14.886"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:14.886">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:14.886">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.695" endtime="20170916 02:04:14.886"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.887">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.887" endtime="20170916 02:04:14.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:14.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.887" endtime="20170916 02:04:14.888"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.692" endtime="20170916 02:04:14.888"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.691" endtime="20170916 02:04:14.888"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.691" endtime="20170916 02:04:14.888"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:14.889">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" starttime="20170916 02:04:14.888" endtime="20170916 02:04:14.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:14.889" endtime="20170916 02:04:14.889"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:15.010">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:15.011">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.890" endtime="20170916 02:04:15.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:15.011" endtime="20170916 02:04:15.012"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:15.012">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:15.012" endtime="20170916 02:04:15.012"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:15.012">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:14.690" endtime="20170916 02:04:15.012"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:15.013">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:15.013">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:15.013">${json} = {u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Priority': 0, u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u...</msg>
<status status="PASS" starttime="20170916 02:04:15.013" endtime="20170916 02:04:15.013"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:15.014" endtime="20170916 02:04:15.014"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.690" endtime="20170916 02:04:15.014"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:14.690" endtime="20170916 02:04:15.014"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:15.014">${software} = [{u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Priority': 0, u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Path': u...</msg>
<status status="PASS" starttime="20170916 02:04:13.749" endtime="20170916 02:04:15.014"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:15.015">[{u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Priority': 0, u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Path': u'', u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}]</msg>
<status status="PASS" starttime="20170916 02:04:15.014" endtime="20170916 02:04:15.015"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.748" endtime="20170916 02:04:15.015"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:13.748" endtime="20170916 02:04:15.015"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:15.416">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:04:15.417">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170916 02:04:16.216">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170916 02:04:16.217">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170916 02:04:16.304">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170916 02:04:16.314">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170916 02:04:16.314">${stderr} = </msg>
<msg level="INFO" timestamp="20170916 02:04:16.315">${rc} = 0</msg>
<status status="PASS" starttime="20170916 02:04:15.016" endtime="20170916 02:04:16.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:16.315">Length is 0</msg>
<status status="PASS" starttime="20170916 02:04:16.315" endtime="20170916 02:04:16.315"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:16.316">Length is 11</msg>
<status status="PASS" starttime="20170916 02:04:16.316" endtime="20170916 02:04:16.316"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:16.316">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20170916 02:04:15.016" endtime="20170916 02:04:16.316"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:16.317">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20170916 02:04:16.316" endtime="20170916 02:04:16.317"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:15.015" endtime="20170916 02:04:16.317"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:15.015" endtime="20170916 02:04:16.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:04:16.319">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170916 02:04:16.319" endtime="20170916 02:04:16.319"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:16.320">${has_host} = False</msg>
<status status="PASS" starttime="20170916 02:04:16.318" endtime="20170916 02:04:16.320"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:16.320" endtime="20170916 02:04:16.321"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:16.320" endtime="20170916 02:04:16.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:16.323">${port_num} = 22</msg>
<status status="PASS" starttime="20170916 02:04:16.322" endtime="20170916 02:04:16.323"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:16.323">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170916 02:04:16.323" endtime="20170916 02:04:16.323"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:16.324">${https_num} = 443</msg>
<status status="PASS" starttime="20170916 02:04:16.324" endtime="20170916 02:04:16.324"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:16.325">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170916 02:04:16.324" endtime="20170916 02:04:16.325"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:16.322" endtime="20170916 02:04:16.325"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:16.321" endtime="20170916 02:04:16.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:04:16.326">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170916 02:04:16.326" endtime="20170916 02:04:16.326"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:16.326">${has_port} = False</msg>
<status status="PASS" starttime="20170916 02:04:16.325" endtime="20170916 02:04:16.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:16.328" endtime="20170916 02:04:16.328"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:16.329" endtime="20170916 02:04:16.330"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:16.327" endtime="20170916 02:04:16.330"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:16.326" endtime="20170916 02:04:16.330"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:16.330">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170916 02:04:18.008">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170916 02:04:16.330" endtime="20170916 02:04:18.008"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:16.318" endtime="20170916 02:04:18.009"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.010">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170916 02:04:18.087">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170916 02:04:18.087">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170916 02:04:18.087">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:04:18.010" endtime="20170916 02:04:18.087"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.088">Length is 0</msg>
<status status="PASS" starttime="20170916 02:04:18.088" endtime="20170916 02:04:18.088"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.088">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20170916 02:04:18.009" endtime="20170916 02:04:18.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.089" endtime="20170916 02:04:18.089"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:16.317" endtime="20170916 02:04:18.089"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:16.317" endtime="20170916 02:04:18.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.089" endtime="20170916 02:04:18.090"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:11.896" endtime="20170916 02:04:18.090"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/236/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/236/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.133">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:18.133" endtime="20170916 02:04:18.133"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.134">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:18.134" endtime="20170916 02:04:18.134"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.135">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:18.134" endtime="20170916 02:04:18.135"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.135">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:18.135" endtime="20170916 02:04:18.135"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.359">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:18.136" endtime="20170916 02:04:18.359"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.360">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:18.360">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:18.136" endtime="20170916 02:04:18.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.360">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:18.360" endtime="20170916 02:04:18.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:18.361" endtime="20170916 02:04:18.361"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.132" endtime="20170916 02:04:18.361"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.131" endtime="20170916 02:04:18.361"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.131" endtime="20170916 02:04:18.361"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.368">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:18.367" endtime="20170916 02:04:18.368"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:18.369" endtime="20170916 02:04:18.369"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.370">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:18.370" endtime="20170916 02:04:18.370"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.371">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:18.371" endtime="20170916 02:04:18.371"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.558">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:18.372" endtime="20170916 02:04:18.558"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.558">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:18.558">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:18.372" endtime="20170916 02:04:18.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.559">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:18.559" endtime="20170916 02:04:18.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:18.560" endtime="20170916 02:04:18.560"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.366" endtime="20170916 02:04:18.560"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.366" endtime="20170916 02:04:18.560"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.365" endtime="20170916 02:04:18.560"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.561">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:04:18.561" endtime="20170916 02:04:18.561"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.563">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:18.562" endtime="20170916 02:04:18.563"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.566">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:18.566" endtime="20170916 02:04:18.566"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.563" endtime="20170916 02:04:18.567"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.562" endtime="20170916 02:04:18.567"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.561" endtime="20170916 02:04:18.567"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.674">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:18.674">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:18.567" endtime="20170916 02:04:18.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.676">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:18.675" endtime="20170916 02:04:18.676"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.677">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:18.676" endtime="20170916 02:04:18.677"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.676" endtime="20170916 02:04:18.677"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.675" endtime="20170916 02:04:18.677"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.674" endtime="20170916 02:04:18.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:18.677">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:18.677" endtime="20170916 02:04:18.678"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.678">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:18.364" endtime="20170916 02:04:18.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:18.678" endtime="20170916 02:04:18.679"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.679">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:18.679">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:18.680">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:18.679" endtime="20170916 02:04:18.680"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.680">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170916 02:04:18.363" endtime="20170916 02:04:18.680"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.680">${host_state} = Off</msg>
<status status="PASS" starttime="20170916 02:04:18.363" endtime="20170916 02:04:18.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:04:18.681">Off != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:04:18.681" endtime="20170916 02:04:18.681"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.682">${status} = False</msg>
<status status="PASS" starttime="20170916 02:04:18.681" endtime="20170916 02:04:18.682"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.682">${status} = False</msg>
<status status="PASS" starttime="20170916 02:04:18.362" endtime="20170916 02:04:18.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.682" endtime="20170916 02:04:18.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.683" endtime="20170916 02:04:18.683"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.697">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170916 02:04:18.684" endtime="20170916 02:04:18.697"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.713">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20170916 02:04:18.698" endtime="20170916 02:04:18.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.716">${cur_time} = 2017-09-16 02:04:18:715551</msg>
<status status="PASS" starttime="20170916 02:04:18.715" endtime="20170916 02:04:18.716"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.717">${cur_time} = 20170916020418715551</msg>
<status status="PASS" starttime="20170916 02:04:18.716" endtime="20170916 02:04:18.717"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.715" endtime="20170916 02:04:18.717"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.725">${FFDC_TIME} = 20170916020418715551</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.726">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170916 02:04:18.726" endtime="20170916 02:04:18.726"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.727">${suite_name} = 20170916020418715551_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170916 02:04:18.726" endtime="20170916 02:04:18.727"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.727">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20170916 02:04:18.727" endtime="20170916 02:04:18.727"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.728">${test_name} = 20170916020418715551_TestSSLConnection</msg>
<status status="PASS" starttime="20170916 02:04:18.727" endtime="20170916 02:04:18.728"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.725" endtime="20170916 02:04:18.728"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.728">${FFDC_DIR_PATH} = /tmp/fspcibld/236/obmc-robot/logs/20170916020418715551_TestsSecurityTestSsl/20170916020418715551_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170916 02:04:18.733">${FFDC_PREFIX} = 20170916020418715551_</msg>
<status status="PASS" starttime="20170916 02:04:18.714" endtime="20170916 02:04:18.734"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.713" endtime="20170916 02:04:18.734"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.734" endtime="20170916 02:04:18.734"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.735" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs"&gt;/tmp/fspcibld/236/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:04:18.735" endtime="20170916 02:04:18.735"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:04:18.736">File '/tmp/fspcibld/236/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20170916 02:04:18.736" endtime="20170916 02:04:18.736"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.736">${exist} = False</msg>
<status status="PASS" starttime="20170916 02:04:18.735" endtime="20170916 02:04:18.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.738" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:04:18.737" endtime="20170916 02:04:18.738"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.737" endtime="20170916 02:04:18.738"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.738" endtime="20170916 02:04:18.738"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.739">${cur_time} = 2017-09-16 02:04:18:739107</msg>
<status status="PASS" starttime="20170916 02:04:18.739" endtime="20170916 02:04:18.739"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.740">${cur_time} = 20170916020418739107</msg>
<status status="PASS" starttime="20170916 02:04:18.740" endtime="20170916 02:04:18.740"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.740">${cur_time} = 20170916020418739107</msg>
<status status="PASS" starttime="20170916 02:04:18.738" endtime="20170916 02:04:18.740"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.741" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:04:18.740" endtime="20170916 02:04:18.741"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.683" endtime="20170916 02:04:18.741"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.362" endtime="20170916 02:04:18.741"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20170916 02:04:18.130" critical="yes" endtime="20170916 02:04:18.741"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:18.742">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:18.742" endtime="20170916 02:04:18.742"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20170916 02:04:18.092" endtime="20170916 02:04:18.742"></status>
</suite>
<status status="PASS" starttime="20170916 02:04:18.090" endtime="20170916 02:04:18.744"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/236/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.785">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170916 02:04:18.784" endtime="20170916 02:04:18.785"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.786">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170916 02:04:18.785" endtime="20170916 02:04:18.786"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.786">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170916 02:04:18.784" endtime="20170916 02:04:18.786"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.787">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170916 02:04:18.787" endtime="20170916 02:04:18.787"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.788">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170916 02:04:18.788" endtime="20170916 02:04:18.788"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.788">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170916 02:04:18.787" endtime="20170916 02:04:18.788"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.790">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170916 02:04:18.789" endtime="20170916 02:04:18.790"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.790" endtime="20170916 02:04:18.790"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.795">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170916 02:04:18.799">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:04:18.799">${output} = /tmp/fspcibld/236/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170916 02:04:18.790" endtime="20170916 02:04:18.799"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.801" endtime="20170916 02:04:18.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.803" endtime="20170916 02:04:18.803"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.804">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:04:18.804" endtime="20170916 02:04:18.804"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.804">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:04:18.789" endtime="20170916 02:04:18.804"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.805">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:04:18.805" endtime="20170916 02:04:18.805"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.806">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170916 02:04:18.805" endtime="20170916 02:04:18.806"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.806" endtime="20170916 02:04:18.806"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.810">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170916 02:04:18.824">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:04:18.824">${os_con_pid} = </msg>
<status status="PASS" starttime="20170916 02:04:18.807" endtime="20170916 02:04:18.824"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.827" endtime="20170916 02:04:18.828"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.828">${os_con_pid} = </msg>
<status status="PASS" starttime="20170916 02:04:18.788" endtime="20170916 02:04:18.828"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.829">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170916 02:04:18.829" endtime="20170916 02:04:18.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.830" endtime="20170916 02:04:18.830"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.832">${rc} = None</msg>
<msg level="INFO" timestamp="20170916 02:04:18.832">${output} = None</msg>
<status status="PASS" starttime="20170916 02:04:18.830" endtime="20170916 02:04:18.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.833" endtime="20170916 02:04:18.833"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:04:18.835">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status status="FAIL" starttime="20170916 02:04:18.834" endtime="20170916 02:04:18.835"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.834" endtime="20170916 02:04:18.835"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.833" endtime="20170916 02:04:18.835"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.836">${output} = </msg>
<status status="PASS" starttime="20170916 02:04:18.835" endtime="20170916 02:04:18.836"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.837">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170916 02:04:18.836" endtime="20170916 02:04:18.837"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.837" endtime="20170916 02:04:18.891"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.891">${rc} = 1</msg>
<msg level="INFO" timestamp="20170916 02:04:18.892">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170916 02:04:18.837" endtime="20170916 02:04:18.892"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.893">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170916 02:04:18.786" endtime="20170916 02:04:18.893"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:18.895" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:04:18.894" endtime="20170916 02:04:18.895"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.896">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170916 02:04:18.896" endtime="20170916 02:04:18.896"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.896" endtime="20170916 02:04:18.897"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.900">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170916 02:04:18.903">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:04:18.903">${output} = /tmp/fspcibld/236/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170916 02:04:18.897" endtime="20170916 02:04:18.903"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.905" endtime="20170916 02:04:18.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.907" endtime="20170916 02:04:18.907"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.908">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:04:18.908" endtime="20170916 02:04:18.908"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:18.909">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:04:18.895" endtime="20170916 02:04:18.909"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.909">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170916 02:04:18.909" endtime="20170916 02:04:18.909"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.910" endtime="20170916 02:04:18.910"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:18.913">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170916 02:04:18.916">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:04:18.916">${output} = </msg>
<status status="PASS" starttime="20170916 02:04:18.910" endtime="20170916 02:04:18.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:18.919" endtime="20170916 02:04:18.920"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:19.921">Slept 1 second</msg>
<status status="PASS" starttime="20170916 02:04:18.920" endtime="20170916 02:04:19.921"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.923">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170916 02:04:19.923" endtime="20170916 02:04:19.923"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:19.923" endtime="20170916 02:04:19.924"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.927">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170916 02:04:19.930">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:04:19.930">${output} = /tmp/fspcibld/236/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170916 02:04:19.924" endtime="20170916 02:04:19.931"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:19.933" endtime="20170916 02:04:19.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:19.934" endtime="20170916 02:04:19.936"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.937">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:04:19.937" endtime="20170916 02:04:19.937"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:19.937">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:04:19.922" endtime="20170916 02:04:19.937"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.938">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:04:19.938" endtime="20170916 02:04:19.938"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.939">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170916 02:04:19.938" endtime="20170916 02:04:19.939"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:19.939" endtime="20170916 02:04:19.939"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.942">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170916 02:04:19.955">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:04:19.955">${os_con_pid} = 182</msg>
<status status="PASS" starttime="20170916 02:04:19.939" endtime="20170916 02:04:19.956"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:19.958" endtime="20170916 02:04:19.959"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:19.960">${os_con_pid} = 182</msg>
<status status="PASS" starttime="20170916 02:04:19.922" endtime="20170916 02:04:19.960"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:19.960">Length is 3</msg>
<status status="PASS" starttime="20170916 02:04:19.960" endtime="20170916 02:04:19.960"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:18.783" endtime="20170916 02:04:19.961"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:19.962">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.964">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170916 02:04:19.963" endtime="20170916 02:04:19.964"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.965">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170916 02:04:19.965" endtime="20170916 02:04:19.965"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:19.968">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:19.968" endtime="20170916 02:04:19.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:19.970" endtime="20170916 02:04:19.970"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.971">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:19.970" endtime="20170916 02:04:19.971"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:19.972">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:19.971" endtime="20170916 02:04:19.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:20.154">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:19.973" endtime="20170916 02:04:20.154"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:20.154">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:20.154">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:19.972" endtime="20170916 02:04:20.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:20.155">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:20.155" endtime="20170916 02:04:20.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:20.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:20.155" endtime="20170916 02:04:20.156"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:19.967" endtime="20170916 02:04:20.156"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:19.967" endtime="20170916 02:04:20.156"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:19.966" endtime="20170916 02:04:20.156"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:20.157">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170916 02:04:20.156" endtime="20170916 02:04:20.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:20.157">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:20.157" endtime="20170916 02:04:20.157"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:20.158" endtime="20170916 02:04:20.158"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:20.159">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status status="PASS" starttime="20170916 02:04:20.159" endtime="20170916 02:04:20.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:20.160">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170916 02:04:20.160" endtime="20170916 02:04:20.161"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.160" endtime="20170916 02:04:20.161"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.158" endtime="20170916 02:04:20.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:20.493">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170916 02:04:20.493">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:20.161" endtime="20170916 02:04:20.493"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:20.494">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:20.494" endtime="20170916 02:04:20.494"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:20.495">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:20.495" endtime="20170916 02:04:20.495"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.495" endtime="20170916 02:04:20.496"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.493" endtime="20170916 02:04:20.496"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:20.496">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:20.496" endtime="20170916 02:04:20.496"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:20.496">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:19.965" endtime="20170916 02:04:20.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:20.497">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:20.497" endtime="20170916 02:04:20.497"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:20.498">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:20.498">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:20.498">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:20.497" endtime="20170916 02:04:20.498"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:19.964" endtime="20170916 02:04:20.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:20.498" endtime="20170916 02:04:20.499"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:20.506">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:20.506" endtime="20170916 02:04:20.507"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:20.507">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:20.507" endtime="20170916 02:04:20.508"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:20.508">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:20.508" endtime="20170916 02:04:20.508"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:20.509">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:20.509" endtime="20170916 02:04:20.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:22.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:20.511" endtime="20170916 02:04:22.084"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:22.084">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:22.085">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:20.510" endtime="20170916 02:04:22.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:22.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:22.085" endtime="20170916 02:04:22.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:22.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:22.086" endtime="20170916 02:04:22.086"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.505" endtime="20170916 02:04:22.086"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.504" endtime="20170916 02:04:22.086"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.503" endtime="20170916 02:04:22.086"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:22.087">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:04:22.087" endtime="20170916 02:04:22.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:22.090">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:22.089" endtime="20170916 02:04:22.090"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:22.091">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:22.090" endtime="20170916 02:04:22.091"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:22.090" endtime="20170916 02:04:22.091"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:22.088" endtime="20170916 02:04:22.091"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:22.087" endtime="20170916 02:04:22.091"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:23.134">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:23.135">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:22.091" endtime="20170916 02:04:23.135"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:23.137">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:23.136" endtime="20170916 02:04:23.137"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:23.138">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:23.137" endtime="20170916 02:04:23.138"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:23.137" endtime="20170916 02:04:23.138"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:23.136" endtime="20170916 02:04:23.138"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:23.135" endtime="20170916 02:04:23.138"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:23.139">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:23.139" endtime="20170916 02:04:23.139"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:23.139">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:20.503" endtime="20170916 02:04:23.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:23.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:23.140" endtime="20170916 02:04:23.140"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:23.141">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:23.141">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:23.141">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:23.140" endtime="20170916 02:04:23.141"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:23.141">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170916 02:04:20.502" endtime="20170916 02:04:23.141"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:23.141">${power_state} = Off</msg>
<status status="PASS" starttime="20170916 02:04:20.501" endtime="20170916 02:04:23.141"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:23.142" endtime="20170916 02:04:23.142"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.500" endtime="20170916 02:04:23.142"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:23.146">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:23.145" endtime="20170916 02:04:23.146"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:23.147">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:23.147" endtime="20170916 02:04:23.147"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:23.148">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:23.147" endtime="20170916 02:04:23.148"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:23.148">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:23.148" endtime="20170916 02:04:23.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:23.665">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:23.149" endtime="20170916 02:04:23.665"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:23.665">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:23.665">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:23.149" endtime="20170916 02:04:23.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:23.666">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:23.666" endtime="20170916 02:04:23.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:23.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:23.666" endtime="20170916 02:04:23.667"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:23.145" endtime="20170916 02:04:23.667"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:23.144" endtime="20170916 02:04:23.667"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:23.144" endtime="20170916 02:04:23.667"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:23.668">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:04:23.667" endtime="20170916 02:04:23.668"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:23.670">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:23.669" endtime="20170916 02:04:23.670"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:23.671">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:23.671" endtime="20170916 02:04:23.671"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:23.670" endtime="20170916 02:04:23.671"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:23.668" endtime="20170916 02:04:23.671"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:23.668" endtime="20170916 02:04:23.671"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:27.519">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:27.519">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:23.671" endtime="20170916 02:04:27.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:27.521">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:27.521" endtime="20170916 02:04:27.521"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:27.522">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:27.522" endtime="20170916 02:04:27.522"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:27.522" endtime="20170916 02:04:27.523"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:27.520" endtime="20170916 02:04:27.523"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:27.520" endtime="20170916 02:04:27.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:27.523">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:27.523" endtime="20170916 02:04:27.523"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:27.523">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:23.143" endtime="20170916 02:04:27.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:27.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:27.524" endtime="20170916 02:04:27.524"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:27.525">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:27.525">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:27.525">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:27.524" endtime="20170916 02:04:27.525"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:27.525">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170916 02:04:23.143" endtime="20170916 02:04:27.525"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:27.526">${host_state} = Off</msg>
<status status="PASS" starttime="20170916 02:04:23.142" endtime="20170916 02:04:27.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:27.526" endtime="20170916 02:04:27.526"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.500" endtime="20170916 02:04:27.526"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.500" endtime="20170916 02:04:27.526"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:20.499" endtime="20170916 02:04:27.526"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:27.527">${status} = True</msg>
<status status="PASS" starttime="20170916 02:04:20.499" endtime="20170916 02:04:27.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:27.527" endtime="20170916 02:04:27.527"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:19.962" endtime="20170916 02:04:27.527"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:27.528">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170916 02:04:27.528" endtime="20170916 02:04:27.528"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:27.529">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170916 02:04:27.529" endtime="20170916 02:04:27.530"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:27.533">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:27.532" endtime="20170916 02:04:27.533"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:27.534">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:27.534" endtime="20170916 02:04:27.534"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:27.535">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:27.534" endtime="20170916 02:04:27.535"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:27.535">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:27.535" endtime="20170916 02:04:27.535"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:28.206">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:27.536" endtime="20170916 02:04:28.206"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:28.206">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:28.206">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:27.536" endtime="20170916 02:04:28.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:28.207">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:28.207" endtime="20170916 02:04:28.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:28.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:28.207" endtime="20170916 02:04:28.208"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:27.532" endtime="20170916 02:04:28.208"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:27.531" endtime="20170916 02:04:28.208"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:27.531" endtime="20170916 02:04:28.208"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:28.209">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170916 02:04:28.208" endtime="20170916 02:04:28.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:28.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:28.209" endtime="20170916 02:04:28.209"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:28.210" endtime="20170916 02:04:28.210"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:28.211">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status status="PASS" starttime="20170916 02:04:28.211" endtime="20170916 02:04:28.212"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:28.212">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170916 02:04:28.212" endtime="20170916 02:04:28.213"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:28.212" endtime="20170916 02:04:28.213"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:28.210" endtime="20170916 02:04:28.213"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:28.677">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170916 02:04:28.677">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:28.213" endtime="20170916 02:04:28.677"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:28.678">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:28.678" endtime="20170916 02:04:28.678"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:28.679">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:28.679" endtime="20170916 02:04:28.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:28.678" endtime="20170916 02:04:28.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:28.677" endtime="20170916 02:04:28.680"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:28.680">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:28.680" endtime="20170916 02:04:28.680"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:28.680">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:27.530" endtime="20170916 02:04:28.680"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:28.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:28.681" endtime="20170916 02:04:28.681"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:28.682">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:28.682">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:28.682">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:28.681" endtime="20170916 02:04:28.682"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:27.528" endtime="20170916 02:04:28.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:28.682" endtime="20170916 02:04:28.683"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:28.691">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:28.690" endtime="20170916 02:04:28.691"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:28.692">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:28.691" endtime="20170916 02:04:28.692"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:28.693">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:28.692" endtime="20170916 02:04:28.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:28.694">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:28.693" endtime="20170916 02:04:28.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:30.630">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:28.695" endtime="20170916 02:04:30.630"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:30.630">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:30.630">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:28.694" endtime="20170916 02:04:30.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:30.631">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:30.631" endtime="20170916 02:04:30.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:30.632">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:30.631" endtime="20170916 02:04:30.632"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:28.689" endtime="20170916 02:04:30.632"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:28.688" endtime="20170916 02:04:30.632"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:28.688" endtime="20170916 02:04:30.632"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:30.633">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:04:30.632" endtime="20170916 02:04:30.633"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:30.635">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:30.634" endtime="20170916 02:04:30.635"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:30.636">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:30.636" endtime="20170916 02:04:30.636"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:30.635" endtime="20170916 02:04:30.636"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:30.633" endtime="20170916 02:04:30.637"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:30.633" endtime="20170916 02:04:30.637"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:34.616">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:34.616">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:30.637" endtime="20170916 02:04:34.616"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:34.618">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:34.618" endtime="20170916 02:04:34.619"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:34.619">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:34.619" endtime="20170916 02:04:34.620"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:34.619" endtime="20170916 02:04:34.620"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:34.617" endtime="20170916 02:04:34.620"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:34.617" endtime="20170916 02:04:34.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:34.620">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:34.620" endtime="20170916 02:04:34.620"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:34.621">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:28.687" endtime="20170916 02:04:34.621"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:34.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:34.621" endtime="20170916 02:04:34.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:34.622">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:34.622">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:34.622">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:34.621" endtime="20170916 02:04:34.622"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:34.622">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170916 02:04:28.687" endtime="20170916 02:04:34.622"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:34.623">${power_state} = Off</msg>
<status status="PASS" starttime="20170916 02:04:28.686" endtime="20170916 02:04:34.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:04:34.623">On != Off</msg>
<status status="FAIL" starttime="20170916 02:04:34.623" endtime="20170916 02:04:34.623"></status>
</kw>
<status status="FAIL" starttime="20170916 02:04:28.686" endtime="20170916 02:04:34.624"></status>
</kw>
<status status="FAIL" starttime="20170916 02:04:28.683" endtime="20170916 02:04:34.624"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:44.629">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:44.629" endtime="20170916 02:04:44.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:44.631">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:44.630" endtime="20170916 02:04:44.631"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:44.631">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:44.631" endtime="20170916 02:04:44.631"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:44.632">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:44.632" endtime="20170916 02:04:44.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:45.873">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:44.633" endtime="20170916 02:04:45.873"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:45.873">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:45.873">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:44.632" endtime="20170916 02:04:45.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:45.874">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:45.874" endtime="20170916 02:04:45.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:45.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:45.874" endtime="20170916 02:04:45.875"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:44.628" endtime="20170916 02:04:45.875"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:44.628" endtime="20170916 02:04:45.875"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:44.627" endtime="20170916 02:04:45.875"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:45.876">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:04:45.876" endtime="20170916 02:04:45.876"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:45.878">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:45.877" endtime="20170916 02:04:45.878"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:45.879">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:45.879" endtime="20170916 02:04:45.879"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:45.878" endtime="20170916 02:04:45.879"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:45.877" endtime="20170916 02:04:45.879"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:45.876" endtime="20170916 02:04:45.879"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:47.327">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:47.327">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:45.880" endtime="20170916 02:04:47.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:47.329">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:47.329" endtime="20170916 02:04:47.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:47.330">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:47.330" endtime="20170916 02:04:47.330"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:47.329" endtime="20170916 02:04:47.330"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:47.328" endtime="20170916 02:04:47.331"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:47.328" endtime="20170916 02:04:47.331"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:47.331">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:47.331" endtime="20170916 02:04:47.331"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:47.331">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:44.626" endtime="20170916 02:04:47.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:47.332">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:47.332" endtime="20170916 02:04:47.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:47.333">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:47.333">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:47.333">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:47.332" endtime="20170916 02:04:47.333"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:47.333">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170916 02:04:44.626" endtime="20170916 02:04:47.333"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:47.333">${power_state} = Off</msg>
<status status="PASS" starttime="20170916 02:04:44.625" endtime="20170916 02:04:47.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:04:47.334">On != Off</msg>
<status status="FAIL" starttime="20170916 02:04:47.334" endtime="20170916 02:04:47.334"></status>
</kw>
<status status="FAIL" starttime="20170916 02:04:44.625" endtime="20170916 02:04:47.334"></status>
</kw>
<status status="FAIL" starttime="20170916 02:04:44.624" endtime="20170916 02:04:47.335"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.340">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:57.340" endtime="20170916 02:04:57.341"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.341">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:57.341" endtime="20170916 02:04:57.341"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.342">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:57.341" endtime="20170916 02:04:57.342"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.342">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:57.342" endtime="20170916 02:04:57.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.553">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:57.343" endtime="20170916 02:04:57.553"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:57.553">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:57.553">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.343" endtime="20170916 02:04:57.553"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.554">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.553" endtime="20170916 02:04:57.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.554" endtime="20170916 02:04:57.555"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.339" endtime="20170916 02:04:57.555"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.339" endtime="20170916 02:04:57.555"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.338" endtime="20170916 02:04:57.555"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.556">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:04:57.555" endtime="20170916 02:04:57.556"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.558">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:57.557" endtime="20170916 02:04:57.558"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.559">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:57.559" endtime="20170916 02:04:57.559"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.558" endtime="20170916 02:04:57.559"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.556" endtime="20170916 02:04:57.560"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.556" endtime="20170916 02:04:57.560"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.668">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:57.669">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.560" endtime="20170916 02:04:57.669"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.671">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:57.670" endtime="20170916 02:04:57.671"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.671">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:57.671" endtime="20170916 02:04:57.672"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.671" endtime="20170916 02:04:57.672"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.669" endtime="20170916 02:04:57.672"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.669" endtime="20170916 02:04:57.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:57.672">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:57.672" endtime="20170916 02:04:57.672"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:57.672">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.337" endtime="20170916 02:04:57.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.673" endtime="20170916 02:04:57.673"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.674">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:57.674">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:57.674">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:57.673" endtime="20170916 02:04:57.674"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:57.674">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:04:57.336" endtime="20170916 02:04:57.674"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:57.675">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:04:57.336" endtime="20170916 02:04:57.675"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:57.675" endtime="20170916 02:04:57.675"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.336" endtime="20170916 02:04:57.675"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.680">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:57.679" endtime="20170916 02:04:57.680"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.681">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:57.681" endtime="20170916 02:04:57.681"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.682">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:57.681" endtime="20170916 02:04:57.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.682">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:57.682" endtime="20170916 02:04:57.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.913">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:57.683" endtime="20170916 02:04:57.913"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:57.913">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:57.913">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.682" endtime="20170916 02:04:57.913"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.914">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.914" endtime="20170916 02:04:57.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.915">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.914" endtime="20170916 02:04:57.915"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.679" endtime="20170916 02:04:57.915"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.678" endtime="20170916 02:04:57.916"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.677" endtime="20170916 02:04:57.916"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.916">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:04:57.916" endtime="20170916 02:04:57.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:57.918">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:57.918" endtime="20170916 02:04:57.918"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:57.919">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:57.919" endtime="20170916 02:04:57.919"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.918" endtime="20170916 02:04:57.920"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.917" endtime="20170916 02:04:57.920"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:57.917" endtime="20170916 02:04:57.920"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.008">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:58.008">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.920" endtime="20170916 02:04:58.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.010">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:58.009" endtime="20170916 02:04:58.010"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.011">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:58.011" endtime="20170916 02:04:58.011"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.010" endtime="20170916 02:04:58.011"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.009" endtime="20170916 02:04:58.011"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.008" endtime="20170916 02:04:58.011"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:58.012">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:58.011" endtime="20170916 02:04:58.012"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:58.012">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:57.676" endtime="20170916 02:04:58.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:58.012" endtime="20170916 02:04:58.013"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.013">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:58.013">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:58.013">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:58.013" endtime="20170916 02:04:58.013"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:58.014">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:04:57.676" endtime="20170916 02:04:58.014"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:58.014">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:04:57.675" endtime="20170916 02:04:58.014"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:04:58.014" endtime="20170916 02:04:58.014"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.019">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:04:58.019" endtime="20170916 02:04:58.019"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.020">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:04:58.020" endtime="20170916 02:04:58.020"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.021">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:04:58.020" endtime="20170916 02:04:58.021"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.021">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:04:58.021" endtime="20170916 02:04:58.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.218">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:04:58.022" endtime="20170916 02:04:58.218"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:58.218">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:04:58.218">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:58.022" endtime="20170916 02:04:58.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.219">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:58.219" endtime="20170916 02:04:58.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.220">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:58.220" endtime="20170916 02:04:58.220"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.018" endtime="20170916 02:04:58.220"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.017" endtime="20170916 02:04:58.220"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.017" endtime="20170916 02:04:58.220"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.221">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:04:58.221" endtime="20170916 02:04:58.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.223">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:58.223" endtime="20170916 02:04:58.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.224">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:04:58.224" endtime="20170916 02:04:58.224"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.223" endtime="20170916 02:04:58.224"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.222" endtime="20170916 02:04:58.225"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.221" endtime="20170916 02:04:58.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.313">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:04:58.313">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:58.225" endtime="20170916 02:04:58.314"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.315">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:58.315" endtime="20170916 02:04:58.315"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.317">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:04:58.316" endtime="20170916 02:04:58.317"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.315" endtime="20170916 02:04:58.317"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.314" endtime="20170916 02:04:58.317"></status>
</kw>
<status status="PASS" starttime="20170916 02:04:58.314" endtime="20170916 02:04:58.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:04:58.317">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:04:58.317" endtime="20170916 02:04:58.317"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:58.318">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:04:58.016" endtime="20170916 02:04:58.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:04:58.318" endtime="20170916 02:04:58.318"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:04:58.319">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:04:58.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:04:58.319">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:04:58.319" endtime="20170916 02:04:58.319"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:58.319">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:04:58.015" endtime="20170916 02:04:58.319"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:04:58.320">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:04:58.015" endtime="20170916 02:04:58.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:04:58.320">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:04:58.321">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170916 02:04:58.320" endtime="20170916 02:04:58.321"></status>
</kw>
<status status="FAIL" starttime="20170916 02:04:58.015" endtime="20170916 02:04:58.321"></status>
</kw>
<status status="FAIL" starttime="20170916 02:04:57.335" endtime="20170916 02:04:58.321"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.326">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:08.326" endtime="20170916 02:05:08.327"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.327">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:08.327" endtime="20170916 02:05:08.327"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.328">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:08.328" endtime="20170916 02:05:08.328"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.329">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:08.328" endtime="20170916 02:05:08.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.538">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:08.329" endtime="20170916 02:05:08.538"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:08.538">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:08.538">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.329" endtime="20170916 02:05:08.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.539">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.539" endtime="20170916 02:05:08.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.539" endtime="20170916 02:05:08.540"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.325" endtime="20170916 02:05:08.540"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.325" endtime="20170916 02:05:08.540"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.324" endtime="20170916 02:05:08.540"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.541">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:05:08.540" endtime="20170916 02:05:08.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.543">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:08.542" endtime="20170916 02:05:08.543"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.544">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:08.543" endtime="20170916 02:05:08.544"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.543" endtime="20170916 02:05:08.544"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.542" endtime="20170916 02:05:08.544"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.541" endtime="20170916 02:05:08.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.616">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:08.616">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.544" endtime="20170916 02:05:08.616"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.618">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:08.617" endtime="20170916 02:05:08.618"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.619">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:08.619" endtime="20170916 02:05:08.619"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.618" endtime="20170916 02:05:08.619"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.617" endtime="20170916 02:05:08.619"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.616" endtime="20170916 02:05:08.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:08.620">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:08.619" endtime="20170916 02:05:08.620"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:08.620">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.324" endtime="20170916 02:05:08.620"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.620" endtime="20170916 02:05:08.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.621">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:08.621">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:08.621">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:08.621" endtime="20170916 02:05:08.621"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:08.622">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:05:08.323" endtime="20170916 02:05:08.622"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:08.622">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:05:08.323" endtime="20170916 02:05:08.622"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:05:08.622" endtime="20170916 02:05:08.623"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.322" endtime="20170916 02:05:08.623"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.626">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:08.626" endtime="20170916 02:05:08.627"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.628">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:08.627" endtime="20170916 02:05:08.628"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.628">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:08.628" endtime="20170916 02:05:08.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.629">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:08.628" endtime="20170916 02:05:08.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:08.630" endtime="20170916 02:05:08.826"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:08.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:08.826">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.629" endtime="20170916 02:05:08.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.826" endtime="20170916 02:05:08.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.827" endtime="20170916 02:05:08.827"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.625" endtime="20170916 02:05:08.828"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.625" endtime="20170916 02:05:08.828"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.624" endtime="20170916 02:05:08.828"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.828">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:05:08.828" endtime="20170916 02:05:08.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.830">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:08.830" endtime="20170916 02:05:08.830"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.831">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:08.831" endtime="20170916 02:05:08.832"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.831" endtime="20170916 02:05:08.832"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.829" endtime="20170916 02:05:08.832"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.829" endtime="20170916 02:05:08.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.919">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:08.919">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.832" endtime="20170916 02:05:08.919"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.922">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:08.921" endtime="20170916 02:05:08.922"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.923">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:08.922" endtime="20170916 02:05:08.923"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.922" endtime="20170916 02:05:08.923"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.921" endtime="20170916 02:05:08.923"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.920" endtime="20170916 02:05:08.923"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:08.923">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:08.923" endtime="20170916 02:05:08.923"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:08.924">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.624" endtime="20170916 02:05:08.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.924">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.924" endtime="20170916 02:05:08.924"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.925">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:08.925">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:08.925">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:08.925" endtime="20170916 02:05:08.925"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:08.925">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:05:08.623" endtime="20170916 02:05:08.925"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:08.926">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:05:08.623" endtime="20170916 02:05:08.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:05:08.926" endtime="20170916 02:05:08.926"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:08.931">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:08.930" endtime="20170916 02:05:08.931"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.932">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:08.931" endtime="20170916 02:05:08.932"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.932">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:08.932" endtime="20170916 02:05:08.932"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:08.933">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:08.933" endtime="20170916 02:05:08.933"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:09.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:08.934" endtime="20170916 02:05:09.125"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:09.125">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:09.125">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.933" endtime="20170916 02:05:09.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:09.126">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:09.126" endtime="20170916 02:05:09.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:09.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:09.126" endtime="20170916 02:05:09.127"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.930" endtime="20170916 02:05:09.127"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.929" endtime="20170916 02:05:09.127"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:08.929" endtime="20170916 02:05:09.127"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:09.128">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:05:09.127" endtime="20170916 02:05:09.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:09.130">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:09.129" endtime="20170916 02:05:09.130"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:09.131">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:09.131" endtime="20170916 02:05:09.131"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:09.130" endtime="20170916 02:05:09.131"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:09.129" endtime="20170916 02:05:09.131"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:09.128" endtime="20170916 02:05:09.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:09.247">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:09.247">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:09.132" endtime="20170916 02:05:09.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:09.249">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:09.249" endtime="20170916 02:05:09.249"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:09.251">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:09.250" endtime="20170916 02:05:09.251"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:09.249" endtime="20170916 02:05:09.251"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:09.248" endtime="20170916 02:05:09.251"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:09.248" endtime="20170916 02:05:09.251"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:09.252">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:09.252" endtime="20170916 02:05:09.252"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:09.252">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:08.928" endtime="20170916 02:05:09.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:09.253">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:09.252" endtime="20170916 02:05:09.253"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:09.253">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:09.253">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:09.253">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:09.253" endtime="20170916 02:05:09.254"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:09.254">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:05:08.927" endtime="20170916 02:05:09.254"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:09.254">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:05:08.927" endtime="20170916 02:05:09.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:09.255">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:05:09.255">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170916 02:05:09.254" endtime="20170916 02:05:09.255"></status>
</kw>
<status status="FAIL" starttime="20170916 02:05:08.926" endtime="20170916 02:05:09.255"></status>
</kw>
<status status="FAIL" starttime="20170916 02:05:08.321" endtime="20170916 02:05:09.255"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.261">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:19.261" endtime="20170916 02:05:19.262"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.262">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:19.262" endtime="20170916 02:05:19.263"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.263">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:19.263" endtime="20170916 02:05:19.264"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.264">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:19.264" endtime="20170916 02:05:19.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.493">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:19.265" endtime="20170916 02:05:19.493"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:19.493">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:19.493">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.265" endtime="20170916 02:05:19.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.494">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.493" endtime="20170916 02:05:19.494"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.494" endtime="20170916 02:05:19.495"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.260" endtime="20170916 02:05:19.495"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.259" endtime="20170916 02:05:19.495"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.259" endtime="20170916 02:05:19.495"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.495">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:05:19.495" endtime="20170916 02:05:19.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.498">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:19.497" endtime="20170916 02:05:19.498"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.499">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:19.498" endtime="20170916 02:05:19.499"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.498" endtime="20170916 02:05:19.499"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.496" endtime="20170916 02:05:19.499"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.496" endtime="20170916 02:05:19.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.568">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:19.568">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.499" endtime="20170916 02:05:19.568"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.570">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:19.569" endtime="20170916 02:05:19.570"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.571">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:19.570" endtime="20170916 02:05:19.571"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.570" endtime="20170916 02:05:19.571"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.569" endtime="20170916 02:05:19.571"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.568" endtime="20170916 02:05:19.571"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:19.571">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:19.571" endtime="20170916 02:05:19.571"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:19.572">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.258" endtime="20170916 02:05:19.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.572" endtime="20170916 02:05:19.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.573">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:19.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:19.573">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:19.573" endtime="20170916 02:05:19.573"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:19.573">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:05:19.257" endtime="20170916 02:05:19.574"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:19.574">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:05:19.257" endtime="20170916 02:05:19.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:05:19.574" endtime="20170916 02:05:19.574"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.257" endtime="20170916 02:05:19.574"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.578">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:19.578" endtime="20170916 02:05:19.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:19.613" endtime="20170916 02:05:19.614"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.615">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:19.614" endtime="20170916 02:05:19.615"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:19.615" endtime="20170916 02:05:19.616"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.797">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:19.617" endtime="20170916 02:05:19.798"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:19.798">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:19.798">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.616" endtime="20170916 02:05:19.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.798">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.798" endtime="20170916 02:05:19.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.799">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.799" endtime="20170916 02:05:19.799"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.577" endtime="20170916 02:05:19.799"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.577" endtime="20170916 02:05:19.799"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.576" endtime="20170916 02:05:19.800"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.800">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:05:19.800" endtime="20170916 02:05:19.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.802">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:19.802" endtime="20170916 02:05:19.802"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.803">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:19.803" endtime="20170916 02:05:19.803"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.803" endtime="20170916 02:05:19.804"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.801" endtime="20170916 02:05:19.804"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.801" endtime="20170916 02:05:19.804"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.892">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:19.892">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.804" endtime="20170916 02:05:19.892"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.894">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:19.893" endtime="20170916 02:05:19.894"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.895">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:19.895" endtime="20170916 02:05:19.895"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.894" endtime="20170916 02:05:19.895"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.893" endtime="20170916 02:05:19.895"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.892" endtime="20170916 02:05:19.895"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:19.896">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:19.895" endtime="20170916 02:05:19.896"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:19.896">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.576" endtime="20170916 02:05:19.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.896" endtime="20170916 02:05:19.897"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.897">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:19.897">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:19.897">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:19.897" endtime="20170916 02:05:19.897"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:19.898">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:05:19.575" endtime="20170916 02:05:19.898"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:19.898">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:05:19.575" endtime="20170916 02:05:19.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:05:19.898" endtime="20170916 02:05:19.898"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:19.903">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:19.902" endtime="20170916 02:05:19.903"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.904">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:19.903" endtime="20170916 02:05:19.904"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.904">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:19.904" endtime="20170916 02:05:19.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:19.905">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:19.905" endtime="20170916 02:05:19.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:20.095">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:19.906" endtime="20170916 02:05:20.095"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:20.096">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:20.096">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.905" endtime="20170916 02:05:20.096"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:20.096">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:20.096" endtime="20170916 02:05:20.096"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:20.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:20.097" endtime="20170916 02:05:20.097"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.902" endtime="20170916 02:05:20.097"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.901" endtime="20170916 02:05:20.097"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:19.901" endtime="20170916 02:05:20.097"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:20.098">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:05:20.098" endtime="20170916 02:05:20.098"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:20.100">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:20.099" endtime="20170916 02:05:20.100"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:20.101">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:20.101" endtime="20170916 02:05:20.101"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:20.100" endtime="20170916 02:05:20.101"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:20.099" endtime="20170916 02:05:20.101"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:20.098" endtime="20170916 02:05:20.102"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:20.190">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:20.190">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:20.102" endtime="20170916 02:05:20.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:20.192">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:20.191" endtime="20170916 02:05:20.192"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:20.193">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:20.193" endtime="20170916 02:05:20.193"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:20.192" endtime="20170916 02:05:20.193"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:20.191" endtime="20170916 02:05:20.193"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:20.191" endtime="20170916 02:05:20.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:20.194">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:20.194" endtime="20170916 02:05:20.194"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:20.194">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:19.900" endtime="20170916 02:05:20.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:20.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:20.194" endtime="20170916 02:05:20.195"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:20.195">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:20.195">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:20.195">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:20.195" endtime="20170916 02:05:20.196"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:20.196">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:05:19.899" endtime="20170916 02:05:20.196"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:20.196">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:05:19.899" endtime="20170916 02:05:20.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:20.197">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:05:20.197">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170916 02:05:20.196" endtime="20170916 02:05:20.197"></status>
</kw>
<status status="FAIL" starttime="20170916 02:05:19.899" endtime="20170916 02:05:20.197"></status>
</kw>
<status status="FAIL" starttime="20170916 02:05:19.256" endtime="20170916 02:05:20.197"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:30.203">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:30.203" endtime="20170916 02:05:30.203"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:30.204">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:30.204" endtime="20170916 02:05:30.204"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:30.204">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:30.204" endtime="20170916 02:05:30.205"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:30.205">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:30.205" endtime="20170916 02:05:30.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:30.383">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:30.206" endtime="20170916 02:05:30.383"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:30.384">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:30.384">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:30.205" endtime="20170916 02:05:30.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:30.384">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:30.384" endtime="20170916 02:05:30.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:30.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:30.385" endtime="20170916 02:05:30.385"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:30.202" endtime="20170916 02:05:30.385"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:30.201" endtime="20170916 02:05:30.385"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:30.200" endtime="20170916 02:05:30.386"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:30.386">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:05:30.386" endtime="20170916 02:05:30.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:30.388">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:30.388" endtime="20170916 02:05:30.388"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:30.389">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:30.389" endtime="20170916 02:05:30.389"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:30.389" endtime="20170916 02:05:30.389"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:30.387" endtime="20170916 02:05:30.390"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:30.387" endtime="20170916 02:05:30.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:31.403">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:31.404">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:30.390" endtime="20170916 02:05:31.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:31.406">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:31.405" endtime="20170916 02:05:31.406"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:31.407">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:31.407" endtime="20170916 02:05:31.407"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:31.406" endtime="20170916 02:05:31.407"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:31.405" endtime="20170916 02:05:31.408"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:31.404" endtime="20170916 02:05:31.408"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:31.408">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:31.408" endtime="20170916 02:05:31.408"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:31.408">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:30.200" endtime="20170916 02:05:31.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:31.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:31.409" endtime="20170916 02:05:31.409"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:31.410">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:31.410">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:31.410">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:31.409" endtime="20170916 02:05:31.410"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:31.410">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:05:30.199" endtime="20170916 02:05:31.410"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:31.410">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:05:30.199" endtime="20170916 02:05:31.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:05:31.411" endtime="20170916 02:05:31.411"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:30.198" endtime="20170916 02:05:31.411"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:31.415">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:31.414" endtime="20170916 02:05:31.415"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:31.416">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:31.415" endtime="20170916 02:05:31.416"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:31.416">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:31.416" endtime="20170916 02:05:31.416"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:31.417">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:31.417" endtime="20170916 02:05:31.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.313">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:31.418" endtime="20170916 02:05:32.313"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:32.313">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:32.313">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:31.417" endtime="20170916 02:05:32.313"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.314">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.313" endtime="20170916 02:05:32.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.314" endtime="20170916 02:05:32.315"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:31.414" endtime="20170916 02:05:32.315"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:31.413" endtime="20170916 02:05:32.315"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:31.413" endtime="20170916 02:05:32.315"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.315">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:05:32.315" endtime="20170916 02:05:32.315"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.318">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:32.317" endtime="20170916 02:05:32.318"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.319">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:32.319" endtime="20170916 02:05:32.319"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.318" endtime="20170916 02:05:32.319"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.316" endtime="20170916 02:05:32.319"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.316" endtime="20170916 02:05:32.319"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.419">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:32.419">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.320" endtime="20170916 02:05:32.419"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.421">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:32.420" endtime="20170916 02:05:32.421"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.422">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:32.422" endtime="20170916 02:05:32.422"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.421" endtime="20170916 02:05:32.422"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.420" endtime="20170916 02:05:32.422"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.419" endtime="20170916 02:05:32.422"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:32.423">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:32.422" endtime="20170916 02:05:32.423"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:32.423">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:31.412" endtime="20170916 02:05:32.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.423" endtime="20170916 02:05:32.424"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.424">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:32.424">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:32.424">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:32.424" endtime="20170916 02:05:32.424"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:32.425">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:05:31.412" endtime="20170916 02:05:32.425"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:32.425">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:05:31.411" endtime="20170916 02:05:32.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:05:32.425" endtime="20170916 02:05:32.425"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.429">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:32.429" endtime="20170916 02:05:32.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.430">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:32.430" endtime="20170916 02:05:32.430"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.431">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:32.431" endtime="20170916 02:05:32.431"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.432">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:32.431" endtime="20170916 02:05:32.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.704">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:32.433" endtime="20170916 02:05:32.705"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:32.705">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:32.705">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.432" endtime="20170916 02:05:32.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.706">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.705" endtime="20170916 02:05:32.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.706">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.706" endtime="20170916 02:05:32.706"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.428" endtime="20170916 02:05:32.707"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.428" endtime="20170916 02:05:32.707"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.427" endtime="20170916 02:05:32.707"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.707">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:05:32.707" endtime="20170916 02:05:32.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.709">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:32.709" endtime="20170916 02:05:32.709"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.710">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:32.710" endtime="20170916 02:05:32.711"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.710" endtime="20170916 02:05:32.711"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.708" endtime="20170916 02:05:32.711"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.708" endtime="20170916 02:05:32.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.799">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:32.799">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.711" endtime="20170916 02:05:32.799"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.801">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:32.801" endtime="20170916 02:05:32.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.802">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:32.802" endtime="20170916 02:05:32.802"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.801" endtime="20170916 02:05:32.802"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.800" endtime="20170916 02:05:32.802"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:32.800" endtime="20170916 02:05:32.803"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:32.803">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:32.803" endtime="20170916 02:05:32.803"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:32.803">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.427" endtime="20170916 02:05:32.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:32.804" endtime="20170916 02:05:32.804"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:32.804">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:32.805">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:32.805">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:32.804" endtime="20170916 02:05:32.805"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:32.805">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:05:32.426" endtime="20170916 02:05:32.805"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:32.805">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:05:32.426" endtime="20170916 02:05:32.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:32.806">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:05:32.806">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170916 02:05:32.806" endtime="20170916 02:05:32.806"></status>
</kw>
<status status="FAIL" starttime="20170916 02:05:32.426" endtime="20170916 02:05:32.806"></status>
</kw>
<status status="FAIL" starttime="20170916 02:05:30.198" endtime="20170916 02:05:32.806"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:42.812">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:05:42.812" endtime="20170916 02:05:42.813"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:42.813">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:05:42.813" endtime="20170916 02:05:42.813"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:42.814">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:05:42.814" endtime="20170916 02:05:42.814"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:42.815">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:05:42.814" endtime="20170916 02:05:42.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:43.475">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:05:42.815" endtime="20170916 02:05:43.475"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:43.476">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:05:43.476">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:42.815" endtime="20170916 02:05:43.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:43.476">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:43.476" endtime="20170916 02:05:43.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:43.477">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:43.477" endtime="20170916 02:05:43.477"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:42.811" endtime="20170916 02:05:43.477"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:42.811" endtime="20170916 02:05:43.477"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:42.810" endtime="20170916 02:05:43.478"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:43.478">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:05:43.478" endtime="20170916 02:05:43.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:43.480">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:43.480" endtime="20170916 02:05:43.480"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:43.481">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:05:43.481" endtime="20170916 02:05:43.482"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:43.481" endtime="20170916 02:05:43.482"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:43.479" endtime="20170916 02:05:43.482"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:43.478" endtime="20170916 02:05:43.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:51.338">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:05:51.339">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:43.482" endtime="20170916 02:05:51.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:51.341">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:51.340" endtime="20170916 02:05:51.341"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:51.342">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:05:51.342" endtime="20170916 02:05:51.342"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:51.341" endtime="20170916 02:05:51.342"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:51.340" endtime="20170916 02:05:51.342"></status>
</kw>
<status status="PASS" starttime="20170916 02:05:51.339" endtime="20170916 02:05:51.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:05:51.343">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:05:51.343" endtime="20170916 02:05:51.343"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:51.343">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:05:42.809" endtime="20170916 02:05:51.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:05:51.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:05:51.343" endtime="20170916 02:05:51.344"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:05:51.344">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:05:51.344">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:05:51.344">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:05:51.344" endtime="20170916 02:05:51.345"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:51.345">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170916 02:05:42.808" endtime="20170916 02:05:51.345"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:05:51.345">${power_state} = Off</msg>
<status status="PASS" starttime="20170916 02:05:42.808" endtime="20170916 02:05:51.345"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:05:51.346">On != Off</msg>
<status status="FAIL" starttime="20170916 02:05:51.345" endtime="20170916 02:05:51.346"></status>
</kw>
<status status="FAIL" starttime="20170916 02:05:42.808" endtime="20170916 02:05:51.346"></status>
</kw>
<status status="FAIL" starttime="20170916 02:05:42.807" endtime="20170916 02:05:51.346"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:01.351">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:01.351" endtime="20170916 02:06:01.352"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:01.352">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:01.352" endtime="20170916 02:06:01.352"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:01.353">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:01.353" endtime="20170916 02:06:01.353"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:01.354">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:01.353" endtime="20170916 02:06:01.354"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:01.822">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:01.355" endtime="20170916 02:06:01.822"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:01.822">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:01.822">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:01.354" endtime="20170916 02:06:01.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:01.823">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:01.823" endtime="20170916 02:06:01.823"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:01.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:01.823" endtime="20170916 02:06:01.824"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:01.350" endtime="20170916 02:06:01.824"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:01.350" endtime="20170916 02:06:01.824"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:01.349" endtime="20170916 02:06:01.824"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:01.825">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:06:01.824" endtime="20170916 02:06:01.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:01.827">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:01.826" endtime="20170916 02:06:01.827"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:01.828">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:01.828" endtime="20170916 02:06:01.828"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:01.827" endtime="20170916 02:06:01.828"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:01.825" endtime="20170916 02:06:01.828"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:01.825" endtime="20170916 02:06:01.828"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:02.482">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:02.482">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:01.828" endtime="20170916 02:06:02.482"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:02.484">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:02.484" endtime="20170916 02:06:02.484"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:02.485">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:02.485" endtime="20170916 02:06:02.485"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:02.484" endtime="20170916 02:06:02.485"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:02.483" endtime="20170916 02:06:02.485"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:02.483" endtime="20170916 02:06:02.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:02.486">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:02.486" endtime="20170916 02:06:02.486"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:02.486">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:01.349" endtime="20170916 02:06:02.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:02.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:02.487" endtime="20170916 02:06:02.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:02.488">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:02.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:02.488">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:02.487" endtime="20170916 02:06:02.488"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:02.488">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:06:01.348" endtime="20170916 02:06:02.488"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:02.488">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:06:01.348" endtime="20170916 02:06:02.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:02.489" endtime="20170916 02:06:02.489"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:01.347" endtime="20170916 02:06:02.489"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:02.493">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:02.492" endtime="20170916 02:06:02.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:02.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:02.494" endtime="20170916 02:06:02.494"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:02.495">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:02.494" endtime="20170916 02:06:02.495"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:02.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:02.495" endtime="20170916 02:06:02.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:02.866">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:02.496" endtime="20170916 02:06:02.866"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:02.866">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:02.866">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:02.495" endtime="20170916 02:06:02.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:02.867">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:02.866" endtime="20170916 02:06:02.867"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:02.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:02.867" endtime="20170916 02:06:02.867"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:02.492" endtime="20170916 02:06:02.868"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:02.491" endtime="20170916 02:06:02.868"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:02.491" endtime="20170916 02:06:02.868"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:02.868">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:06:02.868" endtime="20170916 02:06:02.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:02.870">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:02.870" endtime="20170916 02:06:02.871"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:02.871">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:02.871" endtime="20170916 02:06:02.872"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:02.871" endtime="20170916 02:06:02.872"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:02.869" endtime="20170916 02:06:02.872"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:02.869" endtime="20170916 02:06:02.872"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:03.416">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:03.416">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:02.872" endtime="20170916 02:06:03.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:03.418">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:03.417" endtime="20170916 02:06:03.418"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:03.419">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:03.418" endtime="20170916 02:06:03.419"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:03.418" endtime="20170916 02:06:03.419"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:03.417" endtime="20170916 02:06:03.419"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:03.416" endtime="20170916 02:06:03.419"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:03.419">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:03.419" endtime="20170916 02:06:03.420"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:03.420">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:02.490" endtime="20170916 02:06:03.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:03.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:03.420" endtime="20170916 02:06:03.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:03.422">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:03.422">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:03.422">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:03.421" endtime="20170916 02:06:03.422"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:03.422">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:06:02.490" endtime="20170916 02:06:03.423"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:03.423">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:06:02.489" endtime="20170916 02:06:03.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:03.423" endtime="20170916 02:06:03.424"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:03.430">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:03.429" endtime="20170916 02:06:03.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:03.431">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:03.431" endtime="20170916 02:06:03.431"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:03.432">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:03.431" endtime="20170916 02:06:03.432"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:03.432">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:03.432" endtime="20170916 02:06:03.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:03.872">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:03.433" endtime="20170916 02:06:03.872"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:03.872">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:03.873">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:03.432" endtime="20170916 02:06:03.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:03.873">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:03.873" endtime="20170916 02:06:03.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:03.874">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:03.874" endtime="20170916 02:06:03.874"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:03.429" endtime="20170916 02:06:03.874"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:03.428" endtime="20170916 02:06:03.874"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:03.427" endtime="20170916 02:06:03.874"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:03.875">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:06:03.875" endtime="20170916 02:06:03.875"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:03.880">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:03.879" endtime="20170916 02:06:03.880"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:03.882">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:03.881" endtime="20170916 02:06:03.882"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:03.881" endtime="20170916 02:06:03.882"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:03.876" endtime="20170916 02:06:03.882"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:03.875" endtime="20170916 02:06:03.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:04.265">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:04.265">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:03.882" endtime="20170916 02:06:04.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:04.267">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:04.267" endtime="20170916 02:06:04.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:04.268">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:04.268" endtime="20170916 02:06:04.269"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:04.268" endtime="20170916 02:06:04.269"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:04.266" endtime="20170916 02:06:04.269"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:04.266" endtime="20170916 02:06:04.269"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:04.269">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:04.269" endtime="20170916 02:06:04.269"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:04.269">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:03.426" endtime="20170916 02:06:04.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:04.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:04.270" endtime="20170916 02:06:04.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:04.271">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:04.271">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:04.271">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:04.270" endtime="20170916 02:06:04.271"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:04.271">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:06:03.425" endtime="20170916 02:06:04.271"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:04.271">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:06:03.425" endtime="20170916 02:06:04.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:04.272">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:06:04.272">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170916 02:06:04.272" endtime="20170916 02:06:04.272"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:03.424" endtime="20170916 02:06:04.273"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:01.347" endtime="20170916 02:06:04.273"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.278">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:14.277" endtime="20170916 02:06:14.278"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.279">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:14.278" endtime="20170916 02:06:14.279"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.280">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:14.279" endtime="20170916 02:06:14.280"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.281">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:14.280" endtime="20170916 02:06:14.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.461">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:14.281" endtime="20170916 02:06:14.461"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:14.461">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:14.461">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.281" endtime="20170916 02:06:14.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.462">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.461" endtime="20170916 02:06:14.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.463">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.462" endtime="20170916 02:06:14.463"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.277" endtime="20170916 02:06:14.463"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.276" endtime="20170916 02:06:14.463"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.276" endtime="20170916 02:06:14.463"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.463">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:06:14.463" endtime="20170916 02:06:14.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.466">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:14.465" endtime="20170916 02:06:14.466"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.466">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:14.466" endtime="20170916 02:06:14.467"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.466" endtime="20170916 02:06:14.467"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.464" endtime="20170916 02:06:14.467"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.464" endtime="20170916 02:06:14.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:14.529">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.467" endtime="20170916 02:06:14.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.531">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:14.530" endtime="20170916 02:06:14.531"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.532">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:14.532" endtime="20170916 02:06:14.532"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.531" endtime="20170916 02:06:14.532"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.530" endtime="20170916 02:06:14.532"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.529" endtime="20170916 02:06:14.532"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:14.533">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:14.533" endtime="20170916 02:06:14.533"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:14.533">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.275" endtime="20170916 02:06:14.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.534">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.533" endtime="20170916 02:06:14.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.534">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:14.534">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:14.534">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:14.534" endtime="20170916 02:06:14.534"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:14.535">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:06:14.274" endtime="20170916 02:06:14.535"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:14.535">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:06:14.274" endtime="20170916 02:06:14.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:14.535" endtime="20170916 02:06:14.536"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.274" endtime="20170916 02:06:14.536"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.540">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:14.539" endtime="20170916 02:06:14.540"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.541">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:14.540" endtime="20170916 02:06:14.541"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.541">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:14.541" endtime="20170916 02:06:14.541"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:14.542" endtime="20170916 02:06:14.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.720">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:14.543" endtime="20170916 02:06:14.720"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:14.721">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:14.721">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.542" endtime="20170916 02:06:14.721"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.722">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.721" endtime="20170916 02:06:14.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.722" endtime="20170916 02:06:14.722"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.539" endtime="20170916 02:06:14.722"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.538" endtime="20170916 02:06:14.723"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.537" endtime="20170916 02:06:14.723"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.723">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:06:14.723" endtime="20170916 02:06:14.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.725">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:14.725" endtime="20170916 02:06:14.725"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.726">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:14.726" endtime="20170916 02:06:14.726"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.725" endtime="20170916 02:06:14.726"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.724" endtime="20170916 02:06:14.727"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.724" endtime="20170916 02:06:14.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.856">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:14.856">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.727" endtime="20170916 02:06:14.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.858">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:14.858" endtime="20170916 02:06:14.858"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.860">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:14.859" endtime="20170916 02:06:14.860"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.858" endtime="20170916 02:06:14.860"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.857" endtime="20170916 02:06:14.860"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.857" endtime="20170916 02:06:14.860"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:14.860">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:14.860" endtime="20170916 02:06:14.860"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:14.861">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.537" endtime="20170916 02:06:14.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.861" endtime="20170916 02:06:14.862"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.862">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:14.862">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:14.862">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:14.862" endtime="20170916 02:06:14.862"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:14.862">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:06:14.536" endtime="20170916 02:06:14.863"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:14.863">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:06:14.536" endtime="20170916 02:06:14.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:14.863" endtime="20170916 02:06:14.863"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:14.867">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:14.867" endtime="20170916 02:06:14.868"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.868">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:14.868" endtime="20170916 02:06:14.868"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.869">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:14.868" endtime="20170916 02:06:14.869"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:14.870">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:14.869" endtime="20170916 02:06:14.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:15.060">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:14.870" endtime="20170916 02:06:15.060"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:15.061">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:15.061">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.870" endtime="20170916 02:06:15.061"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:15.061">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:15.061" endtime="20170916 02:06:15.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:15.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:15.062" endtime="20170916 02:06:15.063"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.866" endtime="20170916 02:06:15.063"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.866" endtime="20170916 02:06:15.063"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:14.865" endtime="20170916 02:06:15.063"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:15.063">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:06:15.063" endtime="20170916 02:06:15.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:15.066">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:15.065" endtime="20170916 02:06:15.066"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:15.066">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:15.066" endtime="20170916 02:06:15.067"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:15.066" endtime="20170916 02:06:15.067"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:15.064" endtime="20170916 02:06:15.067"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:15.064" endtime="20170916 02:06:15.067"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:15.189">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:15.189">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:15.067" endtime="20170916 02:06:15.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:15.191">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:15.190" endtime="20170916 02:06:15.191"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:15.191">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:15.191" endtime="20170916 02:06:15.192"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:15.191" endtime="20170916 02:06:15.192"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:15.190" endtime="20170916 02:06:15.192"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:15.189" endtime="20170916 02:06:15.192"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:15.192">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:15.192" endtime="20170916 02:06:15.192"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:15.193">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:14.865" endtime="20170916 02:06:15.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:15.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:15.193" endtime="20170916 02:06:15.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:15.194">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:15.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:15.194">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:15.194" endtime="20170916 02:06:15.194"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:15.194">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:06:14.864" endtime="20170916 02:06:15.194"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:15.195">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:06:14.864" endtime="20170916 02:06:15.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:15.195">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:06:15.195">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:06:15.195" endtime="20170916 02:06:15.195"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:14.864" endtime="20170916 02:06:15.196"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:14.273" endtime="20170916 02:06:15.196"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:25.201">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:25.201" endtime="20170916 02:06:25.202"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:25.202">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:25.202" endtime="20170916 02:06:25.202"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:25.203">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:25.202" endtime="20170916 02:06:25.203"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:25.203">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:25.203" endtime="20170916 02:06:25.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:25.707">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:25.204" endtime="20170916 02:06:25.707"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:25.707">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:25.707">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:25.204" endtime="20170916 02:06:25.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:25.708">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:25.708" endtime="20170916 02:06:25.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:25.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:25.709" endtime="20170916 02:06:25.709"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:25.200" endtime="20170916 02:06:25.709"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:25.199" endtime="20170916 02:06:25.709"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:25.199" endtime="20170916 02:06:25.709"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:25.710">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:06:25.710" endtime="20170916 02:06:25.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:25.713">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:25.712" endtime="20170916 02:06:25.713"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:25.714">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:25.713" endtime="20170916 02:06:25.714"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:25.713" endtime="20170916 02:06:25.714"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:25.711" endtime="20170916 02:06:25.714"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:25.710" endtime="20170916 02:06:25.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:26.589">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:26.589">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:25.714" endtime="20170916 02:06:26.589"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:26.591">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:26.590" endtime="20170916 02:06:26.591"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:26.592">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:26.592" endtime="20170916 02:06:26.592"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:26.591" endtime="20170916 02:06:26.592"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:26.590" endtime="20170916 02:06:26.593"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:26.589" endtime="20170916 02:06:26.593"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:26.593">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:26.593" endtime="20170916 02:06:26.593"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:26.593">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:25.198" endtime="20170916 02:06:26.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:26.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:26.594" endtime="20170916 02:06:26.594"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:26.595">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:26.595">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:26.595">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:26.594" endtime="20170916 02:06:26.595"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:26.595">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:06:25.198" endtime="20170916 02:06:26.595"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:26.595">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:06:25.197" endtime="20170916 02:06:26.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:26.596" endtime="20170916 02:06:26.596"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:25.197" endtime="20170916 02:06:26.596"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:26.600">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:26.599" endtime="20170916 02:06:26.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:26.600">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:26.600" endtime="20170916 02:06:26.600"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:26.601">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:26.601" endtime="20170916 02:06:26.601"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:26.602">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:26.602" endtime="20170916 02:06:26.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:27.105">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:26.603" endtime="20170916 02:06:27.106"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:27.106">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:27.106">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:26.602" endtime="20170916 02:06:27.106"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:27.107">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:27.106" endtime="20170916 02:06:27.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:27.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:27.107" endtime="20170916 02:06:27.107"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:26.599" endtime="20170916 02:06:27.107"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:26.598" endtime="20170916 02:06:27.108"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:26.598" endtime="20170916 02:06:27.108"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:27.108">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:06:27.108" endtime="20170916 02:06:27.108"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:27.111">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:27.110" endtime="20170916 02:06:27.111"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:27.112">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:27.112" endtime="20170916 02:06:27.112"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:27.111" endtime="20170916 02:06:27.112"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:27.109" endtime="20170916 02:06:27.112"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:27.109" endtime="20170916 02:06:27.112"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:27.973">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:27.973">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:27.112" endtime="20170916 02:06:27.973"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:27.975">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:27.974" endtime="20170916 02:06:27.975"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:27.976">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:27.976" endtime="20170916 02:06:27.976"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:27.975" endtime="20170916 02:06:27.976"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:27.974" endtime="20170916 02:06:27.976"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:27.973" endtime="20170916 02:06:27.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:27.977">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:27.976" endtime="20170916 02:06:27.977"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:27.977">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:26.597" endtime="20170916 02:06:27.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:27.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:27.977" endtime="20170916 02:06:27.978"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:27.978">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:27.978">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:27.978">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:27.978" endtime="20170916 02:06:27.978"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:27.979">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:06:26.597" endtime="20170916 02:06:27.979"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:27.979">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:06:26.596" endtime="20170916 02:06:27.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:27.979" endtime="20170916 02:06:27.980"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:27.984">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:27.984" endtime="20170916 02:06:27.984"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:27.985">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:27.984" endtime="20170916 02:06:27.985"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:27.985">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:27.985" endtime="20170916 02:06:27.985"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:27.986">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:27.986" endtime="20170916 02:06:27.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:28.353">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:27.987" endtime="20170916 02:06:28.353"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:28.353">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:28.353">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:27.986" endtime="20170916 02:06:28.353"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:28.354">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:28.354" endtime="20170916 02:06:28.354"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:28.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:28.354" endtime="20170916 02:06:28.355"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:27.983" endtime="20170916 02:06:28.355"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:27.982" endtime="20170916 02:06:28.355"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:27.982" endtime="20170916 02:06:28.355"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:28.356">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:06:28.355" endtime="20170916 02:06:28.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:28.358">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:28.357" endtime="20170916 02:06:28.358"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:28.359">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:28.359" endtime="20170916 02:06:28.359"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:28.358" endtime="20170916 02:06:28.359"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:28.356" endtime="20170916 02:06:28.359"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:28.356" endtime="20170916 02:06:28.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:28.930">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:28.930">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:28.359" endtime="20170916 02:06:28.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:28.932">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:28.932" endtime="20170916 02:06:28.932"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:28.933">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:28.933" endtime="20170916 02:06:28.933"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:28.932" endtime="20170916 02:06:28.933"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:28.931" endtime="20170916 02:06:28.934"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:28.931" endtime="20170916 02:06:28.934"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:28.934">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:28.934" endtime="20170916 02:06:28.934"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:28.934">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:27.981" endtime="20170916 02:06:28.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:28.935">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:28.935" endtime="20170916 02:06:28.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:28.935">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:28.936">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:28.936">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:28.935" endtime="20170916 02:06:28.936"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:28.936">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:06:27.980" endtime="20170916 02:06:28.936"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:28.936">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:06:27.980" endtime="20170916 02:06:28.936"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:28.937">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:06:28.937">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:06:28.937" endtime="20170916 02:06:28.937"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:27.980" endtime="20170916 02:06:28.937"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:25.196" endtime="20170916 02:06:28.938"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:38.943">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:38.943" endtime="20170916 02:06:38.943"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:38.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:38.944" endtime="20170916 02:06:38.944"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:38.945">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:38.944" endtime="20170916 02:06:38.945"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:38.945">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:38.945" endtime="20170916 02:06:38.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:39.366">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:38.946" endtime="20170916 02:06:39.366"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:39.366">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:39.366">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:38.946" endtime="20170916 02:06:39.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:39.367">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:39.366" endtime="20170916 02:06:39.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:39.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:39.367" endtime="20170916 02:06:39.367"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:38.942" endtime="20170916 02:06:39.368"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:38.941" endtime="20170916 02:06:39.368"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:38.941" endtime="20170916 02:06:39.368"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:39.368">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:06:39.368" endtime="20170916 02:06:39.368"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:39.371">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:39.370" endtime="20170916 02:06:39.371"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:39.371">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:39.371" endtime="20170916 02:06:39.372"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:39.371" endtime="20170916 02:06:39.372"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:39.369" endtime="20170916 02:06:39.372"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:39.369" endtime="20170916 02:06:39.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:39.737">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:39.737">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:39.372" endtime="20170916 02:06:39.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:39.739">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:39.738" endtime="20170916 02:06:39.740"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:39.740">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:39.740" endtime="20170916 02:06:39.741"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:39.740" endtime="20170916 02:06:39.741"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:39.738" endtime="20170916 02:06:39.741"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:39.738" endtime="20170916 02:06:39.741"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:39.741">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:39.741" endtime="20170916 02:06:39.741"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:39.741">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:38.940" endtime="20170916 02:06:39.742"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:39.742">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:39.742" endtime="20170916 02:06:39.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:39.743">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:39.743">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:39.743">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:39.742" endtime="20170916 02:06:39.743"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:39.743">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:06:38.939" endtime="20170916 02:06:39.743"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:39.744">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:06:38.939" endtime="20170916 02:06:39.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:39.744" endtime="20170916 02:06:39.744"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:38.939" endtime="20170916 02:06:39.744"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:39.748">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:39.747" endtime="20170916 02:06:39.748"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:39.749">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:39.748" endtime="20170916 02:06:39.749"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:39.749">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:39.749" endtime="20170916 02:06:39.749"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:39.750">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:39.750" endtime="20170916 02:06:39.750"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:40.359">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:39.751" endtime="20170916 02:06:40.359"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:40.360">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:40.360">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:39.750" endtime="20170916 02:06:40.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:40.360">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:40.360" endtime="20170916 02:06:40.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:40.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:40.361" endtime="20170916 02:06:40.361"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:39.747" endtime="20170916 02:06:40.361"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:39.746" endtime="20170916 02:06:40.361"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:39.746" endtime="20170916 02:06:40.362"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:40.362">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:06:40.362" endtime="20170916 02:06:40.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:40.365">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:40.364" endtime="20170916 02:06:40.365"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:40.366">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:40.365" endtime="20170916 02:06:40.366"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:40.365" endtime="20170916 02:06:40.366"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:40.363" endtime="20170916 02:06:40.366"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:40.363" endtime="20170916 02:06:40.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:41.126">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:41.126">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:40.366" endtime="20170916 02:06:41.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:41.128">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:41.128" endtime="20170916 02:06:41.128"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:41.129">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:41.129" endtime="20170916 02:06:41.129"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:41.128" endtime="20170916 02:06:41.129"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:41.127" endtime="20170916 02:06:41.129"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:41.127" endtime="20170916 02:06:41.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:41.130">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:41.130" endtime="20170916 02:06:41.130"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:41.130">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:39.745" endtime="20170916 02:06:41.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:41.131">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:41.130" endtime="20170916 02:06:41.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:41.131">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:41.131">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:41.131">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:41.131" endtime="20170916 02:06:41.132"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:41.132">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:06:39.745" endtime="20170916 02:06:41.132"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:41.132">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:06:39.744" endtime="20170916 02:06:41.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:41.133" endtime="20170916 02:06:41.133"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:41.137">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:41.137" endtime="20170916 02:06:41.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:41.138">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:41.138" endtime="20170916 02:06:41.138"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:41.139">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:41.138" endtime="20170916 02:06:41.139"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:41.143">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:41.139" endtime="20170916 02:06:41.143"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:41.715">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:41.143" endtime="20170916 02:06:41.715"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:41.715">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:41.715">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:41.143" endtime="20170916 02:06:41.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:41.716">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:41.715" endtime="20170916 02:06:41.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:41.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:41.716" endtime="20170916 02:06:41.717"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:41.136" endtime="20170916 02:06:41.717"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:41.136" endtime="20170916 02:06:41.717"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:41.135" endtime="20170916 02:06:41.717"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:41.717">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:06:41.717" endtime="20170916 02:06:41.718"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:41.720">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:41.719" endtime="20170916 02:06:41.720"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:41.721">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:41.720" endtime="20170916 02:06:41.721"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:41.720" endtime="20170916 02:06:41.721"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:41.718" endtime="20170916 02:06:41.721"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:41.718" endtime="20170916 02:06:41.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:42.140">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:42.140">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:41.721" endtime="20170916 02:06:42.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:42.142">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:42.141" endtime="20170916 02:06:42.142"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:42.143">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:42.143" endtime="20170916 02:06:42.143"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:42.142" endtime="20170916 02:06:42.143"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:42.141" endtime="20170916 02:06:42.143"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:42.140" endtime="20170916 02:06:42.143"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:42.144">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:42.143" endtime="20170916 02:06:42.144"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:42.144">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:41.135" endtime="20170916 02:06:42.144"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:42.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:42.144" endtime="20170916 02:06:42.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:42.145">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:42.145">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:42.145">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:42.145" endtime="20170916 02:06:42.145"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:42.146">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:06:41.134" endtime="20170916 02:06:42.146"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:42.146">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:06:41.134" endtime="20170916 02:06:42.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:42.146">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:06:42.147">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:06:42.146" endtime="20170916 02:06:42.147"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:41.133" endtime="20170916 02:06:42.147"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:38.938" endtime="20170916 02:06:42.147"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:52.154">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:52.154" endtime="20170916 02:06:52.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:52.156">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:52.155" endtime="20170916 02:06:52.156"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:52.157">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:52.156" endtime="20170916 02:06:52.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:52.158">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:52.157" endtime="20170916 02:06:52.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:52.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:52.159" endtime="20170916 02:06:52.710"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:52.710">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:52.710">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:52.158" endtime="20170916 02:06:52.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:52.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:52.711" endtime="20170916 02:06:52.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:52.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:52.711" endtime="20170916 02:06:52.712"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:52.153" endtime="20170916 02:06:52.712"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:52.153" endtime="20170916 02:06:52.712"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:52.152" endtime="20170916 02:06:52.712"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:52.713">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:06:52.712" endtime="20170916 02:06:52.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:52.715">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:52.714" endtime="20170916 02:06:52.715"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:52.716">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:52.715" endtime="20170916 02:06:52.716"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:52.715" endtime="20170916 02:06:52.716"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:52.713" endtime="20170916 02:06:52.716"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:52.713" endtime="20170916 02:06:52.716"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:53.350">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:53.350">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:52.716" endtime="20170916 02:06:53.350"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:53.353">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:53.352" endtime="20170916 02:06:53.353"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:53.354">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:53.353" endtime="20170916 02:06:53.354"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:53.353" endtime="20170916 02:06:53.354"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:53.351" endtime="20170916 02:06:53.354"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:53.351" endtime="20170916 02:06:53.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:53.354">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:53.354" endtime="20170916 02:06:53.355"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:53.355">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:52.150" endtime="20170916 02:06:53.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:53.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:53.355" endtime="20170916 02:06:53.355"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:53.356">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:53.356">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:53.356">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:53.356" endtime="20170916 02:06:53.356"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:53.357">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:06:52.149" endtime="20170916 02:06:53.357"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:53.357">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:06:52.149" endtime="20170916 02:06:53.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:53.357" endtime="20170916 02:06:53.357"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:52.148" endtime="20170916 02:06:53.358"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:53.362">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:53.361" endtime="20170916 02:06:53.362"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:53.363">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:53.363" endtime="20170916 02:06:53.363"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:53.364">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:53.363" endtime="20170916 02:06:53.364"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:53.365">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:53.365" endtime="20170916 02:06:53.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:53.922">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:53.366" endtime="20170916 02:06:53.923"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:53.923">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:53.923">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:53.366" endtime="20170916 02:06:53.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:53.924">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:53.923" endtime="20170916 02:06:53.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:53.924">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:53.924" endtime="20170916 02:06:53.925"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:53.360" endtime="20170916 02:06:53.925"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:53.360" endtime="20170916 02:06:53.925"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:53.359" endtime="20170916 02:06:53.925"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:53.926">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:06:53.925" endtime="20170916 02:06:53.926"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:53.928">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:53.927" endtime="20170916 02:06:53.928"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:53.929">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:53.929" endtime="20170916 02:06:53.929"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:53.928" endtime="20170916 02:06:53.929"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:53.926" endtime="20170916 02:06:53.930"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:53.926" endtime="20170916 02:06:53.930"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:54.441">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:54.442">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:53.930" endtime="20170916 02:06:54.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:54.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:54.443" endtime="20170916 02:06:54.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:54.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:54.445" endtime="20170916 02:06:54.445"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:54.444" endtime="20170916 02:06:54.445"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:54.443" endtime="20170916 02:06:54.445"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:54.442" endtime="20170916 02:06:54.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:54.446">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:54.445" endtime="20170916 02:06:54.446"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:54.446">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:53.359" endtime="20170916 02:06:54.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:54.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:54.446" endtime="20170916 02:06:54.447"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:54.447">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:54.447">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:54.447">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:54.447" endtime="20170916 02:06:54.447"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:54.448">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:06:53.358" endtime="20170916 02:06:54.448"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:54.448">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:06:53.358" endtime="20170916 02:06:54.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:06:54.448" endtime="20170916 02:06:54.448"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:54.454">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:06:54.453" endtime="20170916 02:06:54.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:54.455">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:06:54.455" endtime="20170916 02:06:54.455"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:54.456">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:06:54.455" endtime="20170916 02:06:54.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:54.457">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:06:54.456" endtime="20170916 02:06:54.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:54.870">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:06:54.457" endtime="20170916 02:06:54.870"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:54.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:06:54.870">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:54.457" endtime="20170916 02:06:54.870"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:54.871">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:54.871" endtime="20170916 02:06:54.871"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:54.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:54.871" endtime="20170916 02:06:54.872"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:54.452" endtime="20170916 02:06:54.872"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:54.452" endtime="20170916 02:06:54.872"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:54.451" endtime="20170916 02:06:54.872"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:54.873">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:06:54.873" endtime="20170916 02:06:54.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:54.875">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:54.874" endtime="20170916 02:06:54.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:54.876">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:06:54.876" endtime="20170916 02:06:54.876"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:54.875" endtime="20170916 02:06:54.876"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:54.874" endtime="20170916 02:06:54.876"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:54.873" endtime="20170916 02:06:54.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:55.700">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:06:55.700">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:54.877" endtime="20170916 02:06:55.700"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:55.702">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:55.701" endtime="20170916 02:06:55.702"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:55.703">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:06:55.703" endtime="20170916 02:06:55.703"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:55.702" endtime="20170916 02:06:55.703"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:55.701" endtime="20170916 02:06:55.703"></status>
</kw>
<status status="PASS" starttime="20170916 02:06:55.700" endtime="20170916 02:06:55.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:06:55.704">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:06:55.704" endtime="20170916 02:06:55.704"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:55.704">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:06:54.450" endtime="20170916 02:06:55.704"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:55.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:06:55.704" endtime="20170916 02:06:55.705"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:06:55.705">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:06:55.705">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:06:55.705">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:06:55.705" endtime="20170916 02:06:55.706"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:55.706">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:06:54.449" endtime="20170916 02:06:55.706"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:06:55.706">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:06:54.449" endtime="20170916 02:06:55.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:06:55.707">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:06:55.707">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:06:55.706" endtime="20170916 02:06:55.707"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:54.449" endtime="20170916 02:06:55.707"></status>
</kw>
<status status="FAIL" starttime="20170916 02:06:52.147" endtime="20170916 02:06:55.707"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:05.715">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:05.714" endtime="20170916 02:07:05.715"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:05.716">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:05.716" endtime="20170916 02:07:05.716"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:05.717">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:05.717" endtime="20170916 02:07:05.717"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:05.718">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:05.718" endtime="20170916 02:07:05.718"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:06.324">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:05.719" endtime="20170916 02:07:06.324"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:06.324">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:06.324">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:05.719" endtime="20170916 02:07:06.324"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:06.325">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:06.324" endtime="20170916 02:07:06.325"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:06.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:06.325" endtime="20170916 02:07:06.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:05.714" endtime="20170916 02:07:06.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:05.712" endtime="20170916 02:07:06.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:05.711" endtime="20170916 02:07:06.326"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:06.327">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:07:06.326" endtime="20170916 02:07:06.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:06.329">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:06.328" endtime="20170916 02:07:06.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:06.330">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:06.329" endtime="20170916 02:07:06.330"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:06.329" endtime="20170916 02:07:06.330"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:06.327" endtime="20170916 02:07:06.330"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:06.327" endtime="20170916 02:07:06.330"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:07.081">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:07.081">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:06.330" endtime="20170916 02:07:07.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:07.084">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:07.083" endtime="20170916 02:07:07.084"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:07.085">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:07.085" endtime="20170916 02:07:07.085"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:07.084" endtime="20170916 02:07:07.085"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:07.082" endtime="20170916 02:07:07.086"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:07.082" endtime="20170916 02:07:07.086"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:07.086">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:07.086" endtime="20170916 02:07:07.086"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:07.086">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:05.710" endtime="20170916 02:07:07.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:07.087">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:07.087" endtime="20170916 02:07:07.087"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:07.088">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:07.088">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:07.088">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:07.087" endtime="20170916 02:07:07.088"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:07.088">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:07:05.710" endtime="20170916 02:07:07.088"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:07.088">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:07:05.709" endtime="20170916 02:07:07.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:07:07.089" endtime="20170916 02:07:07.089"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:05.709" endtime="20170916 02:07:07.089"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:07.093">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:07.092" endtime="20170916 02:07:07.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:07.094">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:07.093" endtime="20170916 02:07:07.094"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:07.094">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:07.094" endtime="20170916 02:07:07.094"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:07.095">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:07.095" endtime="20170916 02:07:07.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:07.442">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:07.096" endtime="20170916 02:07:07.442"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:07.442">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:07.442">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:07.095" endtime="20170916 02:07:07.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:07.443">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:07.442" endtime="20170916 02:07:07.443"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:07.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:07.443" endtime="20170916 02:07:07.444"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:07.092" endtime="20170916 02:07:07.444"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:07.091" endtime="20170916 02:07:07.444"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:07.091" endtime="20170916 02:07:07.444"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:07.445">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:07:07.444" endtime="20170916 02:07:07.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:07.447">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:07.446" endtime="20170916 02:07:07.447"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:07.448">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:07.448" endtime="20170916 02:07:07.448"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:07.447" endtime="20170916 02:07:07.448"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:07.445" endtime="20170916 02:07:07.448"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:07.445" endtime="20170916 02:07:07.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:08.444">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:08.445">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:07.449" endtime="20170916 02:07:08.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:08.447">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:08.446" endtime="20170916 02:07:08.447"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:08.448">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:08.448" endtime="20170916 02:07:08.448"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:08.447" endtime="20170916 02:07:08.448"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:08.446" endtime="20170916 02:07:08.448"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:08.445" endtime="20170916 02:07:08.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:08.449">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:08.449" endtime="20170916 02:07:08.449"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:08.449">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:07.090" endtime="20170916 02:07:08.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:08.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:08.449" endtime="20170916 02:07:08.450"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:08.450">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:08.450">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:08.451">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:08.450" endtime="20170916 02:07:08.451"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:08.451">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:07:07.090" endtime="20170916 02:07:08.451"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:08.451">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:07:07.089" endtime="20170916 02:07:08.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:07:08.451" endtime="20170916 02:07:08.452"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:08.456">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:08.455" endtime="20170916 02:07:08.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:08.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:08.456" endtime="20170916 02:07:08.457"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:08.457">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:08.457" endtime="20170916 02:07:08.457"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:08.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:08.458" endtime="20170916 02:07:08.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:08.932">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:08.459" endtime="20170916 02:07:08.932"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:08.932">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:08.932">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:08.458" endtime="20170916 02:07:08.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:08.933">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:08.933" endtime="20170916 02:07:08.933"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:08.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:08.934" endtime="20170916 02:07:08.934"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:08.455" endtime="20170916 02:07:08.934"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:08.454" endtime="20170916 02:07:08.934"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:08.454" endtime="20170916 02:07:08.934"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:08.935">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:07:08.935" endtime="20170916 02:07:08.935"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:08.937">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:08.936" endtime="20170916 02:07:08.937"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:08.938">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:08.938" endtime="20170916 02:07:08.938"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:08.937" endtime="20170916 02:07:08.938"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:08.936" endtime="20170916 02:07:08.938"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:08.935" endtime="20170916 02:07:08.938"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:09.530">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:09.531">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:08.939" endtime="20170916 02:07:09.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:09.533">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:09.532" endtime="20170916 02:07:09.533"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:09.534">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:09.533" endtime="20170916 02:07:09.534"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:09.533" endtime="20170916 02:07:09.534"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:09.531" endtime="20170916 02:07:09.534"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:09.531" endtime="20170916 02:07:09.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:09.534">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:09.534" endtime="20170916 02:07:09.534"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:09.535">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:08.453" endtime="20170916 02:07:09.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:09.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:09.535" endtime="20170916 02:07:09.535"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:09.536">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:09.536">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:09.536">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:09.536" endtime="20170916 02:07:09.536"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:09.536">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:07:08.453" endtime="20170916 02:07:09.536"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:09.537">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:07:08.452" endtime="20170916 02:07:09.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:09.537">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:07:09.537">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:07:09.537" endtime="20170916 02:07:09.537"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:08.452" endtime="20170916 02:07:09.538"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:05.708" endtime="20170916 02:07:09.538"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:19.544">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:19.543" endtime="20170916 02:07:19.544"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:19.545">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:19.544" endtime="20170916 02:07:19.545"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:19.545">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:19.545" endtime="20170916 02:07:19.545"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:19.546">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:19.546" endtime="20170916 02:07:19.546"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:19.820">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:19.547" endtime="20170916 02:07:19.820"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:19.821">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:19.821">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:19.546" endtime="20170916 02:07:19.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:19.821">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:19.821" endtime="20170916 02:07:19.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:19.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:19.822" endtime="20170916 02:07:19.822"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:19.543" endtime="20170916 02:07:19.822"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:19.542" endtime="20170916 02:07:19.822"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:19.541" endtime="20170916 02:07:19.823"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:19.823">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:07:19.823" endtime="20170916 02:07:19.823"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:19.825">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:19.825" endtime="20170916 02:07:19.825"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:19.826">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:19.826" endtime="20170916 02:07:19.826"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:19.825" endtime="20170916 02:07:19.826"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:19.824" endtime="20170916 02:07:19.827"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:19.823" endtime="20170916 02:07:19.827"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.029">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:20.030">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:19.827" endtime="20170916 02:07:20.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.032">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:20.031" endtime="20170916 02:07:20.032"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.033">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:20.033" endtime="20170916 02:07:20.033"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.033" endtime="20170916 02:07:20.034"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.031" endtime="20170916 02:07:20.034"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.030" endtime="20170916 02:07:20.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:20.034">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:20.034" endtime="20170916 02:07:20.034"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:20.034">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:19.540" endtime="20170916 02:07:20.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.035">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:20.035" endtime="20170916 02:07:20.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.036">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:20.036">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:20.036">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:20.035" endtime="20170916 02:07:20.036"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:20.036">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:07:19.540" endtime="20170916 02:07:20.036"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:20.037">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:07:19.539" endtime="20170916 02:07:20.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:07:20.037" endtime="20170916 02:07:20.037"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:19.539" endtime="20170916 02:07:20.037"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.042">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:20.042" endtime="20170916 02:07:20.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.044">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:20.043" endtime="20170916 02:07:20.044"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.045">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:20.044" endtime="20170916 02:07:20.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.046">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:20.045" endtime="20170916 02:07:20.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.372">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:20.047" endtime="20170916 02:07:20.372"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:20.372">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:20.372">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:20.046" endtime="20170916 02:07:20.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.373">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:20.372" endtime="20170916 02:07:20.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.373">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:20.373" endtime="20170916 02:07:20.373"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.041" endtime="20170916 02:07:20.374"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.040" endtime="20170916 02:07:20.374"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.039" endtime="20170916 02:07:20.374"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.374">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:07:20.374" endtime="20170916 02:07:20.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.377">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:20.376" endtime="20170916 02:07:20.377"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.378">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:20.378" endtime="20170916 02:07:20.378"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.377" endtime="20170916 02:07:20.378"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.375" endtime="20170916 02:07:20.378"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.375" endtime="20170916 02:07:20.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.541">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:20.542">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:20.378" endtime="20170916 02:07:20.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.544">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:20.543" endtime="20170916 02:07:20.544"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.545">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:20.544" endtime="20170916 02:07:20.545"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.544" endtime="20170916 02:07:20.545"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.542" endtime="20170916 02:07:20.545"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.542" endtime="20170916 02:07:20.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:20.545">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:20.545" endtime="20170916 02:07:20.546"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:20.546">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:20.038" endtime="20170916 02:07:20.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.546">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:20.546" endtime="20170916 02:07:20.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.547">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:20.547">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:20.547">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:20.547" endtime="20170916 02:07:20.547"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:20.548">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:07:20.038" endtime="20170916 02:07:20.548"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:20.548">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:07:20.037" endtime="20170916 02:07:20.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:07:20.548" endtime="20170916 02:07:20.548"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:20.552">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:20.552" endtime="20170916 02:07:20.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:20.553" endtime="20170916 02:07:20.553"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.554">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:20.554" endtime="20170916 02:07:20.554"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:20.555">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:20.554" endtime="20170916 02:07:20.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:21.007">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:20.558" endtime="20170916 02:07:21.008"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:21.008">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:21.008">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:20.555" endtime="20170916 02:07:21.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:21.009">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:21.008" endtime="20170916 02:07:21.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:21.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:21.009" endtime="20170916 02:07:21.009"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.552" endtime="20170916 02:07:21.010"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.551" endtime="20170916 02:07:21.010"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:20.551" endtime="20170916 02:07:21.010"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:21.010">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:07:21.010" endtime="20170916 02:07:21.010"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:21.012">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:21.012" endtime="20170916 02:07:21.013"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:21.013">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:21.013" endtime="20170916 02:07:21.014"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:21.013" endtime="20170916 02:07:21.014"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:21.011" endtime="20170916 02:07:21.014"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:21.011" endtime="20170916 02:07:21.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:21.397">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:21.397">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:21.014" endtime="20170916 02:07:21.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:21.399">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:21.399" endtime="20170916 02:07:21.399"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:21.400">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:21.400" endtime="20170916 02:07:21.400"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:21.400" endtime="20170916 02:07:21.401"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:21.398" endtime="20170916 02:07:21.401"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:21.398" endtime="20170916 02:07:21.401"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:21.401">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:21.401" endtime="20170916 02:07:21.401"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:21.401">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:20.550" endtime="20170916 02:07:21.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:21.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:21.402" endtime="20170916 02:07:21.402"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:21.403">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:21.403">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:21.403">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:21.402" endtime="20170916 02:07:21.403"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:21.403">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:07:20.549" endtime="20170916 02:07:21.403"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:21.403">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:07:20.549" endtime="20170916 02:07:21.403"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:21.404">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:07:21.405">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:07:21.404" endtime="20170916 02:07:21.405"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:20.549" endtime="20170916 02:07:21.405"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:19.538" endtime="20170916 02:07:21.405"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.412">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:31.411" endtime="20170916 02:07:31.412"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.413">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:31.413" endtime="20170916 02:07:31.413"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.414">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:31.413" endtime="20170916 02:07:31.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.414">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:31.414" endtime="20170916 02:07:31.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.591">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:31.415" endtime="20170916 02:07:31.592"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:31.592">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:31.592">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.415" endtime="20170916 02:07:31.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.592">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.592" endtime="20170916 02:07:31.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.593">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.593" endtime="20170916 02:07:31.593"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.410" endtime="20170916 02:07:31.593"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.410" endtime="20170916 02:07:31.593"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.408" endtime="20170916 02:07:31.594"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.594">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:07:31.594" endtime="20170916 02:07:31.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.596">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:31.596" endtime="20170916 02:07:31.596"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.597">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:31.597" endtime="20170916 02:07:31.597"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.596" endtime="20170916 02:07:31.597"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.595" endtime="20170916 02:07:31.598"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.594" endtime="20170916 02:07:31.598"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.682">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:31.682">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.598" endtime="20170916 02:07:31.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.684">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:31.683" endtime="20170916 02:07:31.684"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.685">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:31.685" endtime="20170916 02:07:31.685"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.685" endtime="20170916 02:07:31.686"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.683" endtime="20170916 02:07:31.686"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.682" endtime="20170916 02:07:31.686"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:31.686">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:31.686" endtime="20170916 02:07:31.686"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:31.686">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.408" endtime="20170916 02:07:31.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.687" endtime="20170916 02:07:31.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.688">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:31.688">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:31.688">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:31.687" endtime="20170916 02:07:31.688"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:31.688">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:07:31.407" endtime="20170916 02:07:31.688"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:31.688">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:07:31.407" endtime="20170916 02:07:31.689"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:07:31.689" endtime="20170916 02:07:31.689"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.406" endtime="20170916 02:07:31.689"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.693">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:31.692" endtime="20170916 02:07:31.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:31.693" endtime="20170916 02:07:31.694"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.694">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:31.694" endtime="20170916 02:07:31.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:31.695" endtime="20170916 02:07:31.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.883">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:31.696" endtime="20170916 02:07:31.883"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:31.883">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:31.884">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.695" endtime="20170916 02:07:31.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.884">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.884" endtime="20170916 02:07:31.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.885">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.885" endtime="20170916 02:07:31.885"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.692" endtime="20170916 02:07:31.885"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.691" endtime="20170916 02:07:31.885"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.691" endtime="20170916 02:07:31.885"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.886">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:07:31.886" endtime="20170916 02:07:31.886"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.889">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:31.888" endtime="20170916 02:07:31.889"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.890">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:31.889" endtime="20170916 02:07:31.890"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.889" endtime="20170916 02:07:31.890"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.887" endtime="20170916 02:07:31.890"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.886" endtime="20170916 02:07:31.890"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.977">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:31.978">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.890" endtime="20170916 02:07:31.978"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.980">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:31.979" endtime="20170916 02:07:31.980"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.981">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:31.980" endtime="20170916 02:07:31.981"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.980" endtime="20170916 02:07:31.981"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.979" endtime="20170916 02:07:31.981"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.978" endtime="20170916 02:07:31.981"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:31.981">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:31.981" endtime="20170916 02:07:31.982"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:31.982">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.690" endtime="20170916 02:07:31.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.982">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.982" endtime="20170916 02:07:31.983"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.983">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:31.983">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:31.983">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:31.983" endtime="20170916 02:07:31.983"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:31.984">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:07:31.690" endtime="20170916 02:07:31.984"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:31.984">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:07:31.689" endtime="20170916 02:07:31.984"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:07:31.984" endtime="20170916 02:07:31.984"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:31.988">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:31.988" endtime="20170916 02:07:31.989"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.989">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:31.989" endtime="20170916 02:07:31.989"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.990">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:31.990" endtime="20170916 02:07:31.990"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:31.991">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:31.990" endtime="20170916 02:07:31.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:32.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:31.991" endtime="20170916 02:07:32.285"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:32.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:32.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.991" endtime="20170916 02:07:32.285"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:32.286">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:32.286" endtime="20170916 02:07:32.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:32.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:32.286" endtime="20170916 02:07:32.287"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.988" endtime="20170916 02:07:32.287"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.987" endtime="20170916 02:07:32.287"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:31.986" endtime="20170916 02:07:32.287"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:32.288">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:07:32.287" endtime="20170916 02:07:32.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:32.290">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:32.289" endtime="20170916 02:07:32.290"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:32.291">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:32.291" endtime="20170916 02:07:32.291"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:32.290" endtime="20170916 02:07:32.291"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:32.289" endtime="20170916 02:07:32.291"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:32.288" endtime="20170916 02:07:32.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:32.493">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:32.493">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:32.291" endtime="20170916 02:07:32.493"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:32.495">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:32.495" endtime="20170916 02:07:32.495"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:32.496">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:32.496" endtime="20170916 02:07:32.496"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:32.495" endtime="20170916 02:07:32.496"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:32.494" endtime="20170916 02:07:32.497"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:32.494" endtime="20170916 02:07:32.497"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:32.497">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:32.497" endtime="20170916 02:07:32.497"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:32.497">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:31.986" endtime="20170916 02:07:32.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:32.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:32.498" endtime="20170916 02:07:32.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:32.499">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:32.499">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:32.499">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:32.498" endtime="20170916 02:07:32.499"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:32.499">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:07:31.985" endtime="20170916 02:07:32.499"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:32.499">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:07:31.985" endtime="20170916 02:07:32.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:32.500">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:07:32.500">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:07:32.500" endtime="20170916 02:07:32.500"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:31.985" endtime="20170916 02:07:32.500"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:31.406" endtime="20170916 02:07:32.500"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:42.506">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:42.506" endtime="20170916 02:07:42.506"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:42.507">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:42.507" endtime="20170916 02:07:42.507"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:42.508">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:42.507" endtime="20170916 02:07:42.508"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:42.508">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:42.508" endtime="20170916 02:07:42.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:43.021">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:42.509" endtime="20170916 02:07:43.021"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:43.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:43.021">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:42.509" endtime="20170916 02:07:43.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:43.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:43.022" endtime="20170916 02:07:43.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:43.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:43.023" endtime="20170916 02:07:43.023"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:42.505" endtime="20170916 02:07:43.023"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:42.504" endtime="20170916 02:07:43.023"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:42.503" endtime="20170916 02:07:43.023"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:43.024">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:07:43.024" endtime="20170916 02:07:43.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:43.026">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:43.026" endtime="20170916 02:07:43.026"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:43.027">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:43.027" endtime="20170916 02:07:43.027"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:43.026" endtime="20170916 02:07:43.027"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:43.025" endtime="20170916 02:07:43.027"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:43.024" endtime="20170916 02:07:43.028"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:43.807">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:43.807">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:43.028" endtime="20170916 02:07:43.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:43.810">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:43.809" endtime="20170916 02:07:43.810"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:43.811">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:43.810" endtime="20170916 02:07:43.811"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:43.810" endtime="20170916 02:07:43.811"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:43.808" endtime="20170916 02:07:43.811"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:43.808" endtime="20170916 02:07:43.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:43.811">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:43.811" endtime="20170916 02:07:43.812"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:43.812">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:42.503" endtime="20170916 02:07:43.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:43.812">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:43.812" endtime="20170916 02:07:43.812"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:43.813">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:43.813">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:43.813">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:43.813" endtime="20170916 02:07:43.813"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:43.813">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:07:42.502" endtime="20170916 02:07:43.814"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:43.814">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:07:42.502" endtime="20170916 02:07:43.814"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:07:43.814" endtime="20170916 02:07:43.814"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:42.501" endtime="20170916 02:07:43.815"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:43.818">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:43.818" endtime="20170916 02:07:43.819"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:43.819">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:43.819" endtime="20170916 02:07:43.819"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:43.820">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:43.819" endtime="20170916 02:07:43.820"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:43.820">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:43.820" endtime="20170916 02:07:43.820"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.251">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:43.821" endtime="20170916 02:07:44.251"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:44.251">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:44.251">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:43.821" endtime="20170916 02:07:44.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.252">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:44.252" endtime="20170916 02:07:44.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.253">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:44.253" endtime="20170916 02:07:44.253"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:43.817" endtime="20170916 02:07:44.253"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:43.817" endtime="20170916 02:07:44.253"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:43.816" endtime="20170916 02:07:44.253"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.254">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:07:44.254" endtime="20170916 02:07:44.254"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.257">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:44.255" endtime="20170916 02:07:44.257"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.258">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:44.257" endtime="20170916 02:07:44.258"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.257" endtime="20170916 02:07:44.258"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.255" endtime="20170916 02:07:44.258"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.254" endtime="20170916 02:07:44.258"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.639">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:44.639">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:44.258" endtime="20170916 02:07:44.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.641">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:44.640" endtime="20170916 02:07:44.641"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.642">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:44.642" endtime="20170916 02:07:44.642"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.641" endtime="20170916 02:07:44.642"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.640" endtime="20170916 02:07:44.642"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.639" endtime="20170916 02:07:44.642"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:44.643">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:44.643" endtime="20170916 02:07:44.643"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:44.643">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:43.816" endtime="20170916 02:07:44.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:44.643" endtime="20170916 02:07:44.644"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.644">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:44.644">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:44.644">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:44.644" endtime="20170916 02:07:44.645"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:44.645">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:07:43.815" endtime="20170916 02:07:44.645"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:44.645">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:07:43.815" endtime="20170916 02:07:44.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:07:44.645" endtime="20170916 02:07:44.646"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.651">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:44.651" endtime="20170916 02:07:44.652"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.653">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:44.652" endtime="20170916 02:07:44.653"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.654">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:44.653" endtime="20170916 02:07:44.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.655">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:44.654" endtime="20170916 02:07:44.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.924">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:44.656" endtime="20170916 02:07:44.924"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:44.924">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:44.924">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:44.655" endtime="20170916 02:07:44.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.925">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:44.924" endtime="20170916 02:07:44.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.925">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:44.925" endtime="20170916 02:07:44.925"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.650" endtime="20170916 02:07:44.926"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.650" endtime="20170916 02:07:44.926"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.649" endtime="20170916 02:07:44.926"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.926">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:07:44.926" endtime="20170916 02:07:44.926"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:44.929">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:44.928" endtime="20170916 02:07:44.929"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:44.930">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:44.929" endtime="20170916 02:07:44.930"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.929" endtime="20170916 02:07:44.930"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.927" endtime="20170916 02:07:44.930"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:44.927" endtime="20170916 02:07:44.930"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:45.048">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:07:45.049">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:44.930" endtime="20170916 02:07:45.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:45.051">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:45.050" endtime="20170916 02:07:45.051"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:45.051">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:07:45.051" endtime="20170916 02:07:45.052"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:45.051" endtime="20170916 02:07:45.052"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:45.050" endtime="20170916 02:07:45.052"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:45.049" endtime="20170916 02:07:45.052"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:07:45.052">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:07:45.052" endtime="20170916 02:07:45.052"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:45.053">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:44.648" endtime="20170916 02:07:45.053"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:45.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:45.053" endtime="20170916 02:07:45.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:45.054">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:07:45.054">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:07:45.054">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:07:45.054" endtime="20170916 02:07:45.054"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:45.054">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:07:44.647" endtime="20170916 02:07:45.054"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:45.055">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:07:44.646" endtime="20170916 02:07:45.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:45.055">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:07:45.055">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:07:45.055" endtime="20170916 02:07:45.055"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:44.646" endtime="20170916 02:07:45.056"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:42.501" endtime="20170916 02:07:45.056"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:55.061">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:07:55.061" endtime="20170916 02:07:55.062"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:55.062">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:07:55.062" endtime="20170916 02:07:55.062"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:55.063">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:07:55.063" endtime="20170916 02:07:55.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:55.064">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:07:55.063" endtime="20170916 02:07:55.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:56.372">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:07:55.065" endtime="20170916 02:07:56.372"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:07:56.372">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:07:56.372">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:55.064" endtime="20170916 02:07:56.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:56.373">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:56.373" endtime="20170916 02:07:56.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:56.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:07:56.374" endtime="20170916 02:07:56.374"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:55.061" endtime="20170916 02:07:56.374"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:55.060" endtime="20170916 02:07:56.374"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:55.059" endtime="20170916 02:07:56.374"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:56.375">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:07:56.375" endtime="20170916 02:07:56.375"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:07:56.377">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:56.376" endtime="20170916 02:07:56.377"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:07:56.378">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:07:56.378" endtime="20170916 02:07:56.378"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:56.377" endtime="20170916 02:07:56.378"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:56.376" endtime="20170916 02:07:56.378"></status>
</kw>
<status status="PASS" starttime="20170916 02:07:56.375" endtime="20170916 02:07:56.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:05.404">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:05.404">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:56.379" endtime="20170916 02:08:05.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:05.407">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:05.406" endtime="20170916 02:08:05.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:05.409">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:05.408" endtime="20170916 02:08:05.409"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:05.407" endtime="20170916 02:08:05.409"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:05.405" endtime="20170916 02:08:05.409"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:05.405" endtime="20170916 02:08:05.409"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:05.410">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:05.409" endtime="20170916 02:08:05.410"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:05.410">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:07:55.058" endtime="20170916 02:08:05.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:05.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:05.410" endtime="20170916 02:08:05.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:05.411">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:05.411">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:05.411">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:05.411" endtime="20170916 02:08:05.411"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:05.412">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170916 02:07:55.058" endtime="20170916 02:08:05.412"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:05.412">${power_state} = Off</msg>
<status status="PASS" starttime="20170916 02:07:55.057" endtime="20170916 02:08:05.412"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:08:05.413">On != Off</msg>
<status status="FAIL" starttime="20170916 02:08:05.412" endtime="20170916 02:08:05.413"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:55.057" endtime="20170916 02:08:05.413"></status>
</kw>
<status status="FAIL" starttime="20170916 02:07:55.056" endtime="20170916 02:08:05.413"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:15.418">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:15.418" endtime="20170916 02:08:15.419"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:15.419">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:15.419" endtime="20170916 02:08:15.420"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:15.420">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:15.420" endtime="20170916 02:08:15.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:15.421">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:15.420" endtime="20170916 02:08:15.421"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:15.936">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:15.422" endtime="20170916 02:08:15.936"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:15.937">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:15.937">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:15.421" endtime="20170916 02:08:15.937"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:15.937">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:15.937" endtime="20170916 02:08:15.937"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:15.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:15.938" endtime="20170916 02:08:15.938"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:15.417" endtime="20170916 02:08:15.938"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:15.417" endtime="20170916 02:08:15.938"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:15.416" endtime="20170916 02:08:15.939"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:15.939">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:08:15.939" endtime="20170916 02:08:15.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:15.941">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:15.941" endtime="20170916 02:08:15.941"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:15.942">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:15.942" endtime="20170916 02:08:15.942"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:15.941" endtime="20170916 02:08:15.942"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:15.940" endtime="20170916 02:08:15.943"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:15.939" endtime="20170916 02:08:15.943"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:16.486">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:16.487">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:15.943" endtime="20170916 02:08:16.487"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:16.489">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:16.488" endtime="20170916 02:08:16.489"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:16.490">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:16.489" endtime="20170916 02:08:16.490"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:16.489" endtime="20170916 02:08:16.490"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:16.488" endtime="20170916 02:08:16.490"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:16.487" endtime="20170916 02:08:16.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:16.491">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:16.490" endtime="20170916 02:08:16.491"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:16.491">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:15.416" endtime="20170916 02:08:16.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:16.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:16.491" endtime="20170916 02:08:16.492"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:16.492">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:16.492">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:16.492">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:16.492" endtime="20170916 02:08:16.492"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:16.493">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:08:15.415" endtime="20170916 02:08:16.493"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:16.493">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:08:15.415" endtime="20170916 02:08:16.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:08:16.493" endtime="20170916 02:08:16.494"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:15.414" endtime="20170916 02:08:16.494"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:16.498">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:16.497" endtime="20170916 02:08:16.501"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:16.502">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:16.502" endtime="20170916 02:08:16.502"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:16.503">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:16.503" endtime="20170916 02:08:16.503"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:16.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:16.504" endtime="20170916 02:08:16.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:17.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:16.506" endtime="20170916 02:08:17.368"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:17.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:17.368">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:16.505" endtime="20170916 02:08:17.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:17.369">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:17.368" endtime="20170916 02:08:17.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:17.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:17.369" endtime="20170916 02:08:17.369"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:16.497" endtime="20170916 02:08:17.370"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:16.496" endtime="20170916 02:08:17.370"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:16.495" endtime="20170916 02:08:17.370"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:17.370">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:08:17.370" endtime="20170916 02:08:17.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:17.373">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:17.372" endtime="20170916 02:08:17.373"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:17.374">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:17.373" endtime="20170916 02:08:17.374"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:17.373" endtime="20170916 02:08:17.374"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:17.371" endtime="20170916 02:08:17.374"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:17.371" endtime="20170916 02:08:17.374"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:18.254">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:18.255">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:17.374" endtime="20170916 02:08:18.255"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:18.257">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:18.256" endtime="20170916 02:08:18.257"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:18.258">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:18.258" endtime="20170916 02:08:18.258"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:18.257" endtime="20170916 02:08:18.258"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:18.256" endtime="20170916 02:08:18.258"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:18.255" endtime="20170916 02:08:18.258"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:18.259">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:18.258" endtime="20170916 02:08:18.259"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:18.259">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:16.495" endtime="20170916 02:08:18.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:18.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:18.259" endtime="20170916 02:08:18.260"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:18.260">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:18.260">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:18.260">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:18.260" endtime="20170916 02:08:18.260"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:18.261">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:08:16.494" endtime="20170916 02:08:18.261"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:18.261">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:08:16.494" endtime="20170916 02:08:18.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:08:18.261" endtime="20170916 02:08:18.262"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:18.267">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:18.266" endtime="20170916 02:08:18.267"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:18.268">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:18.267" endtime="20170916 02:08:18.268"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:18.268">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:18.268" endtime="20170916 02:08:18.268"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:18.269">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:18.269" endtime="20170916 02:08:18.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:18.659">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:18.270" endtime="20170916 02:08:18.659"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:18.659">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:18.659">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:18.269" endtime="20170916 02:08:18.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:18.660">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:18.660" endtime="20170916 02:08:18.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:18.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:18.660" endtime="20170916 02:08:18.661"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:18.266" endtime="20170916 02:08:18.661"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:18.265" endtime="20170916 02:08:18.661"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:18.265" endtime="20170916 02:08:18.661"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:18.662">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:08:18.662" endtime="20170916 02:08:18.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:18.664">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:18.663" endtime="20170916 02:08:18.664"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:18.665">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:18.665" endtime="20170916 02:08:18.665"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:18.664" endtime="20170916 02:08:18.665"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:18.663" endtime="20170916 02:08:18.665"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:18.662" endtime="20170916 02:08:18.665"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:19.169">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:19.169">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:18.666" endtime="20170916 02:08:19.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:19.171">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:19.171" endtime="20170916 02:08:19.171"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:19.172">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:19.172" endtime="20170916 02:08:19.172"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:19.171" endtime="20170916 02:08:19.172"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:19.170" endtime="20170916 02:08:19.172"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:19.169" endtime="20170916 02:08:19.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:19.173">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:19.173" endtime="20170916 02:08:19.173"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:19.173">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:18.264" endtime="20170916 02:08:19.173"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:19.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:19.174" endtime="20170916 02:08:19.174"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:19.174">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:19.175">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:19.175">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:19.174" endtime="20170916 02:08:19.175"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:19.175">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:08:18.262" endtime="20170916 02:08:19.175"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:19.175">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170916 02:08:18.262" endtime="20170916 02:08:19.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:19.176">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:08:19.176">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170916 02:08:19.176" endtime="20170916 02:08:19.176"></status>
</kw>
<status status="FAIL" starttime="20170916 02:08:18.262" endtime="20170916 02:08:19.176"></status>
</kw>
<status status="FAIL" starttime="20170916 02:08:15.414" endtime="20170916 02:08:19.177"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:29.182">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:29.182" endtime="20170916 02:08:29.183"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:29.183">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:29.183" endtime="20170916 02:08:29.183"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:29.184">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:29.183" endtime="20170916 02:08:29.184"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:29.185">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:29.184" endtime="20170916 02:08:29.185"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:29.476">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:29.185" endtime="20170916 02:08:29.476"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:29.477">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:29.477">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:29.185" endtime="20170916 02:08:29.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:29.477">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:29.477" endtime="20170916 02:08:29.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:29.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:29.478" endtime="20170916 02:08:29.478"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:29.181" endtime="20170916 02:08:29.478"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:29.181" endtime="20170916 02:08:29.478"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:29.180" endtime="20170916 02:08:29.478"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:29.479">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:08:29.479" endtime="20170916 02:08:29.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:29.481">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:29.481" endtime="20170916 02:08:29.481"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:29.482">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:29.482" endtime="20170916 02:08:29.482"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:29.481" endtime="20170916 02:08:29.482"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:29.480" endtime="20170916 02:08:29.482"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:29.479" endtime="20170916 02:08:29.483"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:30.465">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:30.465">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:29.483" endtime="20170916 02:08:30.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:30.467">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:30.467" endtime="20170916 02:08:30.467"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:30.468">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:30.468" endtime="20170916 02:08:30.468"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:30.467" endtime="20170916 02:08:30.468"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:30.466" endtime="20170916 02:08:30.468"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:30.465" endtime="20170916 02:08:30.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:30.469">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:30.469" endtime="20170916 02:08:30.469"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:30.469">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:29.179" endtime="20170916 02:08:30.469"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:30.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:30.469" endtime="20170916 02:08:30.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:30.470">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:30.470">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:30.471">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:30.470" endtime="20170916 02:08:30.471"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:30.471">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:08:29.179" endtime="20170916 02:08:30.471"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:30.471">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:08:29.178" endtime="20170916 02:08:30.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:08:30.472" endtime="20170916 02:08:30.472"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:29.178" endtime="20170916 02:08:30.472"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:30.476">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:30.475" endtime="20170916 02:08:30.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:30.477">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:30.477" endtime="20170916 02:08:30.477"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:30.478">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:30.477" endtime="20170916 02:08:30.478"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:30.478">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:30.478" endtime="20170916 02:08:30.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:30.840">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:30.479" endtime="20170916 02:08:30.840"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:30.840">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:30.840">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:30.479" endtime="20170916 02:08:30.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:30.841">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:30.841" endtime="20170916 02:08:30.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:30.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:30.841" endtime="20170916 02:08:30.842"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:30.475" endtime="20170916 02:08:30.842"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:30.474" endtime="20170916 02:08:30.842"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:30.474" endtime="20170916 02:08:30.842"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:30.843">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:08:30.842" endtime="20170916 02:08:30.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:30.845">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:30.845" endtime="20170916 02:08:30.845"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:30.846">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:30.846" endtime="20170916 02:08:30.847"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:30.845" endtime="20170916 02:08:30.847"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:30.843" endtime="20170916 02:08:30.847"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:30.843" endtime="20170916 02:08:30.847"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:31.541">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:31.541">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:30.847" endtime="20170916 02:08:31.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:31.543">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:31.542" endtime="20170916 02:08:31.543"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:31.544">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:31.544" endtime="20170916 02:08:31.545"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:31.543" endtime="20170916 02:08:31.545"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:31.542" endtime="20170916 02:08:31.545"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:31.541" endtime="20170916 02:08:31.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:31.545">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:31.545" endtime="20170916 02:08:31.545"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:31.546">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:30.473" endtime="20170916 02:08:31.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:31.546">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:31.546" endtime="20170916 02:08:31.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:31.547">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:31.547">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:31.547">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:31.546" endtime="20170916 02:08:31.547"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:31.547">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:08:30.472" endtime="20170916 02:08:31.547"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:31.548">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:08:30.472" endtime="20170916 02:08:31.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:08:31.548" endtime="20170916 02:08:31.549"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:31.555">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:31.554" endtime="20170916 02:08:31.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:31.556">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:31.556" endtime="20170916 02:08:31.556"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:31.557">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:31.556" endtime="20170916 02:08:31.557"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:31.558">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:31.557" endtime="20170916 02:08:31.558"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:31.958">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:31.559" endtime="20170916 02:08:31.958"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:31.958">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:31.958">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:31.558" endtime="20170916 02:08:31.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:31.959">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:31.959" endtime="20170916 02:08:31.959"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:31.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:31.960" endtime="20170916 02:08:31.961"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:31.553" endtime="20170916 02:08:31.961"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:31.553" endtime="20170916 02:08:31.961"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:31.552" endtime="20170916 02:08:31.961"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:31.963">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:08:31.962" endtime="20170916 02:08:31.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:31.966">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:31.965" endtime="20170916 02:08:31.966"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:31.967">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:31.967" endtime="20170916 02:08:31.967"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:31.966" endtime="20170916 02:08:31.967"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:31.964" endtime="20170916 02:08:31.967"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:31.963" endtime="20170916 02:08:31.968"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:32.417">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:32.417">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:31.968" endtime="20170916 02:08:32.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:32.419">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:32.419" endtime="20170916 02:08:32.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:32.420">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:32.420" endtime="20170916 02:08:32.420"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:32.419" endtime="20170916 02:08:32.420"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:32.418" endtime="20170916 02:08:32.420"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:32.418" endtime="20170916 02:08:32.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:32.421">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:32.421" endtime="20170916 02:08:32.421"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:32.421">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:31.551" endtime="20170916 02:08:32.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:32.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:32.422" endtime="20170916 02:08:32.422"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:32.422">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:32.423">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:32.423">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:32.422" endtime="20170916 02:08:32.423"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:32.423">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:08:31.550" endtime="20170916 02:08:32.423"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:32.423">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:08:31.549" endtime="20170916 02:08:32.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:32.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:08:32.424">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:08:32.424" endtime="20170916 02:08:32.424"></status>
</kw>
<status status="FAIL" starttime="20170916 02:08:31.549" endtime="20170916 02:08:32.424"></status>
</kw>
<status status="FAIL" starttime="20170916 02:08:29.177" endtime="20170916 02:08:32.425"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:42.430">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:42.429" endtime="20170916 02:08:42.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.431">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:42.430" endtime="20170916 02:08:42.431"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.431">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:42.431" endtime="20170916 02:08:42.431"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.432">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:42.432" endtime="20170916 02:08:42.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:42.611">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:42.433" endtime="20170916 02:08:42.611"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:42.611">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:42.611">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:42.432" endtime="20170916 02:08:42.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:42.612">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:42.612" endtime="20170916 02:08:42.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:42.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:42.613" endtime="20170916 02:08:42.613"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.429" endtime="20170916 02:08:42.613"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.428" endtime="20170916 02:08:42.613"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.428" endtime="20170916 02:08:42.613"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.614">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:08:42.614" endtime="20170916 02:08:42.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.616">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:42.615" endtime="20170916 02:08:42.616"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:42.617">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:42.617" endtime="20170916 02:08:42.617"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.616" endtime="20170916 02:08:42.617"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.615" endtime="20170916 02:08:42.618"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.614" endtime="20170916 02:08:42.618"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.892">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:42.892">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:42.618" endtime="20170916 02:08:42.892"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.894">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:42.894" endtime="20170916 02:08:42.894"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:42.895">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:42.895" endtime="20170916 02:08:42.895"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.894" endtime="20170916 02:08:42.895"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.893" endtime="20170916 02:08:42.895"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.893" endtime="20170916 02:08:42.895"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:42.896">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:42.896" endtime="20170916 02:08:42.896"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:42.896">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:42.427" endtime="20170916 02:08:42.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:42.897">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:42.896" endtime="20170916 02:08:42.897"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.897">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:42.897">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:42.898">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:42.897" endtime="20170916 02:08:42.898"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:42.898">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:08:42.427" endtime="20170916 02:08:42.898"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:42.898">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:08:42.426" endtime="20170916 02:08:42.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:08:42.899" endtime="20170916 02:08:42.899"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.426" endtime="20170916 02:08:42.899"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:42.903">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:42.902" endtime="20170916 02:08:42.903"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.904">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:42.904" endtime="20170916 02:08:42.904"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.905">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:42.905" endtime="20170916 02:08:42.905"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:42.906">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:42.905" endtime="20170916 02:08:42.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:43.088">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:42.906" endtime="20170916 02:08:43.088"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:43.089">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:43.089">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:42.906" endtime="20170916 02:08:43.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:43.089">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:43.089" endtime="20170916 02:08:43.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:43.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:43.090" endtime="20170916 02:08:43.090"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.902" endtime="20170916 02:08:43.090"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.901" endtime="20170916 02:08:43.090"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:42.901" endtime="20170916 02:08:43.091"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:43.091">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:08:43.091" endtime="20170916 02:08:43.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:43.093">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:43.093" endtime="20170916 02:08:43.093"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:43.094">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:43.094" endtime="20170916 02:08:43.094"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:43.094" endtime="20170916 02:08:43.095"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:43.092" endtime="20170916 02:08:43.095"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:43.091" endtime="20170916 02:08:43.095"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:44.338">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:44.339">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:43.095" endtime="20170916 02:08:44.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:44.341">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:44.340" endtime="20170916 02:08:44.341"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:44.341">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:44.341" endtime="20170916 02:08:44.342"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:44.341" endtime="20170916 02:08:44.342"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:44.339" endtime="20170916 02:08:44.342"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:44.339" endtime="20170916 02:08:44.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:44.342">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:44.342" endtime="20170916 02:08:44.342"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:44.343">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:42.900" endtime="20170916 02:08:44.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:44.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:44.343" endtime="20170916 02:08:44.343"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:44.344">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:44.344">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:44.344">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:44.344" endtime="20170916 02:08:44.344"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:44.345">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:08:42.900" endtime="20170916 02:08:44.345"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:44.345">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:08:42.899" endtime="20170916 02:08:44.345"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:08:44.345" endtime="20170916 02:08:44.346"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:44.352">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:44.352" endtime="20170916 02:08:44.353"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:44.354">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:44.353" endtime="20170916 02:08:44.354"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:44.355">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:44.355" endtime="20170916 02:08:44.355"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:44.356">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:44.356" endtime="20170916 02:08:44.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:44.536">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:44.357" endtime="20170916 02:08:44.536"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:44.536">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:44.536">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:44.357" endtime="20170916 02:08:44.536"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:44.537">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:44.537" endtime="20170916 02:08:44.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:44.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:44.537" endtime="20170916 02:08:44.538"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:44.351" endtime="20170916 02:08:44.538"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:44.350" endtime="20170916 02:08:44.538"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:44.349" endtime="20170916 02:08:44.538"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:44.539">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:08:44.538" endtime="20170916 02:08:44.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:44.541">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:44.540" endtime="20170916 02:08:44.541"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:44.542">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:44.541" endtime="20170916 02:08:44.542"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:44.541" endtime="20170916 02:08:44.542"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:44.539" endtime="20170916 02:08:44.542"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:44.539" endtime="20170916 02:08:44.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:45.285">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:45.286">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:44.543" endtime="20170916 02:08:45.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:45.288">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:45.287" endtime="20170916 02:08:45.288"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:45.289">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:45.288" endtime="20170916 02:08:45.289"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:45.288" endtime="20170916 02:08:45.289"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:45.287" endtime="20170916 02:08:45.289"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:45.286" endtime="20170916 02:08:45.289"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:45.290">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:45.289" endtime="20170916 02:08:45.290"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:45.290">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:44.348" endtime="20170916 02:08:45.290"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:45.290">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:45.290" endtime="20170916 02:08:45.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:45.291">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:45.291">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:45.291">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:45.291" endtime="20170916 02:08:45.291"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:45.292">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:08:44.347" endtime="20170916 02:08:45.292"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:45.292">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:08:44.347" endtime="20170916 02:08:45.292"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:45.292">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:08:45.293">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:08:45.292" endtime="20170916 02:08:45.293"></status>
</kw>
<status status="FAIL" starttime="20170916 02:08:44.346" endtime="20170916 02:08:45.293"></status>
</kw>
<status status="FAIL" starttime="20170916 02:08:42.425" endtime="20170916 02:08:45.293"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:55.300">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:55.300" endtime="20170916 02:08:55.301"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:55.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:55.301" endtime="20170916 02:08:55.302"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:55.303">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:55.302" endtime="20170916 02:08:55.303"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:55.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:55.303" endtime="20170916 02:08:55.303"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:55.720">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:55.304" endtime="20170916 02:08:55.721"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:55.721">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:55.721">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:55.304" endtime="20170916 02:08:55.721"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:55.722">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:55.721" endtime="20170916 02:08:55.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:55.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:55.722" endtime="20170916 02:08:55.722"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:55.299" endtime="20170916 02:08:55.723"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:55.299" endtime="20170916 02:08:55.723"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:55.298" endtime="20170916 02:08:55.723"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:55.723">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:08:55.723" endtime="20170916 02:08:55.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:55.726">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:55.725" endtime="20170916 02:08:55.726"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:55.727">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:55.727" endtime="20170916 02:08:55.727"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:55.726" endtime="20170916 02:08:55.728"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:55.724" endtime="20170916 02:08:55.728"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:55.724" endtime="20170916 02:08:55.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:56.638">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:56.638">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:55.728" endtime="20170916 02:08:56.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:56.640">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:56.640" endtime="20170916 02:08:56.640"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:56.641">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:56.641" endtime="20170916 02:08:56.641"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:56.640" endtime="20170916 02:08:56.641"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:56.639" endtime="20170916 02:08:56.641"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:56.638" endtime="20170916 02:08:56.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:56.642">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:56.642" endtime="20170916 02:08:56.642"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:56.642">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:55.297" endtime="20170916 02:08:56.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:56.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:56.642" endtime="20170916 02:08:56.643"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:56.644">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:56.644">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:56.644">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:56.643" endtime="20170916 02:08:56.644"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:56.644">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:08:55.296" endtime="20170916 02:08:56.644"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:56.645">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:08:55.296" endtime="20170916 02:08:56.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:08:56.645" endtime="20170916 02:08:56.645"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:55.295" endtime="20170916 02:08:56.645"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:56.652">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:56.651" endtime="20170916 02:08:56.652"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:56.653">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:56.653" endtime="20170916 02:08:56.653"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:56.654">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:56.653" endtime="20170916 02:08:56.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:56.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:56.654" endtime="20170916 02:08:56.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:57.001">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:56.655" endtime="20170916 02:08:57.001"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:57.001">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:57.001">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:56.655" endtime="20170916 02:08:57.001"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:57.002">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:57.002" endtime="20170916 02:08:57.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:57.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:57.002" endtime="20170916 02:08:57.003"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:56.648" endtime="20170916 02:08:57.003"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:56.648" endtime="20170916 02:08:57.003"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:56.647" endtime="20170916 02:08:57.003"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:57.004">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:08:57.003" endtime="20170916 02:08:57.004"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:57.007">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:57.006" endtime="20170916 02:08:57.007"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:57.008">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:57.008" endtime="20170916 02:08:57.008"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:57.007" endtime="20170916 02:08:57.008"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:57.005" endtime="20170916 02:08:57.008"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:57.004" endtime="20170916 02:08:57.008"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:57.666">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:57.666">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:57.009" endtime="20170916 02:08:57.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:57.668">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:57.667" endtime="20170916 02:08:57.668"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:57.669">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:57.668" endtime="20170916 02:08:57.669"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:57.668" endtime="20170916 02:08:57.669"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:57.667" endtime="20170916 02:08:57.669"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:57.666" endtime="20170916 02:08:57.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:57.670">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:57.670" endtime="20170916 02:08:57.670"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:57.670">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:56.646" endtime="20170916 02:08:57.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:57.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:57.670" endtime="20170916 02:08:57.671"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:57.671">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:57.671">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:57.672">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:57.671" endtime="20170916 02:08:57.672"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:57.672">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:08:56.646" endtime="20170916 02:08:57.672"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:57.672">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:08:56.645" endtime="20170916 02:08:57.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:08:57.673" endtime="20170916 02:08:57.673"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:57.677">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:08:57.677" endtime="20170916 02:08:57.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:57.678">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:08:57.678" endtime="20170916 02:08:57.678"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:57.679">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:08:57.679" endtime="20170916 02:08:57.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:57.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:08:57.679" endtime="20170916 02:08:57.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:58.024">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:08:57.680" endtime="20170916 02:08:58.024"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:58.024">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:08:58.024">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:57.680" endtime="20170916 02:08:58.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:58.025">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:58.025" endtime="20170916 02:08:58.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:58.026">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:58.025" endtime="20170916 02:08:58.026"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:57.676" endtime="20170916 02:08:58.026"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:57.676" endtime="20170916 02:08:58.026"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:57.675" endtime="20170916 02:08:58.027"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:58.027">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:08:58.027" endtime="20170916 02:08:58.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:58.029">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:58.029" endtime="20170916 02:08:58.029"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:58.030">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:08:58.030" endtime="20170916 02:08:58.030"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:58.029" endtime="20170916 02:08:58.030"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:58.028" endtime="20170916 02:08:58.031"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:58.027" endtime="20170916 02:08:58.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:58.900">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:08:58.900">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:58.031" endtime="20170916 02:08:58.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:58.902">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:58.901" endtime="20170916 02:08:58.902"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:58.903">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:08:58.902" endtime="20170916 02:08:58.903"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:58.902" endtime="20170916 02:08:58.903"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:58.901" endtime="20170916 02:08:58.903"></status>
</kw>
<status status="PASS" starttime="20170916 02:08:58.900" endtime="20170916 02:08:58.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:08:58.903">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:08:58.903" endtime="20170916 02:08:58.904"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:58.904">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:08:57.674" endtime="20170916 02:08:58.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:58.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:08:58.904" endtime="20170916 02:08:58.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:08:58.905">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:08:58.905">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:08:58.905">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:08:58.905" endtime="20170916 02:08:58.905"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:58.906">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:08:57.674" endtime="20170916 02:08:58.906"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:08:58.906">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:08:57.673" endtime="20170916 02:08:58.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:08:58.906">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:08:58.907">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:08:58.906" endtime="20170916 02:08:58.907"></status>
</kw>
<status status="FAIL" starttime="20170916 02:08:57.673" endtime="20170916 02:08:58.907"></status>
</kw>
<status status="FAIL" starttime="20170916 02:08:55.293" endtime="20170916 02:08:58.907"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:08.913">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:08.913" endtime="20170916 02:09:08.914"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:08.914">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:08.914" endtime="20170916 02:09:08.914"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:08.915">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:08.915" endtime="20170916 02:09:08.915"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:08.916">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:08.915" endtime="20170916 02:09:08.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:09.391">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:08.917" endtime="20170916 02:09:09.391"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:09.391">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:09.391">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:08.916" endtime="20170916 02:09:09.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:09.392">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:09.391" endtime="20170916 02:09:09.392"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:09.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:09.392" endtime="20170916 02:09:09.392"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:08.912" endtime="20170916 02:09:09.393"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:08.911" endtime="20170916 02:09:09.393"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:08.911" endtime="20170916 02:09:09.393"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:09.394">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:09:09.393" endtime="20170916 02:09:09.394"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:09.397">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:09.396" endtime="20170916 02:09:09.397"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:09.398">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:09.398" endtime="20170916 02:09:09.399"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:09.397" endtime="20170916 02:09:09.399"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:09.395" endtime="20170916 02:09:09.399"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:09.394" endtime="20170916 02:09:09.399"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:10.172">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:10.173">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:09.399" endtime="20170916 02:09:10.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:10.174">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:10.174" endtime="20170916 02:09:10.175"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:10.176">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:10.175" endtime="20170916 02:09:10.176"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:10.175" endtime="20170916 02:09:10.176"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:10.173" endtime="20170916 02:09:10.176"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:10.173" endtime="20170916 02:09:10.176"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:10.177">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:10.176" endtime="20170916 02:09:10.177"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:10.177">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:08.910" endtime="20170916 02:09:10.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:10.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:10.177" endtime="20170916 02:09:10.178"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:10.178">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:10.178">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:10.178">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:10.178" endtime="20170916 02:09:10.178"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:10.179">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:09:08.910" endtime="20170916 02:09:10.179"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:10.179">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:09:08.909" endtime="20170916 02:09:10.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:09:10.179" endtime="20170916 02:09:10.180"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:08.909" endtime="20170916 02:09:10.180"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:10.183">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:10.183" endtime="20170916 02:09:10.184"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:10.184">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:10.184" endtime="20170916 02:09:10.184"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:10.185">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:10.185" endtime="20170916 02:09:10.185"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:10.186">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:10.185" endtime="20170916 02:09:10.186"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:10.584">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:10.186" endtime="20170916 02:09:10.584"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:10.584">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:10.584">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:10.186" endtime="20170916 02:09:10.584"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:10.585">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:10.584" endtime="20170916 02:09:10.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:10.585">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:10.585" endtime="20170916 02:09:10.586"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:10.183" endtime="20170916 02:09:10.586"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:10.182" endtime="20170916 02:09:10.586"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:10.182" endtime="20170916 02:09:10.586"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:10.586">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:09:10.586" endtime="20170916 02:09:10.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:10.589">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:10.588" endtime="20170916 02:09:10.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:10.590">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:10.590" endtime="20170916 02:09:10.590"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:10.589" endtime="20170916 02:09:10.590"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:10.587" endtime="20170916 02:09:10.590"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:10.587" endtime="20170916 02:09:10.590"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:11.260">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:11.260">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:10.591" endtime="20170916 02:09:11.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:11.262">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:11.261" endtime="20170916 02:09:11.262"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:11.263">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:11.262" endtime="20170916 02:09:11.263"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:11.262" endtime="20170916 02:09:11.263"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:11.261" endtime="20170916 02:09:11.263"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:11.260" endtime="20170916 02:09:11.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:11.263">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:11.263" endtime="20170916 02:09:11.263"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:11.264">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:10.181" endtime="20170916 02:09:11.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:11.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:11.264" endtime="20170916 02:09:11.264"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:11.265">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:11.265">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:11.265">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:11.265" endtime="20170916 02:09:11.265"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:11.265">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:09:10.180" endtime="20170916 02:09:11.265"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:11.266">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:09:10.180" endtime="20170916 02:09:11.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:09:11.266" endtime="20170916 02:09:11.266"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:11.270">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:11.270" endtime="20170916 02:09:11.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:11.271">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:11.271" endtime="20170916 02:09:11.271"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:11.272">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:11.271" endtime="20170916 02:09:11.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:11.272">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:11.272" endtime="20170916 02:09:11.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:11.768">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:11.273" endtime="20170916 02:09:11.768"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:11.768">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:11.768">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:11.273" endtime="20170916 02:09:11.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:11.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:11.768" endtime="20170916 02:09:11.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:11.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:11.769" endtime="20170916 02:09:11.770"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:11.269" endtime="20170916 02:09:11.770"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:11.269" endtime="20170916 02:09:11.770"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:11.268" endtime="20170916 02:09:11.770"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:11.770">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:09:11.770" endtime="20170916 02:09:11.771"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:11.773">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:11.772" endtime="20170916 02:09:11.773"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:11.774">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:11.773" endtime="20170916 02:09:11.774"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:11.773" endtime="20170916 02:09:11.774"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:11.771" endtime="20170916 02:09:11.774"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:11.771" endtime="20170916 02:09:11.774"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:12.323">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:12.323">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:11.774" endtime="20170916 02:09:12.323"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:12.325">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:12.325" endtime="20170916 02:09:12.325"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:12.326">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:12.326" endtime="20170916 02:09:12.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:12.325" endtime="20170916 02:09:12.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:12.324" endtime="20170916 02:09:12.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:12.324" endtime="20170916 02:09:12.327"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:12.327">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:12.327" endtime="20170916 02:09:12.327"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:12.327">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:11.268" endtime="20170916 02:09:12.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:12.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:12.328" endtime="20170916 02:09:12.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:12.329">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:12.329">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:12.329">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:12.328" endtime="20170916 02:09:12.329"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:12.329">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:09:11.267" endtime="20170916 02:09:12.329"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:12.329">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:09:11.267" endtime="20170916 02:09:12.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:12.330">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:09:12.330">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:09:12.330" endtime="20170916 02:09:12.330"></status>
</kw>
<status status="FAIL" starttime="20170916 02:09:11.266" endtime="20170916 02:09:12.330"></status>
</kw>
<status status="FAIL" starttime="20170916 02:09:08.908" endtime="20170916 02:09:12.330"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:22.336">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:22.336" endtime="20170916 02:09:22.336"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:22.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:22.337" endtime="20170916 02:09:22.337"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:22.338">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:22.337" endtime="20170916 02:09:22.338"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:22.338">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:22.338" endtime="20170916 02:09:22.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:22.779">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:22.339" endtime="20170916 02:09:22.779"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:22.779">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:22.779">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:22.339" endtime="20170916 02:09:22.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:22.780">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:22.780" endtime="20170916 02:09:22.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:22.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:22.780" endtime="20170916 02:09:22.781"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:22.335" endtime="20170916 02:09:22.781"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:22.334" endtime="20170916 02:09:22.781"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:22.334" endtime="20170916 02:09:22.781"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:22.782">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:09:22.782" endtime="20170916 02:09:22.782"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:22.784">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:22.783" endtime="20170916 02:09:22.784"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:22.785">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:22.785" endtime="20170916 02:09:22.785"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:22.784" endtime="20170916 02:09:22.785"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:22.783" endtime="20170916 02:09:22.785"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:22.782" endtime="20170916 02:09:22.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:23.086">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:23.086">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:22.786" endtime="20170916 02:09:23.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:23.088">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:23.087" endtime="20170916 02:09:23.088"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:23.089">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:23.089" endtime="20170916 02:09:23.089"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:23.088" endtime="20170916 02:09:23.089"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:23.087" endtime="20170916 02:09:23.090"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:23.086" endtime="20170916 02:09:23.090"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:23.090">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:23.090" endtime="20170916 02:09:23.090"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:23.090">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:22.333" endtime="20170916 02:09:23.090"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:23.091">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:23.091" endtime="20170916 02:09:23.091"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:23.091">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:23.092">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:23.092">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:23.091" endtime="20170916 02:09:23.092"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:23.092">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:09:22.332" endtime="20170916 02:09:23.092"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:23.092">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:09:22.332" endtime="20170916 02:09:23.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:09:23.093" endtime="20170916 02:09:23.093"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:22.332" endtime="20170916 02:09:23.093"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:23.097">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:23.096" endtime="20170916 02:09:23.097"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:23.097">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:23.097" endtime="20170916 02:09:23.098"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:23.098">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:23.098" endtime="20170916 02:09:23.098"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:23.099">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:23.098" endtime="20170916 02:09:23.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:23.584">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:23.099" endtime="20170916 02:09:23.584"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:23.584">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:23.584">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:23.099" endtime="20170916 02:09:23.584"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:23.585">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:23.585" endtime="20170916 02:09:23.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:23.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:23.585" endtime="20170916 02:09:23.586"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:23.096" endtime="20170916 02:09:23.586"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:23.095" endtime="20170916 02:09:23.586"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:23.095" endtime="20170916 02:09:23.586"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:23.587">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:09:23.586" endtime="20170916 02:09:23.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:23.589">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:23.588" endtime="20170916 02:09:23.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:23.590">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:23.590" endtime="20170916 02:09:23.590"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:23.589" endtime="20170916 02:09:23.590"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:23.587" endtime="20170916 02:09:23.590"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:23.587" endtime="20170916 02:09:23.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:24.159">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:24.160">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:23.591" endtime="20170916 02:09:24.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:24.162">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:24.161" endtime="20170916 02:09:24.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:24.163">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:24.162" endtime="20170916 02:09:24.163"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:24.162" endtime="20170916 02:09:24.163"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:24.161" endtime="20170916 02:09:24.163"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:24.160" endtime="20170916 02:09:24.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:24.163">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:24.163" endtime="20170916 02:09:24.163"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:24.164">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:23.094" endtime="20170916 02:09:24.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:24.164">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:24.164" endtime="20170916 02:09:24.164"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:24.165">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:24.165">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:24.165">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:24.165" endtime="20170916 02:09:24.165"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:24.166">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:09:23.093" endtime="20170916 02:09:24.166"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:24.166">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:09:23.093" endtime="20170916 02:09:24.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:09:24.167" endtime="20170916 02:09:24.167"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:24.173">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:24.172" endtime="20170916 02:09:24.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:24.174">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:24.174" endtime="20170916 02:09:24.174"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:24.175">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:24.175" endtime="20170916 02:09:24.175"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:24.176">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:24.176" endtime="20170916 02:09:24.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:24.560">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:24.177" endtime="20170916 02:09:24.560"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:24.560">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:24.560">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:24.177" endtime="20170916 02:09:24.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:24.561">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:24.560" endtime="20170916 02:09:24.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:24.561">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:24.561" endtime="20170916 02:09:24.561"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:24.172" endtime="20170916 02:09:24.562"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:24.171" endtime="20170916 02:09:24.562"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:24.170" endtime="20170916 02:09:24.562"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:24.562">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:09:24.562" endtime="20170916 02:09:24.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:24.565">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:24.564" endtime="20170916 02:09:24.565"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:24.566">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:24.565" endtime="20170916 02:09:24.566"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:24.565" endtime="20170916 02:09:24.566"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:24.563" endtime="20170916 02:09:24.566"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:24.563" endtime="20170916 02:09:24.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:25.489">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:25.490">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:24.566" endtime="20170916 02:09:25.490"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:25.492">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:25.491" endtime="20170916 02:09:25.492"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:25.492">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:25.492" endtime="20170916 02:09:25.493"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:25.492" endtime="20170916 02:09:25.493"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:25.491" endtime="20170916 02:09:25.493"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:25.490" endtime="20170916 02:09:25.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:25.493">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:25.493" endtime="20170916 02:09:25.493"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:25.494">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:24.169" endtime="20170916 02:09:25.494"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:25.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:25.494" endtime="20170916 02:09:25.494"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:25.495">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:25.495">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:25.495">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:25.495" endtime="20170916 02:09:25.495"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:25.495">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:09:24.168" endtime="20170916 02:09:25.495"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:25.495">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:09:24.168" endtime="20170916 02:09:25.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:25.496">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:09:25.496">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:09:25.496" endtime="20170916 02:09:25.496"></status>
</kw>
<status status="FAIL" starttime="20170916 02:09:24.167" endtime="20170916 02:09:25.497"></status>
</kw>
<status status="FAIL" starttime="20170916 02:09:22.331" endtime="20170916 02:09:25.497"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:35.502">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:35.502" endtime="20170916 02:09:35.503"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.503">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:35.503" endtime="20170916 02:09:35.503"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.504">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:35.503" endtime="20170916 02:09:35.504"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.504">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:35.504" endtime="20170916 02:09:35.504"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:35.815">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:35.505" endtime="20170916 02:09:35.815"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:35.815">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:35.815">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:35.505" endtime="20170916 02:09:35.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:35.816">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:35.815" endtime="20170916 02:09:35.816"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:35.816">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:35.816" endtime="20170916 02:09:35.817"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.501" endtime="20170916 02:09:35.817"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.501" endtime="20170916 02:09:35.817"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.500" endtime="20170916 02:09:35.817"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.817">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:09:35.817" endtime="20170916 02:09:35.817"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.819">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:35.819" endtime="20170916 02:09:35.820"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:35.820">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:35.820" endtime="20170916 02:09:35.821"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.820" endtime="20170916 02:09:35.821"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.818" endtime="20170916 02:09:35.821"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.818" endtime="20170916 02:09:35.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.894">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:35.894">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:35.821" endtime="20170916 02:09:35.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.901">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:35.896" endtime="20170916 02:09:35.901"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:35.902">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:35.902" endtime="20170916 02:09:35.902"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.901" endtime="20170916 02:09:35.902"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.895" endtime="20170916 02:09:35.903"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.894" endtime="20170916 02:09:35.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:35.903">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:35.903" endtime="20170916 02:09:35.903"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:35.903">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:35.499" endtime="20170916 02:09:35.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:35.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:35.904" endtime="20170916 02:09:35.904"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.905">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:35.905">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:35.905">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:35.904" endtime="20170916 02:09:35.905"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:35.905">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:09:35.499" endtime="20170916 02:09:35.905"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:35.905">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:09:35.498" endtime="20170916 02:09:35.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:09:35.906" endtime="20170916 02:09:35.906"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.498" endtime="20170916 02:09:35.906"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:35.910">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:35.909" endtime="20170916 02:09:35.910"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.911">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:35.910" endtime="20170916 02:09:35.911"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.911">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:35.911" endtime="20170916 02:09:35.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:35.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:35.912" endtime="20170916 02:09:35.912"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.106">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:35.913" endtime="20170916 02:09:36.106"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:36.106">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:36.106">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:35.912" endtime="20170916 02:09:36.106"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.107">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.107" endtime="20170916 02:09:36.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.107" endtime="20170916 02:09:36.108"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.909" endtime="20170916 02:09:36.108"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.908" endtime="20170916 02:09:36.108"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:35.908" endtime="20170916 02:09:36.108"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.109">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:09:36.108" endtime="20170916 02:09:36.109"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.111">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:36.110" endtime="20170916 02:09:36.111"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.112">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:36.112" endtime="20170916 02:09:36.112"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.111" endtime="20170916 02:09:36.112"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.110" endtime="20170916 02:09:36.113"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.109" endtime="20170916 02:09:36.113"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.203">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:36.204">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.113" endtime="20170916 02:09:36.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.206">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:36.205" endtime="20170916 02:09:36.206"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.206">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:36.206" endtime="20170916 02:09:36.207"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.206" endtime="20170916 02:09:36.207"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.204" endtime="20170916 02:09:36.207"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.204" endtime="20170916 02:09:36.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:36.207">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:36.207" endtime="20170916 02:09:36.207"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:36.208">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:35.907" endtime="20170916 02:09:36.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.208" endtime="20170916 02:09:36.208"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.209">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:36.209">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:36.209">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:36.209" endtime="20170916 02:09:36.209"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:36.209">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170916 02:09:35.907" endtime="20170916 02:09:36.209"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:36.210">${host_state} = Running</msg>
<status status="PASS" starttime="20170916 02:09:35.906" endtime="20170916 02:09:36.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:09:36.210" endtime="20170916 02:09:36.210"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.214">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:36.214" endtime="20170916 02:09:36.215"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.215">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:36.215" endtime="20170916 02:09:36.216"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.216">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:36.216" endtime="20170916 02:09:36.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.217">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:36.216" endtime="20170916 02:09:36.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:36.218" endtime="20170916 02:09:36.404"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:36.404">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:36.404">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.217" endtime="20170916 02:09:36.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.405">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.405" endtime="20170916 02:09:36.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.406" endtime="20170916 02:09:36.406"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.213" endtime="20170916 02:09:36.406"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.213" endtime="20170916 02:09:36.407"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.212" endtime="20170916 02:09:36.407"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.408">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170916 02:09:36.407" endtime="20170916 02:09:36.408"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.411">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:36.410" endtime="20170916 02:09:36.411"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.411">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:36.411" endtime="20170916 02:09:36.412"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.411" endtime="20170916 02:09:36.412"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.409" endtime="20170916 02:09:36.412"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.408" endtime="20170916 02:09:36.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.500">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:36.500">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.412" endtime="20170916 02:09:36.500"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.502">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:36.501" endtime="20170916 02:09:36.502"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.503">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:36.502" endtime="20170916 02:09:36.503"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.502" endtime="20170916 02:09:36.503"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.501" endtime="20170916 02:09:36.503"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:36.500" endtime="20170916 02:09:36.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:36.503">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:36.503" endtime="20170916 02:09:36.504"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:36.504">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.212" endtime="20170916 02:09:36.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:36.504" endtime="20170916 02:09:36.505"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:36.505">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:36.505">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:36.505">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:36.505" endtime="20170916 02:09:36.505"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:36.506">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:09:36.211" endtime="20170916 02:09:36.506"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:36.506">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170916 02:09:36.211" endtime="20170916 02:09:36.506"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:36.506">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170916 02:09:36.507">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170916 02:09:36.506" endtime="20170916 02:09:36.507"></status>
</kw>
<status status="FAIL" starttime="20170916 02:09:36.210" endtime="20170916 02:09:36.507"></status>
</kw>
<status status="FAIL" starttime="20170916 02:09:35.497" endtime="20170916 02:09:36.507"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:46.513">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:46.512" endtime="20170916 02:09:46.513"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.514">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:46.514" endtime="20170916 02:09:46.514"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.514">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:46.514" endtime="20170916 02:09:46.515"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.515">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:46.515" endtime="20170916 02:09:46.515"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:46.711">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:46.516" endtime="20170916 02:09:46.711"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:46.711">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:46.712">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:46.516" endtime="20170916 02:09:46.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:46.712">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:46.712" endtime="20170916 02:09:46.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:46.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:46.713" endtime="20170916 02:09:46.713"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.512" endtime="20170916 02:09:46.713"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.511" endtime="20170916 02:09:46.713"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.510" endtime="20170916 02:09:46.713"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.714">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:09:46.714" endtime="20170916 02:09:46.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.716">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:46.715" endtime="20170916 02:09:46.716"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:46.717">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:46.717" endtime="20170916 02:09:46.717"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.716" endtime="20170916 02:09:46.717"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.715" endtime="20170916 02:09:46.717"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.714" endtime="20170916 02:09:46.717"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.781">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:46.781">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:46.718" endtime="20170916 02:09:46.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.784">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:46.783" endtime="20170916 02:09:46.784"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:46.785">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:46.785" endtime="20170916 02:09:46.785"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.784" endtime="20170916 02:09:46.786"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.782" endtime="20170916 02:09:46.786"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.782" endtime="20170916 02:09:46.786"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:46.786">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:46.786" endtime="20170916 02:09:46.786"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:46.786">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:46.510" endtime="20170916 02:09:46.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:46.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:46.787" endtime="20170916 02:09:46.787"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.788">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:46.788">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:46.788">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:46.787" endtime="20170916 02:09:46.788"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:46.788">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:09:46.509" endtime="20170916 02:09:46.788"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:46.788">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:09:46.509" endtime="20170916 02:09:46.788"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:09:46.789" endtime="20170916 02:09:46.789"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.508" endtime="20170916 02:09:46.789"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:46.793">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:46.792" endtime="20170916 02:09:46.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:46.793" endtime="20170916 02:09:46.794"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.794">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:46.794" endtime="20170916 02:09:46.794"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:46.796">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:46.794" endtime="20170916 02:09:46.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:47.024">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:46.797" endtime="20170916 02:09:47.025"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:47.025">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:47.025">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:46.796" endtime="20170916 02:09:47.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:47.026">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:47.025" endtime="20170916 02:09:47.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:47.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:47.026" endtime="20170916 02:09:47.027"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.792" endtime="20170916 02:09:47.027"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.791" endtime="20170916 02:09:47.027"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:46.791" endtime="20170916 02:09:47.028"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:47.028">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:09:47.028" endtime="20170916 02:09:47.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:47.031">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:47.030" endtime="20170916 02:09:47.031"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:47.032">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:47.031" endtime="20170916 02:09:47.032"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:47.031" endtime="20170916 02:09:47.032"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:47.029" endtime="20170916 02:09:47.032"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:47.028" endtime="20170916 02:09:47.032"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:47.150">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:47.150">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:47.032" endtime="20170916 02:09:47.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:47.152">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:47.151" endtime="20170916 02:09:47.152"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:47.153">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:47.152" endtime="20170916 02:09:47.153"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:47.152" endtime="20170916 02:09:47.153"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:47.151" endtime="20170916 02:09:47.153"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:47.150" endtime="20170916 02:09:47.153"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:47.153">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:47.153" endtime="20170916 02:09:47.154"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:47.154">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:46.790" endtime="20170916 02:09:47.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:47.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:47.154" endtime="20170916 02:09:47.154"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:47.155">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:47.155">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:47.155">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:47.155" endtime="20170916 02:09:47.155"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:47.155">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:09:46.790" endtime="20170916 02:09:47.155"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:47.156">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:09:46.789" endtime="20170916 02:09:47.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:09:47.156">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:09:47.156" endtime="20170916 02:09:47.157"></status>
</kw>
<status status="FAIL" starttime="20170916 02:09:46.507" endtime="20170916 02:09:47.157"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.162">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:57.162" endtime="20170916 02:09:57.163"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.164">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:57.163" endtime="20170916 02:09:57.164"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.165">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:57.164" endtime="20170916 02:09:57.165"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.166">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:57.165" endtime="20170916 02:09:57.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.451">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:57.167" endtime="20170916 02:09:57.451"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:57.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:57.451">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.167" endtime="20170916 02:09:57.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.452">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.452" endtime="20170916 02:09:57.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.452" endtime="20170916 02:09:57.453"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.161" endtime="20170916 02:09:57.453"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.161" endtime="20170916 02:09:57.453"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.160" endtime="20170916 02:09:57.453"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.454">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:09:57.453" endtime="20170916 02:09:57.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.456">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:57.455" endtime="20170916 02:09:57.456"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.457">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:57.457" endtime="20170916 02:09:57.457"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.456" endtime="20170916 02:09:57.457"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.454" endtime="20170916 02:09:57.457"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.454" endtime="20170916 02:09:57.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.526">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:57.527">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.457" endtime="20170916 02:09:57.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.529">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:57.528" endtime="20170916 02:09:57.529"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.529">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:57.529" endtime="20170916 02:09:57.530"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.529" endtime="20170916 02:09:57.530"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.528" endtime="20170916 02:09:57.530"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.527" endtime="20170916 02:09:57.530"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:57.530">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:57.530" endtime="20170916 02:09:57.530"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:57.531">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.159" endtime="20170916 02:09:57.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.531" endtime="20170916 02:09:57.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.532">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:57.532">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:57.532">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:57.531" endtime="20170916 02:09:57.532"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:57.532">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:09:57.159" endtime="20170916 02:09:57.532"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:57.533">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:09:57.158" endtime="20170916 02:09:57.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:09:57.533" endtime="20170916 02:09:57.533"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.158" endtime="20170916 02:09:57.533"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.537">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:09:57.537" endtime="20170916 02:09:57.538"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.538">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:09:57.538" endtime="20170916 02:09:57.538"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.539">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:09:57.538" endtime="20170916 02:09:57.539"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.540">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:09:57.539" endtime="20170916 02:09:57.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.739">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:09:57.540" endtime="20170916 02:09:57.739"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:57.739">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:09:57.739">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.540" endtime="20170916 02:09:57.739"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.740">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.740" endtime="20170916 02:09:57.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.740" endtime="20170916 02:09:57.741"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.536" endtime="20170916 02:09:57.741"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.536" endtime="20170916 02:09:57.741"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.535" endtime="20170916 02:09:57.741"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.742">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:09:57.741" endtime="20170916 02:09:57.742"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.745">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:57.744" endtime="20170916 02:09:57.745"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.746">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:09:57.746" endtime="20170916 02:09:57.746"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.745" endtime="20170916 02:09:57.746"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.743" endtime="20170916 02:09:57.747"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.742" endtime="20170916 02:09:57.747"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.840">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:09:57.841">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.747" endtime="20170916 02:09:57.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.842">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:57.842" endtime="20170916 02:09:57.842"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.844">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:09:57.844" endtime="20170916 02:09:57.844"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.843" endtime="20170916 02:09:57.844"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.841" endtime="20170916 02:09:57.844"></status>
</kw>
<status status="PASS" starttime="20170916 02:09:57.841" endtime="20170916 02:09:57.844"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:09:57.845">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:09:57.844" endtime="20170916 02:09:57.845"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:57.845">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.534" endtime="20170916 02:09:57.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:09:57.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:09:57.845" endtime="20170916 02:09:57.846"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:09:57.846">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:09:57.846">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:09:57.846">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:09:57.846" endtime="20170916 02:09:57.846"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:57.847">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:09:57.534" endtime="20170916 02:09:57.847"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:09:57.847">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:09:57.533" endtime="20170916 02:09:57.848"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:09:57.848">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:09:57.848" endtime="20170916 02:09:57.848"></status>
</kw>
<status status="FAIL" starttime="20170916 02:09:57.157" endtime="20170916 02:09:57.849"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:07.854">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:07.853" endtime="20170916 02:10:07.854"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:07.855">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:07.854" endtime="20170916 02:10:07.855"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:07.855">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:07.855" endtime="20170916 02:10:07.855"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:07.856">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:07.856" endtime="20170916 02:10:07.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.107">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:07.857" endtime="20170916 02:10:08.107"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:08.107">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:08.107">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:07.856" endtime="20170916 02:10:08.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.108">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.108" endtime="20170916 02:10:08.108"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.109">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.108" endtime="20170916 02:10:08.109"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:07.853" endtime="20170916 02:10:08.109"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:07.852" endtime="20170916 02:10:08.109"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:07.852" endtime="20170916 02:10:08.109"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.110">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:10:08.109" endtime="20170916 02:10:08.110"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.112">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:08.111" endtime="20170916 02:10:08.112"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.113">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:08.113" endtime="20170916 02:10:08.114"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.112" endtime="20170916 02:10:08.114"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.111" endtime="20170916 02:10:08.114"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.110" endtime="20170916 02:10:08.114"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.258">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:08.258">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.114" endtime="20170916 02:10:08.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.260">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:08.260" endtime="20170916 02:10:08.260"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.261">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:08.261" endtime="20170916 02:10:08.262"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.260" endtime="20170916 02:10:08.262"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.259" endtime="20170916 02:10:08.262"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.259" endtime="20170916 02:10:08.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:08.262">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:08.262" endtime="20170916 02:10:08.262"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:08.263">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:07.851" endtime="20170916 02:10:08.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.263">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.263" endtime="20170916 02:10:08.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.264">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:08.264">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:08.264">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:08.264" endtime="20170916 02:10:08.264"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:08.264">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:10:07.851" endtime="20170916 02:10:08.264"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:08.265">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:10:07.850" endtime="20170916 02:10:08.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:10:08.265" endtime="20170916 02:10:08.265"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:07.850" endtime="20170916 02:10:08.265"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.269">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:08.269" endtime="20170916 02:10:08.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.270">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:08.270" endtime="20170916 02:10:08.270"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.271">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:08.271" endtime="20170916 02:10:08.271"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.272">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:08.271" endtime="20170916 02:10:08.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.471">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:08.273" endtime="20170916 02:10:08.471"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:08.471">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:08.471">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.272" endtime="20170916 02:10:08.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.472">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.472" endtime="20170916 02:10:08.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.472" endtime="20170916 02:10:08.473"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.268" endtime="20170916 02:10:08.473"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.268" endtime="20170916 02:10:08.473"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.267" endtime="20170916 02:10:08.473"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.474">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:10:08.473" endtime="20170916 02:10:08.474"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.476">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:08.475" endtime="20170916 02:10:08.476"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.477">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:08.476" endtime="20170916 02:10:08.477"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.476" endtime="20170916 02:10:08.477"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.474" endtime="20170916 02:10:08.477"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.474" endtime="20170916 02:10:08.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.597">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:08.597">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.477" endtime="20170916 02:10:08.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.599">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:08.599" endtime="20170916 02:10:08.599"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.600">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:08.600" endtime="20170916 02:10:08.600"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.599" endtime="20170916 02:10:08.600"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.598" endtime="20170916 02:10:08.601"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:08.598" endtime="20170916 02:10:08.601"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:08.601">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:08.601" endtime="20170916 02:10:08.601"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:08.601">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.266" endtime="20170916 02:10:08.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:08.602">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:08.602" endtime="20170916 02:10:08.602"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:08.603">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:08.603">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:08.603">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:08.602" endtime="20170916 02:10:08.603"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:08.603">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:08.266" endtime="20170916 02:10:08.603"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:08.603">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:08.266" endtime="20170916 02:10:08.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:10:08.604">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:10:08.604" endtime="20170916 02:10:08.604"></status>
</kw>
<status status="FAIL" starttime="20170916 02:10:07.849" endtime="20170916 02:10:08.604"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:18.610">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:18.610" endtime="20170916 02:10:18.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.611">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:18.611" endtime="20170916 02:10:18.611"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.611">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:18.611" endtime="20170916 02:10:18.612"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.612">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:18.612" endtime="20170916 02:10:18.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:18.853">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:18.613" endtime="20170916 02:10:18.853"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:18.853">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:18.853">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:18.612" endtime="20170916 02:10:18.853"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:18.854">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:18.853" endtime="20170916 02:10:18.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:18.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:18.854" endtime="20170916 02:10:18.854"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.609" endtime="20170916 02:10:18.855"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.609" endtime="20170916 02:10:18.855"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.608" endtime="20170916 02:10:18.855"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.855">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:10:18.855" endtime="20170916 02:10:18.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.858">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:18.857" endtime="20170916 02:10:18.858"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:18.863">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:18.863" endtime="20170916 02:10:18.863"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.858" endtime="20170916 02:10:18.863"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.856" endtime="20170916 02:10:18.863"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.856" endtime="20170916 02:10:18.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.946">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:18.947">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:18.864" endtime="20170916 02:10:18.947"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.949">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:18.948" endtime="20170916 02:10:18.949"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:18.950">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:18.949" endtime="20170916 02:10:18.950"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.949" endtime="20170916 02:10:18.950"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.948" endtime="20170916 02:10:18.950"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.947" endtime="20170916 02:10:18.950"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:18.950">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:18.950" endtime="20170916 02:10:18.950"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:18.951">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:18.607" endtime="20170916 02:10:18.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:18.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:18.951" endtime="20170916 02:10:18.951"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.952">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:18.952">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:18.952">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:18.952" endtime="20170916 02:10:18.952"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:18.952">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:10:18.606" endtime="20170916 02:10:18.952"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:18.953">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:10:18.606" endtime="20170916 02:10:18.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:10:18.953" endtime="20170916 02:10:18.953"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.606" endtime="20170916 02:10:18.953"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:18.957">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:18.957" endtime="20170916 02:10:18.957"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.958">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:18.958" endtime="20170916 02:10:18.958"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.959">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:18.958" endtime="20170916 02:10:18.959"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:18.959">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:18.959" endtime="20170916 02:10:18.959"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:19.260">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:18.960" endtime="20170916 02:10:19.261"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:19.261">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:19.261">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:18.959" endtime="20170916 02:10:19.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:19.261">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:19.261" endtime="20170916 02:10:19.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:19.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:19.262" endtime="20170916 02:10:19.262"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.956" endtime="20170916 02:10:19.262"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.956" endtime="20170916 02:10:19.262"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:18.955" endtime="20170916 02:10:19.263"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:19.263">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:10:19.263" endtime="20170916 02:10:19.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:19.265">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:19.264" endtime="20170916 02:10:19.265"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:19.266">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:19.266" endtime="20170916 02:10:19.266"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:19.265" endtime="20170916 02:10:19.266"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:19.264" endtime="20170916 02:10:19.266"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:19.263" endtime="20170916 02:10:19.267"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:19.356">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:19.356">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:19.267" endtime="20170916 02:10:19.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:19.358">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:19.357" endtime="20170916 02:10:19.358"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:19.359">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:19.358" endtime="20170916 02:10:19.359"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:19.358" endtime="20170916 02:10:19.359"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:19.357" endtime="20170916 02:10:19.359"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:19.356" endtime="20170916 02:10:19.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:19.360">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:19.359" endtime="20170916 02:10:19.360"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:19.360">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:18.954" endtime="20170916 02:10:19.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:19.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:19.360" endtime="20170916 02:10:19.361"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:19.361">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:19.361">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:19.361">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:19.361" endtime="20170916 02:10:19.361"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:19.362">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:18.954" endtime="20170916 02:10:19.362"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:19.362">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:18.953" endtime="20170916 02:10:19.362"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:10:19.363">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:10:19.362" endtime="20170916 02:10:19.363"></status>
</kw>
<status status="FAIL" starttime="20170916 02:10:18.605" endtime="20170916 02:10:19.363"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.368">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:29.368" endtime="20170916 02:10:29.369"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:29.369" endtime="20170916 02:10:29.369"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.370">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:29.370" endtime="20170916 02:10:29.370"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.371">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:29.370" endtime="20170916 02:10:29.371"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.558">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:29.371" endtime="20170916 02:10:29.558"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:29.558">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:29.558">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.371" endtime="20170916 02:10:29.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.559">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.558" endtime="20170916 02:10:29.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.559">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.559" endtime="20170916 02:10:29.559"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.367" endtime="20170916 02:10:29.560"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.367" endtime="20170916 02:10:29.560"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.366" endtime="20170916 02:10:29.560"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.560">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:10:29.560" endtime="20170916 02:10:29.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.563">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:29.562" endtime="20170916 02:10:29.563"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.563">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:29.563" endtime="20170916 02:10:29.564"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.563" endtime="20170916 02:10:29.564"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.561" endtime="20170916 02:10:29.564"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.561" endtime="20170916 02:10:29.564"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.627">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:29.627">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.564" endtime="20170916 02:10:29.627"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.629">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:29.628" endtime="20170916 02:10:29.629"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.630">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:29.630" endtime="20170916 02:10:29.630"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.629" endtime="20170916 02:10:29.630"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.628" endtime="20170916 02:10:29.630"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.627" endtime="20170916 02:10:29.630"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:29.631">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:29.631" endtime="20170916 02:10:29.631"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:29.631">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.365" endtime="20170916 02:10:29.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.632">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.631" endtime="20170916 02:10:29.632"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.632">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:29.632">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:29.633">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:29.632" endtime="20170916 02:10:29.633"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:29.633">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:10:29.365" endtime="20170916 02:10:29.633"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:29.633">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:10:29.364" endtime="20170916 02:10:29.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:10:29.633" endtime="20170916 02:10:29.634"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.364" endtime="20170916 02:10:29.634"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.637">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:29.637" endtime="20170916 02:10:29.638"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.638">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:29.638" endtime="20170916 02:10:29.638"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.639">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:29.639" endtime="20170916 02:10:29.639"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.640">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:29.639" endtime="20170916 02:10:29.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.848">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:29.642" endtime="20170916 02:10:29.849"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:29.849">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:29.849">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.642" endtime="20170916 02:10:29.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.849">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.849" endtime="20170916 02:10:29.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.850" endtime="20170916 02:10:29.850"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.637" endtime="20170916 02:10:29.850"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.636" endtime="20170916 02:10:29.850"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.635" endtime="20170916 02:10:29.851"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.851">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:10:29.851" endtime="20170916 02:10:29.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:29.854">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:29.853" endtime="20170916 02:10:29.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:29.855">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:29.855" endtime="20170916 02:10:29.855"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.854" endtime="20170916 02:10:29.855"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.852" endtime="20170916 02:10:29.855"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:29.851" endtime="20170916 02:10:29.855"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:30.012">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:30.012">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.856" endtime="20170916 02:10:30.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:30.015">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:30.014" endtime="20170916 02:10:30.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:30.016">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:30.016" endtime="20170916 02:10:30.016"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:30.015" endtime="20170916 02:10:30.016"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:30.013" endtime="20170916 02:10:30.016"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:30.013" endtime="20170916 02:10:30.016"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:30.017">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:30.017" endtime="20170916 02:10:30.017"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:30.017">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:29.635" endtime="20170916 02:10:30.017"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:30.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:30.017" endtime="20170916 02:10:30.018"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:30.018">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:30.018">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:30.018">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:30.018" endtime="20170916 02:10:30.018"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:30.019">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:29.634" endtime="20170916 02:10:30.019"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:30.019">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:29.634" endtime="20170916 02:10:30.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:10:30.020">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:10:30.019" endtime="20170916 02:10:30.020"></status>
</kw>
<status status="FAIL" starttime="20170916 02:10:29.363" endtime="20170916 02:10:30.020"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.025">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:40.025" endtime="20170916 02:10:40.025"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:40.026" endtime="20170916 02:10:40.026"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.027">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:40.026" endtime="20170916 02:10:40.027"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:40.027" endtime="20170916 02:10:40.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.211">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:40.029" endtime="20170916 02:10:40.211"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:40.211">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:40.212">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.028" endtime="20170916 02:10:40.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.212">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.212" endtime="20170916 02:10:40.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.213" endtime="20170916 02:10:40.213"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.024" endtime="20170916 02:10:40.213"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.024" endtime="20170916 02:10:40.213"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.023" endtime="20170916 02:10:40.213"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.214">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:10:40.214" endtime="20170916 02:10:40.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.216">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:40.215" endtime="20170916 02:10:40.216"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.217">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:40.217" endtime="20170916 02:10:40.217"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.216" endtime="20170916 02:10:40.217"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.215" endtime="20170916 02:10:40.217"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.214" endtime="20170916 02:10:40.217"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.323">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:40.324">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.218" endtime="20170916 02:10:40.324"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.325">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:40.325" endtime="20170916 02:10:40.325"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.326">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:40.326" endtime="20170916 02:10:40.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.326" endtime="20170916 02:10:40.327"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.324" endtime="20170916 02:10:40.327"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.324" endtime="20170916 02:10:40.327"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:40.327">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:40.327" endtime="20170916 02:10:40.327"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:40.327">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.022" endtime="20170916 02:10:40.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.328" endtime="20170916 02:10:40.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.329">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:40.329">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:40.329">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:40.328" endtime="20170916 02:10:40.329"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:40.329">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:10:40.022" endtime="20170916 02:10:40.329"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:40.329">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:10:40.021" endtime="20170916 02:10:40.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:10:40.330" endtime="20170916 02:10:40.330"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.021" endtime="20170916 02:10:40.330"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.334">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:40.334" endtime="20170916 02:10:40.335"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.335">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:40.335" endtime="20170916 02:10:40.335"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.336">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:40.335" endtime="20170916 02:10:40.336"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.336">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:40.336" endtime="20170916 02:10:40.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.548">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:40.337" endtime="20170916 02:10:40.548"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:40.548">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:40.548">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.337" endtime="20170916 02:10:40.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.549">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.548" endtime="20170916 02:10:40.549"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.549" endtime="20170916 02:10:40.550"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.333" endtime="20170916 02:10:40.550"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.332" endtime="20170916 02:10:40.550"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.332" endtime="20170916 02:10:40.550"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.550">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:10:40.550" endtime="20170916 02:10:40.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.552">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:40.552" endtime="20170916 02:10:40.553"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.553">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:40.553" endtime="20170916 02:10:40.553"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.553" endtime="20170916 02:10:40.554"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.551" endtime="20170916 02:10:40.554"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.551" endtime="20170916 02:10:40.554"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.643">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:40.643">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.554" endtime="20170916 02:10:40.643"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.645">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:40.644" endtime="20170916 02:10:40.645"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.646">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:40.646" endtime="20170916 02:10:40.646"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.645" endtime="20170916 02:10:40.646"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.644" endtime="20170916 02:10:40.646"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:40.643" endtime="20170916 02:10:40.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:40.647">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:40.647" endtime="20170916 02:10:40.647"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:40.647">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.331" endtime="20170916 02:10:40.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:40.648">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:40.647" endtime="20170916 02:10:40.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:40.648">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:40.648">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:40.649">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:40.648" endtime="20170916 02:10:40.649"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:40.649">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:40.331" endtime="20170916 02:10:40.649"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:40.649">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:40.330" endtime="20170916 02:10:40.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:10:40.650">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:10:40.649" endtime="20170916 02:10:40.650"></status>
</kw>
<status status="FAIL" starttime="20170916 02:10:40.020" endtime="20170916 02:10:40.650"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:50.657">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:50.656" endtime="20170916 02:10:50.657"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.658">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:50.658" endtime="20170916 02:10:50.658"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.659">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:50.659" endtime="20170916 02:10:50.659"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.660">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:50.660" endtime="20170916 02:10:50.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:50.863">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:50.661" endtime="20170916 02:10:50.863"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:50.863">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:50.863">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:50.661" endtime="20170916 02:10:50.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:50.864">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:50.864" endtime="20170916 02:10:50.864"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:50.865">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:50.865" endtime="20170916 02:10:50.865"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.656" endtime="20170916 02:10:50.866"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.655" endtime="20170916 02:10:50.866"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.654" endtime="20170916 02:10:50.866"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.867">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:10:50.866" endtime="20170916 02:10:50.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.870">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:50.869" endtime="20170916 02:10:50.870"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:50.871">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:50.871" endtime="20170916 02:10:50.871"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.870" endtime="20170916 02:10:50.872"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.868" endtime="20170916 02:10:50.872"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.867" endtime="20170916 02:10:50.872"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.934">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:50.934">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:50.872" endtime="20170916 02:10:50.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.936">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:50.935" endtime="20170916 02:10:50.936"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:50.937">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:50.936" endtime="20170916 02:10:50.937"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.936" endtime="20170916 02:10:50.937"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.935" endtime="20170916 02:10:50.937"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.934" endtime="20170916 02:10:50.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:50.937">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:50.937" endtime="20170916 02:10:50.937"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:50.938">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:50.653" endtime="20170916 02:10:50.938"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:50.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:50.938" endtime="20170916 02:10:50.938"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.939">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:50.939">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:50.939">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:50.939" endtime="20170916 02:10:50.939"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:50.939">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:10:50.652" endtime="20170916 02:10:50.939"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:50.940">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:10:50.652" endtime="20170916 02:10:50.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:10:50.940" endtime="20170916 02:10:50.940"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.651" endtime="20170916 02:10:50.940"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:50.944">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:10:50.944" endtime="20170916 02:10:50.945"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.946">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:10:50.945" endtime="20170916 02:10:50.946"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.946">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:10:50.946" endtime="20170916 02:10:50.946"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:50.947">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:10:50.947" endtime="20170916 02:10:50.947"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:51.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:10:50.948" endtime="20170916 02:10:51.139"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:51.140">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:10:51.140">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:50.947" endtime="20170916 02:10:51.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:51.140">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:51.140" endtime="20170916 02:10:51.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:51.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:51.141" endtime="20170916 02:10:51.141"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.943" endtime="20170916 02:10:51.141"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.943" endtime="20170916 02:10:51.141"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:50.942" endtime="20170916 02:10:51.141"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:51.142">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:10:51.142" endtime="20170916 02:10:51.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:51.144">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:51.143" endtime="20170916 02:10:51.144"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:51.145">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:10:51.145" endtime="20170916 02:10:51.145"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:51.144" endtime="20170916 02:10:51.145"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:51.143" endtime="20170916 02:10:51.145"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:51.142" endtime="20170916 02:10:51.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:51.233">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:10:51.233">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:51.146" endtime="20170916 02:10:51.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:51.235">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:51.235" endtime="20170916 02:10:51.235"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:51.236">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:10:51.236" endtime="20170916 02:10:51.236"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:51.235" endtime="20170916 02:10:51.236"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:51.234" endtime="20170916 02:10:51.236"></status>
</kw>
<status status="PASS" starttime="20170916 02:10:51.234" endtime="20170916 02:10:51.237"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:10:51.237">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:10:51.237" endtime="20170916 02:10:51.237"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:51.237">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:10:50.942" endtime="20170916 02:10:51.237"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:10:51.239">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:10:51.239" endtime="20170916 02:10:51.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:10:51.240">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:10:51.240">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:10:51.240">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:10:51.240" endtime="20170916 02:10:51.240"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:51.240">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:50.941" endtime="20170916 02:10:51.240"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:10:51.241">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:10:50.941" endtime="20170916 02:10:51.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:10:51.241">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:10:51.241" endtime="20170916 02:10:51.241"></status>
</kw>
<status status="FAIL" starttime="20170916 02:10:50.651" endtime="20170916 02:10:51.242"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.247">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:01.247" endtime="20170916 02:11:01.247"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.248">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:01.248" endtime="20170916 02:11:01.248"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.249">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:01.248" endtime="20170916 02:11:01.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.249">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:01.249" endtime="20170916 02:11:01.249"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.447">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:01.250" endtime="20170916 02:11:01.448"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:01.448">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:01.448">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.250" endtime="20170916 02:11:01.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.448">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.448" endtime="20170916 02:11:01.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.449" endtime="20170916 02:11:01.449"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.246" endtime="20170916 02:11:01.449"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.246" endtime="20170916 02:11:01.449"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.245" endtime="20170916 02:11:01.449"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.450">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:11:01.450" endtime="20170916 02:11:01.450"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.452">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:01.452" endtime="20170916 02:11:01.452"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.453">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:01.453" endtime="20170916 02:11:01.453"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.452" endtime="20170916 02:11:01.454"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.451" endtime="20170916 02:11:01.454"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.450" endtime="20170916 02:11:01.454"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.516">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:01.516">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.454" endtime="20170916 02:11:01.517"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.518">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:01.518" endtime="20170916 02:11:01.518"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.519">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:01.519" endtime="20170916 02:11:01.519"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.518" endtime="20170916 02:11:01.519"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.517" endtime="20170916 02:11:01.519"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.517" endtime="20170916 02:11:01.519"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:01.520">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:01.520" endtime="20170916 02:11:01.520"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:01.520">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.244" endtime="20170916 02:11:01.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.520" endtime="20170916 02:11:01.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.521">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:01.521">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:01.522">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:01.521" endtime="20170916 02:11:01.522"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:01.522">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:11:01.243" endtime="20170916 02:11:01.522"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:01.522">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:11:01.243" endtime="20170916 02:11:01.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:11:01.522" endtime="20170916 02:11:01.523"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.243" endtime="20170916 02:11:01.523"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.527">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:01.526" endtime="20170916 02:11:01.527"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.527">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:01.527" endtime="20170916 02:11:01.527"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.528">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:01.528" endtime="20170916 02:11:01.528"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.529">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:01.528" endtime="20170916 02:11:01.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.743">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:01.529" endtime="20170916 02:11:01.743"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:01.744">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:01.744">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.529" endtime="20170916 02:11:01.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.744">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.744" endtime="20170916 02:11:01.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.745" endtime="20170916 02:11:01.745"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.525" endtime="20170916 02:11:01.745"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.525" endtime="20170916 02:11:01.745"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.524" endtime="20170916 02:11:01.745"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.746">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:11:01.746" endtime="20170916 02:11:01.746"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.748">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:01.747" endtime="20170916 02:11:01.748"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.749">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:01.749" endtime="20170916 02:11:01.749"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.748" endtime="20170916 02:11:01.749"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.747" endtime="20170916 02:11:01.749"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.746" endtime="20170916 02:11:01.749"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.846">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:01.847">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.750" endtime="20170916 02:11:01.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.848">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:01.848" endtime="20170916 02:11:01.848"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.849">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:01.849" endtime="20170916 02:11:01.849"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.848" endtime="20170916 02:11:01.849"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.847" endtime="20170916 02:11:01.849"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:01.847" endtime="20170916 02:11:01.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:01.850">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:01.850" endtime="20170916 02:11:01.850"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:01.850">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.524" endtime="20170916 02:11:01.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:01.851">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:01.850" endtime="20170916 02:11:01.851"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:01.851">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:01.851">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:01.852">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:01.851" endtime="20170916 02:11:01.852"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:01.852">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:01.523" endtime="20170916 02:11:01.852"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:01.852">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:01.523" endtime="20170916 02:11:01.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:11:01.853">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:11:01.852" endtime="20170916 02:11:01.853"></status>
</kw>
<status status="FAIL" starttime="20170916 02:11:01.242" endtime="20170916 02:11:01.853"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:11.858">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:11.858" endtime="20170916 02:11:11.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:11.859">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:11.859" endtime="20170916 02:11:11.859"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:11.860">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:11.859" endtime="20170916 02:11:11.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:11.860">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:11.860" endtime="20170916 02:11:11.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.141">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:11.861" endtime="20170916 02:11:12.141"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:12.141">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:12.141">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:11.861" endtime="20170916 02:11:12.141"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.142">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.142" endtime="20170916 02:11:12.142"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.142" endtime="20170916 02:11:12.143"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:11.857" endtime="20170916 02:11:12.143"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:11.856" endtime="20170916 02:11:12.143"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:11.856" endtime="20170916 02:11:12.143"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.144">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:11:12.143" endtime="20170916 02:11:12.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.146">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:12.145" endtime="20170916 02:11:12.146"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.147">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:12.146" endtime="20170916 02:11:12.147"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.146" endtime="20170916 02:11:12.147"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.144" endtime="20170916 02:11:12.147"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.144" endtime="20170916 02:11:12.147"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.236">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:12.236">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.147" endtime="20170916 02:11:12.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.238">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:12.237" endtime="20170916 02:11:12.238"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.239">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:12.239" endtime="20170916 02:11:12.239"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.238" endtime="20170916 02:11:12.239"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.237" endtime="20170916 02:11:12.239"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.236" endtime="20170916 02:11:12.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:12.240">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:12.240" endtime="20170916 02:11:12.240"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:12.240">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:11.855" endtime="20170916 02:11:12.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.241">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.240" endtime="20170916 02:11:12.241"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.241">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:12.241">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:12.241">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:12.241" endtime="20170916 02:11:12.241"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:12.242">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:11:11.855" endtime="20170916 02:11:12.242"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:12.242">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:11:11.854" endtime="20170916 02:11:12.242"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:11:12.243" endtime="20170916 02:11:12.243"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:11.854" endtime="20170916 02:11:12.243"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.248">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:12.247" endtime="20170916 02:11:12.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:12.249" endtime="20170916 02:11:12.250"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.250">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:12.250" endtime="20170916 02:11:12.251"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:12.251" endtime="20170916 02:11:12.251"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.461">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:12.253" endtime="20170916 02:11:12.461"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:12.461">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:12.461">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.252" endtime="20170916 02:11:12.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.462">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.462" endtime="20170916 02:11:12.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.462" endtime="20170916 02:11:12.463"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.247" endtime="20170916 02:11:12.463"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.246" endtime="20170916 02:11:12.463"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.245" endtime="20170916 02:11:12.463"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.463">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:11:12.463" endtime="20170916 02:11:12.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.466">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:12.465" endtime="20170916 02:11:12.466"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.467">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:12.467" endtime="20170916 02:11:12.467"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.466" endtime="20170916 02:11:12.467"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.464" endtime="20170916 02:11:12.467"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.464" endtime="20170916 02:11:12.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.562">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:12.562">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.467" endtime="20170916 02:11:12.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.564">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:12.564" endtime="20170916 02:11:12.564"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.565">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:12.565" endtime="20170916 02:11:12.565"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.564" endtime="20170916 02:11:12.565"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.563" endtime="20170916 02:11:12.566"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:12.563" endtime="20170916 02:11:12.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:12.566">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:12.566" endtime="20170916 02:11:12.566"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:12.566">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.244" endtime="20170916 02:11:12.566"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:12.567">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:12.567" endtime="20170916 02:11:12.567"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:12.568">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:12.568">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:12.568">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:12.567" endtime="20170916 02:11:12.568"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:12.568">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:12.243" endtime="20170916 02:11:12.568"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:12.568">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:12.243" endtime="20170916 02:11:12.568"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:11:12.569">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:11:12.569" endtime="20170916 02:11:12.569"></status>
</kw>
<status status="FAIL" starttime="20170916 02:11:11.853" endtime="20170916 02:11:12.569"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:22.574">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:22.574" endtime="20170916 02:11:22.574"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.575">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:22.575" endtime="20170916 02:11:22.575"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.576">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:22.575" endtime="20170916 02:11:22.576"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.577">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:22.576" endtime="20170916 02:11:22.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:22.829">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:22.577" endtime="20170916 02:11:22.829"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:22.829">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:22.829">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:22.577" endtime="20170916 02:11:22.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:22.830">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:22.830" endtime="20170916 02:11:22.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:22.831">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:22.830" endtime="20170916 02:11:22.831"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.573" endtime="20170916 02:11:22.831"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.573" endtime="20170916 02:11:22.831"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.572" endtime="20170916 02:11:22.831"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.832">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:11:22.831" endtime="20170916 02:11:22.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.834">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:22.833" endtime="20170916 02:11:22.834"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:22.834">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:22.834" endtime="20170916 02:11:22.835"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.834" endtime="20170916 02:11:22.835"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.832" endtime="20170916 02:11:22.835"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.832" endtime="20170916 02:11:22.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.909">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:22.909">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:22.835" endtime="20170916 02:11:22.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.910">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:22.910" endtime="20170916 02:11:22.911"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:22.911">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:22.911" endtime="20170916 02:11:22.911"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.911" endtime="20170916 02:11:22.912"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.909" endtime="20170916 02:11:22.912"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.909" endtime="20170916 02:11:22.912"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:22.912">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:22.912" endtime="20170916 02:11:22.913"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:22.913">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:22.571" endtime="20170916 02:11:22.913"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:22.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:22.913" endtime="20170916 02:11:22.914"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.915">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:22.915">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:22.915">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:22.914" endtime="20170916 02:11:22.915"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:22.915">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:11:22.571" endtime="20170916 02:11:22.915"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:22.916">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:11:22.570" endtime="20170916 02:11:22.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:11:22.916" endtime="20170916 02:11:22.917"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.570" endtime="20170916 02:11:22.917"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:22.922">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:22.922" endtime="20170916 02:11:22.923"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.923">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:22.923" endtime="20170916 02:11:22.924"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.924">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:22.924" endtime="20170916 02:11:22.925"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:22.925">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:22.925" endtime="20170916 02:11:22.925"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:23.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:22.927" endtime="20170916 02:11:23.176"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:23.177">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:23.177">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:22.926" endtime="20170916 02:11:23.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:23.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:23.177" endtime="20170916 02:11:23.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:23.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:23.178" endtime="20170916 02:11:23.178"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.921" endtime="20170916 02:11:23.178"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.920" endtime="20170916 02:11:23.178"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:22.919" endtime="20170916 02:11:23.178"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:23.179">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:11:23.179" endtime="20170916 02:11:23.179"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:23.181">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:23.180" endtime="20170916 02:11:23.181"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:23.182">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:23.182" endtime="20170916 02:11:23.182"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:23.181" endtime="20170916 02:11:23.182"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:23.180" endtime="20170916 02:11:23.182"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:23.179" endtime="20170916 02:11:23.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:23.269">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:23.269">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:23.183" endtime="20170916 02:11:23.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:23.270">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:23.270" endtime="20170916 02:11:23.270"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:23.272">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:23.271" endtime="20170916 02:11:23.272"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:23.270" endtime="20170916 02:11:23.272"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:23.269" endtime="20170916 02:11:23.272"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:23.269" endtime="20170916 02:11:23.272"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:23.272">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:23.272" endtime="20170916 02:11:23.272"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:23.273">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:22.918" endtime="20170916 02:11:23.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:23.273">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:23.273" endtime="20170916 02:11:23.273"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:23.274">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:23.274">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:23.274">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:23.274" endtime="20170916 02:11:23.274"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:23.274">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:22.918" endtime="20170916 02:11:23.274"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:23.275">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:22.917" endtime="20170916 02:11:23.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:11:23.275">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:11:23.275" endtime="20170916 02:11:23.275"></status>
</kw>
<status status="FAIL" starttime="20170916 02:11:22.570" endtime="20170916 02:11:23.275"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.280">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:33.280" endtime="20170916 02:11:33.281"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.282">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:33.281" endtime="20170916 02:11:33.282"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.282">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:33.282" endtime="20170916 02:11:33.283"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.283">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:33.283" endtime="20170916 02:11:33.283"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.464">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:33.285" endtime="20170916 02:11:33.464"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:33.464">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:33.464">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.284" endtime="20170916 02:11:33.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.465">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.465" endtime="20170916 02:11:33.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.465" endtime="20170916 02:11:33.466"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.279" endtime="20170916 02:11:33.466"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.279" endtime="20170916 02:11:33.466"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.278" endtime="20170916 02:11:33.466"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.467">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:11:33.466" endtime="20170916 02:11:33.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.469">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:33.468" endtime="20170916 02:11:33.469"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.470">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:33.469" endtime="20170916 02:11:33.470"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.469" endtime="20170916 02:11:33.470"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.467" endtime="20170916 02:11:33.470"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.467" endtime="20170916 02:11:33.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.555">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:33.555">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.470" endtime="20170916 02:11:33.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.557">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:33.556" endtime="20170916 02:11:33.557"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.558">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:33.557" endtime="20170916 02:11:33.558"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.557" endtime="20170916 02:11:33.558"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.556" endtime="20170916 02:11:33.558"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.555" endtime="20170916 02:11:33.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:33.558">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:33.558" endtime="20170916 02:11:33.559"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:33.559">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.278" endtime="20170916 02:11:33.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.559">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.559" endtime="20170916 02:11:33.559"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.560">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:33.560">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:33.560">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:33.560" endtime="20170916 02:11:33.560"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:33.560">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:11:33.277" endtime="20170916 02:11:33.561"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:33.561">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:11:33.277" endtime="20170916 02:11:33.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:11:33.561" endtime="20170916 02:11:33.561"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.276" endtime="20170916 02:11:33.561"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.565">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:33.565" endtime="20170916 02:11:33.566"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.566">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:33.566" endtime="20170916 02:11:33.566"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.567">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:33.566" endtime="20170916 02:11:33.567"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.568">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:33.567" endtime="20170916 02:11:33.568"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.840">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:33.568" endtime="20170916 02:11:33.840"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:33.840">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:33.840">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.568" endtime="20170916 02:11:33.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.841">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.841" endtime="20170916 02:11:33.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.842" endtime="20170916 02:11:33.842"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.564" endtime="20170916 02:11:33.842"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.564" endtime="20170916 02:11:33.842"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.563" endtime="20170916 02:11:33.843"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.843">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:11:33.843" endtime="20170916 02:11:33.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.846">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:33.845" endtime="20170916 02:11:33.846"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.847">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:33.846" endtime="20170916 02:11:33.847"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.846" endtime="20170916 02:11:33.847"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.844" endtime="20170916 02:11:33.847"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.844" endtime="20170916 02:11:33.847"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.963">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:33.963">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.847" endtime="20170916 02:11:33.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.965">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:33.965" endtime="20170916 02:11:33.965"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.966">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:33.966" endtime="20170916 02:11:33.966"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.965" endtime="20170916 02:11:33.966"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.964" endtime="20170916 02:11:33.966"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:33.964" endtime="20170916 02:11:33.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:33.967">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:33.967" endtime="20170916 02:11:33.967"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:33.967">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.562" endtime="20170916 02:11:33.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:33.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:33.967" endtime="20170916 02:11:33.968"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:33.968">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:33.968">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:33.969">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:33.968" endtime="20170916 02:11:33.969"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:33.969">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:33.562" endtime="20170916 02:11:33.969"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:33.969">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:33.562" endtime="20170916 02:11:33.969"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:11:33.970">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:11:33.969" endtime="20170916 02:11:33.970"></status>
</kw>
<status status="FAIL" starttime="20170916 02:11:33.276" endtime="20170916 02:11:33.970"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:43.975">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:43.975" endtime="20170916 02:11:43.975"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:43.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:43.976" endtime="20170916 02:11:43.976"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:43.976">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:43.976" endtime="20170916 02:11:43.976"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:43.977">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:43.977" endtime="20170916 02:11:43.977"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.158">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:43.978" endtime="20170916 02:11:44.158"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:44.158">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:44.158">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:43.977" endtime="20170916 02:11:44.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.159" endtime="20170916 02:11:44.159"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.160">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.160" endtime="20170916 02:11:44.160"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:43.974" endtime="20170916 02:11:44.160"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:43.974" endtime="20170916 02:11:44.161"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:43.973" endtime="20170916 02:11:44.161"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.162">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:11:44.161" endtime="20170916 02:11:44.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.165">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:44.164" endtime="20170916 02:11:44.165"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.166">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:44.166" endtime="20170916 02:11:44.166"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.165" endtime="20170916 02:11:44.166"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.163" endtime="20170916 02:11:44.166"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.162" endtime="20170916 02:11:44.167"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.271">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:44.271">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.167" endtime="20170916 02:11:44.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.273">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:44.272" endtime="20170916 02:11:44.273"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.274">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:44.274" endtime="20170916 02:11:44.274"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.273" endtime="20170916 02:11:44.274"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.272" endtime="20170916 02:11:44.274"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.272" endtime="20170916 02:11:44.274"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:44.275">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:44.275" endtime="20170916 02:11:44.275"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:44.275">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:43.972" endtime="20170916 02:11:44.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.275" endtime="20170916 02:11:44.276"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.276">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:44.276">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:44.276">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:44.276" endtime="20170916 02:11:44.276"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:44.277">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:11:43.972" endtime="20170916 02:11:44.277"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:44.277">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:11:43.971" endtime="20170916 02:11:44.277"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:11:44.277" endtime="20170916 02:11:44.278"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:43.971" endtime="20170916 02:11:44.278"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.281">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:44.281" endtime="20170916 02:11:44.282"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.282">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:44.282" endtime="20170916 02:11:44.282"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.283">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:44.283" endtime="20170916 02:11:44.283"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.284">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:44.283" endtime="20170916 02:11:44.284"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.495">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:44.284" endtime="20170916 02:11:44.495"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:44.495">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:44.495">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.284" endtime="20170916 02:11:44.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.496">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.496" endtime="20170916 02:11:44.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.496" endtime="20170916 02:11:44.497"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.281" endtime="20170916 02:11:44.497"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.280" endtime="20170916 02:11:44.497"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.280" endtime="20170916 02:11:44.497"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.497">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:11:44.497" endtime="20170916 02:11:44.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.500">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:44.499" endtime="20170916 02:11:44.500"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.501">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:44.500" endtime="20170916 02:11:44.501"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.500" endtime="20170916 02:11:44.501"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.498" endtime="20170916 02:11:44.501"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.498" endtime="20170916 02:11:44.501"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.672">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:44.672">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.501" endtime="20170916 02:11:44.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.674">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:44.673" endtime="20170916 02:11:44.674"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.675">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:44.675" endtime="20170916 02:11:44.675"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.674" endtime="20170916 02:11:44.675"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.673" endtime="20170916 02:11:44.675"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:44.673" endtime="20170916 02:11:44.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:44.676">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:44.675" endtime="20170916 02:11:44.676"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:44.676">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.279" endtime="20170916 02:11:44.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:44.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:44.676" endtime="20170916 02:11:44.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:44.677">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:44.677">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:44.677">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:44.677" endtime="20170916 02:11:44.677"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:44.678">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:44.278" endtime="20170916 02:11:44.678"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:44.678">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:44.278" endtime="20170916 02:11:44.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:11:44.679">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:11:44.678" endtime="20170916 02:11:44.679"></status>
</kw>
<status status="FAIL" starttime="20170916 02:11:43.970" endtime="20170916 02:11:44.679"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:54.687">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:54.687" endtime="20170916 02:11:54.688"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.689">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:54.688" endtime="20170916 02:11:54.689"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.689">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:54.689" endtime="20170916 02:11:54.689"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.690">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:54.690" endtime="20170916 02:11:54.690"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:54.900">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:54.691" endtime="20170916 02:11:54.900"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:54.900">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:54.900">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:54.690" endtime="20170916 02:11:54.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:54.901">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:54.901" endtime="20170916 02:11:54.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:54.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:54.901" endtime="20170916 02:11:54.902"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.687" endtime="20170916 02:11:54.902"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.682" endtime="20170916 02:11:54.902"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.682" endtime="20170916 02:11:54.902"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.903">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:11:54.902" endtime="20170916 02:11:54.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.905">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:54.904" endtime="20170916 02:11:54.905"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:54.906">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:54.905" endtime="20170916 02:11:54.906"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.905" endtime="20170916 02:11:54.906"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.903" endtime="20170916 02:11:54.906"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.903" endtime="20170916 02:11:54.906"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.979">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:54.979">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:54.906" endtime="20170916 02:11:54.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.981">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:54.981" endtime="20170916 02:11:54.982"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:54.983">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:54.983" endtime="20170916 02:11:54.983"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.982" endtime="20170916 02:11:54.983"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.980" endtime="20170916 02:11:54.983"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.980" endtime="20170916 02:11:54.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:54.984">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:54.984" endtime="20170916 02:11:54.984"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:54.984">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:54.681" endtime="20170916 02:11:54.984"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:54.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:54.984" endtime="20170916 02:11:54.985"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.985">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:54.985">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:54.986">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:54.985" endtime="20170916 02:11:54.986"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:54.986">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:11:54.680" endtime="20170916 02:11:54.986"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:54.986">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:11:54.680" endtime="20170916 02:11:54.986"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:11:54.986" endtime="20170916 02:11:54.987"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.680" endtime="20170916 02:11:54.987"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:54.990">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:11:54.990" endtime="20170916 02:11:54.991"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.991">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:11:54.991" endtime="20170916 02:11:54.991"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.992">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:11:54.992" endtime="20170916 02:11:54.992"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:54.993">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:11:54.992" endtime="20170916 02:11:54.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:55.218">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:11:54.993" endtime="20170916 02:11:55.218"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:55.218">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:11:55.218">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:54.993" endtime="20170916 02:11:55.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:55.219">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:55.219" endtime="20170916 02:11:55.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:55.219">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:55.219" endtime="20170916 02:11:55.220"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.989" endtime="20170916 02:11:55.220"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.989" endtime="20170916 02:11:55.220"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:54.989" endtime="20170916 02:11:55.220"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:55.220">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:11:55.220" endtime="20170916 02:11:55.220"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:55.223">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:55.222" endtime="20170916 02:11:55.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:55.224">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:11:55.223" endtime="20170916 02:11:55.224"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:55.223" endtime="20170916 02:11:55.224"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:55.221" endtime="20170916 02:11:55.224"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:55.221" endtime="20170916 02:11:55.224"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:55.344">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:11:55.344">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:55.224" endtime="20170916 02:11:55.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:55.346">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:55.345" endtime="20170916 02:11:55.346"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:55.346">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:11:55.346" endtime="20170916 02:11:55.347"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:55.346" endtime="20170916 02:11:55.347"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:55.345" endtime="20170916 02:11:55.347"></status>
</kw>
<status status="PASS" starttime="20170916 02:11:55.344" endtime="20170916 02:11:55.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:11:55.347">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:11:55.347" endtime="20170916 02:11:55.347"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:55.348">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:11:54.988" endtime="20170916 02:11:55.348"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:11:55.348">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:11:55.348" endtime="20170916 02:11:55.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:11:55.349">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:11:55.349">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:11:55.349">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:11:55.349" endtime="20170916 02:11:55.349"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:55.349">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:54.987" endtime="20170916 02:11:55.349"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:11:55.350">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:11:54.987" endtime="20170916 02:11:55.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:11:55.350">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:11:55.350" endtime="20170916 02:11:55.350"></status>
</kw>
<status status="FAIL" starttime="20170916 02:11:54.679" endtime="20170916 02:11:55.350"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.355">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:05.355" endtime="20170916 02:12:05.355"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.356">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:05.356" endtime="20170916 02:12:05.356"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.357">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:05.356" endtime="20170916 02:12:05.357"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.358">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:05.357" endtime="20170916 02:12:05.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.543">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:05.358" endtime="20170916 02:12:05.543"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:05.543">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:05.543">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.358" endtime="20170916 02:12:05.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.544">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.543" endtime="20170916 02:12:05.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.544" endtime="20170916 02:12:05.544"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.354" endtime="20170916 02:12:05.545"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.354" endtime="20170916 02:12:05.545"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.353" endtime="20170916 02:12:05.545"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.545">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:12:05.545" endtime="20170916 02:12:05.545"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.547">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:05.547" endtime="20170916 02:12:05.547"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.548">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:05.548" endtime="20170916 02:12:05.548"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.548" endtime="20170916 02:12:05.549"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.546" endtime="20170916 02:12:05.549"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.546" endtime="20170916 02:12:05.549"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.610">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:05.610">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.549" endtime="20170916 02:12:05.610"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.612">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:05.612" endtime="20170916 02:12:05.612"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.613">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:05.613" endtime="20170916 02:12:05.613"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.612" endtime="20170916 02:12:05.613"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.611" endtime="20170916 02:12:05.613"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.611" endtime="20170916 02:12:05.613"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:05.614">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:05.614" endtime="20170916 02:12:05.614"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:05.614">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.352" endtime="20170916 02:12:05.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.614" endtime="20170916 02:12:05.615"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.615">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:05.615">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:05.615">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:05.615" endtime="20170916 02:12:05.615"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:05.616">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:12:05.352" endtime="20170916 02:12:05.616"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:05.616">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:12:05.352" endtime="20170916 02:12:05.616"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:12:05.616" endtime="20170916 02:12:05.617"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.351" endtime="20170916 02:12:05.617"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.621">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:05.620" endtime="20170916 02:12:05.621"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.621">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:05.621" endtime="20170916 02:12:05.621"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.622">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:05.622" endtime="20170916 02:12:05.622"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.623">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:05.622" endtime="20170916 02:12:05.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.811">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:05.623" endtime="20170916 02:12:05.811"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:05.811">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:05.812">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.623" endtime="20170916 02:12:05.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.812">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.812" endtime="20170916 02:12:05.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.812" endtime="20170916 02:12:05.813"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.620" endtime="20170916 02:12:05.813"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.619" endtime="20170916 02:12:05.813"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.618" endtime="20170916 02:12:05.813"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.814">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:12:05.813" endtime="20170916 02:12:05.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.816">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:05.815" endtime="20170916 02:12:05.816"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.817">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:05.816" endtime="20170916 02:12:05.817"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.816" endtime="20170916 02:12:05.817"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.814" endtime="20170916 02:12:05.817"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.814" endtime="20170916 02:12:05.817"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.914">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:05.914">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.817" endtime="20170916 02:12:05.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.916">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:05.915" endtime="20170916 02:12:05.916"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.917">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:05.917" endtime="20170916 02:12:05.917"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.916" endtime="20170916 02:12:05.918"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.915" endtime="20170916 02:12:05.918"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:05.915" endtime="20170916 02:12:05.918"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:05.918">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:05.918" endtime="20170916 02:12:05.918"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:05.918">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.618" endtime="20170916 02:12:05.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:05.919">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:05.919" endtime="20170916 02:12:05.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:05.920">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:05.920">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:05.920">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:05.919" endtime="20170916 02:12:05.920"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:05.920">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:05.617" endtime="20170916 02:12:05.920"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:05.920">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:05.617" endtime="20170916 02:12:05.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:12:05.921">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:12:05.921" endtime="20170916 02:12:05.921"></status>
</kw>
<status status="FAIL" starttime="20170916 02:12:05.351" endtime="20170916 02:12:05.921"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:15.926">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:15.925" endtime="20170916 02:12:15.926"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:15.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:15.926" endtime="20170916 02:12:15.927"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:15.927">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:15.927" endtime="20170916 02:12:15.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:15.928">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:15.928" endtime="20170916 02:12:15.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.130">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:15.929" endtime="20170916 02:12:16.131"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:16.131">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:16.131">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:15.928" endtime="20170916 02:12:16.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.132">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.131" endtime="20170916 02:12:16.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.132">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.132" endtime="20170916 02:12:16.132"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:15.925" endtime="20170916 02:12:16.132"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:15.925" endtime="20170916 02:12:16.133"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:15.924" endtime="20170916 02:12:16.133"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.133">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:12:16.133" endtime="20170916 02:12:16.133"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.135">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:16.135" endtime="20170916 02:12:16.135"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.136">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:16.136" endtime="20170916 02:12:16.136"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.135" endtime="20170916 02:12:16.136"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.134" endtime="20170916 02:12:16.136"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.133" endtime="20170916 02:12:16.137"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.207">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:16.207">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.137" endtime="20170916 02:12:16.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.209">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:16.208" endtime="20170916 02:12:16.209"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.209">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:16.209" endtime="20170916 02:12:16.210"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.209" endtime="20170916 02:12:16.210"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.208" endtime="20170916 02:12:16.210"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.207" endtime="20170916 02:12:16.210"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:16.210">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:16.210" endtime="20170916 02:12:16.211"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:16.211">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:15.923" endtime="20170916 02:12:16.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.212">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.211" endtime="20170916 02:12:16.212"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.213">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:16.213">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:16.213">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:16.212" endtime="20170916 02:12:16.213"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:16.213">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:12:15.923" endtime="20170916 02:12:16.213"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:16.214">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:12:15.922" endtime="20170916 02:12:16.214"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:12:16.214" endtime="20170916 02:12:16.215"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:15.922" endtime="20170916 02:12:16.215"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.218">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:16.218" endtime="20170916 02:12:16.219"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.219">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:16.219" endtime="20170916 02:12:16.219"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.220">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:16.220" endtime="20170916 02:12:16.220"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:16.220" endtime="20170916 02:12:16.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:16.221" endtime="20170916 02:12:16.404"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:16.404">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:16.404">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.221" endtime="20170916 02:12:16.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.405">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.404" endtime="20170916 02:12:16.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.405" endtime="20170916 02:12:16.405"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.217" endtime="20170916 02:12:16.406"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.217" endtime="20170916 02:12:16.406"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.216" endtime="20170916 02:12:16.406"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.406">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:12:16.406" endtime="20170916 02:12:16.406"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.409">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:16.408" endtime="20170916 02:12:16.409"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.409">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:16.409" endtime="20170916 02:12:16.410"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.409" endtime="20170916 02:12:16.410"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.407" endtime="20170916 02:12:16.410"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.407" endtime="20170916 02:12:16.410"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.508">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:16.508">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.410" endtime="20170916 02:12:16.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.510">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:16.509" endtime="20170916 02:12:16.510"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.511">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:16.511" endtime="20170916 02:12:16.511"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.510" endtime="20170916 02:12:16.511"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.509" endtime="20170916 02:12:16.511"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:16.508" endtime="20170916 02:12:16.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:16.512">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:16.512" endtime="20170916 02:12:16.512"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:16.512">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.216" endtime="20170916 02:12:16.512"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:16.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:16.512" endtime="20170916 02:12:16.513"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:16.513">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:16.513">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:16.513">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:16.513" endtime="20170916 02:12:16.513"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:16.514">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:16.215" endtime="20170916 02:12:16.514"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:16.514">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:16.215" endtime="20170916 02:12:16.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:12:16.515">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:12:16.514" endtime="20170916 02:12:16.515"></status>
</kw>
<status status="FAIL" starttime="20170916 02:12:15.922" endtime="20170916 02:12:16.515"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:26.520">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:26.520" endtime="20170916 02:12:26.520"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.521">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:26.521" endtime="20170916 02:12:26.521"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.521">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:26.521" endtime="20170916 02:12:26.521"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:26.522" endtime="20170916 02:12:26.522"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:26.781">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:26.523" endtime="20170916 02:12:26.781"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:26.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:26.781">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:26.522" endtime="20170916 02:12:26.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:26.782">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:26.781" endtime="20170916 02:12:26.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:26.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:26.782" endtime="20170916 02:12:26.782"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.519" endtime="20170916 02:12:26.783"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.519" endtime="20170916 02:12:26.783"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.518" endtime="20170916 02:12:26.783"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.783">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:12:26.783" endtime="20170916 02:12:26.783"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.785">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:26.785" endtime="20170916 02:12:26.785"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:26.786">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:26.786" endtime="20170916 02:12:26.787"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.786" endtime="20170916 02:12:26.787"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.784" endtime="20170916 02:12:26.787"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.784" endtime="20170916 02:12:26.787"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.849">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:26.849">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:26.787" endtime="20170916 02:12:26.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.851">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:26.850" endtime="20170916 02:12:26.851"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:26.852">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:26.852" endtime="20170916 02:12:26.852"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.851" endtime="20170916 02:12:26.852"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.850" endtime="20170916 02:12:26.852"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.850" endtime="20170916 02:12:26.852"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:26.853">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:26.852" endtime="20170916 02:12:26.853"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:26.853">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:26.517" endtime="20170916 02:12:26.853"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:26.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:26.853" endtime="20170916 02:12:26.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.854">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:26.854">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:26.854">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:26.854" endtime="20170916 02:12:26.854"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:26.855">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:12:26.516" endtime="20170916 02:12:26.855"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:26.855">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:12:26.516" endtime="20170916 02:12:26.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:12:26.855" endtime="20170916 02:12:26.855"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.516" endtime="20170916 02:12:26.856"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:26.859">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:26.859" endtime="20170916 02:12:26.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.860">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:26.860" endtime="20170916 02:12:26.860"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.861">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:26.860" endtime="20170916 02:12:26.861"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:26.861">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:26.861" endtime="20170916 02:12:26.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:27.073">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:26.862" endtime="20170916 02:12:27.073"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:27.073">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:27.074">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:26.862" endtime="20170916 02:12:27.074"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:27.074">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:27.074" endtime="20170916 02:12:27.074"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:27.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:27.074" endtime="20170916 02:12:27.075"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.858" endtime="20170916 02:12:27.075"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.858" endtime="20170916 02:12:27.075"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:26.857" endtime="20170916 02:12:27.075"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:27.076">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:12:27.075" endtime="20170916 02:12:27.076"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:27.078">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:27.077" endtime="20170916 02:12:27.078"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:27.079">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:27.078" endtime="20170916 02:12:27.079"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:27.078" endtime="20170916 02:12:27.079"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:27.076" endtime="20170916 02:12:27.079"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:27.076" endtime="20170916 02:12:27.079"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:27.166">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:27.166">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:27.079" endtime="20170916 02:12:27.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:27.168">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:27.167" endtime="20170916 02:12:27.168"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:27.169">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:27.169" endtime="20170916 02:12:27.169"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:27.168" endtime="20170916 02:12:27.169"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:27.167" endtime="20170916 02:12:27.169"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:27.167" endtime="20170916 02:12:27.169"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:27.170">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:27.170" endtime="20170916 02:12:27.170"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:27.170">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:26.857" endtime="20170916 02:12:27.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:27.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:27.170" endtime="20170916 02:12:27.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:27.171">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:27.171">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:27.171">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:27.171" endtime="20170916 02:12:27.171"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:27.172">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:26.856" endtime="20170916 02:12:27.172"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:27.172">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:26.856" endtime="20170916 02:12:27.172"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:12:27.173">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:12:27.172" endtime="20170916 02:12:27.173"></status>
</kw>
<status status="FAIL" starttime="20170916 02:12:26.515" endtime="20170916 02:12:27.173"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.178">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:37.177" endtime="20170916 02:12:37.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:37.178" endtime="20170916 02:12:37.179"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.179">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:37.179" endtime="20170916 02:12:37.179"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.180">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:37.180" endtime="20170916 02:12:37.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.393">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:37.181" endtime="20170916 02:12:37.393"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:37.393">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:37.393">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.180" endtime="20170916 02:12:37.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.394">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.393" endtime="20170916 02:12:37.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.394">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.394" endtime="20170916 02:12:37.394"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.177" endtime="20170916 02:12:37.395"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.176" endtime="20170916 02:12:37.395"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.176" endtime="20170916 02:12:37.395"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.395">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:12:37.395" endtime="20170916 02:12:37.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.397">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:37.397" endtime="20170916 02:12:37.397"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.398">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:37.398" endtime="20170916 02:12:37.398"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.398" endtime="20170916 02:12:37.399"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.396" endtime="20170916 02:12:37.399"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.396" endtime="20170916 02:12:37.399"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.462">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:37.462">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.399" endtime="20170916 02:12:37.462"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.464">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:37.463" endtime="20170916 02:12:37.464"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.467">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:37.467" endtime="20170916 02:12:37.467"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.464" endtime="20170916 02:12:37.467"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.463" endtime="20170916 02:12:37.468"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.462" endtime="20170916 02:12:37.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:37.468">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:37.468" endtime="20170916 02:12:37.468"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:37.469">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.175" endtime="20170916 02:12:37.469"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.469" endtime="20170916 02:12:37.469"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.470">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:37.470">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:37.470">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:37.470" endtime="20170916 02:12:37.470"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:37.471">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:12:37.174" endtime="20170916 02:12:37.471"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:37.471">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:12:37.174" endtime="20170916 02:12:37.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:12:37.471" endtime="20170916 02:12:37.472"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.174" endtime="20170916 02:12:37.472"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.475">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:37.475" endtime="20170916 02:12:37.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.476">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:37.476" endtime="20170916 02:12:37.476"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.477">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:37.476" endtime="20170916 02:12:37.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.477">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:37.477" endtime="20170916 02:12:37.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.802">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:37.478" endtime="20170916 02:12:37.802"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:37.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:37.802">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.478" endtime="20170916 02:12:37.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.802">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.802" endtime="20170916 02:12:37.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.803" endtime="20170916 02:12:37.803"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.474" endtime="20170916 02:12:37.803"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.474" endtime="20170916 02:12:37.803"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.473" endtime="20170916 02:12:37.803"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.804">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:12:37.804" endtime="20170916 02:12:37.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.807">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:37.806" endtime="20170916 02:12:37.807"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.807">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:37.807" endtime="20170916 02:12:37.808"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.807" endtime="20170916 02:12:37.808"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.805" endtime="20170916 02:12:37.808"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.804" endtime="20170916 02:12:37.808"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.899">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:37.899">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.808" endtime="20170916 02:12:37.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.901">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:37.901" endtime="20170916 02:12:37.901"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.902">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:37.902" endtime="20170916 02:12:37.902"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.901" endtime="20170916 02:12:37.902"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.900" endtime="20170916 02:12:37.902"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:37.900" endtime="20170916 02:12:37.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:37.903">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:37.903" endtime="20170916 02:12:37.903"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:37.903">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.473" endtime="20170916 02:12:37.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:37.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:37.903" endtime="20170916 02:12:37.904"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:37.904">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:37.904">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:37.904">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:37.904" endtime="20170916 02:12:37.904"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:37.905">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:37.472" endtime="20170916 02:12:37.905"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:37.905">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:37.472" endtime="20170916 02:12:37.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:12:37.906">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:12:37.905" endtime="20170916 02:12:37.906"></status>
</kw>
<status status="FAIL" starttime="20170916 02:12:37.173" endtime="20170916 02:12:37.906"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:47.911">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:47.910" endtime="20170916 02:12:47.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:47.912">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:47.912" endtime="20170916 02:12:47.912"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:47.913">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:47.912" endtime="20170916 02:12:47.913"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:47.914">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:47.913" endtime="20170916 02:12:47.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.110">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:47.914" endtime="20170916 02:12:48.110"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:48.110">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:48.110">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:47.914" endtime="20170916 02:12:48.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.111">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.110" endtime="20170916 02:12:48.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.111" endtime="20170916 02:12:48.112"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:47.910" endtime="20170916 02:12:48.112"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:47.910" endtime="20170916 02:12:48.112"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:47.909" endtime="20170916 02:12:48.112"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.112">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:12:48.112" endtime="20170916 02:12:48.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.114">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:48.114" endtime="20170916 02:12:48.115"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.115">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:48.115" endtime="20170916 02:12:48.115"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.115" endtime="20170916 02:12:48.116"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.113" endtime="20170916 02:12:48.116"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.113" endtime="20170916 02:12:48.116"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.187">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:48.187">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.116" endtime="20170916 02:12:48.187"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.189">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:48.189" endtime="20170916 02:12:48.189"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.190">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:48.190" endtime="20170916 02:12:48.190"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.189" endtime="20170916 02:12:48.190"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.188" endtime="20170916 02:12:48.191"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.188" endtime="20170916 02:12:48.191"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:48.191">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:48.191" endtime="20170916 02:12:48.191"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:48.191">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:47.908" endtime="20170916 02:12:48.191"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.192">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.192" endtime="20170916 02:12:48.192"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.193">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:48.193">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:48.193">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:48.192" endtime="20170916 02:12:48.193"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:48.193">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:12:47.908" endtime="20170916 02:12:48.193"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:48.193">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:12:47.907" endtime="20170916 02:12:48.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:12:48.194" endtime="20170916 02:12:48.194"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:47.907" endtime="20170916 02:12:48.194"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.198">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:48.198" endtime="20170916 02:12:48.198"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:48.199" endtime="20170916 02:12:48.199"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.199">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:48.199" endtime="20170916 02:12:48.200"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.200">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:48.200" endtime="20170916 02:12:48.200"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.410">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:48.201" endtime="20170916 02:12:48.410"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:48.410">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:48.410">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.200" endtime="20170916 02:12:48.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.411">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.411" endtime="20170916 02:12:48.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.411" endtime="20170916 02:12:48.412"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.197" endtime="20170916 02:12:48.412"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.196" endtime="20170916 02:12:48.412"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.196" endtime="20170916 02:12:48.412"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.413">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:12:48.413" endtime="20170916 02:12:48.413"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.415">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:48.414" endtime="20170916 02:12:48.415"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.416">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:48.416" endtime="20170916 02:12:48.416"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.415" endtime="20170916 02:12:48.416"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.414" endtime="20170916 02:12:48.416"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.413" endtime="20170916 02:12:48.416"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.587">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:48.588">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.417" endtime="20170916 02:12:48.588"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.589">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:48.589" endtime="20170916 02:12:48.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.591">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:48.590" endtime="20170916 02:12:48.591"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.590" endtime="20170916 02:12:48.591"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.588" endtime="20170916 02:12:48.591"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:48.588" endtime="20170916 02:12:48.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:48.591">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:48.591" endtime="20170916 02:12:48.592"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:48.592">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.195" endtime="20170916 02:12:48.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:48.592">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:48.592" endtime="20170916 02:12:48.592"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:48.593">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:48.593">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:48.593">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:48.593" endtime="20170916 02:12:48.593"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:48.593">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:48.195" endtime="20170916 02:12:48.593"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:48.594">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:48.194" endtime="20170916 02:12:48.594"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:12:48.594">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:12:48.594" endtime="20170916 02:12:48.594"></status>
</kw>
<status status="FAIL" starttime="20170916 02:12:47.906" endtime="20170916 02:12:48.595"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:58.600">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:58.600" endtime="20170916 02:12:58.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.601">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:58.601" endtime="20170916 02:12:58.601"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.602">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:58.601" endtime="20170916 02:12:58.602"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.602">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:58.602" endtime="20170916 02:12:58.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:58.805">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:58.603" endtime="20170916 02:12:58.805"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:58.805">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:58.805">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:58.603" endtime="20170916 02:12:58.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:58.806">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:58.806" endtime="20170916 02:12:58.806"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:58.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:58.806" endtime="20170916 02:12:58.807"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.599" endtime="20170916 02:12:58.807"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.599" endtime="20170916 02:12:58.807"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.598" endtime="20170916 02:12:58.807"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.808">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:12:58.807" endtime="20170916 02:12:58.808"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.810">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:58.809" endtime="20170916 02:12:58.810"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:58.811">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:58.810" endtime="20170916 02:12:58.811"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.810" endtime="20170916 02:12:58.811"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.808" endtime="20170916 02:12:58.811"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.808" endtime="20170916 02:12:58.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.873">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:58.873">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:58.811" endtime="20170916 02:12:58.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.875">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:58.874" endtime="20170916 02:12:58.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:58.876">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:58.875" endtime="20170916 02:12:58.876"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.875" endtime="20170916 02:12:58.876"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.874" endtime="20170916 02:12:58.876"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.873" endtime="20170916 02:12:58.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:58.876">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:58.876" endtime="20170916 02:12:58.876"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:58.877">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:58.597" endtime="20170916 02:12:58.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:58.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:58.877" endtime="20170916 02:12:58.877"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.878">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:58.878">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:58.878">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:58.878" endtime="20170916 02:12:58.878"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:58.878">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:12:58.597" endtime="20170916 02:12:58.878"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:58.879">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:12:58.596" endtime="20170916 02:12:58.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:12:58.879" endtime="20170916 02:12:58.879"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.596" endtime="20170916 02:12:58.879"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:58.883">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:12:58.883" endtime="20170916 02:12:58.884"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.884">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:12:58.884" endtime="20170916 02:12:58.884"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.885">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:12:58.884" endtime="20170916 02:12:58.885"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:58.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:12:58.885" endtime="20170916 02:12:58.885"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:59.100">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:12:58.886" endtime="20170916 02:12:59.100"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:59.100">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:12:59.100">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:58.886" endtime="20170916 02:12:59.100"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:59.101">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:59.100" endtime="20170916 02:12:59.101"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:59.101">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:59.101" endtime="20170916 02:12:59.101"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.882" endtime="20170916 02:12:59.102"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.882" endtime="20170916 02:12:59.102"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:58.881" endtime="20170916 02:12:59.102"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:59.102">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:12:59.102" endtime="20170916 02:12:59.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:59.104">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:59.104" endtime="20170916 02:12:59.104"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:59.105">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:12:59.105" endtime="20170916 02:12:59.105"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:59.104" endtime="20170916 02:12:59.105"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:59.103" endtime="20170916 02:12:59.106"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:59.103" endtime="20170916 02:12:59.106"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:59.190">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:12:59.191">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:59.106" endtime="20170916 02:12:59.191"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:59.192">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:59.192" endtime="20170916 02:12:59.192"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:59.193">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:12:59.193" endtime="20170916 02:12:59.193"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:59.192" endtime="20170916 02:12:59.193"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:59.191" endtime="20170916 02:12:59.193"></status>
</kw>
<status status="PASS" starttime="20170916 02:12:59.191" endtime="20170916 02:12:59.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:12:59.194">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:12:59.194" endtime="20170916 02:12:59.194"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:59.194">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:12:58.880" endtime="20170916 02:12:59.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:12:59.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:12:59.194" endtime="20170916 02:12:59.195"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:12:59.195">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:12:59.195">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:12:59.196">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:12:59.195" endtime="20170916 02:12:59.196"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:59.196">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:58.880" endtime="20170916 02:12:59.196"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:12:59.196">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:12:58.880" endtime="20170916 02:12:59.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:12:59.197">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:12:59.196" endtime="20170916 02:12:59.197"></status>
</kw>
<status status="FAIL" starttime="20170916 02:12:58.595" endtime="20170916 02:12:59.197"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.203">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:09.202" endtime="20170916 02:13:09.203"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.204">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:09.203" endtime="20170916 02:13:09.204"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.204">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:09.204" endtime="20170916 02:13:09.204"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.205">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:09.204" endtime="20170916 02:13:09.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.405">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:09.206" endtime="20170916 02:13:09.405"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:09.405">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:09.405">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.205" endtime="20170916 02:13:09.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.406">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.405" endtime="20170916 02:13:09.406"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.406" endtime="20170916 02:13:09.406"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.202" endtime="20170916 02:13:09.407"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.201" endtime="20170916 02:13:09.407"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.201" endtime="20170916 02:13:09.407"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.407">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:13:09.407" endtime="20170916 02:13:09.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.410">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:09.409" endtime="20170916 02:13:09.410"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.410">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:09.410" endtime="20170916 02:13:09.411"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.410" endtime="20170916 02:13:09.411"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.408" endtime="20170916 02:13:09.411"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.408" endtime="20170916 02:13:09.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.483">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:09.483">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.412" endtime="20170916 02:13:09.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.485">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:09.484" endtime="20170916 02:13:09.485"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.486">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:09.485" endtime="20170916 02:13:09.486"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.485" endtime="20170916 02:13:09.486"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.484" endtime="20170916 02:13:09.486"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.483" endtime="20170916 02:13:09.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:09.486">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:09.486" endtime="20170916 02:13:09.487"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:09.487">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.200" endtime="20170916 02:13:09.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.487" endtime="20170916 02:13:09.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.488">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:09.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:09.488">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:09.488" endtime="20170916 02:13:09.488"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:09.489">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:13:09.199" endtime="20170916 02:13:09.489"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:09.489">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:13:09.199" endtime="20170916 02:13:09.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:13:09.489" endtime="20170916 02:13:09.489"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.198" endtime="20170916 02:13:09.490"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.493">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:09.493" endtime="20170916 02:13:09.494"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:09.494" endtime="20170916 02:13:09.494"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.495">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:09.494" endtime="20170916 02:13:09.495"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:09.495" endtime="20170916 02:13:09.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.713">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:09.496" endtime="20170916 02:13:09.713"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:09.713">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:09.714">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.496" endtime="20170916 02:13:09.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.714">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.714" endtime="20170916 02:13:09.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.715" endtime="20170916 02:13:09.715"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.492" endtime="20170916 02:13:09.715"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.492" endtime="20170916 02:13:09.715"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.491" endtime="20170916 02:13:09.715"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.716">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:13:09.716" endtime="20170916 02:13:09.716"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.718">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:09.717" endtime="20170916 02:13:09.718"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.719">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:09.719" endtime="20170916 02:13:09.719"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.718" endtime="20170916 02:13:09.719"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.717" endtime="20170916 02:13:09.719"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.716" endtime="20170916 02:13:09.719"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.806">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:09.807">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.720" endtime="20170916 02:13:09.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.808">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:09.808" endtime="20170916 02:13:09.808"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.809">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:09.809" endtime="20170916 02:13:09.809"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.809" endtime="20170916 02:13:09.809"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.807" endtime="20170916 02:13:09.810"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:09.807" endtime="20170916 02:13:09.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:09.810">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:09.810" endtime="20170916 02:13:09.810"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:09.810">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.491" endtime="20170916 02:13:09.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:09.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:09.811" endtime="20170916 02:13:09.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:09.812">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:09.812">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:09.812">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:09.811" endtime="20170916 02:13:09.812"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:09.812">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:09.490" endtime="20170916 02:13:09.812"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:09.813">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:09.490" endtime="20170916 02:13:09.813"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:13:09.813">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:13:09.813" endtime="20170916 02:13:09.813"></status>
</kw>
<status status="FAIL" starttime="20170916 02:13:09.198" endtime="20170916 02:13:09.813"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:19.819">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:19.819" endtime="20170916 02:13:19.820"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:19.820">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:19.820" endtime="20170916 02:13:19.820"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:19.821">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:19.821" endtime="20170916 02:13:19.821"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:19.822">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:19.821" endtime="20170916 02:13:19.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.001">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:19.822" endtime="20170916 02:13:20.001"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:20.001">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:20.001">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:19.822" endtime="20170916 02:13:20.001"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.002">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.002" endtime="20170916 02:13:20.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.002" endtime="20170916 02:13:20.003"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:19.818" endtime="20170916 02:13:20.003"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:19.817" endtime="20170916 02:13:20.003"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:19.817" endtime="20170916 02:13:20.003"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.004">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:13:20.003" endtime="20170916 02:13:20.004"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.006">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:20.005" endtime="20170916 02:13:20.006"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.007">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:20.007" endtime="20170916 02:13:20.007"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.006" endtime="20170916 02:13:20.007"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.004" endtime="20170916 02:13:20.007"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.004" endtime="20170916 02:13:20.007"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.106">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:20.106">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.007" endtime="20170916 02:13:20.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.108">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:20.107" endtime="20170916 02:13:20.108"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.109">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:20.109" endtime="20170916 02:13:20.109"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.108" endtime="20170916 02:13:20.109"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.107" endtime="20170916 02:13:20.109"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.106" endtime="20170916 02:13:20.110"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:20.110">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:20.110" endtime="20170916 02:13:20.110"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:20.110">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:19.816" endtime="20170916 02:13:20.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.110" endtime="20170916 02:13:20.111"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.111">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:20.111">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:20.112">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:20.111" endtime="20170916 02:13:20.112"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:20.112">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:13:19.816" endtime="20170916 02:13:20.112"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:20.112">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:13:19.815" endtime="20170916 02:13:20.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:13:20.112" endtime="20170916 02:13:20.113"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:19.815" endtime="20170916 02:13:20.113"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.116">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:20.116" endtime="20170916 02:13:20.117"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.117">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:20.117" endtime="20170916 02:13:20.117"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.118">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:20.118" endtime="20170916 02:13:20.118"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.119">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:20.118" endtime="20170916 02:13:20.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.303">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:20.119" endtime="20170916 02:13:20.303"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:20.303">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:20.303">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.119" endtime="20170916 02:13:20.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.304">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.304" endtime="20170916 02:13:20.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.304" endtime="20170916 02:13:20.305"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.116" endtime="20170916 02:13:20.305"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.115" endtime="20170916 02:13:20.305"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.115" endtime="20170916 02:13:20.305"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.306">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:13:20.305" endtime="20170916 02:13:20.306"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.311">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:20.307" endtime="20170916 02:13:20.311"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.312">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:20.312" endtime="20170916 02:13:20.312"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.311" endtime="20170916 02:13:20.312"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.306" endtime="20170916 02:13:20.312"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.306" endtime="20170916 02:13:20.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.407">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:20.407">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.313" endtime="20170916 02:13:20.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.409">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:20.409" endtime="20170916 02:13:20.409"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.410">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:20.410" endtime="20170916 02:13:20.410"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.410" endtime="20170916 02:13:20.411"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.408" endtime="20170916 02:13:20.411"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:20.408" endtime="20170916 02:13:20.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:20.411">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:20.411" endtime="20170916 02:13:20.411"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:20.411">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.114" endtime="20170916 02:13:20.412"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:20.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:20.412" endtime="20170916 02:13:20.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:20.413">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:20.413">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:20.413">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:20.413" endtime="20170916 02:13:20.413"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:20.413">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:20.113" endtime="20170916 02:13:20.413"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:20.414">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:20.113" endtime="20170916 02:13:20.414"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:13:20.414">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:13:20.414" endtime="20170916 02:13:20.414"></status>
</kw>
<status status="FAIL" starttime="20170916 02:13:19.814" endtime="20170916 02:13:20.415"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.419">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:30.419" endtime="20170916 02:13:30.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.420">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:30.420" endtime="20170916 02:13:30.421"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.421">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:30.421" endtime="20170916 02:13:30.421"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.422">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:30.421" endtime="20170916 02:13:30.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.612">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:30.423" endtime="20170916 02:13:30.612"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:30.612">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:30.612">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.423" endtime="20170916 02:13:30.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.613">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.612" endtime="20170916 02:13:30.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.613" endtime="20170916 02:13:30.613"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.419" endtime="20170916 02:13:30.614"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.418" endtime="20170916 02:13:30.614"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.418" endtime="20170916 02:13:30.614"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.614">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:13:30.614" endtime="20170916 02:13:30.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.616">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:30.616" endtime="20170916 02:13:30.617"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.617">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:30.617" endtime="20170916 02:13:30.618"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.617" endtime="20170916 02:13:30.618"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.615" endtime="20170916 02:13:30.618"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.615" endtime="20170916 02:13:30.618"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.696">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:30.696">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.618" endtime="20170916 02:13:30.696"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.698">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:30.697" endtime="20170916 02:13:30.698"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.699">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:30.698" endtime="20170916 02:13:30.699"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.698" endtime="20170916 02:13:30.699"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.697" endtime="20170916 02:13:30.699"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.696" endtime="20170916 02:13:30.699"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:30.699">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:30.699" endtime="20170916 02:13:30.699"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:30.700">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.417" endtime="20170916 02:13:30.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.700" endtime="20170916 02:13:30.700"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.701">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:30.701">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:30.701">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:30.701" endtime="20170916 02:13:30.701"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:30.701">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:13:30.416" endtime="20170916 02:13:30.701"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:30.702">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:13:30.416" endtime="20170916 02:13:30.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:13:30.702" endtime="20170916 02:13:30.702"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.416" endtime="20170916 02:13:30.702"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.706">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:30.706" endtime="20170916 02:13:30.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.707">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:30.707" endtime="20170916 02:13:30.707"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.708">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:30.708" endtime="20170916 02:13:30.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.709">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:30.708" endtime="20170916 02:13:30.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.886">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:30.710" endtime="20170916 02:13:30.886"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:30.886">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:30.886">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.709" endtime="20170916 02:13:30.886"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.887">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.886" endtime="20170916 02:13:30.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.887">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.887" endtime="20170916 02:13:30.888"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.705" endtime="20170916 02:13:30.888"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.705" endtime="20170916 02:13:30.888"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.704" endtime="20170916 02:13:30.888"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.888">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:13:30.888" endtime="20170916 02:13:30.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.891">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:30.890" endtime="20170916 02:13:30.891"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.891">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:30.891" endtime="20170916 02:13:30.892"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.891" endtime="20170916 02:13:30.892"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.889" endtime="20170916 02:13:30.892"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.889" endtime="20170916 02:13:30.892"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.978">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:30.979">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.892" endtime="20170916 02:13:30.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.980">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:30.980" endtime="20170916 02:13:30.981"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.982">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:30.982" endtime="20170916 02:13:30.982"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.981" endtime="20170916 02:13:30.982"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.979" endtime="20170916 02:13:30.982"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:30.979" endtime="20170916 02:13:30.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:30.983">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:30.982" endtime="20170916 02:13:30.983"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:30.983">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.703" endtime="20170916 02:13:30.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:30.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:30.983" endtime="20170916 02:13:30.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:30.984">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:30.984">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:30.984">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:30.984" endtime="20170916 02:13:30.984"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:30.985">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:30.703" endtime="20170916 02:13:30.985"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:30.985">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:30.702" endtime="20170916 02:13:30.985"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:13:30.986">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:13:30.985" endtime="20170916 02:13:30.986"></status>
</kw>
<status status="FAIL" starttime="20170916 02:13:30.415" endtime="20170916 02:13:30.986"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:40.992">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:40.992" endtime="20170916 02:13:40.993"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:40.993">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:40.993" endtime="20170916 02:13:40.993"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:40.994">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:40.994" endtime="20170916 02:13:40.994"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:40.995">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:40.994" endtime="20170916 02:13:40.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.243">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:40.995" endtime="20170916 02:13:41.243"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:41.244">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:41.244">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:40.995" endtime="20170916 02:13:41.244"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.244">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.244" endtime="20170916 02:13:41.244"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.245" endtime="20170916 02:13:41.245"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:40.991" endtime="20170916 02:13:41.245"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:40.991" endtime="20170916 02:13:41.246"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:40.990" endtime="20170916 02:13:41.246"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.246">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:13:41.246" endtime="20170916 02:13:41.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.248">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:41.248" endtime="20170916 02:13:41.248"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.249">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:41.249" endtime="20170916 02:13:41.249"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.248" endtime="20170916 02:13:41.250"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.247" endtime="20170916 02:13:41.250"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.247" endtime="20170916 02:13:41.250"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.364">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:41.364">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.250" endtime="20170916 02:13:41.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.366">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:41.365" endtime="20170916 02:13:41.366"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.367">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:41.367" endtime="20170916 02:13:41.367"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.366" endtime="20170916 02:13:41.367"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.365" endtime="20170916 02:13:41.367"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.364" endtime="20170916 02:13:41.367"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:41.368">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:41.367" endtime="20170916 02:13:41.368"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:41.368">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:40.989" endtime="20170916 02:13:41.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.368" endtime="20170916 02:13:41.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.369">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:41.369">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:41.369">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:41.369" endtime="20170916 02:13:41.369"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:41.370">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:13:40.988" endtime="20170916 02:13:41.370"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:41.370">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:13:40.987" endtime="20170916 02:13:41.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:13:41.370" endtime="20170916 02:13:41.370"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:40.987" endtime="20170916 02:13:41.371"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.375">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:41.374" endtime="20170916 02:13:41.375"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.376">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:41.376" endtime="20170916 02:13:41.376"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.376">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:41.376" endtime="20170916 02:13:41.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.377">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:41.377" endtime="20170916 02:13:41.377"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.595">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:41.378" endtime="20170916 02:13:41.596"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:41.596">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:41.596">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.377" endtime="20170916 02:13:41.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.596">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.596" endtime="20170916 02:13:41.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.597" endtime="20170916 02:13:41.597"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.374" endtime="20170916 02:13:41.597"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.373" endtime="20170916 02:13:41.597"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.373" endtime="20170916 02:13:41.598"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.598">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:13:41.598" endtime="20170916 02:13:41.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.600">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:41.600" endtime="20170916 02:13:41.600"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.601">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:41.601" endtime="20170916 02:13:41.601"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.600" endtime="20170916 02:13:41.601"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.599" endtime="20170916 02:13:41.601"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.598" endtime="20170916 02:13:41.602"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.689">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:41.689">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.602" endtime="20170916 02:13:41.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.691">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:41.690" endtime="20170916 02:13:41.691"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.692">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:41.691" endtime="20170916 02:13:41.692"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.691" endtime="20170916 02:13:41.692"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.690" endtime="20170916 02:13:41.692"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:41.689" endtime="20170916 02:13:41.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:41.692">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:41.692" endtime="20170916 02:13:41.692"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:41.693">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.372" endtime="20170916 02:13:41.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:41.693">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:41.693" endtime="20170916 02:13:41.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:41.694">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:41.694">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:41.694">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:41.694" endtime="20170916 02:13:41.694"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:41.694">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:41.371" endtime="20170916 02:13:41.694"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:41.695">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:41.371" endtime="20170916 02:13:41.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:13:41.695">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:13:41.695" endtime="20170916 02:13:41.695"></status>
</kw>
<status status="FAIL" starttime="20170916 02:13:40.986" endtime="20170916 02:13:41.696"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:51.701">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:51.701" endtime="20170916 02:13:51.701"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.702">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:51.701" endtime="20170916 02:13:51.702"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.702">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:51.702" endtime="20170916 02:13:51.702"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.703">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:51.703" endtime="20170916 02:13:51.703"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:51.888">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:51.704" endtime="20170916 02:13:51.888"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:51.888">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:51.888">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:51.703" endtime="20170916 02:13:51.888"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:51.889">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:51.889" endtime="20170916 02:13:51.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:51.890">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:51.889" endtime="20170916 02:13:51.890"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.700" endtime="20170916 02:13:51.890"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.700" endtime="20170916 02:13:51.890"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.699" endtime="20170916 02:13:51.890"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.891">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:13:51.890" endtime="20170916 02:13:51.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.893">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:51.892" endtime="20170916 02:13:51.893"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:51.894">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:51.893" endtime="20170916 02:13:51.894"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.893" endtime="20170916 02:13:51.894"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.891" endtime="20170916 02:13:51.894"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.891" endtime="20170916 02:13:51.894"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.957">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:51.957">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:51.895" endtime="20170916 02:13:51.957"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.959">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:51.958" endtime="20170916 02:13:51.959"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:51.959">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:51.959" endtime="20170916 02:13:51.960"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.959" endtime="20170916 02:13:51.960"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.958" endtime="20170916 02:13:51.960"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.957" endtime="20170916 02:13:51.960"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:51.960">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:51.960" endtime="20170916 02:13:51.960"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:51.961">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:51.698" endtime="20170916 02:13:51.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:51.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:51.961" endtime="20170916 02:13:51.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.962">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:51.962">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:51.962">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:51.962" endtime="20170916 02:13:51.962"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:51.962">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:13:51.697" endtime="20170916 02:13:51.962"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:51.963">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:13:51.697" endtime="20170916 02:13:51.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:13:51.963" endtime="20170916 02:13:51.963"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.697" endtime="20170916 02:13:51.963"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:51.968">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:13:51.967" endtime="20170916 02:13:51.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.969">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:13:51.968" endtime="20170916 02:13:51.969"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.970">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:13:51.969" endtime="20170916 02:13:51.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:51.971">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:13:51.970" endtime="20170916 02:13:51.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:52.299">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:13:51.972" endtime="20170916 02:13:52.300"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:52.300">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:13:52.300">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:51.971" endtime="20170916 02:13:52.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:52.300">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:52.300" endtime="20170916 02:13:52.301"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:52.301">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:52.301" endtime="20170916 02:13:52.301"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.966" endtime="20170916 02:13:52.301"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.966" endtime="20170916 02:13:52.301"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:51.965" endtime="20170916 02:13:52.302"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:52.302">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:13:52.302" endtime="20170916 02:13:52.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:52.304">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:52.303" endtime="20170916 02:13:52.304"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:52.305">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:13:52.305" endtime="20170916 02:13:52.305"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:52.304" endtime="20170916 02:13:52.305"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:52.303" endtime="20170916 02:13:52.306"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:52.302" endtime="20170916 02:13:52.306"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:52.398">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:13:52.398">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:52.306" endtime="20170916 02:13:52.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:52.400">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:52.400" endtime="20170916 02:13:52.400"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:52.401">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:13:52.401" endtime="20170916 02:13:52.401"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:52.401" endtime="20170916 02:13:52.401"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:52.399" endtime="20170916 02:13:52.402"></status>
</kw>
<status status="PASS" starttime="20170916 02:13:52.399" endtime="20170916 02:13:52.402"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:13:52.402">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:13:52.402" endtime="20170916 02:13:52.402"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:52.402">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:13:51.964" endtime="20170916 02:13:52.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:13:52.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:13:52.403" endtime="20170916 02:13:52.403"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:13:52.404">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:13:52.404">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:13:52.404">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:13:52.403" endtime="20170916 02:13:52.404"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:52.404">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:51.964" endtime="20170916 02:13:52.404"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:13:52.404">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:13:51.963" endtime="20170916 02:13:52.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:13:52.405">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:13:52.405" endtime="20170916 02:13:52.405"></status>
</kw>
<status status="FAIL" starttime="20170916 02:13:51.696" endtime="20170916 02:13:52.405"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.410">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:02.410" endtime="20170916 02:14:02.411"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.411">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:02.411" endtime="20170916 02:14:02.411"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.412">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:02.412" endtime="20170916 02:14:02.412"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.413">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:02.412" endtime="20170916 02:14:02.413"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.613">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:02.413" endtime="20170916 02:14:02.613"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:02.613">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:02.613">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.413" endtime="20170916 02:14:02.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.614">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.613" endtime="20170916 02:14:02.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.614">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.614" endtime="20170916 02:14:02.614"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.409" endtime="20170916 02:14:02.615"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.409" endtime="20170916 02:14:02.615"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.408" endtime="20170916 02:14:02.615"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.615">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:14:02.615" endtime="20170916 02:14:02.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.617">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:02.617" endtime="20170916 02:14:02.617"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.618">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:02.618" endtime="20170916 02:14:02.618"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.618" endtime="20170916 02:14:02.618"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.616" endtime="20170916 02:14:02.619"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.616" endtime="20170916 02:14:02.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.680">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:02.681">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.619" endtime="20170916 02:14:02.681"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.682">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:02.682" endtime="20170916 02:14:02.682"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.684">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:02.683" endtime="20170916 02:14:02.684"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.682" endtime="20170916 02:14:02.684"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.681" endtime="20170916 02:14:02.684"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.681" endtime="20170916 02:14:02.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:02.684">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:02.684" endtime="20170916 02:14:02.684"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:02.685">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.407" endtime="20170916 02:14:02.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.685" endtime="20170916 02:14:02.685"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.686">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:02.686">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:14:02.686">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:14:02.686" endtime="20170916 02:14:02.686"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:02.686">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:14:02.407" endtime="20170916 02:14:02.686"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:02.687">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:14:02.406" endtime="20170916 02:14:02.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:02.687" endtime="20170916 02:14:02.688"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.406" endtime="20170916 02:14:02.688"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.693">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:02.693" endtime="20170916 02:14:02.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:02.693" endtime="20170916 02:14:02.694"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.694">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:02.694" endtime="20170916 02:14:02.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:02.695" endtime="20170916 02:14:02.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.892">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:02.696" endtime="20170916 02:14:02.892"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:02.892">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:02.892">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.695" endtime="20170916 02:14:02.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.893">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.892" endtime="20170916 02:14:02.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.893" endtime="20170916 02:14:02.894"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.692" endtime="20170916 02:14:02.894"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.691" endtime="20170916 02:14:02.894"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.690" endtime="20170916 02:14:02.894"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.895">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:14:02.894" endtime="20170916 02:14:02.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:02.898">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:02.897" endtime="20170916 02:14:02.898"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:02.899">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:02.899" endtime="20170916 02:14:02.899"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.898" endtime="20170916 02:14:02.899"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.896" endtime="20170916 02:14:02.899"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:02.895" endtime="20170916 02:14:02.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:03.016">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:03.016">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.900" endtime="20170916 02:14:03.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:03.018">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:03.017" endtime="20170916 02:14:03.018"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:03.019">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:03.019" endtime="20170916 02:14:03.019"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:03.018" endtime="20170916 02:14:03.019"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:03.017" endtime="20170916 02:14:03.019"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:03.017" endtime="20170916 02:14:03.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:03.020">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:03.020" endtime="20170916 02:14:03.020"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:03.020">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:02.690" endtime="20170916 02:14:03.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:03.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:03.020" endtime="20170916 02:14:03.021"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:03.021">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:03.021">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:14:03.021">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:14:03.021" endtime="20170916 02:14:03.021"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:03.022">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:02.689" endtime="20170916 02:14:03.022"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:03.022">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:02.688" endtime="20170916 02:14:03.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:14:03.023">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:14:03.022" endtime="20170916 02:14:03.023"></status>
</kw>
<status status="FAIL" starttime="20170916 02:14:02.406" endtime="20170916 02:14:03.023"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.028">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:13.027" endtime="20170916 02:14:13.028"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:13.029" endtime="20170916 02:14:13.033"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.034">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:13.034" endtime="20170916 02:14:13.034"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:13.034" endtime="20170916 02:14:13.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.234">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:13.035" endtime="20170916 02:14:13.234"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:13.234">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:13.234">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.035" endtime="20170916 02:14:13.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.235">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.235" endtime="20170916 02:14:13.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.235" endtime="20170916 02:14:13.236"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.027" endtime="20170916 02:14:13.236"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.026" endtime="20170916 02:14:13.236"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.026" endtime="20170916 02:14:13.236"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.237">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:14:13.236" endtime="20170916 02:14:13.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.239">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:13.238" endtime="20170916 02:14:13.239"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.240">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:13.239" endtime="20170916 02:14:13.240"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.239" endtime="20170916 02:14:13.240"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.237" endtime="20170916 02:14:13.240"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.237" endtime="20170916 02:14:13.240"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.322">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:13.322">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.240" endtime="20170916 02:14:13.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.324">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:13.323" endtime="20170916 02:14:13.324"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.324">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:13.324" endtime="20170916 02:14:13.325"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.324" endtime="20170916 02:14:13.325"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.323" endtime="20170916 02:14:13.325"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.322" endtime="20170916 02:14:13.325"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:13.325">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:13.325" endtime="20170916 02:14:13.325"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:13.326">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.025" endtime="20170916 02:14:13.326"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.326" endtime="20170916 02:14:13.326"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.327">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:13.327">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:14:13.327">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:14:13.327" endtime="20170916 02:14:13.327"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:13.327">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:14:13.025" endtime="20170916 02:14:13.327"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:13.328">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:14:13.024" endtime="20170916 02:14:13.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:13.328" endtime="20170916 02:14:13.328"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.024" endtime="20170916 02:14:13.328"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.332">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:13.332" endtime="20170916 02:14:13.333"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.333">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:13.333" endtime="20170916 02:14:13.333"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.334">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:13.334" endtime="20170916 02:14:13.334"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.335">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:13.334" endtime="20170916 02:14:13.335"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.513">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:13.335" endtime="20170916 02:14:13.513"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:13.513">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:13.513">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.335" endtime="20170916 02:14:13.513"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.514">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.514" endtime="20170916 02:14:13.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.515">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.514" endtime="20170916 02:14:13.515"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.332" endtime="20170916 02:14:13.515"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.331" endtime="20170916 02:14:13.515"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.330" endtime="20170916 02:14:13.515"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.516">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:14:13.515" endtime="20170916 02:14:13.516"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.518">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:13.517" endtime="20170916 02:14:13.518"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.519">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:13.519" endtime="20170916 02:14:13.519"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.518" endtime="20170916 02:14:13.519"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.517" endtime="20170916 02:14:13.519"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.516" endtime="20170916 02:14:13.519"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.631">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:13.631">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.519" endtime="20170916 02:14:13.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.633">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:13.632" endtime="20170916 02:14:13.633"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.634">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:13.634" endtime="20170916 02:14:13.634"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.633" endtime="20170916 02:14:13.634"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.632" endtime="20170916 02:14:13.634"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:13.631" endtime="20170916 02:14:13.634"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:13.635">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:13.635" endtime="20170916 02:14:13.635"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:13.635">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.329" endtime="20170916 02:14:13.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:13.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:13.635" endtime="20170916 02:14:13.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:13.636">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:13.636">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:14:13.637">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:14:13.636" endtime="20170916 02:14:13.637"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:13.637">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:13.329" endtime="20170916 02:14:13.637"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:13.637">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:13.329" endtime="20170916 02:14:13.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:14:13.638">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:14:13.637" endtime="20170916 02:14:13.638"></status>
</kw>
<status status="FAIL" starttime="20170916 02:14:13.023" endtime="20170916 02:14:13.638"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:23.643">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:23.643" endtime="20170916 02:14:23.643"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.644">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:23.644" endtime="20170916 02:14:23.644"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.645">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:23.644" endtime="20170916 02:14:23.645"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.645">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:23.645" endtime="20170916 02:14:23.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:23.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:23.646" endtime="20170916 02:14:23.907"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:23.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:23.907">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:23.646" endtime="20170916 02:14:23.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:23.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:23.908" endtime="20170916 02:14:23.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:23.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:23.908" endtime="20170916 02:14:23.909"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.642" endtime="20170916 02:14:23.909"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.642" endtime="20170916 02:14:23.909"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.641" endtime="20170916 02:14:23.909"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.910">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:14:23.909" endtime="20170916 02:14:23.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.912">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:23.911" endtime="20170916 02:14:23.912"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:23.913">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:23.912" endtime="20170916 02:14:23.913"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.912" endtime="20170916 02:14:23.913"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.910" endtime="20170916 02:14:23.913"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.910" endtime="20170916 02:14:23.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.976">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:23.976">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:23.913" endtime="20170916 02:14:23.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.978">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:23.977" endtime="20170916 02:14:23.978"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:23.979">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:23.979" endtime="20170916 02:14:23.979"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.978" endtime="20170916 02:14:23.980"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.977" endtime="20170916 02:14:23.980"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.976" endtime="20170916 02:14:23.980"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:23.980">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:23.980" endtime="20170916 02:14:23.980"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:23.980">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:23.640" endtime="20170916 02:14:23.980"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:23.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:23.981" endtime="20170916 02:14:23.981"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.982">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:23.982">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:14:23.982">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:14:23.981" endtime="20170916 02:14:23.982"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:23.982">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:14:23.640" endtime="20170916 02:14:23.982"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:23.982">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:14:23.639" endtime="20170916 02:14:23.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:23.983" endtime="20170916 02:14:23.983"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.639" endtime="20170916 02:14:23.983"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:23.987">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:23.986" endtime="20170916 02:14:23.987"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:23.988" endtime="20170916 02:14:23.988"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.989">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:23.989" endtime="20170916 02:14:23.989"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:23.990">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:23.989" endtime="20170916 02:14:23.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:24.194">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:23.990" endtime="20170916 02:14:24.194"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:24.194">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:24.194">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:23.990" endtime="20170916 02:14:24.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:24.195">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:24.194" endtime="20170916 02:14:24.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:24.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:24.195" endtime="20170916 02:14:24.196"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.986" endtime="20170916 02:14:24.196"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.985" endtime="20170916 02:14:24.196"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:23.985" endtime="20170916 02:14:24.196"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:24.196">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:14:24.196" endtime="20170916 02:14:24.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:24.198">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:24.198" endtime="20170916 02:14:24.199"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:24.199">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:24.199" endtime="20170916 02:14:24.200"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:24.199" endtime="20170916 02:14:24.200"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:24.197" endtime="20170916 02:14:24.200"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:24.197" endtime="20170916 02:14:24.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:24.287">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:24.287">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:24.200" endtime="20170916 02:14:24.287"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:24.288">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:24.288" endtime="20170916 02:14:24.289"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:24.289">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:24.289" endtime="20170916 02:14:24.289"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:24.289" endtime="20170916 02:14:24.290"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:24.287" endtime="20170916 02:14:24.290"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:24.287" endtime="20170916 02:14:24.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:24.290">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:24.290" endtime="20170916 02:14:24.290"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:24.291">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:23.984" endtime="20170916 02:14:24.291"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:24.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:24.291" endtime="20170916 02:14:24.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:24.292">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:24.292">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:14:24.292">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:14:24.291" endtime="20170916 02:14:24.292"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:24.292">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:23.984" endtime="20170916 02:14:24.292"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:24.293">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:23.983" endtime="20170916 02:14:24.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:14:24.293">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:14:24.293" endtime="20170916 02:14:24.293"></status>
</kw>
<status status="FAIL" starttime="20170916 02:14:23.638" endtime="20170916 02:14:24.294"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.299">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:34.298" endtime="20170916 02:14:34.299"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.300">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:34.299" endtime="20170916 02:14:34.300"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.300">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:34.300" endtime="20170916 02:14:34.300"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.301">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:34.301" endtime="20170916 02:14:34.301"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.567">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:34.302" endtime="20170916 02:14:34.567"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:34.568">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:34.568">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.301" endtime="20170916 02:14:34.568"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.568">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.568" endtime="20170916 02:14:34.568"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.569" endtime="20170916 02:14:34.569"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.298" endtime="20170916 02:14:34.569"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.298" endtime="20170916 02:14:34.569"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.297" endtime="20170916 02:14:34.569"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.570">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:14:34.570" endtime="20170916 02:14:34.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.572">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:34.571" endtime="20170916 02:14:34.572"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.573">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:34.573" endtime="20170916 02:14:34.573"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.572" endtime="20170916 02:14:34.574"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.571" endtime="20170916 02:14:34.574"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.570" endtime="20170916 02:14:34.574"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.636">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:34.637">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.574" endtime="20170916 02:14:34.637"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.639">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:34.638" endtime="20170916 02:14:34.639"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.640">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:34.640" endtime="20170916 02:14:34.640"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.639" endtime="20170916 02:14:34.641"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.637" endtime="20170916 02:14:34.641"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.637" endtime="20170916 02:14:34.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:34.641">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:34.641" endtime="20170916 02:14:34.641"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:34.641">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.296" endtime="20170916 02:14:34.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.642" endtime="20170916 02:14:34.642"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.643">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:34.643">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:14:34.643">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:14:34.642" endtime="20170916 02:14:34.643"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:34.643">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:14:34.295" endtime="20170916 02:14:34.643"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:34.643">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:14:34.295" endtime="20170916 02:14:34.644"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:34.644" endtime="20170916 02:14:34.644"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.294" endtime="20170916 02:14:34.644"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.648">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:34.647" endtime="20170916 02:14:34.648"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:34.648" endtime="20170916 02:14:34.649"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.649">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:34.649" endtime="20170916 02:14:34.649"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.650">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:34.649" endtime="20170916 02:14:34.650"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.859">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:34.651" endtime="20170916 02:14:34.860"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:34.860">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:34.860">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.650" endtime="20170916 02:14:34.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.860">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.860" endtime="20170916 02:14:34.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.861" endtime="20170916 02:14:34.861"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.647" endtime="20170916 02:14:34.861"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.646" endtime="20170916 02:14:34.861"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.646" endtime="20170916 02:14:34.862"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.862">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:14:34.862" endtime="20170916 02:14:34.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.864">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:34.863" endtime="20170916 02:14:34.864"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.865">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:34.865" endtime="20170916 02:14:34.865"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.864" endtime="20170916 02:14:34.865"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.863" endtime="20170916 02:14:34.865"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.862" endtime="20170916 02:14:34.865"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.952">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:34.952">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.866" endtime="20170916 02:14:34.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.954">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:34.954" endtime="20170916 02:14:34.954"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.955">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:34.955" endtime="20170916 02:14:34.955"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.954" endtime="20170916 02:14:34.955"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.953" endtime="20170916 02:14:34.955"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.953" endtime="20170916 02:14:34.955"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:34.956">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:34.956" endtime="20170916 02:14:34.956"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:34.956">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.645" endtime="20170916 02:14:34.956"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.956" endtime="20170916 02:14:34.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.957">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:34.957">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:14:34.957">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:14:34.957" endtime="20170916 02:14:34.958"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:34.958">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:34.645" endtime="20170916 02:14:34.958"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:34.958">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:34.644" endtime="20170916 02:14:34.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:14:34.959">Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:14:34.958" endtime="20170916 02:14:34.959"></status>
</kw>
<status status="FAIL" starttime="20170916 02:14:34.294" endtime="20170916 02:14:34.959"></status>
</kw>
<msg level="FAIL" timestamp="20170916 02:14:34.959">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:04:28.683" endtime="20170916 02:14:34.959"></status>
</kw>
<status status="FAIL" starttime="20170916 02:04:27.527" endtime="20170916 02:14:34.959"></status>
</kw>
<status status="FAIL" starttime="20170916 02:04:19.962" endtime="20170916 02:14:34.960"></status>
</kw>
<status status="FAIL" starttime="20170916 02:04:19.961" endtime="20170916 02:14:34.960"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:34.965">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:34.964" endtime="20170916 02:14:34.965"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.966">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:34.966" endtime="20170916 02:14:34.966"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.967">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:34.966" endtime="20170916 02:14:34.967"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:34.967">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:34.967" endtime="20170916 02:14:34.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:35.158">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:34.968" endtime="20170916 02:14:35.158"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:35.158">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:35.158">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.968" endtime="20170916 02:14:35.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:35.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:35.158" endtime="20170916 02:14:35.159"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:35.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:35.159" endtime="20170916 02:14:35.159"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.964" endtime="20170916 02:14:35.159"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.963" endtime="20170916 02:14:35.160"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.963" endtime="20170916 02:14:35.160"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:35.160">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:14:35.160" endtime="20170916 02:14:35.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:35.162">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:35.162" endtime="20170916 02:14:35.163"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:35.163">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:14:35.163" endtime="20170916 02:14:35.164"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:35.163" endtime="20170916 02:14:35.164"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:35.161" endtime="20170916 02:14:35.164"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:35.161" endtime="20170916 02:14:35.164"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:35.265">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:35.265">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:35.164" endtime="20170916 02:14:35.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:35.267">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:35.266" endtime="20170916 02:14:35.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:35.268">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:14:35.267" endtime="20170916 02:14:35.268"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:35.267" endtime="20170916 02:14:35.268"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:35.266" endtime="20170916 02:14:35.268"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:35.265" endtime="20170916 02:14:35.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:35.268">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:35.268" endtime="20170916 02:14:35.269"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:35.269">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:34.962" endtime="20170916 02:14:35.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:35.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:35.269" endtime="20170916 02:14:35.269"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:35.270">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:35.270">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:14:35.270">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:14:35.270" endtime="20170916 02:14:35.270"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:35.271">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:34.961" endtime="20170916 02:14:35.271"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:35.271">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:14:34.961" endtime="20170916 02:14:35.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:35.272" endtime="20170916 02:14:35.272"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:35.272">${status} = True</msg>
<status status="PASS" starttime="20170916 02:14:35.271" endtime="20170916 02:14:35.272"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:35.272">${status} = True</msg>
<status status="PASS" starttime="20170916 02:14:34.961" endtime="20170916 02:14:35.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:35.310">Length is 12</msg>
<status status="PASS" starttime="20170916 02:14:35.310" endtime="20170916 02:14:35.310"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:35.315">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170916 02:14:38.326">${RC} = 0</msg>
<msg level="INFO" timestamp="20170916 02:14:38.329">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.728 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.546 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" starttime="20170916 02:14:35.310" endtime="20170916 02:14:38.331"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.342">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.728 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.546 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.540 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.579 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.540/0.598/0.728/0.078 ms</msg>
<status status="PASS" starttime="20170916 02:14:38.339" endtime="20170916 02:14:38.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:38.342" endtime="20170916 02:14:38.343"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:35.307" endtime="20170916 02:14:38.343"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.389">${cur_time} = 2017-09-16 02:14:38:387901</msg>
<status status="PASS" starttime="20170916 02:14:38.388" endtime="20170916 02:14:38.389"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.390">${cur_time} = 20170916021438387901</msg>
<status status="PASS" starttime="20170916 02:14:38.389" endtime="20170916 02:14:38.390"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.387" endtime="20170916 02:14:38.390"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:38.390">${FFDC_TIME} = 20170916021438387901</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.403">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170916 02:14:38.403" endtime="20170916 02:14:38.403"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.404">${suite_name} = 20170916021438387901_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170916 02:14:38.404" endtime="20170916 02:14:38.404"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.405">${test_name} = PowerOnTest</msg>
<status status="PASS" starttime="20170916 02:14:38.405" endtime="20170916 02:14:38.405"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.406">${test_name} = 20170916021438387901_PowerOnTest</msg>
<status status="PASS" starttime="20170916 02:14:38.405" endtime="20170916 02:14:38.406"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.402" endtime="20170916 02:14:38.406"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:38.407">${FFDC_DIR_PATH} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170916 02:14:38.407">${FFDC_PREFIX} = 20170916021438387901_</msg>
<msg level="INFO" timestamp="20170916 02:14:38.454">${LOG_PREFIX} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.457" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.455" endtime="20170916 02:14:38.457"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:38.462">${FFDC_FILE_PATH} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.504" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.504" endtime="20170916 02:14:38.505"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.503" endtime="20170916 02:14:38.505"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.506" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.505" endtime="20170916 02:14:38.506"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.505" endtime="20170916 02:14:38.506"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.507" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.507" endtime="20170916 02:14:38.507"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.506" endtime="20170916 02:14:38.507"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.512" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.511" endtime="20170916 02:14:38.512"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.508" endtime="20170916 02:14:38.512"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.513" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.513" endtime="20170916 02:14:38.514"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.512" endtime="20170916 02:14:38.514"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.515" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.514" endtime="20170916 02:14:38.515"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.514" endtime="20170916 02:14:38.515"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.516" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.516" endtime="20170916 02:14:38.516"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.515" endtime="20170916 02:14:38.516"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.518" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.517" endtime="20170916 02:14:38.518"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.517" endtime="20170916 02:14:38.518"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.519" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.518" endtime="20170916 02:14:38.519"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.518" endtime="20170916 02:14:38.519"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.537" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.536" endtime="20170916 02:14:38.537"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.520" endtime="20170916 02:14:38.537"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.539" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.538" endtime="20170916 02:14:38.539"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.537" endtime="20170916 02:14:38.539"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.541" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.540" endtime="20170916 02:14:38.541"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.539" endtime="20170916 02:14:38.541"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.542" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.542" endtime="20170916 02:14:38.542"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.541" endtime="20170916 02:14:38.542"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.594">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:38.595">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170916 02:14:38.663">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170916 02:14:38.680">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170916 02:14:38.680">${stderr} = </msg>
<msg level="INFO" timestamp="20170916 02:14:38.680">${rc} = 0</msg>
<status status="PASS" starttime="20170916 02:14:38.543" endtime="20170916 02:14:38.680"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.681">Length is 0</msg>
<status status="PASS" starttime="20170916 02:14:38.680" endtime="20170916 02:14:38.681"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.681">Length is 11</msg>
<status status="PASS" starttime="20170916 02:14:38.681" endtime="20170916 02:14:38.681"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:38.682">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20170916 02:14:38.542" endtime="20170916 02:14:38.682"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.683" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.682" endtime="20170916 02:14:38.683"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.682" endtime="20170916 02:14:38.683"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.519" endtime="20170916 02:14:38.683"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.684" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.684" endtime="20170916 02:14:38.684"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.683" endtime="20170916 02:14:38.685"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.685">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170916 02:14:38.685" endtime="20170916 02:14:38.685"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.687" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.686" endtime="20170916 02:14:38.687"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.685" endtime="20170916 02:14:38.687"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.688" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.688" endtime="20170916 02:14:38.688"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.687" endtime="20170916 02:14:38.688"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.685" endtime="20170916 02:14:38.688"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.690" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.689" endtime="20170916 02:14:38.690"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.689" endtime="20170916 02:14:38.690"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.691" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.691" endtime="20170916 02:14:38.691"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.690" endtime="20170916 02:14:38.691"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.688" endtime="20170916 02:14:38.691"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.693" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.692" endtime="20170916 02:14:38.693"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.692" endtime="20170916 02:14:38.693"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.694" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.694" endtime="20170916 02:14:38.694"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.693" endtime="20170916 02:14:38.694"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.692" endtime="20170916 02:14:38.694"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.685" endtime="20170916 02:14:38.695"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.696" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:38.695" endtime="20170916 02:14:38.696"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.695" endtime="20170916 02:14:38.696"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.503" endtime="20170916 02:14:38.696"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.710">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20170916 02:14:38.709" endtime="20170916 02:14:38.710"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.711">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump ...</msg>
<status status="PASS" starttime="20170916 02:14:38.711" endtime="20170916 02:14:38.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:38.712" endtime="20170916 02:14:38.712"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:38.713">@{ffdc_function_list} = [ BMC Specific Files | Get Request FFDC | FFDC Generic Report | OS FFDC | Core Files | SEL Log | Sys Inventory Files ]</msg>
<status status="PASS" starttime="20170916 02:14:38.711" endtime="20170916 02:14:38.713"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:38.715" endtime="20170916 02:14:38.715"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:38.716">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:38.716">${ret_values} = None</msg>
<status status="PASS" starttime="20170916 02:14:38.714" endtime="20170916 02:14:38.716"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:38.716" endtime="20170916 02:14:38.717"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.765">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20170916 02:14:38.764" endtime="20170916 02:14:38.765"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.766">@{cmd_list} = [ ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty'...</msg>
<status status="PASS" starttime="20170916 02:14:38.766" endtime="20170916 02:14:38.766"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.767">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_journalctl_nopager.txt</msg>
<status status="PASS" starttime="20170916 02:14:38.766" endtime="20170916 02:14:38.767"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:38.768" endtime="20170916 02:14:38.772"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:38.773">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:38.772" endtime="20170916 02:14:38.773"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:38.919">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:38.920">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170916 02:14:41.663">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:38.842" endtime="20170916 02:14:41.663"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:41.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:41.667">${ret_values} = (u'-- Logs begin at Fri 2017-09-15 16:23:56 UTC, end at Fri 2017-09-15 16:37:33 UTC. --\nSep 15 16:23:56 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 15 16:23:56 witherspoon kernel: Linu...</msg>
<status status="PASS" starttime="20170916 02:14:38.773" endtime="20170916 02:14:41.667"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:41.669">${stdout} = -- Logs begin at Fri 2017-09-15 16:23:56 UTC, end at Fri 2017-09-15 16:37:33 UTC. --
Sep 15 16:23:56 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 15 16:23:56 witherspoon kernel: Linux ver...</msg>
<status status="PASS" starttime="20170916 02:14:41.668" endtime="20170916 02:14:41.669"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:41.669">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:14:41.669" endtime="20170916 02:14:41.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:41.681" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:41.679" endtime="20170916 02:14:41.681"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:41.676" endtime="20170916 02:14:41.681"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:41.670" endtime="20170916 02:14:41.681"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.767" endtime="20170916 02:14:41.682"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.766" endtime="20170916 02:14:41.682"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:41.682">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20170916 02:14:41.682" endtime="20170916 02:14:41.682"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:41.683" endtime="20170916 02:14:41.684"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:41.684">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:41.684" endtime="20170916 02:14:41.685"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:41.853">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:41.853">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170916 02:14:41.941">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:41.780" endtime="20170916 02:14:41.942"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:41.942">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:41.943">${ret_values} = (u'MemTotal:         432240 kB\nMemFree:          242208 kB\nMemAvailable:     317948 kB\nBuffers:           16596 kB\nCached:            74788 kB\nSwapCached:            0 kB\nActive:           12585...</msg>
<status status="PASS" starttime="20170916 02:14:41.685" endtime="20170916 02:14:41.943"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:41.944">${stdout} = MemTotal:         432240 kB
MemFree:          242208 kB
MemAvailable:     317948 kB
Buffers:           16596 kB
Cached:            74788 kB
SwapCached:            0 kB
Active:           125852 kB
Inac...</msg>
<status status="PASS" starttime="20170916 02:14:41.944" endtime="20170916 02:14:41.945"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:41.945">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:14:41.945" endtime="20170916 02:14:41.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:41.952" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_meminfo.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:41.952" endtime="20170916 02:14:41.953"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:41.951" endtime="20170916 02:14:41.953"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:41.945" endtime="20170916 02:14:41.953"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:41.683" endtime="20170916 02:14:41.953"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:41.682" endtime="20170916 02:14:41.953"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:41.954">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" starttime="20170916 02:14:41.954" endtime="20170916 02:14:41.954"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:41.955" endtime="20170916 02:14:41.956"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:41.957">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:41.956" endtime="20170916 02:14:41.957"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:42.075">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:42.076">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170916 02:14:42.659">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:42.006" endtime="20170916 02:14:42.659"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:42.659">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:42.661">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 15 16:37 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 15 16:37 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" starttime="20170916 02:14:41.957" endtime="20170916 02:14:42.661"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:42.662">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 15 16:37 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 15 16:37 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" starttime="20170916 02:14:42.661" endtime="20170916 02:14:42.662"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:42.662">${stderr} = ls: /proc/2981/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" starttime="20170916 02:14:42.662" endtime="20170916 02:14:42.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:42.670" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:42.669" endtime="20170916 02:14:42.670"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:42.668" endtime="20170916 02:14:42.670"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:42.662" endtime="20170916 02:14:42.670"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:41.954" endtime="20170916 02:14:42.670"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:41.953" endtime="20170916 02:14:42.670"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:42.671">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_journalctl_pretty.txt</msg>
<status status="PASS" starttime="20170916 02:14:42.671" endtime="20170916 02:14:42.671"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:42.672" endtime="20170916 02:14:42.672"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:42.673">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:42.673" endtime="20170916 02:14:42.673"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:42.791">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:42.791">Executing command 'journalctl -o json-pretty'.</msg>
<msg level="INFO" timestamp="20170916 02:14:50.651">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:42.729" endtime="20170916 02:14:50.656"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:50.656">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:50.695">${ret_values} = (u'{\n\t"__CURSOR" : "s=f46af86840de4e678d8b40aff52dc621;i=1;b=03957b6eddcd48c7bf21a043fa1f6543;m=ecca6d;t=5593cd1d7109a;x=df00f5db014427f6",\n\t"__REALTIME_TIMESTAMP" : "1505492636995738",\n\t"__MONO...</msg>
<status status="PASS" starttime="20170916 02:14:42.673" endtime="20170916 02:14:50.696"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:50.705">${stdout} = {
	"__CURSOR" : "s=f46af86840de4e678d8b40aff52dc621;i=1;b=03957b6eddcd48c7bf21a043fa1f6543;m=ecca6d;t=5593cd1d7109a;x=df00f5db014427f6",
	"__REALTIME_TIMESTAMP" : "1505492636995738",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" starttime="20170916 02:14:50.696" endtime="20170916 02:14:50.705"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:50.706">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:14:50.705" endtime="20170916 02:14:50.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:50.733" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:50.726" endtime="20170916 02:14:50.733"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:50.715" endtime="20170916 02:14:50.733"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:50.706" endtime="20170916 02:14:50.733"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:42.671" endtime="20170916 02:14:50.733"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:42.670" endtime="20170916 02:14:50.733"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:50.734">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20170916 02:14:50.734" endtime="20170916 02:14:50.734"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:50.735" endtime="20170916 02:14:50.736"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:50.736">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:50.736" endtime="20170916 02:14:50.736"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:50.858">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:50.858">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170916 02:14:50.953">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:50.790" endtime="20170916 02:14:50.953"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:50.953">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:50.954">${ret_values} = (u'[    0.000000] sched_clock: 32 bits at 100 Hz, resolution 10000000ns, wraps every 21474836475000000ns\n[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)\n[    0.090000] pid_max...</msg>
<status status="PASS" starttime="20170916 02:14:50.737" endtime="20170916 02:14:50.954"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:50.955">${stdout} = [    0.000000] sched_clock: 32 bits at 100 Hz, resolution 10000000ns, wraps every 21474836475000000ns
[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)
[    0.090000] pid_max: def...</msg>
<status status="PASS" starttime="20170916 02:14:50.954" endtime="20170916 02:14:50.955"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:50.955">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:14:50.955" endtime="20170916 02:14:50.955"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:50.962" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_dmesg.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:50.962" endtime="20170916 02:14:50.962"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:50.961" endtime="20170916 02:14:50.963"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:50.955" endtime="20170916 02:14:50.963"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:50.735" endtime="20170916 02:14:50.963"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:50.734" endtime="20170916 02:14:50.963"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:50.963">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20170916 02:14:50.963" endtime="20170916 02:14:50.964"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:50.965" endtime="20170916 02:14:50.965"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:50.966">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:50.965" endtime="20170916 02:14:50.966"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:51.080">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:51.081">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170916 02:14:51.493">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:51.017" endtime="20170916 02:14:51.493"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:51.493">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:51.494">${ret_values} = (u'Mem: 190156K used, 242084K free, 14688K shrd, 16596K buff, 74792K cached\nCPU:   6% usr  33% sys   0% nic  60% idle   0% io   0% irq   0% sirq\nLoad average: 0.65 1.13 1.18 2/157 2984\n  PID  PPID ...</msg>
<status status="PASS" starttime="20170916 02:14:50.966" endtime="20170916 02:14:51.494"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.495">${stdout} = Mem: 190156K used, 242084K free, 14688K shrd, 16596K buff, 74792K cached
CPU:   6% usr  33% sys   0% nic  60% idle   0% io   0% irq   0% sirq
Load average: 0.65 1.13 1.18 2/157 2984
  PID  PPID USER  ...</msg>
<status status="PASS" starttime="20170916 02:14:51.494" endtime="20170916 02:14:51.495"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.495">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:14:51.495" endtime="20170916 02:14:51.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:51.502" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_proc_list.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:51.502" endtime="20170916 02:14:51.502"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.501" endtime="20170916 02:14:51.503"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.495" endtime="20170916 02:14:51.503"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:50.964" endtime="20170916 02:14:51.503"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:50.963" endtime="20170916 02:14:51.503"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.504">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20170916 02:14:51.503" endtime="20170916 02:14:51.504"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:51.505" endtime="20170916 02:14:51.505"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.506">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:51.505" endtime="20170916 02:14:51.506"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:51.623">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:51.624">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170916 02:14:51.669">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:51.558" endtime="20170916 02:14:51.669"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:51.670">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:51.670">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" starttime="20170916 02:14:51.506" endtime="20170916 02:14:51.670"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.670">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" starttime="20170916 02:14:51.670" endtime="20170916 02:14:51.670"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.671">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:14:51.671" endtime="20170916 02:14:51.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:51.678" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_procinfo.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:51.678" endtime="20170916 02:14:51.678"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.677" endtime="20170916 02:14:51.678"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.671" endtime="20170916 02:14:51.678"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.504" endtime="20170916 02:14:51.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.503" endtime="20170916 02:14:51.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.766" endtime="20170916 02:14:51.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.765" endtime="20170916 02:14:51.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.765" endtime="20170916 02:14:51.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.765" endtime="20170916 02:14:51.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.764" endtime="20170916 02:14:51.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.717" endtime="20170916 02:14:51.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.713" endtime="20170916 02:14:51.679"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.713" endtime="20170916 02:14:51.679"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:51.681" endtime="20170916 02:14:51.681"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:51.681">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:51.681">${ret_values} = None</msg>
<status status="PASS" starttime="20170916 02:14:51.680" endtime="20170916 02:14:51.681"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:51.682" endtime="20170916 02:14:51.682"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.721">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20170916 02:14:51.721" endtime="20170916 02:14:51.721"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.722">@{cmd_list} = [ ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_inventory',...</msg>
<status status="PASS" starttime="20170916 02:14:51.722" endtime="20170916 02:14:51.723"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.723">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_control_list.txt</msg>
<status status="PASS" starttime="20170916 02:14:51.723" endtime="20170916 02:14:51.723"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:51.732">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:51.732" endtime="20170916 02:14:51.733"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.734">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:51.734" endtime="20170916 02:14:51.734"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.735">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:51.734" endtime="20170916 02:14:51.735"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.736">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:51.736" endtime="20170916 02:14:51.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:51.955">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:51.737" endtime="20170916 02:14:51.956"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:51.956">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:51.956">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:51.737" endtime="20170916 02:14:51.956"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:51.956">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:51.956" endtime="20170916 02:14:51.957"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:51.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:51.957" endtime="20170916 02:14:51.957"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.731" endtime="20170916 02:14:51.957"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.730" endtime="20170916 02:14:51.957"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.729" endtime="20170916 02:14:51.958"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:51.958">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" starttime="20170916 02:14:51.958" endtime="20170916 02:14:51.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:51.958" endtime="20170916 02:14:51.959"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:52.215">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:52.215">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:51.959" endtime="20170916 02:14:52.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:52.216" endtime="20170916 02:14:52.216"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:52.216">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:52.216" endtime="20170916 02:14:52.217"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:52.217">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:51.724" endtime="20170916 02:14:52.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:52.218">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:52.218" endtime="20170916 02:14:52.218"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:52.218">${status} = True</msg>
<status status="PASS" starttime="20170916 02:14:52.217" endtime="20170916 02:14:52.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:52.218" endtime="20170916 02:14:52.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:52.219">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:52.220">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170916 02:14:52.220">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" starttime="20170916 02:14:52.219" endtime="20170916 02:14:52.220"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:52.221" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_control_list.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:52.221" endtime="20170916 02:14:52.221"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:52.220" endtime="20170916 02:14:52.221"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.723" endtime="20170916 02:14:52.221"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:52.222">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_led.txt</msg>
<status status="PASS" starttime="20170916 02:14:52.222" endtime="20170916 02:14:52.222"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:52.225">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:52.225" endtime="20170916 02:14:52.226"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:52.226">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:52.226" endtime="20170916 02:14:52.226"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:52.227">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:52.227" endtime="20170916 02:14:52.227"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:52.227">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:52.227" endtime="20170916 02:14:52.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:52.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:52.228" endtime="20170916 02:14:52.434"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:52.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:52.434">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:52.228" endtime="20170916 02:14:52.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:52.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:52.434" endtime="20170916 02:14:52.435"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:52.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:52.435" endtime="20170916 02:14:52.436"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:52.224" endtime="20170916 02:14:52.436"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:52.224" endtime="20170916 02:14:52.436"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:52.223" endtime="20170916 02:14:52.436"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:52.437">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" starttime="20170916 02:14:52.436" endtime="20170916 02:14:52.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:52.437" endtime="20170916 02:14:52.437"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:54.277">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:54.277">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:52.437" endtime="20170916 02:14:54.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:54.278" endtime="20170916 02:14:54.278"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:54.278">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:54.278" endtime="20170916 02:14:54.279"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:54.279">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:52.222" endtime="20170916 02:14:54.279"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:54.280">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:54.280" endtime="20170916 02:14:54.280"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:54.280">${status} = True</msg>
<status status="PASS" starttime="20170916 02:14:54.279" endtime="20170916 02:14:54.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:54.280" endtime="20170916 02:14:54.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:54.283">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:54.283">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170916 02:14:54.283">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" starttime="20170916 02:14:54.281" endtime="20170916 02:14:54.283"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:54.285" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_led.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:54.284" endtime="20170916 02:14:54.285"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:54.284" endtime="20170916 02:14:54.285"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:52.222" endtime="20170916 02:14:54.285"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:54.286">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20170916 02:14:54.285" endtime="20170916 02:14:54.286"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:54.289">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:54.288" endtime="20170916 02:14:54.289"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:54.290">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:54.290" endtime="20170916 02:14:54.290"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:54.291">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:54.290" endtime="20170916 02:14:54.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:54.291">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:54.291" endtime="20170916 02:14:54.291"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:54.495">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:54.292" endtime="20170916 02:14:54.495"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:54.495">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:54.495">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:54.292" endtime="20170916 02:14:54.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:54.496">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:54.496" endtime="20170916 02:14:54.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:54.497">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:54.496" endtime="20170916 02:14:54.497"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:54.288" endtime="20170916 02:14:54.497"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:54.287" endtime="20170916 02:14:54.497"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:54.287" endtime="20170916 02:14:54.497"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:54.498">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" starttime="20170916 02:14:54.497" endtime="20170916 02:14:54.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:54.498" endtime="20170916 02:14:54.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:55.072">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:55.072">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:54.499" endtime="20170916 02:14:55.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:55.073" endtime="20170916 02:14:55.073"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:55.073">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:55.073" endtime="20170916 02:14:55.074"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:55.074">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:54.286" endtime="20170916 02:14:55.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:55.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:55.074" endtime="20170916 02:14:55.075"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:55.075">${status} = True</msg>
<status status="PASS" starttime="20170916 02:14:55.074" endtime="20170916 02:14:55.075"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:55.075" endtime="20170916 02:14:55.076"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:55.077">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 18875
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 15500
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9740
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10302
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10744
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 11538
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9566
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10026
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9740
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10273
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 262000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 220000000
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29440
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 204000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 12250
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 203500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 12250
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:55.077">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170916 02:14:55.078">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" starttime="20170916 02:14:55.076" endtime="20170916 02:14:55.078"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:55.080" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_sensor_list.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:55.079" endtime="20170916 02:14:55.080"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:55.078" endtime="20170916 02:14:55.080"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:54.285" endtime="20170916 02:14:55.080"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:55.081">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_inventory.txt</msg>
<status status="PASS" starttime="20170916 02:14:55.081" endtime="20170916 02:14:55.081"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:55.084">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:55.084" endtime="20170916 02:14:55.084"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:55.085">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:55.085" endtime="20170916 02:14:55.085"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:55.086">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:55.085" endtime="20170916 02:14:55.086"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:55.086">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:55.086" endtime="20170916 02:14:55.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:55.267">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:55.087" endtime="20170916 02:14:55.267"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:55.267">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:55.268">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:55.087" endtime="20170916 02:14:55.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:55.268">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:55.268" endtime="20170916 02:14:55.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:55.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:55.269" endtime="20170916 02:14:55.269"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:55.083" endtime="20170916 02:14:55.269"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:55.082" endtime="20170916 02:14:55.269"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:55.082" endtime="20170916 02:14:55.269"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:55.270">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20170916 02:14:55.270" endtime="20170916 02:14:55.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:55.270" endtime="20170916 02:14:55.271"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:57.635">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:57.635">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:55.271" endtime="20170916 02:14:57.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:57.636" endtime="20170916 02:14:57.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:57.637">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:57.637" endtime="20170916 02:14:57.637"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:57.637">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:55.081" endtime="20170916 02:14:57.637"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:57.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:57.638" endtime="20170916 02:14:57.638"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:57.638">${status} = True</msg>
<status status="PASS" starttime="20170916 02:14:57.638" endtime="20170916 02:14:57.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:57.639" endtime="20170916 02:14:57.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:57.642">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA766", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3934032258", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA766", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3934032252", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/9", 
        "/xyz/openbmc_project/logging/entry/8", 
        "/xyz/openbmc_project/logging/entry/6", 
        "/xyz/openbmc_project/logging/entry/5"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:57.643">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170916 02:14:57.643">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" starttime="20170916 02:14:57.639" endtime="20170916 02:14:57.643"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:57.645" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_inventory.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:57.644" endtime="20170916 02:14:57.645"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:57.643" endtime="20170916 02:14:57.645"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:55.080" endtime="20170916 02:14:57.645"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:57.646">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_FIRMWARE_list.txt</msg>
<status status="PASS" starttime="20170916 02:14:57.645" endtime="20170916 02:14:57.646"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:57.650">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:57.650" endtime="20170916 02:14:57.651"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:57.652">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:57.651" endtime="20170916 02:14:57.652"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:57.653">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:57.652" endtime="20170916 02:14:57.653"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:57.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:57.653" endtime="20170916 02:14:57.654"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:57.846">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:57.655" endtime="20170916 02:14:57.846"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:57.846">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:57.846">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:57.654" endtime="20170916 02:14:57.846"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:57.847">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:57.846" endtime="20170916 02:14:57.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:57.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:57.847" endtime="20170916 02:14:57.847"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:57.648" endtime="20170916 02:14:57.848"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:57.648" endtime="20170916 02:14:57.848"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:57.647" endtime="20170916 02:14:57.848"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:57.848">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" starttime="20170916 02:14:57.848" endtime="20170916 02:14:57.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:57.849" endtime="20170916 02:14:57.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.077">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:58.077">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:57.849" endtime="20170916 02:14:58.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:58.078" endtime="20170916 02:14:58.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:58.078">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:58.078" endtime="20170916 02:14:58.079"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:58.079">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:57.646" endtime="20170916 02:14:58.079"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:58.080" endtime="20170916 02:14:58.080"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:58.080">${status} = True</msg>
<status status="PASS" starttime="20170916 02:14:58.079" endtime="20170916 02:14:58.080"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:58.080" endtime="20170916 02:14:58.081"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.082">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:58.082">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170916 02:14:58.082">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/8764baa3": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-v1....</msg>
<status status="PASS" starttime="20170916 02:14:58.081" endtime="20170916 02:14:58.082"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.083" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_FIRMWARE_list.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:58.083" endtime="20170916 02:14:58.083"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.082" endtime="20170916 02:14:58.083"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:57.645" endtime="20170916 02:14:58.084"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.085">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_elog.txt</msg>
<status status="PASS" starttime="20170916 02:14:58.084" endtime="20170916 02:14:58.085"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.091">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:14:58.091" endtime="20170916 02:14:58.092"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:14:58.092" endtime="20170916 02:14:58.093"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.094">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:14:58.093" endtime="20170916 02:14:58.094"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.094">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:14:58.094" endtime="20170916 02:14:58.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.326">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:14:58.095" endtime="20170916 02:14:58.327"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:58.327">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:58.327">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:58.095" endtime="20170916 02:14:58.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.327">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:58.327" endtime="20170916 02:14:58.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:58.328" endtime="20170916 02:14:58.328"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.090" endtime="20170916 02:14:58.328"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.087" endtime="20170916 02:14:58.328"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.086" endtime="20170916 02:14:58.329"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.329">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20170916 02:14:58.329" endtime="20170916 02:14:58.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:58.329" endtime="20170916 02:14:58.330"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.797">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:14:58.797">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:58.330" endtime="20170916 02:14:58.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:58.797" endtime="20170916 02:14:58.798"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:14:58.798">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:14:58.798" endtime="20170916 02:14:58.798"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:58.799">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:14:58.085" endtime="20170916 02:14:58.799"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:14:58.799" endtime="20170916 02:14:58.800"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:58.800">${status} = True</msg>
<status status="PASS" starttime="20170916 02:14:58.799" endtime="20170916 02:14:58.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:58.800" endtime="20170916 02:14:58.800"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.802">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "_PID=2962"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493158301, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "_PID=2970"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493267132, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1145"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492853862, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1829"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492900928, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 cd e5 00 00 00 0a 1c 37 33 87 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 0c 0d 8a b2 03 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8a c5 0e 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8a cf e8 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8a f4 f2 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8a ff 8b 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 12 11 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 1c 81 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 2e e8 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 39 75 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 4c 59 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 56 af 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 68 90 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 73 3c 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 54 2e 0a 48 a8 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 54 2e a1 38 23 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 54 30 50 b8 ca 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1249"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493023170, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 e3 6f 00 00 00 0a 1d f2 29 b8 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0f 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 0e 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 0e 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1249"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493024420, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "_PID=2397"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493030938, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 42 a4 00 00 00 09 4f e2 a7 6e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 03 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 09 c0 53 b3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 66 39 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 71 28 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 95 38 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 a0 27 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 b2 9e 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 bc ee 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 cf 17 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 d9 71 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 eb a9 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 f6 65 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c1 08 e3 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c1 13 8a 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4e 04 94 7b 1b 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4e 05 1f 0e 3f 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4e 06 dc 55 10 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1249"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493151063, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 58 a6 00 00 00 09 51 1b 9a 83 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 03 55 44 00 10 01 03 09 00 90 00 00 14 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1249"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493152112, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:14:58.802">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170916 02:14:58.803">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "_PID=2962"
            ],
            "Id": 10,
            "Message": "org.open_pow...</msg>
<status status="PASS" starttime="20170916 02:14:58.801" endtime="20170916 02:14:58.803"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.804" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_elog.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:58.804" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.803" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.084" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.723" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.721" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.721" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.721" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.720" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.682" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.680" endtime="20170916 02:14:58.805"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:51.679" endtime="20170916 02:14:58.805"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:58.807" endtime="20170916 02:14:58.807"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:58.807">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:58.807">${ret_values} = None</msg>
<status status="PASS" starttime="20170916 02:14:58.806" endtime="20170916 02:14:58.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:14:58.808" endtime="20170916 02:14:58.808"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.855">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170916 02:14:58.855" endtime="20170916 02:14:58.855"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.857">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" starttime="20170916 02:14:58.856" endtime="20170916 02:14:58.857"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.866">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20170916 02:14:58.857" endtime="20170916 02:14:58.866"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.871" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:58.870" endtime="20170916 02:14:58.871"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.869" endtime="20170916 02:14:58.871"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.872" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:58.872" endtime="20170916 02:14:58.872"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.871" endtime="20170916 02:14:58.873"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.874" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:58.873" endtime="20170916 02:14:58.874"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.873" endtime="20170916 02:14:58.874"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:58.875" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:58.875" endtime="20170916 02:14:58.875"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.874" endtime="20170916 02:14:58.875"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.869" endtime="20170916 02:14:58.875"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.868" endtime="20170916 02:14:58.875"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:58.876">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:58.876" endtime="20170916 02:14:58.876"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.006">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:59.007">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170916 02:14:59.064">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:58.936" endtime="20170916 02:14:59.064"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:59.064">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:59.064">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" starttime="20170916 02:14:58.876" endtime="20170916 02:14:59.064"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.065">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status status="PASS" starttime="20170916 02:14:59.064" endtime="20170916 02:14:59.065"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.065">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:14:59.065" endtime="20170916 02:14:59.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.073" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.072" endtime="20170916 02:14:59.073"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.071" endtime="20170916 02:14:59.073"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.066" endtime="20170916 02:14:59.073"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.867" endtime="20170916 02:14:59.073"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.866" endtime="20170916 02:14:59.073"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.076" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.076" endtime="20170916 02:14:59.077"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.075" endtime="20170916 02:14:59.077"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.078" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.078" endtime="20170916 02:14:59.078"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.077" endtime="20170916 02:14:59.078"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.079" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.079" endtime="20170916 02:14:59.079"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.078" endtime="20170916 02:14:59.079"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.081" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.080" endtime="20170916 02:14:59.081"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.080" endtime="20170916 02:14:59.081"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.075" endtime="20170916 02:14:59.081"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.075" endtime="20170916 02:14:59.081"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.082">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:59.081" endtime="20170916 02:14:59.082"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.210">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:59.211">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170916 02:14:59.284">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:59.143" endtime="20170916 02:14:59.284"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:59.284">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:59.284">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Fri Sep 15 22:44:29 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" starttime="20170916 02:14:59.082" endtime="20170916 02:14:59.284"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.285">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Fri Sep 15 22:44:29 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" starttime="20170916 02:14:59.285" endtime="20170916 02:14:59.285"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.286">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:14:59.285" endtime="20170916 02:14:59.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.293" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.292" endtime="20170916 02:14:59.293"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.292" endtime="20170916 02:14:59.293"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.286" endtime="20170916 02:14:59.293"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.074" endtime="20170916 02:14:59.293"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.074" endtime="20170916 02:14:59.293"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.296" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.296" endtime="20170916 02:14:59.296"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.295" endtime="20170916 02:14:59.296"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.298" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.297" endtime="20170916 02:14:59.298"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.296" endtime="20170916 02:14:59.298"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.299" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.298" endtime="20170916 02:14:59.299"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.298" endtime="20170916 02:14:59.299"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.300" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.300" endtime="20170916 02:14:59.300"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.299" endtime="20170916 02:14:59.300"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.295" endtime="20170916 02:14:59.301"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.294" endtime="20170916 02:14:59.301"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.301">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:59.301" endtime="20170916 02:14:59.301"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.431">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:59.431">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170916 02:14:59.479">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:59.362" endtime="20170916 02:14:59.479"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:14:59.479">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:14:59.479">${ret_values} = (u' 16:37:57 up 14 min,  load average: 0.67, 1.13, 1.17', u'', 0)</msg>
<status status="PASS" starttime="20170916 02:14:59.302" endtime="20170916 02:14:59.479"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.480">${stdout} =  16:37:57 up 14 min,  load average: 0.67, 1.13, 1.17</msg>
<status status="PASS" starttime="20170916 02:14:59.480" endtime="20170916 02:14:59.480"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.481">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:14:59.481" endtime="20170916 02:14:59.481"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.488" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.487" endtime="20170916 02:14:59.488"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.487" endtime="20170916 02:14:59.488"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.481" endtime="20170916 02:14:59.488"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.293" endtime="20170916 02:14:59.488"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.293" endtime="20170916 02:14:59.488"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.866" endtime="20170916 02:14:59.488"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.855" endtime="20170916 02:14:59.489"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.855" endtime="20170916 02:14:59.489"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.490">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" starttime="20170916 02:14:59.489" endtime="20170916 02:14:59.490"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.490">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20170916 02:14:59.490" endtime="20170916 02:14:59.491"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.494" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.493" endtime="20170916 02:14:59.494"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.493" endtime="20170916 02:14:59.494"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.495" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.495" endtime="20170916 02:14:59.495"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.494" endtime="20170916 02:14:59.495"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.496" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.496" endtime="20170916 02:14:59.496"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.495" endtime="20170916 02:14:59.497"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.498" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:14:59.497" endtime="20170916 02:14:59.498"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.497" endtime="20170916 02:14:59.498"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.492" endtime="20170916 02:14:59.498"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.492" endtime="20170916 02:14:59.498"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:14:59.499">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:14:59.498" endtime="20170916 02:14:59.499"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:14:59.627">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:14:59.627">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170916 02:15:01.205">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:14:59.559" endtime="20170916 02:15:01.205"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:01.206">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:01.206">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status status="PASS" starttime="20170916 02:14:59.499" endtime="20170916 02:15:01.206"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.206">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status status="PASS" starttime="20170916 02:15:01.206" endtime="20170916 02:15:01.206"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.207">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:15:01.207" endtime="20170916 02:15:01.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.214" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.214" endtime="20170916 02:15:01.214"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.213" endtime="20170916 02:15:01.214"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.207" endtime="20170916 02:15:01.214"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.491" endtime="20170916 02:15:01.215"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.491" endtime="20170916 02:15:01.215"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.491" endtime="20170916 02:15:01.215"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.489" endtime="20170916 02:15:01.215"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:59.489" endtime="20170916 02:15:01.215"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.216">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" starttime="20170916 02:15:01.216" endtime="20170916 02:15:01.216"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.217">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20170916 02:15:01.216" endtime="20170916 02:15:01.217"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.220" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.219" endtime="20170916 02:15:01.220"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.219" endtime="20170916 02:15:01.220"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.221" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.221" endtime="20170916 02:15:01.221"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.220" endtime="20170916 02:15:01.221"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.223" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.222" endtime="20170916 02:15:01.223"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.222" endtime="20170916 02:15:01.223"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.224" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.224" endtime="20170916 02:15:01.224"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.223" endtime="20170916 02:15:01.224"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.218" endtime="20170916 02:15:01.225"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.218" endtime="20170916 02:15:01.225"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.225">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:15:01.225" endtime="20170916 02:15:01.225"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.348">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:15:01.348">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20170916 02:15:01.425">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:15:01.280" endtime="20170916 02:15:01.425"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:01.426">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:01.426">${ret_values} = (u'20170915224540', u'', 0)</msg>
<status status="PASS" starttime="20170916 02:15:01.226" endtime="20170916 02:15:01.426"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.426">${stdout} = 20170915224540</msg>
<status status="PASS" starttime="20170916 02:15:01.426" endtime="20170916 02:15:01.427"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.427">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:15:01.427" endtime="20170916 02:15:01.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.434" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.434" endtime="20170916 02:15:01.434"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.433" endtime="20170916 02:15:01.435"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.427" endtime="20170916 02:15:01.435"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.217" endtime="20170916 02:15:01.435"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.217" endtime="20170916 02:15:01.435"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.438" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.437" endtime="20170916 02:15:01.438"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.437" endtime="20170916 02:15:01.438"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.439" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.439" endtime="20170916 02:15:01.439"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.438" endtime="20170916 02:15:01.439"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.440" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.440" endtime="20170916 02:15:01.441"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.439" endtime="20170916 02:15:01.441"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.442" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.441" endtime="20170916 02:15:01.442"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.441" endtime="20170916 02:15:01.442"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.436" endtime="20170916 02:15:01.442"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.436" endtime="20170916 02:15:01.442"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.443">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" starttime="20170916 02:15:01.442" endtime="20170916 02:15:01.443"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.571">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:15:01.572">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170916 02:15:01.619">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170916 02:15:01.502" endtime="20170916 02:15:01.619"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:01.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:01.619">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-12"\nVERSION_ID="v1.99.10-12-g7c53865"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" starttime="20170916 02:15:01.443" endtime="20170916 02:15:01.619"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.620">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-12"
VERSION_ID="v1.99.10-12-g7c53865"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" starttime="20170916 02:15:01.619" endtime="20170916 02:15:01.620"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.620">${stderr} = </msg>
<status status="PASS" starttime="20170916 02:15:01.620" endtime="20170916 02:15:01.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.628" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:01.627" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.626" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.621" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.435" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.435" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.217" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.215" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.215" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.855" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.854" endtime="20170916 02:15:01.628"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.808" endtime="20170916 02:15:01.629"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.806" endtime="20170916 02:15:01.629"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:58.805" endtime="20170916 02:15:01.629"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:01.630" endtime="20170916 02:15:01.631"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:01.631">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:01.631">${ret_values} = None</msg>
<status status="PASS" starttime="20170916 02:15:01.630" endtime="20170916 02:15:01.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:01.631" endtime="20170916 02:15:01.631"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:01.675">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170916 02:15:01.674" endtime="20170916 02:15:01.675"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.673" endtime="20170916 02:15:01.675"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.632" endtime="20170916 02:15:01.675"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.629" endtime="20170916 02:15:01.675"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.629" endtime="20170916 02:15:01.675"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:01.681" endtime="20170916 02:15:01.681"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:01.682">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:01.682">${ret_values} = None</msg>
<status status="PASS" starttime="20170916 02:15:01.680" endtime="20170916 02:15:01.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:01.682" endtime="20170916 02:15:01.683"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.783">term_type=vt100
timeout=25 seconds
newline=

host=9.41.166.169
encoding=UTF-8
index=1
alias=bmc_connection
prompt=# 
port=22
height=24
path_separator=/
width=80</msg>
<msg level="INFO" timestamp="20170916 02:15:01.783">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170916 02:15:01.839">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170916 02:15:01.858">${core_files} = None</msg>
<msg level="INFO" timestamp="20170916 02:15:01.858">${stderr} = None</msg>
<msg level="INFO" timestamp="20170916 02:15:01.859">${rc} = None</msg>
<msg level="FAIL" timestamp="20170916 02:15:01.859">#(UTC) 2017/09/16 02:15:01.856914 -    0.074386 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" starttime="20170916 02:15:01.730" endtime="20170916 02:15:01.859"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:01.860">@{core_list} = [ ]</msg>
<msg level="FAIL" timestamp="20170916 02:15:01.860">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" starttime="20170916 02:15:01.859" endtime="20170916 02:15:01.860"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:01.878" endtime="20170916 02:15:01.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:01.900" endtime="20170916 02:15:02.702"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.899" endtime="20170916 02:15:02.702"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.898" endtime="20170916 02:15:02.702"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.877" endtime="20170916 02:15:02.702"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.861" endtime="20170916 02:15:02.703"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" starttime="20170916 02:15:02.703" endtime="20170916 02:15:02.703"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:01.729" endtime="20170916 02:15:02.703"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.683" endtime="20170916 02:15:02.703"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.675" endtime="20170916 02:15:02.703"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:01.675" endtime="20170916 02:15:02.703"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:02.705" endtime="20170916 02:15:02.706"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:02.706">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:02.706">${ret_values} = None</msg>
<status status="PASS" starttime="20170916 02:15:02.705" endtime="20170916 02:15:02.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:02.706" endtime="20170916 02:15:02.706"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:02.761">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:02.760" endtime="20170916 02:15:02.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:02.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:02.761" endtime="20170916 02:15:02.762"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:02.762">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:02.762" endtime="20170916 02:15:02.762"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:02.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:02.763" endtime="20170916 02:15:02.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:02.951">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:02.764" endtime="20170916 02:15:02.951"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:02.951">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:02.951">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:02.763" endtime="20170916 02:15:02.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:02.952">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:02.952" endtime="20170916 02:15:02.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:02.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:02.952" endtime="20170916 02:15:02.953"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:02.759" endtime="20170916 02:15:02.953"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:02.759" endtime="20170916 02:15:02.953"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:02.758" endtime="20170916 02:15:02.953"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:02.954">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20170916 02:15:02.953" endtime="20170916 02:15:02.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:02.954" endtime="20170916 02:15:02.954"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.307">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:03.307">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:02.955" endtime="20170916 02:15:03.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:03.307" endtime="20170916 02:15:03.308"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:03.308">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:03.308" endtime="20170916 02:15:03.308"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:03.308">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:02.757" endtime="20170916 02:15:03.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.310">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.309" endtime="20170916 02:15:03.310"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:03.310">${status} = True</msg>
<status status="PASS" starttime="20170916 02:15:03.309" endtime="20170916 02:15:03.310"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:03.310" endtime="20170916 02:15:03.310"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.311">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "_PID=2962"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493158301, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "_PID=2970"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493267132, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1145"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492853862, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "_PID=1829"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492900928, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 cd e5 00 00 00 0a 1c 37 33 87 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 0c 0d 8a b2 03 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8a c5 0e 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8a cf e8 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8a f4 f2 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8a ff 8b 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 12 11 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 1c 81 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 2e e8 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 39 75 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 4c 59 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 56 af 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 68 90 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 73 3c 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 54 2e 0a 48 a8 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 54 2e a1 38 23 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 54 30 50 b8 ca 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1249"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493023170, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 e3 6f 00 00 00 0a 1d f2 29 b8 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0f 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 0e 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 0e 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1249"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493024420, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "_PID=2397"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493030938, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 42 a4 00 00 00 09 4f e2 a7 6e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 03 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 09 c0 53 b3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 66 39 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 71 28 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 95 38 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 a0 27 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 b2 9e 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 bc ee 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 cf 17 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 d9 71 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 eb a9 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 f6 65 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c1 08 e3 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c1 13 8a 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4e 04 94 7b 1b 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4e 05 1f 0e 3f 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4e 06 dc 55 10 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
        "_PID=1249"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493151063, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 58 a6 00 00 00 09 51 1b 9a 83 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 03 55 44 00 10 01 03 09 00 90 00 00 14 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
        "_PID=1249"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505493152112, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:03.312">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:03.312">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/9/callout': {u'endpoints': [u'/xyz/openbmc_project/inventory/system']}, u'/xyz/openbmc_project/logging/entry/8/callout': {u'endpoints': [u'/xyz/openbmc_...</msg>
<status status="PASS" starttime="20170916 02:15:03.311" endtime="20170916 02:15:03.312"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.313">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/11', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/en...</msg>
<status status="PASS" starttime="20170916 02:15:03.312" endtime="20170916 02:15:03.313"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.313">${logpath} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel</msg>
<status status="PASS" starttime="20170916 02:15:03.313" endtime="20170916 02:15:03.313"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.314" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:03.314" endtime="20170916 02:15:03.314"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/10">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:03.315" endtime="20170916 02:15:03.315"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.319">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:03.319" endtime="20170916 02:15:03.319"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.320">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:03.320" endtime="20170916 02:15:03.320"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.321">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:03.320" endtime="20170916 02:15:03.321"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.321">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:03.321" endtime="20170916 02:15:03.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.661">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:03.322" endtime="20170916 02:15:03.661"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:03.661">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:03.661">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.322" endtime="20170916 02:15:03.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.662">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.662" endtime="20170916 02:15:03.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.663">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.662" endtime="20170916 02:15:03.663"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:03.318" endtime="20170916 02:15:03.663"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:03.318" endtime="20170916 02:15:03.663"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:03.317" endtime="20170916 02:15:03.663"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.664">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status status="PASS" starttime="20170916 02:15:03.663" endtime="20170916 02:15:03.664"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:03.664" endtime="20170916 02:15:03.665"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.769">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:03.769">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.665" endtime="20170916 02:15:03.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:03.770" endtime="20170916 02:15:03.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:03.771">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:03.770" endtime="20170916 02:15:03.771"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:03.771">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.316" endtime="20170916 02:15:03.771"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.771">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.771" endtime="20170916 02:15:03.772"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.772">To JSON using : content={
  "data": [
    "_PID=2962"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:03.772">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:03.772">${content} = {u'data': [u'_PID=2962'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:03.772" endtime="20170916 02:15:03.772"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:03.773">${esel_data} = [u'_PID=2962']</msg>
<status status="PASS" starttime="20170916 02:15:03.315" endtime="20170916 02:15:03.773"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.773">Length is 1</msg>
<msg level="INFO" timestamp="20170916 02:15:03.773">${length} = 1</msg>
<status status="PASS" starttime="20170916 02:15:03.773" endtime="20170916 02:15:03.773"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:03.774" endtime="20170916 02:15:03.774"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.775">${index} = None</msg>
<msg level="FAIL" timestamp="20170916 02:15:03.775">IndexError: list index out of range</msg>
<status status="FAIL" starttime="20170916 02:15:03.774" endtime="20170916 02:15:03.775"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:15:03.775">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" starttime="20170916 02:15:03.775" endtime="20170916 02:15:03.775"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.777" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:03.776" endtime="20170916 02:15:03.777"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:03.776" endtime="20170916 02:15:03.777"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:03.314" endtime="20170916 02:15:03.777"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/11">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:03.778" endtime="20170916 02:15:03.778"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.782">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:03.781" endtime="20170916 02:15:03.782"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.783">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:03.782" endtime="20170916 02:15:03.783"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.783">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:03.783" endtime="20170916 02:15:03.783"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.784">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:03.783" endtime="20170916 02:15:03.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.972">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:03.785" endtime="20170916 02:15:03.972"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:03.972">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:03.972">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.784" endtime="20170916 02:15:03.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.973">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.972" endtime="20170916 02:15:03.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:03.973">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.973" endtime="20170916 02:15:03.974"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:03.781" endtime="20170916 02:15:03.974"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:03.780" endtime="20170916 02:15:03.974"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:03.780" endtime="20170916 02:15:03.974"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:03.974">${base_uri} = /xyz/openbmc_project/logging/entry/11/attr/AdditionalData</msg>
<status status="PASS" starttime="20170916 02:15:03.974" endtime="20170916 02:15:03.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:03.975" endtime="20170916 02:15:03.975"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.059">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/11/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:04.059">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.975" endtime="20170916 02:15:04.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.060" endtime="20170916 02:15:04.060"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:04.060">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:04.060" endtime="20170916 02:15:04.061"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:04.061">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:03.779" endtime="20170916 02:15:04.061"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.061" endtime="20170916 02:15:04.061"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.062">To JSON using : content={
  "data": [
    "_PID=2970"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:04.062">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:04.062">${content} = {u'data': [u'_PID=2970'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:04.062" endtime="20170916 02:15:04.062"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:04.062">${esel_data} = [u'_PID=2970']</msg>
<status status="PASS" starttime="20170916 02:15:03.778" endtime="20170916 02:15:04.063"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.063">Length is 1</msg>
<msg level="INFO" timestamp="20170916 02:15:04.063">${length} = 1</msg>
<status status="PASS" starttime="20170916 02:15:04.063" endtime="20170916 02:15:04.063"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.063" endtime="20170916 02:15:04.064"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.064">${index} = None</msg>
<msg level="FAIL" timestamp="20170916 02:15:04.065">IndexError: list index out of range</msg>
<status status="FAIL" starttime="20170916 02:15:04.064" endtime="20170916 02:15:04.065"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:15:04.065">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" starttime="20170916 02:15:04.065" endtime="20170916 02:15:04.065"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.066" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:04.066" endtime="20170916 02:15:04.067"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.065" endtime="20170916 02:15:04.067"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:03.777" endtime="20170916 02:15:04.067"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.067" endtime="20170916 02:15:04.068"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.071">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:04.071" endtime="20170916 02:15:04.072"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.072">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:04.072" endtime="20170916 02:15:04.072"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.073">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:04.072" endtime="20170916 02:15:04.073"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.073">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:04.073" endtime="20170916 02:15:04.073"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.257">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:04.074" endtime="20170916 02:15:04.258"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:04.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:04.258">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.074" endtime="20170916 02:15:04.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.259">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.258" endtime="20170916 02:15:04.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.259" endtime="20170916 02:15:04.259"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.070" endtime="20170916 02:15:04.260"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.070" endtime="20170916 02:15:04.260"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.069" endtime="20170916 02:15:04.260"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.261">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20170916 02:15:04.261" endtime="20170916 02:15:04.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.262" endtime="20170916 02:15:04.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.344">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:04.345">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.262" endtime="20170916 02:15:04.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.345" endtime="20170916 02:15:04.345"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:04.346">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:04.345" endtime="20170916 02:15:04.346"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:04.346">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.069" endtime="20170916 02:15:04.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.346" endtime="20170916 02:15:04.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.347">To JSON using : content={
  "data": [
    "_PID=1145"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:04.347">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:04.347">${content} = {u'data': [u'_PID=1145'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:04.347" endtime="20170916 02:15:04.347"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:04.348">${esel_data} = [u'_PID=1145']</msg>
<status status="PASS" starttime="20170916 02:15:04.068" endtime="20170916 02:15:04.348"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.348">Length is 1</msg>
<msg level="INFO" timestamp="20170916 02:15:04.348">${length} = 1</msg>
<status status="PASS" starttime="20170916 02:15:04.348" endtime="20170916 02:15:04.348"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.349" endtime="20170916 02:15:04.349"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.350">${index} = None</msg>
<msg level="FAIL" timestamp="20170916 02:15:04.350">IndexError: list index out of range</msg>
<status status="FAIL" starttime="20170916 02:15:04.349" endtime="20170916 02:15:04.350"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:15:04.350">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" starttime="20170916 02:15:04.350" endtime="20170916 02:15:04.350"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.352" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:04.351" endtime="20170916 02:15:04.352"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.351" endtime="20170916 02:15:04.352"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:04.067" endtime="20170916 02:15:04.352"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.352" endtime="20170916 02:15:04.353"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.356">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:04.356" endtime="20170916 02:15:04.357"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.357">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:04.357" endtime="20170916 02:15:04.357"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.358">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:04.357" endtime="20170916 02:15:04.358"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.359">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:04.358" endtime="20170916 02:15:04.359"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.616">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:04.360" endtime="20170916 02:15:04.616"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:04.617">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:04.617">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.359" endtime="20170916 02:15:04.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.617">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.617" endtime="20170916 02:15:04.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.618" endtime="20170916 02:15:04.618"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.355" endtime="20170916 02:15:04.618"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.355" endtime="20170916 02:15:04.618"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.354" endtime="20170916 02:15:04.619"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.619">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status status="PASS" starttime="20170916 02:15:04.619" endtime="20170916 02:15:04.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.619" endtime="20170916 02:15:04.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.726">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:04.726">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.620" endtime="20170916 02:15:04.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.727" endtime="20170916 02:15:04.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:04.727">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:04.727" endtime="20170916 02:15:04.727"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:04.728">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.353" endtime="20170916 02:15:04.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.728" endtime="20170916 02:15:04.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.729">To JSON using : content={
  "data": [
    "_PID=1829"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:04.729">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:04.729">${content} = {u'data': [u'_PID=1829'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:04.729" endtime="20170916 02:15:04.729"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:04.729">${esel_data} = [u'_PID=1829']</msg>
<status status="PASS" starttime="20170916 02:15:04.353" endtime="20170916 02:15:04.729"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.730">Length is 1</msg>
<msg level="INFO" timestamp="20170916 02:15:04.730">${length} = 1</msg>
<status status="PASS" starttime="20170916 02:15:04.730" endtime="20170916 02:15:04.730"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.730" endtime="20170916 02:15:04.731"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.731">${index} = None</msg>
<msg level="FAIL" timestamp="20170916 02:15:04.731">IndexError: list index out of range</msg>
<status status="FAIL" starttime="20170916 02:15:04.731" endtime="20170916 02:15:04.732"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:15:04.732">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" starttime="20170916 02:15:04.732" endtime="20170916 02:15:04.732"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.733" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:04.733" endtime="20170916 02:15:04.734"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.732" endtime="20170916 02:15:04.734"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:04.352" endtime="20170916 02:15:04.734"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:04.734" endtime="20170916 02:15:04.735"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:04.738">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:04.738" endtime="20170916 02:15:04.739"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.739">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:04.739" endtime="20170916 02:15:04.739"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.740">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:04.739" endtime="20170916 02:15:04.740"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:04.741">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:04.740" endtime="20170916 02:15:04.741"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.005">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:04.741" endtime="20170916 02:15:05.005"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.006">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:05.006">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.741" endtime="20170916 02:15:05.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.006">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.006" endtime="20170916 02:15:05.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.007" endtime="20170916 02:15:05.007"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.737" endtime="20170916 02:15:05.007"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.737" endtime="20170916 02:15:05.007"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.736" endtime="20170916 02:15:05.007"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.008">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status status="PASS" starttime="20170916 02:15:05.008" endtime="20170916 02:15:05.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.008" endtime="20170916 02:15:05.009"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.093">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:05.093">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.009" endtime="20170916 02:15:05.093"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.094" endtime="20170916 02:15:05.094"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:05.095">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:05.094" endtime="20170916 02:15:05.095"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.095">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:04.735" endtime="20170916 02:15:05.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.095" endtime="20170916 02:15:05.096"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.096">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 cd e5 00 00 00 0a 1c 37 33 87 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 00 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 0c 0d 8a b2 03 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8a c5 0e 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8a cf e8 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8a f4 f2 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8a ff 8b 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 12 11 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 1c 81 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 2e e8 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 39 75 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 4c 59 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 56 af 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 0c 0d 8b 68 90 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 0c 0d 8b 73 3c 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 54 2e 0a 48 a8 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 54 2e a1 38 23 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 54 30 50 b8 ca 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
    "_PID=1249"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:05.096">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:05.097">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 cd e5 00 00 00 0a 1c 37 33 ...</msg>
<status status="PASS" starttime="20170916 02:15:05.096" endtime="20170916 02:15:05.097"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.097">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 cd e5 00 00 00 0a 1c 37 33 87 42 00 0...</msg>
<status status="PASS" starttime="20170916 02:15:04.735" endtime="20170916 02:15:05.097"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.097">Length is 3</msg>
<msg level="INFO" timestamp="20170916 02:15:05.097">${length} = 3</msg>
<status status="PASS" starttime="20170916 02:15:05.097" endtime="20170916 02:15:05.098"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.098" endtime="20170916 02:15:05.098"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.099">${index} = 1</msg>
<status status="PASS" starttime="20170916 02:15:05.099" endtime="20170916 02:15:05.099"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.102" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:05.101" endtime="20170916 02:15:05.102"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.099" endtime="20170916 02:15:05.102"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.103" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:05.103" endtime="20170916 02:15:05.103"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.102" endtime="20170916 02:15:05.103"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:04.734" endtime="20170916 02:15:05.103"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5/callout">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.104">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170916 02:15:05.104" endtime="20170916 02:15:05.104"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.103" endtime="20170916 02:15:05.104"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.105" endtime="20170916 02:15:05.105"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.109">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:05.109" endtime="20170916 02:15:05.109"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:05.109" endtime="20170916 02:15:05.110"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.110">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:05.110" endtime="20170916 02:15:05.111"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.111">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:05.111" endtime="20170916 02:15:05.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.301">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:05.112" endtime="20170916 02:15:05.301"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.302">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:05.302">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.111" endtime="20170916 02:15:05.302"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.303">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.302" endtime="20170916 02:15:05.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.303" endtime="20170916 02:15:05.303"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.108" endtime="20170916 02:15:05.304"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.108" endtime="20170916 02:15:05.304"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.106" endtime="20170916 02:15:05.304"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.304">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status status="PASS" starttime="20170916 02:15:05.304" endtime="20170916 02:15:05.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.305" endtime="20170916 02:15:05.305"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.390">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:05.390">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.306" endtime="20170916 02:15:05.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.390" endtime="20170916 02:15:05.391"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:05.391">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:05.391" endtime="20170916 02:15:05.391"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.391">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.106" endtime="20170916 02:15:05.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.392" endtime="20170916 02:15:05.392"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.393">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 e3 6f 00 00 00 0a 1d f2 29 b8 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0f 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 0e 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 0e 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
    "_PID=1249"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:05.393">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:05.393">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 e3 6f 00 00 00 0a 1d f2 29 ...</msg>
<status status="PASS" starttime="20170916 02:15:05.392" endtime="20170916 02:15:05.393"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.393">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 0a 1c 36 e3 6f 00 00 00 0a 1d f2 29 b8 42 00 0...</msg>
<status status="PASS" starttime="20170916 02:15:05.105" endtime="20170916 02:15:05.393"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.394">Length is 3</msg>
<msg level="INFO" timestamp="20170916 02:15:05.394">${length} = 3</msg>
<status status="PASS" starttime="20170916 02:15:05.394" endtime="20170916 02:15:05.394"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.394" endtime="20170916 02:15:05.394"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.395">${index} = 1</msg>
<status status="PASS" starttime="20170916 02:15:05.395" endtime="20170916 02:15:05.395"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.397" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:05.396" endtime="20170916 02:15:05.397"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.395" endtime="20170916 02:15:05.397"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.398" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:05.397" endtime="20170916 02:15:05.398"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.397" endtime="20170916 02:15:05.398"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.104" endtime="20170916 02:15:05.398"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6/callout">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.399">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170916 02:15:05.399" endtime="20170916 02:15:05.399"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.399" endtime="20170916 02:15:05.399"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/7">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.400" endtime="20170916 02:15:05.401"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.406">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:05.405" endtime="20170916 02:15:05.406"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.407">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:05.406" endtime="20170916 02:15:05.407"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.408">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:05.407" endtime="20170916 02:15:05.408"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.409">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:05.408" endtime="20170916 02:15:05.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:05.410" endtime="20170916 02:15:05.622"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.623">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:05.623">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.409" endtime="20170916 02:15:05.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.623">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.623" endtime="20170916 02:15:05.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.624" endtime="20170916 02:15:05.624"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.404" endtime="20170916 02:15:05.624"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.404" endtime="20170916 02:15:05.624"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.403" endtime="20170916 02:15:05.625"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.625">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status status="PASS" starttime="20170916 02:15:05.625" endtime="20170916 02:15:05.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.625" endtime="20170916 02:15:05.626"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.741">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:05.741">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.626" endtime="20170916 02:15:05.741"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.742" endtime="20170916 02:15:05.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:05.743">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:05.742" endtime="20170916 02:15:05.743"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.743">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.402" endtime="20170916 02:15:05.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.743" endtime="20170916 02:15:05.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.744">To JSON using : content={
  "data": [
    "_PID=2397"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:05.744">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:05.744">${content} = {u'data': [u'_PID=2397'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:05.744" endtime="20170916 02:15:05.744"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.745">${esel_data} = [u'_PID=2397']</msg>
<status status="PASS" starttime="20170916 02:15:05.401" endtime="20170916 02:15:05.745"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.745">Length is 1</msg>
<msg level="INFO" timestamp="20170916 02:15:05.745">${length} = 1</msg>
<status status="PASS" starttime="20170916 02:15:05.745" endtime="20170916 02:15:05.745"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.746" endtime="20170916 02:15:05.746"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.747">${index} = None</msg>
<msg level="FAIL" timestamp="20170916 02:15:05.747">IndexError: list index out of range</msg>
<status status="FAIL" starttime="20170916 02:15:05.746" endtime="20170916 02:15:05.747"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:15:05.747">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" starttime="20170916 02:15:05.747" endtime="20170916 02:15:05.747"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.749" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:05.748" endtime="20170916 02:15:05.749"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.748" endtime="20170916 02:15:05.749"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:05.400" endtime="20170916 02:15:05.749"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/8">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.749" endtime="20170916 02:15:05.750"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.753">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:05.753" endtime="20170916 02:15:05.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.754">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:05.754" endtime="20170916 02:15:05.754"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.755">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:05.754" endtime="20170916 02:15:05.755"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.755">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:05.755" endtime="20170916 02:15:05.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.996">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:05.756" endtime="20170916 02:15:05.996"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:05.996">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:05.996">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.756" endtime="20170916 02:15:05.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.997">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.996" endtime="20170916 02:15:05.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:05.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.997" endtime="20170916 02:15:05.998"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.752" endtime="20170916 02:15:05.998"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.752" endtime="20170916 02:15:05.998"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.751" endtime="20170916 02:15:05.998"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:05.999">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status status="PASS" starttime="20170916 02:15:05.998" endtime="20170916 02:15:05.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:05.999" endtime="20170916 02:15:05.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.118">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:06.118">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.999" endtime="20170916 02:15:06.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.119" endtime="20170916 02:15:06.119"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:06.119">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:06.119" endtime="20170916 02:15:06.119"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.120">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:05.751" endtime="20170916 02:15:06.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.120" endtime="20170916 02:15:06.121"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.121">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 42 a4 00 00 00 09 4f e2 a7 6e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 10 00 48 00 00 00 e0 00 00 0c 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 43 38 41 31 37 31 30 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 c7 2c 00 00 00 03 55 44 00 28 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 00 80 48 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 04 00 01 15 31 00 01 28 00 42 49 53 54 45 50 53 5f 54 52 41 43 45 00 00 00 00 00 00 03 f8 00 00 00 00 00 00 03 f8 00 00 00 10 00 00 00 00 00 00 00 06 09 c0 53 b3 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 42 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 09 00 00 00 00 00 00 00 42 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 66 39 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 30 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 71 28 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 44 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0a 00 00 00 00 00 00 00 44 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 95 38 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 31 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 a0 27 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 46 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0b 00 00 00 00 00 00 00 46 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 b2 9e 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 32 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 bc ee 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 48 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 00 00 48 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 cf 17 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 33 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 d9 71 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0d 00 00 00 00 00 00 00 4a 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c0 eb a9 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 34 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c0 f6 65 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 4c 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 06 09 c1 08 e3 00 00 00 83 00 1c 43 4f 00 59 6f 7d 00 00 00 5e 50 68 79 73 69 63 61 6c 3a 2f 53 79 73 30 2f 4e 6f 64 65 30 2f 44 49 4d 4d 31 35 00 00 00 00 00 00 00 00 3c 00 00 00 06 09 c1 13 8a 00 00 00 83 00 30 43 4f 33 95 d9 e7 00 00 00 8a 00 00 00 00 00 03 00 4e 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 de ad 00 00 00 4c 00 00 00 4e 04 94 7b 1b 00 00 00 87 00 00 43 4f 86 b4 eb ae 00 00 00 50 00 00 00 1c 00 00 00 4e 05 1f 0e 3f 00 00 00 87 00 00 43 4f 60 73 ad 6d 00 00 00 70 00 00 00 1c 00 00 00 4e 06 dc 55 10 00 00 00 87 00 00 43 4f cc c3 12 2b 00 00 00 a5 00 00 00 1c", 
    "_PID=1249"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:06.122">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:06.122">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 42 a4 00 00 00 09 4f e2 a7 ...</msg>
<status status="PASS" starttime="20170916 02:15:06.121" endtime="20170916 02:15:06.122"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.122">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 42 a4 00 00 00 09 4f e2 a7 6e 42 00 0...</msg>
<status status="PASS" starttime="20170916 02:15:05.750" endtime="20170916 02:15:06.122"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.123">Length is 3</msg>
<msg level="INFO" timestamp="20170916 02:15:06.123">${length} = 3</msg>
<status status="PASS" starttime="20170916 02:15:06.122" endtime="20170916 02:15:06.123"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.123" endtime="20170916 02:15:06.123"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.124">${index} = 1</msg>
<status status="PASS" starttime="20170916 02:15:06.124" endtime="20170916 02:15:06.124"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.125" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:06.125" endtime="20170916 02:15:06.125"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.124" endtime="20170916 02:15:06.126"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.127" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:06.126" endtime="20170916 02:15:06.127"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.126" endtime="20170916 02:15:06.127"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:05.749" endtime="20170916 02:15:06.127"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/8/callout">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.128">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170916 02:15:06.127" endtime="20170916 02:15:06.128"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.127" endtime="20170916 02:15:06.128"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/9">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.128" endtime="20170916 02:15:06.129"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.132">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:06.132" endtime="20170916 02:15:06.133"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.133">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:06.133" endtime="20170916 02:15:06.133"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.134">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:06.134" endtime="20170916 02:15:06.134"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.135">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:06.134" endtime="20170916 02:15:06.135"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.353">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:06.135" endtime="20170916 02:15:06.353"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.353">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:06.353">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.135" endtime="20170916 02:15:06.353"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.354">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.354" endtime="20170916 02:15:06.354"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.354" endtime="20170916 02:15:06.355"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.131" endtime="20170916 02:15:06.355"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.131" endtime="20170916 02:15:06.355"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.130" endtime="20170916 02:15:06.355"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.356">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status status="PASS" starttime="20170916 02:15:06.355" endtime="20170916 02:15:06.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.356" endtime="20170916 02:15:06.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.440">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:06.440">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.356" endtime="20170916 02:15:06.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.440" endtime="20170916 02:15:06.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:06.441">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:06.441" endtime="20170916 02:15:06.441"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.442">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.129" endtime="20170916 02:15:06.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.442">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.442" endtime="20170916 02:15:06.442"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.443">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 58 a6 00 00 00 09 51 1b 9a 83 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 17 10 00 00 00 01 00 00 06 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 03 55 44 00 10 01 03 09 00 90 00 00 14 00 00 17 10 55 44 00 34 01 01 01 00 68 6f 73 74 5f 67 61 72 64 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 05 08 44 00 00 00 00 00 04 c7 2c 00 00 00 00 40 1c f7 a0 00 00 00 00 40 00 7d 20 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 63 36 38 62 65 39 37 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00", 
    "_PID=1249"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:06.443">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:06.443">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 58 a6 00 00 00 09 51 1b 9a ...</msg>
<status status="PASS" starttime="20170916 02:15:06.442" endtime="20170916 02:15:06.443"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.443">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 09 4f e2 58 a6 00 00 00 09 51 1b 9a 83 42 00 0...</msg>
<status status="PASS" starttime="20170916 02:15:06.129" endtime="20170916 02:15:06.443"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.444">Length is 3</msg>
<msg level="INFO" timestamp="20170916 02:15:06.444">${length} = 3</msg>
<status status="PASS" starttime="20170916 02:15:06.444" endtime="20170916 02:15:06.444"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.444" endtime="20170916 02:15:06.445"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.445">${index} = 1</msg>
<status status="PASS" starttime="20170916 02:15:06.445" endtime="20170916 02:15:06.445"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.447" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:06.446" endtime="20170916 02:15:06.447"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.445" endtime="20170916 02:15:06.447"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.448" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel"&gt;/tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/20170916021438387901_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:06.447" endtime="20170916 02:15:06.448"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.447" endtime="20170916 02:15:06.448"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.128" endtime="20170916 02:15:06.448"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/9/callout">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.449">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170916 02:15:06.448" endtime="20170916 02:15:06.449"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.448" endtime="20170916 02:15:06.449"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:03.314" endtime="20170916 02:15:06.449"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.454">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170916 02:15:06.458">${out} = </msg>
<status status="PASS" starttime="20170916 02:15:06.449" endtime="20170916 02:15:06.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:15:06.463">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20170916 02:15:06.462" endtime="20170916 02:15:06.463"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.463">${status} = False</msg>
<status status="PASS" starttime="20170916 02:15:06.461" endtime="20170916 02:15:06.463"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.464">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170916 02:15:06.463" endtime="20170916 02:15:06.464"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:02.757" endtime="20170916 02:15:06.465"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:02.706" endtime="20170916 02:15:06.465"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:02.704" endtime="20170916 02:15:06.465"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:02.704" endtime="20170916 02:15:06.465"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.468" endtime="20170916 02:15:06.468"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.469">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:06.469">${ret_values} = None</msg>
<status status="PASS" starttime="20170916 02:15:06.467" endtime="20170916 02:15:06.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.469" endtime="20170916 02:15:06.470"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.522" endtime="20170916 02:15:06.526"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.526" html="yes">File '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/236/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20170916 02:15:06.526" endtime="20170916 02:15:06.526"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.522" endtime="20170916 02:15:06.526"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.470" endtime="20170916 02:15:06.526"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.466" endtime="20170916 02:15:06.527"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.466" endtime="20170916 02:15:06.527"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.713" endtime="20170916 02:15:06.527"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.710" endtime="20170916 02:15:06.527"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.710" endtime="20170916 02:15:06.527"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.710" endtime="20170916 02:15:06.528"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20170916 02:15:06.542" endtime="20170916 02:15:06.542"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.528" endtime="20170916 02:15:06.542"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:38.709" endtime="20170916 02:15:06.542"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:35.273" endtime="20170916 02:15:06.543"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:35.272" endtime="20170916 02:15:06.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.550">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:06.549" endtime="20170916 02:15:06.556"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.556">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:06.556" endtime="20170916 02:15:06.556"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.557">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:06.557" endtime="20170916 02:15:06.557"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.558">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:06.557" endtime="20170916 02:15:06.558"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.788">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:06.558" endtime="20170916 02:15:06.788"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.788">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:06.788">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.558" endtime="20170916 02:15:06.788"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.789">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.789" endtime="20170916 02:15:06.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.790">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.789" endtime="20170916 02:15:06.790"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.549" endtime="20170916 02:15:06.790"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.547" endtime="20170916 02:15:06.790"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.547" endtime="20170916 02:15:06.790"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.791">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:15:06.790" endtime="20170916 02:15:06.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.793">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:06.792" endtime="20170916 02:15:06.793"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.794">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:06.794" endtime="20170916 02:15:06.794"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.793" endtime="20170916 02:15:06.794"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.791" endtime="20170916 02:15:06.795"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.791" endtime="20170916 02:15:06.795"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.894">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:06.894">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.795" endtime="20170916 02:15:06.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.896">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:06.895" endtime="20170916 02:15:06.896"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.897">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:06.896" endtime="20170916 02:15:06.897"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.896" endtime="20170916 02:15:06.897"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.895" endtime="20170916 02:15:06.897"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.894" endtime="20170916 02:15:06.897"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:06.897">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:06.897" endtime="20170916 02:15:06.898"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.898">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.546" endtime="20170916 02:15:06.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.898" endtime="20170916 02:15:06.898"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.899">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:06.899">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:06.899">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:06.899" endtime="20170916 02:15:06.899"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.899">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:15:06.545" endtime="20170916 02:15:06.899"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.900">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:15:06.545" endtime="20170916 02:15:06.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:06.901" endtime="20170916 02:15:06.901"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.901">${status} = True</msg>
<status status="PASS" starttime="20170916 02:15:06.900" endtime="20170916 02:15:06.901"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.544" endtime="20170916 02:15:06.901"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:06.901">${resp} = True</msg>
<status status="PASS" starttime="20170916 02:15:06.544" endtime="20170916 02:15:06.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.904">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170916 02:15:06.903" endtime="20170916 02:15:06.904"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.905">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170916 02:15:06.905" endtime="20170916 02:15:06.905"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:06.908">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:06.908" endtime="20170916 02:15:06.908"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.909">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:06.909" endtime="20170916 02:15:06.909"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.910">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:06.909" endtime="20170916 02:15:06.910"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:06.910">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:06.910" endtime="20170916 02:15:06.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:07.123">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:06.911" endtime="20170916 02:15:07.123"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:07.123">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:07.123">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.911" endtime="20170916 02:15:07.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:07.124">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:07.124" endtime="20170916 02:15:07.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:07.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:07.125" endtime="20170916 02:15:07.125"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.907" endtime="20170916 02:15:07.125"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.906" endtime="20170916 02:15:07.125"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.906" endtime="20170916 02:15:07.125"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:07.126">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170916 02:15:07.126" endtime="20170916 02:15:07.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:07.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:07.126" endtime="20170916 02:15:07.127"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:07.127" endtime="20170916 02:15:07.127"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:07.129">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status status="PASS" starttime="20170916 02:15:07.128" endtime="20170916 02:15:07.129"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:07.130">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170916 02:15:07.129" endtime="20170916 02:15:07.130"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:07.129" endtime="20170916 02:15:07.130"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:07.127" endtime="20170916 02:15:07.130"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:07.494">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170916 02:15:07.494">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:07.130" endtime="20170916 02:15:07.494"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:07.495">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:07.495" endtime="20170916 02:15:07.495"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:07.509">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:07.509" endtime="20170916 02:15:07.510"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:07.496" endtime="20170916 02:15:07.510"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:07.494" endtime="20170916 02:15:07.510"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:07.510">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:07.510" endtime="20170916 02:15:07.510"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:07.511">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:06.905" endtime="20170916 02:15:07.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:07.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:07.511" endtime="20170916 02:15:07.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:07.512">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:07.512">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:07.512">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:07.512" endtime="20170916 02:15:07.512"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.904" endtime="20170916 02:15:07.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:07.512" endtime="20170916 02:15:07.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:07.518">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:07.518" endtime="20170916 02:15:07.519"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:07.520">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:07.519" endtime="20170916 02:15:07.520"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:07.520">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:07.520" endtime="20170916 02:15:07.520"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:07.521">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:07.521" endtime="20170916 02:15:07.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:09.365">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:07.522" endtime="20170916 02:15:09.366"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:09.366">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:09.366">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:07.521" endtime="20170916 02:15:09.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:09.367">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:09.366" endtime="20170916 02:15:09.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:09.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:09.367" endtime="20170916 02:15:09.367"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:07.517" endtime="20170916 02:15:09.368"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:07.517" endtime="20170916 02:15:09.368"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:07.516" endtime="20170916 02:15:09.368"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:09.368">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:15:09.368" endtime="20170916 02:15:09.368"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:09.371">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:09.370" endtime="20170916 02:15:09.371"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:09.371">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:09.371" endtime="20170916 02:15:09.372"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:09.371" endtime="20170916 02:15:09.372"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:09.369" endtime="20170916 02:15:09.372"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:09.369" endtime="20170916 02:15:09.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:11.140">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:11.141">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:09.372" endtime="20170916 02:15:11.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:11.143">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:11.142" endtime="20170916 02:15:11.143"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:11.143">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:11.143" endtime="20170916 02:15:11.144"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:11.143" endtime="20170916 02:15:11.144"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:11.141" endtime="20170916 02:15:11.144"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:11.141" endtime="20170916 02:15:11.144"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:11.144">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:11.144" endtime="20170916 02:15:11.144"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:11.145">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:07.516" endtime="20170916 02:15:11.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:11.145">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:11.145" endtime="20170916 02:15:11.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:11.146">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:11.146">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:11.146">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:11.146" endtime="20170916 02:15:11.146"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:11.146">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170916 02:15:07.515" endtime="20170916 02:15:11.146"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:11.147">${power_state} = On</msg>
<status status="PASS" starttime="20170916 02:15:07.515" endtime="20170916 02:15:11.147"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:15:11.147">Off != On</msg>
<status status="FAIL" starttime="20170916 02:15:11.147" endtime="20170916 02:15:11.147"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:07.514" endtime="20170916 02:15:11.148"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:11.152">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:11.152" endtime="20170916 02:15:11.153"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:11.153">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:11.153" endtime="20170916 02:15:11.153"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:11.154">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:11.153" endtime="20170916 02:15:11.154"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:11.154">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:11.154" endtime="20170916 02:15:11.154"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:11.608">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:11.155" endtime="20170916 02:15:11.609"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:11.609">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:11.609">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:11.155" endtime="20170916 02:15:11.609"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:11.610">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:11.609" endtime="20170916 02:15:11.610"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:11.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:11.610" endtime="20170916 02:15:11.610"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:11.151" endtime="20170916 02:15:11.611"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:11.151" endtime="20170916 02:15:11.611"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:11.150" endtime="20170916 02:15:11.611"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:11.611">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:15:11.611" endtime="20170916 02:15:11.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:11.614">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:11.613" endtime="20170916 02:15:11.614"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:11.615">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:11.614" endtime="20170916 02:15:11.615"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:11.614" endtime="20170916 02:15:11.615"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:11.612" endtime="20170916 02:15:11.615"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:11.612" endtime="20170916 02:15:11.615"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:16.696">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:16.697">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:11.615" endtime="20170916 02:15:16.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:16.699">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:16.699" endtime="20170916 02:15:16.699"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:16.700">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:16.700" endtime="20170916 02:15:16.701"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:16.699" endtime="20170916 02:15:16.701"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:16.698" endtime="20170916 02:15:16.701"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:16.697" endtime="20170916 02:15:16.701"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:16.701">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:16.701" endtime="20170916 02:15:16.701"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:16.702">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:11.149" endtime="20170916 02:15:16.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:16.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:16.702" endtime="20170916 02:15:16.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:16.703">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:16.703">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:16.703">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:16.703" endtime="20170916 02:15:16.703"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:16.703">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170916 02:15:11.148" endtime="20170916 02:15:16.703"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:16.704">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170916 02:15:11.148" endtime="20170916 02:15:16.704"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170916 02:15:16.704">Off != Quiesced</msg>
<status status="FAIL" starttime="20170916 02:15:16.704" endtime="20170916 02:15:16.704"></status>
</kw>
<status status="FAIL" starttime="20170916 02:15:07.514" endtime="20170916 02:15:16.705"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:26.710">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:26.710" endtime="20170916 02:15:26.710"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.711">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:26.711" endtime="20170916 02:15:26.711"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.712">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:26.711" endtime="20170916 02:15:26.712"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.713">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:26.712" endtime="20170916 02:15:26.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:26.900">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:26.713" endtime="20170916 02:15:26.900"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:26.900">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:26.900">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:26.713" endtime="20170916 02:15:26.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:26.901">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:26.901" endtime="20170916 02:15:26.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:26.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:26.902" endtime="20170916 02:15:26.903"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.709" endtime="20170916 02:15:26.903"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.709" endtime="20170916 02:15:26.903"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.708" endtime="20170916 02:15:26.903"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.904">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170916 02:15:26.903" endtime="20170916 02:15:26.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.907">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:26.906" endtime="20170916 02:15:26.907"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:26.909">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:26.908" endtime="20170916 02:15:26.909"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.907" endtime="20170916 02:15:26.909"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.905" endtime="20170916 02:15:26.909"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.904" endtime="20170916 02:15:26.909"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.972">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:26.972">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:26.909" endtime="20170916 02:15:26.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.974">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:26.974" endtime="20170916 02:15:26.974"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:26.975">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:26.975" endtime="20170916 02:15:26.975"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.974" endtime="20170916 02:15:26.975"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.973" endtime="20170916 02:15:26.975"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.973" endtime="20170916 02:15:26.975"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:26.976">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:26.976" endtime="20170916 02:15:26.976"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:26.976">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:26.707" endtime="20170916 02:15:26.976"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:26.977">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:26.977" endtime="20170916 02:15:26.977"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.978">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:26.978">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:26.978">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:26.977" endtime="20170916 02:15:26.978"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:26.978">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170916 02:15:26.707" endtime="20170916 02:15:26.978"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:26.978">${power_state} = Off</msg>
<status status="PASS" starttime="20170916 02:15:26.706" endtime="20170916 02:15:26.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:26.979" endtime="20170916 02:15:26.979"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.706" endtime="20170916 02:15:26.979"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:26.983">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170916 02:15:26.982" endtime="20170916 02:15:26.984"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.984">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170916 02:15:26.984" endtime="20170916 02:15:26.984"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.985">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170916 02:15:26.984" endtime="20170916 02:15:26.985"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:26.985">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170916 02:15:26.985" endtime="20170916 02:15:26.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.198">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170916 02:15:26.986" endtime="20170916 02:15:27.198"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.198">${status} = PASS</msg>
<msg level="INFO" timestamp="20170916 02:15:27.198">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:26.986" endtime="20170916 02:15:27.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.199">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:27.198" endtime="20170916 02:15:27.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:27.199" endtime="20170916 02:15:27.200"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.982" endtime="20170916 02:15:27.200"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.981" endtime="20170916 02:15:27.200"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.981" endtime="20170916 02:15:27.200"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.200">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170916 02:15:27.200" endtime="20170916 02:15:27.200"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.203">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:27.202" endtime="20170916 02:15:27.203"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.204">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170916 02:15:27.204" endtime="20170916 02:15:27.204"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.203" endtime="20170916 02:15:27.204"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.201" endtime="20170916 02:15:27.204"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.201" endtime="20170916 02:15:27.204"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.317">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170916 02:15:27.317">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:27.204" endtime="20170916 02:15:27.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.319">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:27.319" endtime="20170916 02:15:27.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.320">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170916 02:15:27.320" endtime="20170916 02:15:27.320"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.319" endtime="20170916 02:15:27.320"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.318" endtime="20170916 02:15:27.321"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.318" endtime="20170916 02:15:27.321"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170916 02:15:27.321">Delete All Sessions</msg>
<status status="PASS" starttime="20170916 02:15:27.321" endtime="20170916 02:15:27.321"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.321">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170916 02:15:26.980" endtime="20170916 02:15:27.322"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.322">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170916 02:15:27.322" endtime="20170916 02:15:27.323"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.323">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170916 02:15:27.323">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170916 02:15:27.323">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170916 02:15:27.323" endtime="20170916 02:15:27.323"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.324">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170916 02:15:26.980" endtime="20170916 02:15:27.324"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.324">${host_state} = Off</msg>
<status status="PASS" starttime="20170916 02:15:26.979" endtime="20170916 02:15:27.324"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.324" endtime="20170916 02:15:27.324"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:26.705" endtime="20170916 02:15:27.325"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:07.514" endtime="20170916 02:15:27.325"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:07.513" endtime="20170916 02:15:27.325"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.325">${status} = True</msg>
<status status="PASS" starttime="20170916 02:15:07.513" endtime="20170916 02:15:27.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.325" endtime="20170916 02:15:27.325"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.902" endtime="20170916 02:15:27.326"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.326">HOST is recovered from quiesced state</msg>
<status status="PASS" starttime="20170916 02:15:27.326" endtime="20170916 02:15:27.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.902" endtime="20170916 02:15:27.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.902" endtime="20170916 02:15:27.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.544" endtime="20170916 02:15:27.326"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:06.543" endtime="20170916 02:15:27.326"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.338">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170916 02:15:27.327" endtime="20170916 02:15:27.338"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.339">${FFDC_DIR_PATH} = /tmp/fspcibld/236/obmc-robot/logs/20170916021438387901_TestsTestBasicPoweron/20170916021438387901_PowerOnTest/</msg>
<status status="PASS" starttime="20170916 02:15:27.339" endtime="20170916 02:15:27.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.339" endtime="20170916 02:15:27.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.340" endtime="20170916 02:15:27.340"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.341" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs"&gt;/tmp/fspcibld/236/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170916 02:15:27.341" endtime="20170916 02:15:27.341"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.342" html="yes">File '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170916 02:15:27.342" endtime="20170916 02:15:27.342"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.342">${exist} = True</msg>
<status status="PASS" starttime="20170916 02:15:27.341" endtime="20170916 02:15:27.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.343" endtime="20170916 02:15:27.343"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.343" endtime="20170916 02:15:27.344"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.345">${cur_time} = 2017-09-16 02:15:27:344440</msg>
<status status="PASS" starttime="20170916 02:15:27.344" endtime="20170916 02:15:27.345"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.345">${cur_time} = 20170916021527344440</msg>
<status status="PASS" starttime="20170916 02:15:27.345" endtime="20170916 02:15:27.345"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.346">${cur_time} = 20170916021527344440</msg>
<status status="PASS" starttime="20170916 02:15:27.344" endtime="20170916 02:15:27.346"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.347" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/236/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:27.346" endtime="20170916 02:15:27.347"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.327" endtime="20170916 02:15:27.347"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.960" endtime="20170916 02:15:27.347"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.349">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170916 02:15:27.349" endtime="20170916 02:15:27.349"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.350">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170916 02:15:27.350" endtime="20170916 02:15:27.350"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.351">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170916 02:15:27.348" endtime="20170916 02:15:27.351"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.353">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170916 02:15:27.352" endtime="20170916 02:15:27.353"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.353" endtime="20170916 02:15:27.353"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.370">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170916 02:15:27.390">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:15:27.391">${output} = /tmp/fspcibld/236/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170916 02:15:27.354" endtime="20170916 02:15:27.391"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.403" endtime="20170916 02:15:27.406"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.406" endtime="20170916 02:15:27.409"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.410">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:15:27.409" endtime="20170916 02:15:27.410"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.411">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:15:27.352" endtime="20170916 02:15:27.411"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.412">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169</msg>
<status status="PASS" starttime="20170916 02:15:27.411" endtime="20170916 02:15:27.412"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.412">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170916 02:15:27.412" endtime="20170916 02:15:27.412"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.413" endtime="20170916 02:15:27.413"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.422">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170916 02:15:27.428">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:15:27.428">${os_con_pid} = 182</msg>
<status status="PASS" starttime="20170916 02:15:27.413" endtime="20170916 02:15:27.428"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.430" endtime="20170916 02:15:27.431"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.432">${os_con_pid} = 182</msg>
<status status="PASS" starttime="20170916 02:15:27.351" endtime="20170916 02:15:27.432"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.432">${cmd_buf} = kill -9 182</msg>
<status status="PASS" starttime="20170916 02:15:27.432" endtime="20170916 02:15:27.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.434" endtime="20170916 02:15:27.434"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.433" endtime="20170916 02:15:27.434"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.439">Running command 'kill -9 182 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20170916 02:15:27.435" endtime="20170916 02:15:27.446"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.451">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:15:27.452">${output} = </msg>
<status status="PASS" starttime="20170916 02:15:27.434" endtime="20170916 02:15:27.452"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.469" endtime="20170916 02:15:27.469"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.464" endtime="20170916 02:15:27.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.479" html="yes">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/236/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/236/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170916 02:15:27.472" endtime="20170916 02:15:27.479"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.471" endtime="20170916 02:15:27.480"></status>
</kw>
<status status="PASS" starttime="20170916 02:15:27.470" endtime="20170916 02:15:27.480"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.481">${output} = </msg>
<status status="PASS" starttime="20170916 02:15:27.481" endtime="20170916 02:15:27.481"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170916 02:15:27.485">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170916 02:15:27.482" endtime="20170916 02:15:27.485"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170916 02:15:27.486" endtime="20170916 02:15:27.535"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.536">${rc} = 0</msg>
<msg level="INFO" timestamp="20170916 02:15:27.537">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status status="PASS" starttime="20170916 02:15:27.486" endtime="20170916 02:15:27.537"></status>
</kw>
<msg level="INFO" timestamp="20170916 02:15:27.538">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status status="PASS" starttime="20170916 02:15:27.348" endtime="20170916 02:15:27.538"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170916 02:15:27.541">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.89634|secure|Booting in non-secure mode.
  3.89635|secure|SecureROM valid - enabling functionality
  6.87604|ISTEP  6. 5 - host_init_fsi
  7.05443|ISTEP  6. 6 - host_set_ipl_parms
  7.07728|ISTEP  6. 7 - host_discover_targets
 12.18082|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 12.18082|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 12.22791|ISTEP  6. 8 - host_update_master_tpm
 84.77052|SECURE|Security Access Bit&gt; 0x0000000000000000
 84.77052|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 84.77091|ISTEP  6. 9 - host_gard
 84.83300|================================================
 84.83635|Error reported by istep (0x1700) PLID 0x9000000E
 84.84057|  host_gard: no masterCore found
 84.84057|  ModuleId   0x0c ISTEP::MOD_HOST_GARD
 84.84058|  ReasonCode 0x1710 ISTEP::RC_MASTER_CORE_NULL
 84.84395|  UserData1  0 : 0x0000000000000000
 84.84395|  UserData2  0 : 0x0000000000000000
 84.84396|------------------------------------------------
 84.84396|  Callout type             : Procedure Callout
 84.84397|  Procedure                : EPUB_PRC_HB_CODE
 84.84397|  Priority                 : SRCI_PRIORITY_HIGH
 84.84398|------------------------------------------------
 84.84398|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 84.84398|================================================
 84.86733|System shutting down with error status 0x9000000E
 84.88096|================================================
 84.88097|Error reported by istep (0x1700) PLID 0x9000000E
 84.88432|  IStep failed, see other log(s) with the same PLID for reason.
 84.88433|  ModuleId   0x01 MOD_REPORTING_ERROR
 84.88433|  ReasonCode 0x1703 RC_FAILURE
 84.88433|  UserData1  eid of first error : 0x9000000e00001710
 84.88434|  UserData2  Reason code of first error : 0x0000000100000609
 84.88434|------------------------------------------------
 84.88435|  host_gard
 84.88435|------------------------------------------------
 84.88436|  Callout type             : Procedure Callout
 84.88436|  Procedure                : EPUB_PRC_HB_CODE
 84.88436|  Priority                 : SRCI_PRIORITY_LOW
 84.88437|------------------------------------------------
 84.88437|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 84.88438|================================================


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.89465|secure|Booting in non-secure mode.
  3.89466|secure|SecureROM valid - enabling functionality
  5.59166|ISTEP  6. 5 - host_init_fsi
  5.70913|ISTEP  6. 6 - host_set_ipl_parms
  5.72047|ISTEP  6. 7 - host_discover_targets
  6.14358|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  6.14358|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.16421|ISTEP  6. 8 - host_update_master_tpm
 78.07531|SECURE|Security Access Bit&gt; 0x0000000000000000
 78.07531|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 78.07541|ISTEP  6. 9 - host_gard
 78.13279|================================================
 78.13611|Error reported by istep (0x1700) PLID 0x90000014
 78.13948|  host_gard: no masterCore found
 78.13948|  ModuleId   0x0c ISTEP::MOD_HOST_GARD
 78.13949|  ReasonCode 0x1710 ISTEP::RC_MASTER_CORE_NULL
 78.14287|  UserData1  0 : 0x0000000000000000
 78.14287|  UserData2  0 : 0x0000000000000000
 78.14287|------------------------------------------------
 78.14288|  Callout type             : Procedure Callout
 78.14288|  Procedure                : EPUB_PRC_HB_CODE
 78.14289|  Priority                 : SRCI_PRIORITY_HIGH
 78.14289|------------------------------------------------
 78.14290|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 78.14290|================================================
 78.15520|System shutting down with error status 0x90000014
 78.16217|================================================
 78.16218|Error reported by istep (0x1700) PLID 0x90000014
 78.16554|  IStep failed, see other log(s) with the same PLID for reason.
 78.16555|  ModuleId   0x01 MOD_REPORTING_ERROR
 78.16555|  ReasonCode 0x1703 RC_FAILURE
 78.16555|  UserData1  eid of first error : 0x9000001400001710
 78.16556|  UserData2  Reason code of first error : 0x0000000100000609
 78.16556|------------------------------------------------
 78.16557|  host_gard
 78.16557|------------------------------------------------
 78.16558|  Callout type             : Procedure Callout
 78.16558|  Procedure                : EPUB_PRC_HB_CODE
 78.16558|  Priority                 : SRCI_PRIORITY_LOW
 78.16559|------------------------------------------------
 78.16559|  Hostboot Build ID: hostboot-c68be97/hbicore.bin
 78.16560|================================================
</msg>
<status status="PASS" starttime="20170916 02:15:27.540" endtime="20170916 02:15:27.541"></status>
</kw>
<status status="PASS" starttime="20170916 02:14:34.960" endtime="20170916 02:15:27.541"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" starttime="20170916 02:04:18.783" critical="yes" endtime="20170916 02:15:27.541">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20170916 02:04:18.744" endtime="20170916 02:15:27.544"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20170916 02:04:11.166" endtime="20170916 02:15:27.554"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="1">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
