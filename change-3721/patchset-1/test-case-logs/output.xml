<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170417 19:47:37.101">
<suite name="Tests" source="/tmp/root/27468/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170417 19:47:37.479" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170417 19:47:37.479" starttime="20170417 19:47:37.479" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:47:37.479" level="INFO">${has_host} = False</msg>
<status endtime="20170417 19:47:37.479" starttime="20170417 19:47:37.478" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170417 19:47:37.480" starttime="20170417 19:47:37.480" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:37.480" starttime="20170417 19:47:37.480" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170417 19:47:37.482" level="INFO">${port_num} = 22</msg>
<status endtime="20170417 19:47:37.482" starttime="20170417 19:47:37.481" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170417 19:47:37.482" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170417 19:47:37.482" starttime="20170417 19:47:37.482" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170417 19:47:37.483" level="INFO">${https_num} = 443</msg>
<status endtime="20170417 19:47:37.483" starttime="20170417 19:47:37.483" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170417 19:47:37.484" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170417 19:47:37.484" starttime="20170417 19:47:37.483" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:37.484" starttime="20170417 19:47:37.481" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:37.484" starttime="20170417 19:47:37.481" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170417 19:47:37.485" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170417 19:47:37.485" starttime="20170417 19:47:37.484" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:47:37.485" level="INFO">${has_port} = False</msg>
<status endtime="20170417 19:47:37.485" starttime="20170417 19:47:37.484" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170417 19:47:37.486" starttime="20170417 19:47:37.486" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170417 19:47:37.487" starttime="20170417 19:47:37.487" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:37.487" starttime="20170417 19:47:37.486" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:37.487" starttime="20170417 19:47:37.485" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170417 19:47:37.488" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170417 19:47:39.346" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170417 19:47:39.347" starttime="20170417 19:47:37.487" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.347" starttime="20170417 19:47:37.478" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:47:39.348" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170417 19:47:39.415" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:47:39.415" level="INFO">${output} = VERSION_ID="v1.99.4-25-g8f2f0eb"</msg>
<msg timestamp="20170417 19:47:39.415" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:47:39.415" starttime="20170417 19:47:39.348" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170417 19:47:39.415" level="INFO">Length is 0</msg>
<status endtime="20170417 19:47:39.415" starttime="20170417 19:47:39.415" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170417 19:47:39.416" level="INFO">VERSION_ID="v1.99.4-25-g8f2f0eb"</msg>
<status endtime="20170417 19:47:39.416" starttime="20170417 19:47:39.416" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.416" starttime="20170417 19:47:39.347" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.416" starttime="20170417 19:47:39.347" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:47:39.418" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170417 19:47:39.585" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:47:39.585" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg timestamp="20170417 19:47:39.585" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:47:39.585" starttime="20170417 19:47:39.417" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170417 19:47:39.585" level="INFO">Length is 0</msg>
<status endtime="20170417 19:47:39.585" starttime="20170417 19:47:39.585" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:39.586" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status endtime="20170417 19:47:39.586" starttime="20170417 19:47:39.417" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170417 19:47:39.586" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status endtime="20170417 19:47:39.587" starttime="20170417 19:47:39.586" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.587" starttime="20170417 19:47:39.417" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.587" starttime="20170417 19:47:39.416" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:47:39.589" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170417 19:47:39.683" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:47:39.683" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170417 19:47:39.683" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:47:39.684" starttime="20170417 19:47:39.588" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170417 19:47:39.684" level="INFO">Length is 0</msg>
<status endtime="20170417 19:47:39.684" starttime="20170417 19:47:39.684" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170417 19:47:39.684" level="INFO">Length is 11</msg>
<status endtime="20170417 19:47:39.685" starttime="20170417 19:47:39.684" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:39.685" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170417 19:47:39.685" starttime="20170417 19:47:39.588" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170417 19:47:39.685" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170417 19:47:39.685" starttime="20170417 19:47:39.685" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.685" starttime="20170417 19:47:39.588" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.685" starttime="20170417 19:47:39.587" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170417 19:47:39.687" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170417 19:47:39.688" starttime="20170417 19:47:39.687" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:47:39.688" level="INFO">${has_host} = False</msg>
<status endtime="20170417 19:47:39.688" starttime="20170417 19:47:39.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170417 19:47:39.689" starttime="20170417 19:47:39.688" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.689" starttime="20170417 19:47:39.688" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170417 19:47:39.690" level="INFO">${port_num} = 22</msg>
<status endtime="20170417 19:47:39.690" starttime="20170417 19:47:39.690" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170417 19:47:39.691" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170417 19:47:39.691" starttime="20170417 19:47:39.690" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170417 19:47:39.691" level="INFO">${https_num} = 443</msg>
<status endtime="20170417 19:47:39.691" starttime="20170417 19:47:39.691" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170417 19:47:39.692" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170417 19:47:39.692" starttime="20170417 19:47:39.692" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.692" starttime="20170417 19:47:39.690" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.692" starttime="20170417 19:47:39.689" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170417 19:47:39.693" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170417 19:47:39.693" starttime="20170417 19:47:39.693" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:47:39.693" level="INFO">${has_port} = False</msg>
<status endtime="20170417 19:47:39.693" starttime="20170417 19:47:39.693" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170417 19:47:39.695" starttime="20170417 19:47:39.695" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170417 19:47:39.696" starttime="20170417 19:47:39.695" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.696" starttime="20170417 19:47:39.694" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:39.696" starttime="20170417 19:47:39.694" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170417 19:47:39.696" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170417 19:47:41.341" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170417 19:47:41.341" starttime="20170417 19:47:39.696" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.341" starttime="20170417 19:47:39.686" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:47:41.342" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170417 19:47:41.409" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:47:41.409" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170417 19:47:41.409" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:47:41.409" starttime="20170417 19:47:41.342" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170417 19:47:41.410" level="INFO">Length is 0</msg>
<status endtime="20170417 19:47:41.410" starttime="20170417 19:47:41.409" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:41.410" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170417 19:47:41.410" starttime="20170417 19:47:41.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170417 19:47:41.410" starttime="20170417 19:47:41.410" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.411" starttime="20170417 19:47:39.686" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.411" starttime="20170417 19:47:39.686" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.411" starttime="20170417 19:47:37.477" status="PASS"></status>
</kw>
<suite name="Security" source="/tmp/root/27468/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/root/27468/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:47:41.483" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:47:41.483" starttime="20170417 19:47:41.483" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:41.484" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:41.484" starttime="20170417 19:47:41.484" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:47:41.485" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:47:41.485" starttime="20170417 19:47:41.485" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:47:41.486" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:47:41.486" starttime="20170417 19:47:41.485" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:47:41.685" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:47:41.685" starttime="20170417 19:47:41.487" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:41.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:47:41.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:41.686" starttime="20170417 19:47:41.486" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:47:41.686" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:41.686" starttime="20170417 19:47:41.686" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:41.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:41.687" starttime="20170417 19:47:41.687" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.687" starttime="20170417 19:47:41.482" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:47:41.693" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:47:41.694" starttime="20170417 19:47:41.693" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:41.695" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:41.695" starttime="20170417 19:47:41.694" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:47:41.695" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:47:41.696" starttime="20170417 19:47:41.695" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:47:41.696" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:47:41.696" starttime="20170417 19:47:41.696" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:47:41.886" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:47:41.887" starttime="20170417 19:47:41.697" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:41.887" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:47:41.887" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:41.887" starttime="20170417 19:47:41.697" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:47:41.887" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:41.888" starttime="20170417 19:47:41.887" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:41.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:41.888" starttime="20170417 19:47:41.888" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.888" starttime="20170417 19:47:41.692" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:47:41.889" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170417 19:47:41.889" starttime="20170417 19:47:41.889" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:41.891" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:47:41.891" starttime="20170417 19:47:41.890" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:41.892" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:47:41.892" starttime="20170417 19:47:41.892" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.892" starttime="20170417 19:47:41.891" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.893" starttime="20170417 19:47:41.890" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.893" starttime="20170417 19:47:41.889" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:47:41.955" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170417 19:47:41.955" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:41.956" starttime="20170417 19:47:41.893" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:41.957" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:41.957" starttime="20170417 19:47:41.957" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:41.958" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:41.958" starttime="20170417 19:47:41.958" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.958" starttime="20170417 19:47:41.957" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.958" starttime="20170417 19:47:41.956" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.958" starttime="20170417 19:47:41.956" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:41.959" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:41.959" starttime="20170417 19:47:41.691" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:41.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:41.959" starttime="20170417 19:47:41.959" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:47:41.960" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:47:41.960" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:47:41.960" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170417 19:47:41.960" starttime="20170417 19:47:41.960" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:41.960" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170417 19:47:41.960" starttime="20170417 19:47:41.689" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:41.961" level="INFO">${host_state} = Off</msg>
<status endtime="20170417 19:47:41.961" starttime="20170417 19:47:41.688" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170417 19:47:41.962" level="FAIL">Off != Quiesced</msg>
<status endtime="20170417 19:47:41.962" starttime="20170417 19:47:41.961" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:47:41.962" level="INFO">${status} = False</msg>
<status endtime="20170417 19:47:41.962" starttime="20170417 19:47:41.961" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:41.962" level="INFO">${status} = False</msg>
<status endtime="20170417 19:47:41.962" starttime="20170417 19:47:41.688" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170417 19:47:41.963" starttime="20170417 19:47:41.963" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170417 19:47:41.964" starttime="20170417 19:47:41.963" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:47:41.965" level="INFO">Created directory '&lt;a href="file:///tmp/root/27468/obmc-robot/logs"&gt;/tmp/root/27468/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170417 19:47:41.965" starttime="20170417 19:47:41.964" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170417 19:47:41.966" level="FAIL">File '/tmp/root/27468/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170417 19:47:41.966" starttime="20170417 19:47:41.965" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:47:41.966" level="INFO">${exist} = False</msg>
<status endtime="20170417 19:47:41.966" starttime="20170417 19:47:41.965" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:47:41.967" level="INFO">Created file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27468/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:47:41.967" starttime="20170417 19:47:41.967" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.967" starttime="20170417 19:47:41.966" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170417 19:47:41.968" level="INFO">${cur_time} = 2017-04-17 19:47:41:967921</msg>
<status endtime="20170417 19:47:41.968" starttime="20170417 19:47:41.968" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170417 19:47:41.969" level="INFO">${cur_time} = 20170417194741967921</msg>
<status endtime="20170417 19:47:41.969" starttime="20170417 19:47:41.968" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:41.969" level="INFO">${cur_time} = 20170417194741967921</msg>
<status endtime="20170417 19:47:41.969" starttime="20170417 19:47:41.967" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:47:41.970" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27468/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:47:41.970" starttime="20170417 19:47:41.969" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.970" starttime="20170417 19:47:41.964" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:41.970" starttime="20170417 19:47:41.687" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170417 19:47:41.970" starttime="20170417 19:47:41.481" critical="yes" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170417 19:47:41.971" level="INFO">Delete All Sessions</msg>
<status endtime="20170417 19:47:41.971" starttime="20170417 19:47:41.971" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170417 19:47:41.971" starttime="20170417 19:47:41.413" status="PASS"></status>
</suite>
<status endtime="20170417 19:47:41.972" starttime="20170417 19:47:41.411" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/root/27468/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170417 19:47:42.004" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170417 19:47:42.004" starttime="20170417 19:47:42.004" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170417 19:47:42.005" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170417 19:47:42.005" starttime="20170417 19:47:42.004" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:42.005" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170417 19:47:42.005" starttime="20170417 19:47:42.003" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170417 19:47:42.007" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170417 19:47:42.007" starttime="20170417 19:47:42.006" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170417 19:47:42.007" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170417 19:47:42.007" starttime="20170417 19:47:42.007" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:42.008" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170417 19:47:42.008" starttime="20170417 19:47:42.006" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:47:42.008" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170417 19:47:42.008" starttime="20170417 19:47:42.008" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:47:42.019" starttime="20170417 19:47:42.009" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170417 19:47:42.023" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170417 19:47:42.026" level="INFO">${rc} = 0</msg>
<msg timestamp="20170417 19:47:42.026" level="INFO">${output} = /tmp/root/27468/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170417 19:47:42.026" starttime="20170417 19:47:42.019" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170417 19:47:42.036" starttime="20170417 19:47:42.028" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170417 19:47:42.037" starttime="20170417 19:47:42.036" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:47:42.038" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170417 19:47:42.038" starttime="20170417 19:47:42.037" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:42.038" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170417 19:47:42.038" starttime="20170417 19:47:42.008" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:47:42.039" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170417 19:47:42.039" starttime="20170417 19:47:42.038" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:47:42.046" starttime="20170417 19:47:42.039" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170417 19:47:42.049" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170417 19:47:42.066" level="INFO">${rc} = 0</msg>
<msg timestamp="20170417 19:47:42.066" level="INFO">${os_con_pid} = </msg>
<status endtime="20170417 19:47:42.067" starttime="20170417 19:47:42.046" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170417 19:47:42.088" starttime="20170417 19:47:42.075" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:47:42.088" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170417 19:47:42.088" starttime="20170417 19:47:42.088" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:47:42.091" starttime="20170417 19:47:42.090" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170417 19:47:42.091" level="INFO">${rc} = None</msg>
<msg timestamp="20170417 19:47:42.091" level="INFO">${output} = None</msg>
<status endtime="20170417 19:47:42.091" starttime="20170417 19:47:42.091" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170417 19:47:42.092" starttime="20170417 19:47:42.092" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:47:42.093" level="INFO">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170417 19:47:42.093" starttime="20170417 19:47:42.092" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:47:42.100" starttime="20170417 19:47:42.093" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170417 19:47:42.112" level="INFO">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170417 19:47:42.133" level="INFO">${rc} = 1</msg>
<msg timestamp="20170417 19:47:42.133" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170417 19:47:42.134" starttime="20170417 19:47:42.101" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170417 19:47:42.153" starttime="20170417 19:47:42.141" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170417 19:47:42.155" starttime="20170417 19:47:42.154" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:42.156" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170417 19:47:42.156" starttime="20170417 19:47:42.005" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:47:42.158" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170417 19:47:42.158" starttime="20170417 19:47:42.157" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:47:42.159" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170417 19:47:42.159" starttime="20170417 19:47:42.159" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:47:42.166" starttime="20170417 19:47:42.160" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170417 19:47:42.177" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170417 19:47:42.180" level="INFO">${rc} = 0</msg>
<msg timestamp="20170417 19:47:42.180" level="INFO">${output} = /tmp/root/27468/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170417 19:47:42.181" starttime="20170417 19:47:42.166" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170417 19:47:42.190" starttime="20170417 19:47:42.182" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170417 19:47:42.191" starttime="20170417 19:47:42.191" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:47:42.192" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170417 19:47:42.192" starttime="20170417 19:47:42.191" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:42.192" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170417 19:47:42.192" starttime="20170417 19:47:42.159" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:47:42.193" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170417 19:47:42.193" starttime="20170417 19:47:42.192" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:47:42.200" starttime="20170417 19:47:42.193" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170417 19:47:42.210" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170417 19:47:42.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20170417 19:47:42.219" level="INFO">${output} = </msg>
<status endtime="20170417 19:47:42.219" starttime="20170417 19:47:42.201" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170417 19:47:42.222" starttime="20170417 19:47:42.221" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:42.222" starttime="20170417 19:47:42.003" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170417 19:47:42.223" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170417 19:47:42.226" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170417 19:47:42.226" starttime="20170417 19:47:42.225" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:47:42.227" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170417 19:47:42.227" starttime="20170417 19:47:42.227" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:47:42.230" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:47:42.231" starttime="20170417 19:47:42.229" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:42.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:42.232" starttime="20170417 19:47:42.232" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:47:42.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:47:42.233" starttime="20170417 19:47:42.232" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:47:42.233" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:47:42.234" starttime="20170417 19:47:42.233" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:47:42.726" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:47:42.726" starttime="20170417 19:47:42.234" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:42.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:47:42.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:42.726" starttime="20170417 19:47:42.234" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:47:42.727" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:42.727" starttime="20170417 19:47:42.727" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:42.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:42.728" starttime="20170417 19:47:42.727" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:42.728" starttime="20170417 19:47:42.229" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:47:42.729" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170417 19:47:42.729" starttime="20170417 19:47:42.729" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:42.730" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:42.730" starttime="20170417 19:47:42.729" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170417 19:47:42.731" starttime="20170417 19:47:42.730" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:42.733" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170417 19:47:42.733" starttime="20170417 19:47:42.732" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:42.735" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170417 19:47:42.735" starttime="20170417 19:47:42.734" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:42.735" starttime="20170417 19:47:42.734" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:42.735" starttime="20170417 19:47:42.731" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:47:43.208" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170417 19:47:43.208" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:43.208" starttime="20170417 19:47:42.735" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:43.210" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:43.210" starttime="20170417 19:47:43.209" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:43.211" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:43.211" starttime="20170417 19:47:43.210" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:43.211" starttime="20170417 19:47:43.210" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:43.211" starttime="20170417 19:47:43.209" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:43.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:43.211" starttime="20170417 19:47:42.228" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:43.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:43.212" starttime="20170417 19:47:43.211" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170417 19:47:43.212" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:47:43.212" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:47:43.213" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170417 19:47:43.213" starttime="20170417 19:47:43.212" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:43.213" starttime="20170417 19:47:42.226" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170417 19:47:43.213" starttime="20170417 19:47:43.213" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:47:43.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:47:43.217" starttime="20170417 19:47:43.217" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:43.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:43.218" starttime="20170417 19:47:43.218" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:47:43.219" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:47:43.219" starttime="20170417 19:47:43.218" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:47:43.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:47:43.219" starttime="20170417 19:47:43.219" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:47:44.118" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:47:44.118" starttime="20170417 19:47:43.220" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:44.118" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:47:44.118" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:44.118" starttime="20170417 19:47:43.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:47:44.119" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:44.119" starttime="20170417 19:47:44.118" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:44.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:44.120" starttime="20170417 19:47:44.119" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.120" starttime="20170417 19:47:43.216" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:47:44.120" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170417 19:47:44.120" starttime="20170417 19:47:44.120" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:44.122" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:47:44.122" starttime="20170417 19:47:44.122" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:44.123" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:47:44.123" starttime="20170417 19:47:44.123" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.123" starttime="20170417 19:47:44.123" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.124" starttime="20170417 19:47:44.121" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.124" starttime="20170417 19:47:44.121" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:47:44.528" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170417 19:47:44.529" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:44.529" starttime="20170417 19:47:44.124" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:44.531" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:44.531" starttime="20170417 19:47:44.530" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:44.531" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:44.532" starttime="20170417 19:47:44.531" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.532" starttime="20170417 19:47:44.531" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.532" starttime="20170417 19:47:44.529" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.532" starttime="20170417 19:47:44.529" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:44.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:44.532" starttime="20170417 19:47:43.215" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:44.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:44.533" starttime="20170417 19:47:44.532" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:47:44.533" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:47:44.533" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:47:44.533" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170417 19:47:44.533" starttime="20170417 19:47:44.533" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:44.534" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170417 19:47:44.534" starttime="20170417 19:47:43.215" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:44.534" level="INFO">${host_state} = Off</msg>
<status endtime="20170417 19:47:44.534" starttime="20170417 19:47:43.214" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170417 19:47:44.535" starttime="20170417 19:47:44.534" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.535" starttime="20170417 19:47:43.214" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.535" starttime="20170417 19:47:43.213" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:44.535" starttime="20170417 19:47:42.224" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:47:44.539" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:47:44.539" starttime="20170417 19:47:44.538" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:44.540" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:44.540" starttime="20170417 19:47:44.540" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:47:44.541" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:47:44.541" starttime="20170417 19:47:44.541" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:47:44.542" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:47:44.542" starttime="20170417 19:47:44.542" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:47:45.581" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:47:45.581" starttime="20170417 19:47:44.543" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:45.581" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:47:45.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:45.582" starttime="20170417 19:47:44.542" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:47:45.582" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:45.582" starttime="20170417 19:47:45.582" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:45.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:45.583" starttime="20170417 19:47:45.582" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:45.583" starttime="20170417 19:47:44.538" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:47:45.584" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:47:45.584" starttime="20170417 19:47:45.583" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:45.586" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:47:45.586" starttime="20170417 19:47:45.585" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:45.587" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:47:45.587" starttime="20170417 19:47:45.587" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:45.587" starttime="20170417 19:47:45.586" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:45.587" starttime="20170417 19:47:45.584" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:45.587" starttime="20170417 19:47:45.584" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:47:45.851" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:47:45.852" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:45.852" starttime="20170417 19:47:45.588" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:45.853" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:45.853" starttime="20170417 19:47:45.853" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:45.854" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:45.854" starttime="20170417 19:47:45.854" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:45.854" starttime="20170417 19:47:45.853" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:45.855" starttime="20170417 19:47:45.852" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:45.855" starttime="20170417 19:47:45.852" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:45.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:45.855" starttime="20170417 19:47:44.537" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:45.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:45.856" starttime="20170417 19:47:45.855" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:47:45.856" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:47:45.856" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:47:45.856" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:47:45.856" starttime="20170417 19:47:45.856" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:45.857" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:47:45.857" starttime="20170417 19:47:44.536" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:45.857" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:47:45.857" starttime="20170417 19:47:44.536" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20170417 19:47:45.857" starttime="20170417 19:47:45.857" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:45.857" starttime="20170417 19:47:44.536" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:45.858" starttime="20170417 19:47:44.535" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170417 19:47:45.859" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170417 19:47:45.859" starttime="20170417 19:47:45.858" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:47:45.860" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170417 19:47:45.860" starttime="20170417 19:47:45.859" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:47:45.861" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:47:45.862" starttime="20170417 19:47:45.861" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:45.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:45.862" starttime="20170417 19:47:45.862" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:47:45.863" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:47:45.863" starttime="20170417 19:47:45.862" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:47:45.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:47:45.863" starttime="20170417 19:47:45.863" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:47:46.265" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:47:46.265" starttime="20170417 19:47:45.864" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:46.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:47:46.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:46.265" starttime="20170417 19:47:45.864" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:47:46.266" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:46.266" starttime="20170417 19:47:46.265" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:46.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:46.266" starttime="20170417 19:47:46.266" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:46.267" starttime="20170417 19:47:45.860" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:47:46.267" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170417 19:47:46.267" starttime="20170417 19:47:46.267" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:46.268" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:46.268" starttime="20170417 19:47:46.267" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170417 19:47:46.268" starttime="20170417 19:47:46.268" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:46.270" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170417 19:47:46.270" starttime="20170417 19:47:46.269" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:46.271" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170417 19:47:46.271" starttime="20170417 19:47:46.270" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:46.271" starttime="20170417 19:47:46.270" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:46.271" starttime="20170417 19:47:46.268" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:47:46.724" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170417 19:47:46.724" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:46.724" starttime="20170417 19:47:46.271" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:46.725" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:46.725" starttime="20170417 19:47:46.725" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:46.726" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:46.726" starttime="20170417 19:47:46.726" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:46.727" starttime="20170417 19:47:46.726" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:46.727" starttime="20170417 19:47:46.724" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:46.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:46.727" starttime="20170417 19:47:45.860" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:46.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:46.728" starttime="20170417 19:47:46.727" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170417 19:47:46.728" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:47:46.728" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:47:46.728" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170417 19:47:46.728" starttime="20170417 19:47:46.728" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:46.728" starttime="20170417 19:47:45.859" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170417 19:47:46.729" starttime="20170417 19:47:46.729" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:47:46.733" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:47:46.733" starttime="20170417 19:47:46.732" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:46.734" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:46.734" starttime="20170417 19:47:46.733" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:47:46.734" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:47:46.734" starttime="20170417 19:47:46.734" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:47:46.735" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:47:46.735" starttime="20170417 19:47:46.735" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:47:47.789" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:47:47.789" starttime="20170417 19:47:46.736" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:47.789" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:47:47.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:47.789" starttime="20170417 19:47:46.735" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:47:47.790" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:47.790" starttime="20170417 19:47:47.790" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:47.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:47.791" starttime="20170417 19:47:47.790" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:47.791" starttime="20170417 19:47:46.732" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:47:47.792" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170417 19:47:47.792" starttime="20170417 19:47:47.791" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:47.794" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:47:47.794" starttime="20170417 19:47:47.793" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:47.794" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:47:47.795" starttime="20170417 19:47:47.794" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:47.795" starttime="20170417 19:47:47.794" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:47.795" starttime="20170417 19:47:47.792" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:47.795" starttime="20170417 19:47:47.792" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:47:49.223" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170417 19:47:49.224" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:49.224" starttime="20170417 19:47:47.795" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:47:49.225" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:49.226" starttime="20170417 19:47:49.225" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:47:49.227" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:47:49.227" starttime="20170417 19:47:49.226" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:49.227" starttime="20170417 19:47:49.226" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:49.227" starttime="20170417 19:47:49.224" status="PASS"></status>
</kw>
<status endtime="20170417 19:47:49.227" starttime="20170417 19:47:49.224" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:49.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:47:49.227" starttime="20170417 19:47:46.731" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:47:49.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:47:49.228" starttime="20170417 19:47:49.228" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:47:49.229" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:47:49.229" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:47:49.229" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170417 19:47:49.229" starttime="20170417 19:47:49.228" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:49.229" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170417 19:47:49.229" starttime="20170417 19:47:46.730" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:47:49.229" level="INFO">${host_state} = Off</msg>
<status endtime="20170417 19:47:49.229" starttime="20170417 19:47:46.730" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170417 19:47:49.230" level="FAIL">Running != Off</msg>
<status endtime="20170417 19:47:49.230" starttime="20170417 19:47:49.230" status="FAIL"></status>
</kw>
<status endtime="20170417 19:47:49.230" starttime="20170417 19:47:46.730" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:47:59.234" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:47:59.235" starttime="20170417 19:47:59.234" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:47:59.235" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:47:59.235" starttime="20170417 19:47:59.235" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:47:59.236" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:47:59.236" starttime="20170417 19:47:59.236" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:47:59.237" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:47:59.237" starttime="20170417 19:47:59.236" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:48:00.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:48:00.006" starttime="20170417 19:47:59.237" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:00.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:48:00.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:00.006" starttime="20170417 19:47:59.237" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:48:00.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:00.007" starttime="20170417 19:48:00.006" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:00.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:00.007" starttime="20170417 19:48:00.007" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:00.008" starttime="20170417 19:47:59.233" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:48:00.008" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170417 19:48:00.008" starttime="20170417 19:48:00.008" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:00.010" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:48:00.011" starttime="20170417 19:48:00.010" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:00.011" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:48:00.012" starttime="20170417 19:48:00.011" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:00.012" starttime="20170417 19:48:00.011" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:00.012" starttime="20170417 19:48:00.009" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:00.012" starttime="20170417 19:48:00.008" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:48:01.297" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170417 19:48:01.298" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:01.298" starttime="20170417 19:48:00.012" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:01.299" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:01.299" starttime="20170417 19:48:01.299" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:01.300" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:01.301" starttime="20170417 19:48:01.300" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:01.301" starttime="20170417 19:48:01.300" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:01.301" starttime="20170417 19:48:01.298" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:01.301" starttime="20170417 19:48:01.298" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:01.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:01.301" starttime="20170417 19:47:59.232" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:01.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:01.302" starttime="20170417 19:48:01.301" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:48:01.302" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:48:01.302" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:48:01.302" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170417 19:48:01.303" starttime="20170417 19:48:01.302" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:01.303" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170417 19:48:01.303" starttime="20170417 19:47:59.232" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:01.303" level="INFO">${host_state} = Off</msg>
<status endtime="20170417 19:48:01.303" starttime="20170417 19:47:59.232" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170417 19:48:01.304" level="FAIL">Running != Off</msg>
<status endtime="20170417 19:48:01.304" starttime="20170417 19:48:01.303" status="FAIL"></status>
</kw>
<status endtime="20170417 19:48:01.304" starttime="20170417 19:47:59.231" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:48:11.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:48:11.308" starttime="20170417 19:48:11.307" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:48:11.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:48:11.309" starttime="20170417 19:48:11.308" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:48:11.309" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:48:11.309" starttime="20170417 19:48:11.309" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:48:11.310" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:48:11.310" starttime="20170417 19:48:11.310" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:48:11.509" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:48:11.509" starttime="20170417 19:48:11.311" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:11.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:48:11.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:11.509" starttime="20170417 19:48:11.310" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:48:11.509" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:11.510" starttime="20170417 19:48:11.509" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:11.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:11.510" starttime="20170417 19:48:11.510" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.510" starttime="20170417 19:48:11.307" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:48:11.511" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170417 19:48:11.511" starttime="20170417 19:48:11.511" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:11.513" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:48:11.513" starttime="20170417 19:48:11.512" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:11.514" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:48:11.514" starttime="20170417 19:48:11.514" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.514" starttime="20170417 19:48:11.513" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.514" starttime="20170417 19:48:11.512" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.514" starttime="20170417 19:48:11.511" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:48:11.576" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170417 19:48:11.576" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:11.576" starttime="20170417 19:48:11.514" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:11.578" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:11.578" starttime="20170417 19:48:11.578" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:11.579" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:11.579" starttime="20170417 19:48:11.579" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.579" starttime="20170417 19:48:11.578" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.580" starttime="20170417 19:48:11.577" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.580" starttime="20170417 19:48:11.576" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:11.580" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:11.580" starttime="20170417 19:48:11.306" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:11.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:11.580" starttime="20170417 19:48:11.580" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:48:11.581" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:48:11.581" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:48:11.581" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170417 19:48:11.581" starttime="20170417 19:48:11.581" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:11.581" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170417 19:48:11.582" starttime="20170417 19:48:11.305" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:11.582" level="INFO">${host_state} = Running</msg>
<status endtime="20170417 19:48:11.582" starttime="20170417 19:48:11.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170417 19:48:11.582" starttime="20170417 19:48:11.582" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.582" starttime="20170417 19:48:11.304" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.583" starttime="20170417 19:47:46.729" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.583" starttime="20170417 19:47:45.858" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:48:11.586" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:48:11.587" starttime="20170417 19:48:11.586" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:48:11.587" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:48:11.587" starttime="20170417 19:48:11.587" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:48:11.588" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:48:11.588" starttime="20170417 19:48:11.588" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:48:11.589" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:48:11.589" starttime="20170417 19:48:11.588" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:48:11.800" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:48:11.800" starttime="20170417 19:48:11.589" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:11.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:48:11.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:11.800" starttime="20170417 19:48:11.589" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:48:11.801" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:11.801" starttime="20170417 19:48:11.801" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:11.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:11.802" starttime="20170417 19:48:11.801" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.802" starttime="20170417 19:48:11.585" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:48:11.802" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:48:11.802" starttime="20170417 19:48:11.802" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:11.804" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:11.804" starttime="20170417 19:48:11.804" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:11.806" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:11.806" starttime="20170417 19:48:11.805" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.806" starttime="20170417 19:48:11.805" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.806" starttime="20170417 19:48:11.803" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.806" starttime="20170417 19:48:11.803" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:48:11.870" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:48:11.870" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:11.870" starttime="20170417 19:48:11.806" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:11.872" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:11.872" starttime="20170417 19:48:11.872" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:11.873" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:11.873" starttime="20170417 19:48:11.873" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.873" starttime="20170417 19:48:11.872" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.874" starttime="20170417 19:48:11.871" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:11.874" starttime="20170417 19:48:11.871" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:11.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:11.874" starttime="20170417 19:48:11.584" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:11.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:11.874" starttime="20170417 19:48:11.874" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:48:11.875" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:48:11.875" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:48:11.875" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:48:11.875" starttime="20170417 19:48:11.875" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:11.876" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:48:11.876" starttime="20170417 19:48:11.584" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:11.876" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:48:11.876" starttime="20170417 19:48:11.584" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:48:11.876" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:48:11.876" starttime="20170417 19:48:11.876" status="FAIL"></status>
</kw>
<status endtime="20170417 19:48:11.877" starttime="20170417 19:48:11.583" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:48:21.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:48:21.880" starttime="20170417 19:48:21.880" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:48:21.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:48:21.881" starttime="20170417 19:48:21.881" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:48:21.882" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:48:21.882" starttime="20170417 19:48:21.881" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:48:21.882" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:48:21.882" starttime="20170417 19:48:21.882" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:48:22.076" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:48:22.076" starttime="20170417 19:48:21.883" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:22.076" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:48:22.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:22.077" starttime="20170417 19:48:21.883" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:48:22.077" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:22.077" starttime="20170417 19:48:22.077" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:22.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:22.078" starttime="20170417 19:48:22.078" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:22.078" starttime="20170417 19:48:21.879" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:48:22.079" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:48:22.079" starttime="20170417 19:48:22.078" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:22.081" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:22.081" starttime="20170417 19:48:22.080" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:22.082" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:22.082" starttime="20170417 19:48:22.082" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:22.082" starttime="20170417 19:48:22.081" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:22.082" starttime="20170417 19:48:22.079" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:22.082" starttime="20170417 19:48:22.079" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:48:22.148" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:48:22.148" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:22.148" starttime="20170417 19:48:22.083" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:22.150" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:22.150" starttime="20170417 19:48:22.150" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:22.151" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:22.151" starttime="20170417 19:48:22.151" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:22.151" starttime="20170417 19:48:22.150" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:22.151" starttime="20170417 19:48:22.149" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:22.151" starttime="20170417 19:48:22.149" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:22.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:22.152" starttime="20170417 19:48:21.878" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:22.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:22.152" starttime="20170417 19:48:22.152" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:48:22.153" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:48:22.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:48:22.153" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:48:22.153" starttime="20170417 19:48:22.152" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:22.153" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:48:22.153" starttime="20170417 19:48:21.878" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:22.153" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:48:22.153" starttime="20170417 19:48:21.878" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:48:22.154" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:48:22.154" starttime="20170417 19:48:22.154" status="FAIL"></status>
</kw>
<status endtime="20170417 19:48:22.154" starttime="20170417 19:48:21.877" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:48:32.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:48:32.158" starttime="20170417 19:48:32.158" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:48:32.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:48:32.159" starttime="20170417 19:48:32.159" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:48:32.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:48:32.160" starttime="20170417 19:48:32.159" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:48:32.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:48:32.160" starttime="20170417 19:48:32.160" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:48:32.338" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:48:32.339" starttime="20170417 19:48:32.161" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:32.339" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:48:32.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:32.339" starttime="20170417 19:48:32.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:48:32.339" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:32.340" starttime="20170417 19:48:32.339" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:32.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:32.340" starttime="20170417 19:48:32.340" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:32.340" starttime="20170417 19:48:32.157" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:48:32.341" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:48:32.341" starttime="20170417 19:48:32.341" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:32.343" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:32.343" starttime="20170417 19:48:32.342" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:32.344" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:32.344" starttime="20170417 19:48:32.344" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:32.344" starttime="20170417 19:48:32.343" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:32.344" starttime="20170417 19:48:32.342" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:32.344" starttime="20170417 19:48:32.341" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:48:32.409" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:48:32.409" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:32.410" starttime="20170417 19:48:32.345" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:32.411" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:32.411" starttime="20170417 19:48:32.411" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:32.412" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:32.412" starttime="20170417 19:48:32.412" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:32.412" starttime="20170417 19:48:32.411" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:32.413" starttime="20170417 19:48:32.410" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:32.413" starttime="20170417 19:48:32.410" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:32.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:32.413" starttime="20170417 19:48:32.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:32.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:32.414" starttime="20170417 19:48:32.413" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:48:32.414" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:48:32.414" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:48:32.414" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:48:32.414" starttime="20170417 19:48:32.414" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:32.414" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:48:32.415" starttime="20170417 19:48:32.156" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:32.415" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:48:32.415" starttime="20170417 19:48:32.155" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:48:32.415" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:48:32.415" starttime="20170417 19:48:32.415" status="FAIL"></status>
</kw>
<status endtime="20170417 19:48:32.416" starttime="20170417 19:48:32.155" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:48:42.420" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:48:42.421" starttime="20170417 19:48:42.420" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:48:42.421" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:48:42.421" starttime="20170417 19:48:42.421" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:48:42.422" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:48:42.422" starttime="20170417 19:48:42.422" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:48:42.423" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:48:42.423" starttime="20170417 19:48:42.423" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:48:42.608" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:48:42.608" starttime="20170417 19:48:42.424" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:42.609" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:48:42.609" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:42.609" starttime="20170417 19:48:42.424" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:48:42.609" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:42.609" starttime="20170417 19:48:42.609" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:42.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:42.610" starttime="20170417 19:48:42.610" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:42.610" starttime="20170417 19:48:42.418" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:48:42.611" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:48:42.611" starttime="20170417 19:48:42.610" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:42.613" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:42.613" starttime="20170417 19:48:42.612" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:42.614" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:42.614" starttime="20170417 19:48:42.613" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:42.614" starttime="20170417 19:48:42.613" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:42.614" starttime="20170417 19:48:42.611" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:42.614" starttime="20170417 19:48:42.611" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:48:42.679" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:48:42.679" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:42.679" starttime="20170417 19:48:42.614" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:42.680" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:42.680" starttime="20170417 19:48:42.680" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:42.682" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:42.682" starttime="20170417 19:48:42.681" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:42.682" starttime="20170417 19:48:42.681" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:42.682" starttime="20170417 19:48:42.679" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:42.682" starttime="20170417 19:48:42.679" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:42.682" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:42.682" starttime="20170417 19:48:42.418" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:42.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:42.683" starttime="20170417 19:48:42.682" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:48:42.683" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:48:42.683" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:48:42.684" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:48:42.684" starttime="20170417 19:48:42.683" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:42.684" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:48:42.684" starttime="20170417 19:48:42.417" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:42.684" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:48:42.684" starttime="20170417 19:48:42.417" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:48:42.685" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:48:42.685" starttime="20170417 19:48:42.684" status="FAIL"></status>
</kw>
<status endtime="20170417 19:48:42.685" starttime="20170417 19:48:42.416" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:48:52.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:48:52.689" starttime="20170417 19:48:52.688" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:48:52.690" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:48:52.690" starttime="20170417 19:48:52.689" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:48:52.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:48:52.690" starttime="20170417 19:48:52.690" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:48:52.691" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:48:52.691" starttime="20170417 19:48:52.691" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:48:52.866" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:48:52.866" starttime="20170417 19:48:52.692" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:52.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:48:52.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:52.866" starttime="20170417 19:48:52.691" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:48:52.867" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:52.867" starttime="20170417 19:48:52.867" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:52.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:52.868" starttime="20170417 19:48:52.867" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:52.868" starttime="20170417 19:48:52.688" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:48:52.868" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:48:52.868" starttime="20170417 19:48:52.868" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:52.871" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:52.871" starttime="20170417 19:48:52.870" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:52.872" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:48:52.872" starttime="20170417 19:48:52.871" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:52.872" starttime="20170417 19:48:52.871" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:52.872" starttime="20170417 19:48:52.869" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:52.872" starttime="20170417 19:48:52.869" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:48:52.937" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:48:52.937" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:52.937" starttime="20170417 19:48:52.872" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:48:52.938" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:52.939" starttime="20170417 19:48:52.938" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:48:52.940" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:48:52.940" starttime="20170417 19:48:52.939" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:52.940" starttime="20170417 19:48:52.939" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:52.940" starttime="20170417 19:48:52.937" status="PASS"></status>
</kw>
<status endtime="20170417 19:48:52.940" starttime="20170417 19:48:52.937" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:52.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:48:52.940" starttime="20170417 19:48:52.687" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:48:52.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:48:52.941" starttime="20170417 19:48:52.941" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:48:52.942" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:48:52.942" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:48:52.942" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:48:52.942" starttime="20170417 19:48:52.941" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:52.942" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:48:52.942" starttime="20170417 19:48:52.686" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:48:52.942" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:48:52.942" starttime="20170417 19:48:52.686" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:48:52.943" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:48:52.943" starttime="20170417 19:48:52.943" status="FAIL"></status>
</kw>
<status endtime="20170417 19:48:52.943" starttime="20170417 19:48:52.685" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:49:02.947" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:49:02.947" starttime="20170417 19:49:02.946" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:49:02.948" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:49:02.948" starttime="20170417 19:49:02.947" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:49:02.948" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:49:02.948" starttime="20170417 19:49:02.948" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:49:02.949" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:49:02.949" starttime="20170417 19:49:02.949" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:49:03.125" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:49:03.125" starttime="20170417 19:49:02.950" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:03.125" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:49:03.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:03.125" starttime="20170417 19:49:02.949" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:49:03.126" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:03.126" starttime="20170417 19:49:03.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:03.127" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:03.127" starttime="20170417 19:49:03.126" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:03.127" starttime="20170417 19:49:02.946" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:49:03.127" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:49:03.127" starttime="20170417 19:49:03.127" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:03.129" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:03.130" starttime="20170417 19:49:03.129" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:03.130" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:03.131" starttime="20170417 19:49:03.130" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:03.131" starttime="20170417 19:49:03.130" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:03.131" starttime="20170417 19:49:03.128" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:03.131" starttime="20170417 19:49:03.128" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:49:03.196" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:49:03.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:03.196" starttime="20170417 19:49:03.131" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:03.198" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:03.198" starttime="20170417 19:49:03.198" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:03.199" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:03.199" starttime="20170417 19:49:03.199" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:03.199" starttime="20170417 19:49:03.198" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:03.199" starttime="20170417 19:49:03.197" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:03.199" starttime="20170417 19:49:03.197" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:03.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:03.200" starttime="20170417 19:49:02.945" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:03.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:03.200" starttime="20170417 19:49:03.200" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:49:03.201" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:49:03.201" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:49:03.201" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:49:03.201" starttime="20170417 19:49:03.201" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:03.201" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:49:03.201" starttime="20170417 19:49:02.945" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:03.202" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:49:03.202" starttime="20170417 19:49:02.944" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:49:03.202" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:49:03.202" starttime="20170417 19:49:03.202" status="FAIL"></status>
</kw>
<status endtime="20170417 19:49:03.202" starttime="20170417 19:49:02.944" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:49:13.206" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:49:13.207" starttime="20170417 19:49:13.206" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:49:13.207" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:49:13.208" starttime="20170417 19:49:13.207" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:49:13.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:49:13.208" starttime="20170417 19:49:13.208" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:49:13.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:49:13.209" starttime="20170417 19:49:13.208" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:49:13.386" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:49:13.386" starttime="20170417 19:49:13.209" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:13.386" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:49:13.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:13.387" starttime="20170417 19:49:13.209" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:49:13.387" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:13.387" starttime="20170417 19:49:13.387" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:13.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:13.388" starttime="20170417 19:49:13.387" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:13.388" starttime="20170417 19:49:13.205" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:49:13.389" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:49:13.389" starttime="20170417 19:49:13.388" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:13.391" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:13.391" starttime="20170417 19:49:13.390" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:13.392" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:13.392" starttime="20170417 19:49:13.391" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:13.392" starttime="20170417 19:49:13.391" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:13.392" starttime="20170417 19:49:13.389" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:13.392" starttime="20170417 19:49:13.389" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:49:13.456" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:49:13.457" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:13.457" starttime="20170417 19:49:13.392" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:13.458" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:13.458" starttime="20170417 19:49:13.458" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:13.459" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:13.459" starttime="20170417 19:49:13.459" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:13.459" starttime="20170417 19:49:13.458" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:13.459" starttime="20170417 19:49:13.457" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:13.460" starttime="20170417 19:49:13.457" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:13.460" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:13.460" starttime="20170417 19:49:13.204" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:13.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:13.460" starttime="20170417 19:49:13.460" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:49:13.461" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:49:13.461" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:49:13.461" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:49:13.461" starttime="20170417 19:49:13.461" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:13.461" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:49:13.462" starttime="20170417 19:49:13.204" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:13.462" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:49:13.462" starttime="20170417 19:49:13.203" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:49:13.462" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:49:13.462" starttime="20170417 19:49:13.462" status="FAIL"></status>
</kw>
<status endtime="20170417 19:49:13.463" starttime="20170417 19:49:13.203" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:49:23.467" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:49:23.467" starttime="20170417 19:49:23.466" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:49:23.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:49:23.468" starttime="20170417 19:49:23.467" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:49:23.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:49:23.468" starttime="20170417 19:49:23.468" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:49:23.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:49:23.469" starttime="20170417 19:49:23.468" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:49:23.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:49:23.648" starttime="20170417 19:49:23.469" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:23.648" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:49:23.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:23.648" starttime="20170417 19:49:23.469" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:49:23.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:23.649" starttime="20170417 19:49:23.649" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:23.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:23.650" starttime="20170417 19:49:23.649" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:23.650" starttime="20170417 19:49:23.465" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:49:23.650" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:49:23.650" starttime="20170417 19:49:23.650" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:23.653" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:23.653" starttime="20170417 19:49:23.652" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:23.654" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:23.654" starttime="20170417 19:49:23.653" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:23.654" starttime="20170417 19:49:23.653" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:23.654" starttime="20170417 19:49:23.651" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:23.654" starttime="20170417 19:49:23.651" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:49:23.719" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:49:23.719" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:23.719" starttime="20170417 19:49:23.654" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:23.721" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:23.721" starttime="20170417 19:49:23.720" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:23.721" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:23.722" starttime="20170417 19:49:23.721" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:23.722" starttime="20170417 19:49:23.721" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:23.722" starttime="20170417 19:49:23.720" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:23.722" starttime="20170417 19:49:23.719" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:23.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:23.722" starttime="20170417 19:49:23.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:23.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:23.723" starttime="20170417 19:49:23.722" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:49:23.723" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:49:23.723" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:49:23.723" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:49:23.724" starttime="20170417 19:49:23.723" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:23.724" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:49:23.724" starttime="20170417 19:49:23.464" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:23.724" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:49:23.724" starttime="20170417 19:49:23.463" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:49:23.725" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:49:23.725" starttime="20170417 19:49:23.724" status="FAIL"></status>
</kw>
<status endtime="20170417 19:49:23.725" starttime="20170417 19:49:23.463" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:49:33.729" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:49:33.729" starttime="20170417 19:49:33.728" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:49:33.730" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:49:33.730" starttime="20170417 19:49:33.729" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:49:33.730" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:49:33.730" starttime="20170417 19:49:33.730" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:49:33.731" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:49:33.731" starttime="20170417 19:49:33.730" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:49:33.905" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:49:33.905" starttime="20170417 19:49:33.731" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:33.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:49:33.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:33.905" starttime="20170417 19:49:33.731" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:49:33.906" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:33.906" starttime="20170417 19:49:33.905" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:33.906" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:33.907" starttime="20170417 19:49:33.906" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:33.907" starttime="20170417 19:49:33.728" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:49:33.907" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:49:33.907" starttime="20170417 19:49:33.907" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:33.909" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:33.909" starttime="20170417 19:49:33.909" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:33.910" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:33.910" starttime="20170417 19:49:33.910" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:33.910" starttime="20170417 19:49:33.909" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:33.911" starttime="20170417 19:49:33.908" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:33.911" starttime="20170417 19:49:33.908" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:49:33.975" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:49:33.976" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:33.976" starttime="20170417 19:49:33.911" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:33.977" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:33.977" starttime="20170417 19:49:33.977" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:33.978" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:33.978" starttime="20170417 19:49:33.978" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:33.978" starttime="20170417 19:49:33.977" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:33.979" starttime="20170417 19:49:33.976" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:33.979" starttime="20170417 19:49:33.976" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:33.979" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:33.979" starttime="20170417 19:49:33.727" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:33.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:33.979" starttime="20170417 19:49:33.979" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:49:33.980" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:49:33.980" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:49:33.980" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:49:33.980" starttime="20170417 19:49:33.980" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:33.980" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:49:33.980" starttime="20170417 19:49:33.726" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:33.981" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:49:33.981" starttime="20170417 19:49:33.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:49:33.981" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:49:33.981" starttime="20170417 19:49:33.981" status="FAIL"></status>
</kw>
<status endtime="20170417 19:49:33.982" starttime="20170417 19:49:33.725" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:49:43.985" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:49:43.986" starttime="20170417 19:49:43.985" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:49:43.986" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:49:43.986" starttime="20170417 19:49:43.986" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:49:43.987" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:49:43.987" starttime="20170417 19:49:43.987" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:49:43.988" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:49:43.988" starttime="20170417 19:49:43.987" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:49:44.173" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:49:44.173" starttime="20170417 19:49:43.988" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:44.173" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:49:44.173" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:44.173" starttime="20170417 19:49:43.988" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:49:44.173" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:44.174" starttime="20170417 19:49:44.173" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:44.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:44.174" starttime="20170417 19:49:44.174" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:44.174" starttime="20170417 19:49:43.984" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:49:44.175" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:49:44.175" starttime="20170417 19:49:44.175" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:44.177" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:44.177" starttime="20170417 19:49:44.176" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:44.178" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:44.178" starttime="20170417 19:49:44.178" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:44.178" starttime="20170417 19:49:44.177" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:44.178" starttime="20170417 19:49:44.176" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:44.178" starttime="20170417 19:49:44.175" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:49:44.243" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:49:44.243" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:44.243" starttime="20170417 19:49:44.179" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:44.245" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:44.245" starttime="20170417 19:49:44.244" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:44.246" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:44.246" starttime="20170417 19:49:44.245" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:44.246" starttime="20170417 19:49:44.245" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:44.246" starttime="20170417 19:49:44.244" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:44.246" starttime="20170417 19:49:44.243" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:44.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:44.246" starttime="20170417 19:49:43.983" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:44.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:44.247" starttime="20170417 19:49:44.247" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:49:44.248" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:49:44.248" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:49:44.248" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:49:44.248" starttime="20170417 19:49:44.247" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:44.248" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:49:44.248" starttime="20170417 19:49:43.983" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:44.248" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:49:44.248" starttime="20170417 19:49:43.982" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:49:44.249" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:49:44.249" starttime="20170417 19:49:44.249" status="FAIL"></status>
</kw>
<status endtime="20170417 19:49:44.249" starttime="20170417 19:49:43.982" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:49:54.253" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:49:54.253" starttime="20170417 19:49:54.253" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:49:54.254" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:49:54.254" starttime="20170417 19:49:54.254" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:49:54.255" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:49:54.255" starttime="20170417 19:49:54.254" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:49:54.255" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:49:54.255" starttime="20170417 19:49:54.255" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:49:54.432" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:49:54.432" starttime="20170417 19:49:54.256" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:54.433" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:49:54.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:54.433" starttime="20170417 19:49:54.255" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:49:54.433" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:54.433" starttime="20170417 19:49:54.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:54.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:54.434" starttime="20170417 19:49:54.434" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:54.434" starttime="20170417 19:49:54.252" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:49:54.435" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:49:54.435" starttime="20170417 19:49:54.434" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:54.437" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:54.437" starttime="20170417 19:49:54.436" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:54.438" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:49:54.438" starttime="20170417 19:49:54.438" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:54.439" starttime="20170417 19:49:54.437" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:54.439" starttime="20170417 19:49:54.436" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:54.439" starttime="20170417 19:49:54.435" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:49:54.503" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:49:54.504" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:54.504" starttime="20170417 19:49:54.439" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:49:54.505" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:54.505" starttime="20170417 19:49:54.505" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:49:54.506" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:49:54.506" starttime="20170417 19:49:54.506" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:54.506" starttime="20170417 19:49:54.505" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:54.506" starttime="20170417 19:49:54.504" status="PASS"></status>
</kw>
<status endtime="20170417 19:49:54.507" starttime="20170417 19:49:54.504" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:54.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:49:54.507" starttime="20170417 19:49:54.251" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:49:54.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:49:54.507" starttime="20170417 19:49:54.507" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:49:54.508" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:49:54.508" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:49:54.508" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:49:54.508" starttime="20170417 19:49:54.508" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:54.508" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:49:54.508" starttime="20170417 19:49:54.251" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:49:54.509" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:49:54.509" starttime="20170417 19:49:54.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:49:54.509" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:49:54.509" starttime="20170417 19:49:54.509" status="FAIL"></status>
</kw>
<status endtime="20170417 19:49:54.509" starttime="20170417 19:49:54.250" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:50:04.513" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:50:04.513" starttime="20170417 19:50:04.512" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:50:04.514" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:50:04.514" starttime="20170417 19:50:04.513" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:50:04.514" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:50:04.515" starttime="20170417 19:50:04.514" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:50:04.515" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:50:04.515" starttime="20170417 19:50:04.515" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:50:04.689" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:50:04.689" starttime="20170417 19:50:04.516" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:04.689" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:50:04.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:04.689" starttime="20170417 19:50:04.515" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:50:04.690" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:04.690" starttime="20170417 19:50:04.689" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:04.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:04.690" starttime="20170417 19:50:04.690" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:04.691" starttime="20170417 19:50:04.512" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:50:04.691" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:50:04.691" starttime="20170417 19:50:04.691" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:04.693" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:04.693" starttime="20170417 19:50:04.692" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:04.694" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:04.694" starttime="20170417 19:50:04.694" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:04.694" starttime="20170417 19:50:04.693" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:04.694" starttime="20170417 19:50:04.692" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:04.694" starttime="20170417 19:50:04.691" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:50:04.759" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:50:04.759" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:04.759" starttime="20170417 19:50:04.695" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:04.761" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:04.761" starttime="20170417 19:50:04.760" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:04.762" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:04.762" starttime="20170417 19:50:04.761" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:04.762" starttime="20170417 19:50:04.761" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:04.762" starttime="20170417 19:50:04.760" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:04.762" starttime="20170417 19:50:04.759" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:04.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:04.762" starttime="20170417 19:50:04.511" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:04.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:04.763" starttime="20170417 19:50:04.762" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:50:04.764" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:50:04.764" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:50:04.764" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:50:04.764" starttime="20170417 19:50:04.763" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:04.764" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:50:04.764" starttime="20170417 19:50:04.511" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:04.764" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:50:04.764" starttime="20170417 19:50:04.510" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:50:04.765" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:50:04.765" starttime="20170417 19:50:04.765" status="FAIL"></status>
</kw>
<status endtime="20170417 19:50:04.765" starttime="20170417 19:50:04.510" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:50:14.769" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:50:14.770" starttime="20170417 19:50:14.769" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:50:14.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:50:14.771" starttime="20170417 19:50:14.770" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:50:14.771" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:50:14.771" starttime="20170417 19:50:14.771" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:50:14.772" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:50:14.772" starttime="20170417 19:50:14.771" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:50:14.968" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:50:14.968" starttime="20170417 19:50:14.773" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:14.968" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:50:14.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:14.968" starttime="20170417 19:50:14.772" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:50:14.969" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:14.969" starttime="20170417 19:50:14.969" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:14.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:14.970" starttime="20170417 19:50:14.969" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:14.970" starttime="20170417 19:50:14.768" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:50:14.970" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:50:14.970" starttime="20170417 19:50:14.970" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:14.972" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:14.972" starttime="20170417 19:50:14.972" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:14.973" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:14.973" starttime="20170417 19:50:14.973" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:14.973" starttime="20170417 19:50:14.972" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:14.974" starttime="20170417 19:50:14.971" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:14.974" starttime="20170417 19:50:14.971" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:50:15.038" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:50:15.038" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:15.038" starttime="20170417 19:50:14.974" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:15.040" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:15.040" starttime="20170417 19:50:15.040" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:15.041" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:15.041" starttime="20170417 19:50:15.041" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:15.041" starttime="20170417 19:50:15.040" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:15.041" starttime="20170417 19:50:15.039" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:15.041" starttime="20170417 19:50:15.039" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:15.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:15.042" starttime="20170417 19:50:14.767" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:15.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:15.042" starttime="20170417 19:50:15.042" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:50:15.043" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:50:15.043" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:50:15.043" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:50:15.043" starttime="20170417 19:50:15.042" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:15.043" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:50:15.043" starttime="20170417 19:50:14.767" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:15.043" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:50:15.044" starttime="20170417 19:50:14.766" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:50:15.044" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:50:15.044" starttime="20170417 19:50:15.044" status="FAIL"></status>
</kw>
<status endtime="20170417 19:50:15.044" starttime="20170417 19:50:14.766" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:50:25.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:50:25.049" starttime="20170417 19:50:25.048" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:50:25.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:50:25.050" starttime="20170417 19:50:25.049" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:50:25.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:50:25.050" starttime="20170417 19:50:25.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:50:25.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:50:25.051" starttime="20170417 19:50:25.051" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:50:25.257" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:50:25.257" starttime="20170417 19:50:25.052" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:25.257" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:50:25.257" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:25.257" starttime="20170417 19:50:25.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:50:25.257" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:25.258" starttime="20170417 19:50:25.257" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:25.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:25.258" starttime="20170417 19:50:25.258" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:25.258" starttime="20170417 19:50:25.048" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:50:25.259" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:50:25.259" starttime="20170417 19:50:25.259" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:25.261" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:25.261" starttime="20170417 19:50:25.260" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:25.262" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:25.262" starttime="20170417 19:50:25.262" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:25.262" starttime="20170417 19:50:25.261" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:25.262" starttime="20170417 19:50:25.260" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:25.263" starttime="20170417 19:50:25.259" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:50:25.328" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:50:25.328" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:25.328" starttime="20170417 19:50:25.263" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:25.329" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:25.329" starttime="20170417 19:50:25.329" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:25.330" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:25.330" starttime="20170417 19:50:25.330" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:25.331" starttime="20170417 19:50:25.330" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:25.331" starttime="20170417 19:50:25.328" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:25.331" starttime="20170417 19:50:25.328" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:25.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:25.331" starttime="20170417 19:50:25.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:25.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:25.332" starttime="20170417 19:50:25.331" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:50:25.332" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:50:25.332" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:50:25.332" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:50:25.332" starttime="20170417 19:50:25.332" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:25.333" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:50:25.333" starttime="20170417 19:50:25.046" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:25.333" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:50:25.333" starttime="20170417 19:50:25.045" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:50:25.333" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:50:25.334" starttime="20170417 19:50:25.333" status="FAIL"></status>
</kw>
<status endtime="20170417 19:50:25.334" starttime="20170417 19:50:25.045" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:50:35.337" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:50:35.338" starttime="20170417 19:50:35.337" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:50:35.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:50:35.338" starttime="20170417 19:50:35.338" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:50:35.339" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:50:35.339" starttime="20170417 19:50:35.339" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:50:35.340" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:50:35.340" starttime="20170417 19:50:35.339" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:50:35.517" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:50:35.517" starttime="20170417 19:50:35.340" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:35.517" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:50:35.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:35.518" starttime="20170417 19:50:35.340" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:50:35.518" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:35.518" starttime="20170417 19:50:35.518" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:35.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:35.519" starttime="20170417 19:50:35.519" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:35.519" starttime="20170417 19:50:35.336" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:50:35.520" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:50:35.520" starttime="20170417 19:50:35.519" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:35.522" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:35.522" starttime="20170417 19:50:35.521" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:35.522" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:35.523" starttime="20170417 19:50:35.522" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:35.523" starttime="20170417 19:50:35.522" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:35.523" starttime="20170417 19:50:35.520" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:35.523" starttime="20170417 19:50:35.520" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:50:35.587" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:50:35.587" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:35.588" starttime="20170417 19:50:35.523" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:35.589" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:35.589" starttime="20170417 19:50:35.589" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:35.590" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:35.590" starttime="20170417 19:50:35.590" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:35.590" starttime="20170417 19:50:35.589" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:35.590" starttime="20170417 19:50:35.588" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:35.590" starttime="20170417 19:50:35.588" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:35.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:35.591" starttime="20170417 19:50:35.336" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:35.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:35.591" starttime="20170417 19:50:35.591" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:50:35.592" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:50:35.592" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:50:35.592" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:50:35.592" starttime="20170417 19:50:35.592" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:35.592" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:50:35.592" starttime="20170417 19:50:35.335" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:35.593" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:50:35.593" starttime="20170417 19:50:35.335" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:50:35.593" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:50:35.593" starttime="20170417 19:50:35.593" status="FAIL"></status>
</kw>
<status endtime="20170417 19:50:35.593" starttime="20170417 19:50:35.334" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:50:45.597" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:50:45.598" starttime="20170417 19:50:45.597" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:50:45.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:50:45.599" starttime="20170417 19:50:45.598" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:50:45.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:50:45.599" starttime="20170417 19:50:45.599" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:50:45.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:50:45.600" starttime="20170417 19:50:45.600" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:50:45.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:50:45.804" starttime="20170417 19:50:45.601" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:45.805" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:50:45.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:45.805" starttime="20170417 19:50:45.600" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:50:45.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:45.805" starttime="20170417 19:50:45.805" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:45.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:45.806" starttime="20170417 19:50:45.806" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:45.806" starttime="20170417 19:50:45.596" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:50:45.807" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:50:45.807" starttime="20170417 19:50:45.807" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:45.809" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:45.809" starttime="20170417 19:50:45.808" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:45.810" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:45.810" starttime="20170417 19:50:45.810" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:45.810" starttime="20170417 19:50:45.809" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:45.810" starttime="20170417 19:50:45.808" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:45.810" starttime="20170417 19:50:45.807" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:50:45.875" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:50:45.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:45.875" starttime="20170417 19:50:45.811" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:45.877" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:45.877" starttime="20170417 19:50:45.876" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:45.878" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:45.878" starttime="20170417 19:50:45.878" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:45.878" starttime="20170417 19:50:45.877" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:45.878" starttime="20170417 19:50:45.876" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:45.879" starttime="20170417 19:50:45.876" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:45.879" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:45.879" starttime="20170417 19:50:45.596" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:45.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:45.879" starttime="20170417 19:50:45.879" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:50:45.880" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:50:45.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:50:45.880" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:50:45.880" starttime="20170417 19:50:45.880" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:45.880" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:50:45.880" starttime="20170417 19:50:45.595" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:45.881" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:50:45.881" starttime="20170417 19:50:45.595" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:50:45.881" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:50:45.881" starttime="20170417 19:50:45.881" status="FAIL"></status>
</kw>
<status endtime="20170417 19:50:45.881" starttime="20170417 19:50:45.594" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:50:55.885" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:50:55.886" starttime="20170417 19:50:55.885" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:50:55.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:50:55.887" starttime="20170417 19:50:55.886" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:50:55.887" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:50:55.887" starttime="20170417 19:50:55.887" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:50:55.888" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:50:55.888" starttime="20170417 19:50:55.887" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:50:56.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:50:56.062" starttime="20170417 19:50:55.889" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:56.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:50:56.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:56.062" starttime="20170417 19:50:55.888" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:50:56.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:56.063" starttime="20170417 19:50:56.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:56.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:56.064" starttime="20170417 19:50:56.063" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:56.064" starttime="20170417 19:50:55.885" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:50:56.064" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:50:56.064" starttime="20170417 19:50:56.064" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:56.066" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:56.066" starttime="20170417 19:50:56.066" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:56.067" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:50:56.068" starttime="20170417 19:50:56.067" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:56.068" starttime="20170417 19:50:56.066" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:56.068" starttime="20170417 19:50:56.065" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:56.068" starttime="20170417 19:50:56.065" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:50:56.147" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:50:56.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:56.147" starttime="20170417 19:50:56.068" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:50:56.149" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:56.149" starttime="20170417 19:50:56.148" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:50:56.150" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:50:56.150" starttime="20170417 19:50:56.150" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:56.150" starttime="20170417 19:50:56.149" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:56.150" starttime="20170417 19:50:56.148" status="PASS"></status>
</kw>
<status endtime="20170417 19:50:56.150" starttime="20170417 19:50:56.147" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:56.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:50:56.150" starttime="20170417 19:50:55.884" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:50:56.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:50:56.151" starttime="20170417 19:50:56.151" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:50:56.152" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:50:56.152" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:50:56.152" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:50:56.152" starttime="20170417 19:50:56.151" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:56.152" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:50:56.152" starttime="20170417 19:50:55.883" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:50:56.152" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:50:56.152" starttime="20170417 19:50:55.883" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:50:56.153" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:50:56.153" starttime="20170417 19:50:56.153" status="FAIL"></status>
</kw>
<status endtime="20170417 19:50:56.153" starttime="20170417 19:50:55.882" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:51:06.157" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:51:06.157" starttime="20170417 19:51:06.156" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:51:06.158" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:51:06.158" starttime="20170417 19:51:06.157" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:51:06.158" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:51:06.158" starttime="20170417 19:51:06.158" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:51:06.159" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:51:06.159" starttime="20170417 19:51:06.159" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:51:06.333" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:51:06.333" starttime="20170417 19:51:06.160" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:06.334" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:51:06.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:06.334" starttime="20170417 19:51:06.159" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:51:06.334" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:06.334" starttime="20170417 19:51:06.334" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:06.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:06.335" starttime="20170417 19:51:06.335" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:06.335" starttime="20170417 19:51:06.156" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:51:06.336" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:51:06.336" starttime="20170417 19:51:06.335" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:06.338" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:06.338" starttime="20170417 19:51:06.337" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:06.339" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:06.339" starttime="20170417 19:51:06.338" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:06.339" starttime="20170417 19:51:06.338" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:06.339" starttime="20170417 19:51:06.336" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:06.339" starttime="20170417 19:51:06.336" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:51:06.404" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:51:06.404" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:06.404" starttime="20170417 19:51:06.339" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:06.406" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:06.406" starttime="20170417 19:51:06.405" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:06.407" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:06.407" starttime="20170417 19:51:06.406" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:06.407" starttime="20170417 19:51:06.406" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:06.407" starttime="20170417 19:51:06.405" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:06.407" starttime="20170417 19:51:06.404" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:06.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:06.407" starttime="20170417 19:51:06.155" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:06.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:06.408" starttime="20170417 19:51:06.408" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:51:06.409" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:51:06.409" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:51:06.409" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:51:06.409" starttime="20170417 19:51:06.408" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:06.409" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:51:06.409" starttime="20170417 19:51:06.155" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:06.409" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:51:06.409" starttime="20170417 19:51:06.154" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:51:06.410" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:51:06.410" starttime="20170417 19:51:06.410" status="FAIL"></status>
</kw>
<status endtime="20170417 19:51:06.410" starttime="20170417 19:51:06.154" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:51:16.414" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:51:16.415" starttime="20170417 19:51:16.414" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:51:16.415" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:51:16.415" starttime="20170417 19:51:16.415" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:51:16.416" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:51:16.416" starttime="20170417 19:51:16.416" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:51:16.417" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:51:16.417" starttime="20170417 19:51:16.416" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:51:16.590" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:51:16.590" starttime="20170417 19:51:16.417" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:16.590" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:51:16.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:16.590" starttime="20170417 19:51:16.417" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:51:16.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:16.591" starttime="20170417 19:51:16.591" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:16.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:16.592" starttime="20170417 19:51:16.591" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:16.592" starttime="20170417 19:51:16.413" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:51:16.592" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:51:16.592" starttime="20170417 19:51:16.592" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:16.594" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:16.594" starttime="20170417 19:51:16.594" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:16.595" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:16.595" starttime="20170417 19:51:16.595" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:16.596" starttime="20170417 19:51:16.595" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:16.596" starttime="20170417 19:51:16.593" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:16.596" starttime="20170417 19:51:16.593" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:51:16.661" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:51:16.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:16.661" starttime="20170417 19:51:16.596" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:16.663" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:16.663" starttime="20170417 19:51:16.663" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:16.664" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:16.664" starttime="20170417 19:51:16.664" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:16.664" starttime="20170417 19:51:16.663" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:16.664" starttime="20170417 19:51:16.662" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:16.664" starttime="20170417 19:51:16.662" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:16.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:16.665" starttime="20170417 19:51:16.412" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:16.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:16.665" starttime="20170417 19:51:16.665" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:51:16.666" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:51:16.666" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:51:16.666" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:51:16.666" starttime="20170417 19:51:16.665" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:16.666" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:51:16.666" starttime="20170417 19:51:16.412" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:16.666" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:51:16.667" starttime="20170417 19:51:16.411" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:51:16.667" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:51:16.667" starttime="20170417 19:51:16.667" status="FAIL"></status>
</kw>
<status endtime="20170417 19:51:16.667" starttime="20170417 19:51:16.411" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:51:26.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:51:26.672" starttime="20170417 19:51:26.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:51:26.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:51:26.672" starttime="20170417 19:51:26.672" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:51:26.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:51:26.673" starttime="20170417 19:51:26.673" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:51:26.674" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:51:26.674" starttime="20170417 19:51:26.673" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:51:26.851" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:51:26.851" starttime="20170417 19:51:26.674" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:26.851" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:51:26.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:26.851" starttime="20170417 19:51:26.674" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:51:26.852" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:26.852" starttime="20170417 19:51:26.852" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:26.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:26.853" starttime="20170417 19:51:26.852" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:26.853" starttime="20170417 19:51:26.671" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:51:26.853" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:51:26.853" starttime="20170417 19:51:26.853" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:26.855" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:26.855" starttime="20170417 19:51:26.855" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:26.857" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:26.857" starttime="20170417 19:51:26.856" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:26.857" starttime="20170417 19:51:26.856" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:26.857" starttime="20170417 19:51:26.854" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:26.857" starttime="20170417 19:51:26.854" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:51:26.922" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:51:26.922" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:26.922" starttime="20170417 19:51:26.857" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:26.924" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:26.924" starttime="20170417 19:51:26.923" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:26.925" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:26.925" starttime="20170417 19:51:26.924" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:26.925" starttime="20170417 19:51:26.924" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:26.925" starttime="20170417 19:51:26.923" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:26.925" starttime="20170417 19:51:26.922" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:26.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:26.925" starttime="20170417 19:51:26.670" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:26.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:26.926" starttime="20170417 19:51:26.925" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:51:26.926" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:51:26.926" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:51:26.927" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:51:26.927" starttime="20170417 19:51:26.926" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:26.927" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:51:26.927" starttime="20170417 19:51:26.669" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:26.927" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:51:26.927" starttime="20170417 19:51:26.668" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:51:26.928" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:51:26.928" starttime="20170417 19:51:26.927" status="FAIL"></status>
</kw>
<status endtime="20170417 19:51:26.928" starttime="20170417 19:51:26.668" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:51:36.932" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:51:36.932" starttime="20170417 19:51:36.931" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:51:36.933" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:51:36.933" starttime="20170417 19:51:36.932" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:51:36.933" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:51:36.933" starttime="20170417 19:51:36.933" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:51:36.934" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:51:36.934" starttime="20170417 19:51:36.934" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:51:37.176" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:51:37.176" starttime="20170417 19:51:36.935" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:37.177" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:51:37.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:37.177" starttime="20170417 19:51:36.934" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:51:37.177" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:37.177" starttime="20170417 19:51:37.177" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:37.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:37.178" starttime="20170417 19:51:37.178" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:37.178" starttime="20170417 19:51:36.931" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:51:37.179" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:51:37.179" starttime="20170417 19:51:37.178" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:37.181" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:37.181" starttime="20170417 19:51:37.180" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:37.182" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:37.182" starttime="20170417 19:51:37.181" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:37.182" starttime="20170417 19:51:37.181" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:37.182" starttime="20170417 19:51:37.180" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:37.182" starttime="20170417 19:51:37.179" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:51:37.247" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:51:37.247" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:37.247" starttime="20170417 19:51:37.182" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:37.249" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:37.249" starttime="20170417 19:51:37.248" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:37.250" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:37.250" starttime="20170417 19:51:37.250" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:37.250" starttime="20170417 19:51:37.249" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:37.250" starttime="20170417 19:51:37.248" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:37.250" starttime="20170417 19:51:37.247" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:37.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:37.251" starttime="20170417 19:51:36.930" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:37.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:37.251" starttime="20170417 19:51:37.251" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:51:37.252" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:51:37.252" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:51:37.252" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:51:37.252" starttime="20170417 19:51:37.251" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:37.252" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:51:37.252" starttime="20170417 19:51:36.929" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:37.252" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:51:37.252" starttime="20170417 19:51:36.929" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:51:37.253" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:51:37.253" starttime="20170417 19:51:37.253" status="FAIL"></status>
</kw>
<status endtime="20170417 19:51:37.253" starttime="20170417 19:51:36.928" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:51:47.257" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:51:47.290" starttime="20170417 19:51:47.256" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:51:47.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:51:47.291" starttime="20170417 19:51:47.290" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:51:47.291" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:51:47.291" starttime="20170417 19:51:47.291" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:51:47.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:51:47.292" starttime="20170417 19:51:47.292" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:51:47.475" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:51:47.475" starttime="20170417 19:51:47.293" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:47.475" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:51:47.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:47.475" starttime="20170417 19:51:47.293" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:51:47.476" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:47.476" starttime="20170417 19:51:47.476" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:47.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:47.477" starttime="20170417 19:51:47.476" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:47.477" starttime="20170417 19:51:47.256" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:51:47.477" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:51:47.477" starttime="20170417 19:51:47.477" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:47.479" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:47.479" starttime="20170417 19:51:47.479" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:47.480" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:47.480" starttime="20170417 19:51:47.480" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:47.481" starttime="20170417 19:51:47.480" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:47.481" starttime="20170417 19:51:47.478" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:47.481" starttime="20170417 19:51:47.478" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:51:47.546" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:51:47.546" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:47.546" starttime="20170417 19:51:47.481" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:47.548" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:47.548" starttime="20170417 19:51:47.547" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:47.549" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:47.549" starttime="20170417 19:51:47.549" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:47.549" starttime="20170417 19:51:47.548" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:47.549" starttime="20170417 19:51:47.547" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:47.549" starttime="20170417 19:51:47.546" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:47.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:47.549" starttime="20170417 19:51:47.255" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:47.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:47.550" starttime="20170417 19:51:47.550" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:51:47.551" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:51:47.551" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:51:47.551" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:51:47.551" starttime="20170417 19:51:47.550" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:47.551" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:51:47.551" starttime="20170417 19:51:47.255" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:47.551" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:51:47.551" starttime="20170417 19:51:47.254" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:51:47.552" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:51:47.552" starttime="20170417 19:51:47.552" status="FAIL"></status>
</kw>
<status endtime="20170417 19:51:47.552" starttime="20170417 19:51:47.254" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:51:57.556" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:51:57.556" starttime="20170417 19:51:57.555" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:51:57.557" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:51:57.557" starttime="20170417 19:51:57.556" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:51:57.557" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:51:57.557" starttime="20170417 19:51:57.557" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:51:57.558" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:51:57.558" starttime="20170417 19:51:57.558" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:51:57.739" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:51:57.739" starttime="20170417 19:51:57.559" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:57.739" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:51:57.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:57.739" starttime="20170417 19:51:57.558" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:51:57.740" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:57.740" starttime="20170417 19:51:57.740" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:57.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:57.741" starttime="20170417 19:51:57.740" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:57.741" starttime="20170417 19:51:57.555" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:51:57.741" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:51:57.741" starttime="20170417 19:51:57.741" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:57.744" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:57.744" starttime="20170417 19:51:57.743" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:57.745" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:51:57.745" starttime="20170417 19:51:57.744" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:57.745" starttime="20170417 19:51:57.744" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:57.745" starttime="20170417 19:51:57.742" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:57.745" starttime="20170417 19:51:57.742" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:51:57.810" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:51:57.810" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:57.810" starttime="20170417 19:51:57.745" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:51:57.812" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:57.812" starttime="20170417 19:51:57.811" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:51:57.813" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:51:57.813" starttime="20170417 19:51:57.812" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:57.813" starttime="20170417 19:51:57.812" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:57.813" starttime="20170417 19:51:57.811" status="PASS"></status>
</kw>
<status endtime="20170417 19:51:57.813" starttime="20170417 19:51:57.810" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:57.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:51:57.813" starttime="20170417 19:51:57.554" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:51:57.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:51:57.814" starttime="20170417 19:51:57.814" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:51:57.814" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:51:57.815" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:51:57.815" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:51:57.815" starttime="20170417 19:51:57.814" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:57.815" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:51:57.815" starttime="20170417 19:51:57.554" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:51:57.815" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:51:57.815" starttime="20170417 19:51:57.553" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:51:57.816" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:51:57.816" starttime="20170417 19:51:57.815" status="FAIL"></status>
</kw>
<status endtime="20170417 19:51:57.816" starttime="20170417 19:51:57.553" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:52:07.820" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:52:07.820" starttime="20170417 19:52:07.820" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:52:07.821" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:52:07.821" starttime="20170417 19:52:07.821" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:52:07.822" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:52:07.822" starttime="20170417 19:52:07.821" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:52:07.823" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:52:07.823" starttime="20170417 19:52:07.822" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:52:08.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:52:08.006" starttime="20170417 19:52:07.823" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:08.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:52:08.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:08.006" starttime="20170417 19:52:07.823" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:52:08.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:08.007" starttime="20170417 19:52:08.006" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:08.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:08.007" starttime="20170417 19:52:08.007" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:08.007" starttime="20170417 19:52:07.819" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:52:08.008" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:52:08.008" starttime="20170417 19:52:08.008" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:08.010" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:08.010" starttime="20170417 19:52:08.009" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:08.011" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:08.011" starttime="20170417 19:52:08.011" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:08.011" starttime="20170417 19:52:08.010" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:08.011" starttime="20170417 19:52:08.009" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:08.011" starttime="20170417 19:52:08.008" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:52:08.078" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:52:08.079" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:08.079" starttime="20170417 19:52:08.012" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:08.080" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:08.080" starttime="20170417 19:52:08.080" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:08.081" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:08.081" starttime="20170417 19:52:08.081" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:08.081" starttime="20170417 19:52:08.080" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:08.082" starttime="20170417 19:52:08.079" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:08.082" starttime="20170417 19:52:08.079" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:08.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:08.082" starttime="20170417 19:52:07.818" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:08.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:08.083" starttime="20170417 19:52:08.082" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:52:08.083" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:52:08.083" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:52:08.084" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:52:08.084" starttime="20170417 19:52:08.083" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:08.084" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:52:08.084" starttime="20170417 19:52:07.818" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:08.084" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:52:08.084" starttime="20170417 19:52:07.817" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:52:08.085" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:52:08.085" starttime="20170417 19:52:08.084" status="FAIL"></status>
</kw>
<status endtime="20170417 19:52:08.085" starttime="20170417 19:52:07.817" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:52:18.089" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:52:18.089" starttime="20170417 19:52:18.089" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:52:18.090" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:52:18.090" starttime="20170417 19:52:18.090" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:52:18.091" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:52:18.091" starttime="20170417 19:52:18.090" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:52:18.091" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:52:18.091" starttime="20170417 19:52:18.091" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:52:18.268" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:52:18.269" starttime="20170417 19:52:18.092" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:18.269" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:52:18.269" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:18.269" starttime="20170417 19:52:18.091" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:52:18.269" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:18.269" starttime="20170417 19:52:18.269" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:18.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:18.270" starttime="20170417 19:52:18.270" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:18.270" starttime="20170417 19:52:18.088" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:52:18.271" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:52:18.271" starttime="20170417 19:52:18.270" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:18.273" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:18.273" starttime="20170417 19:52:18.272" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:18.274" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:18.274" starttime="20170417 19:52:18.274" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:18.274" starttime="20170417 19:52:18.273" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:18.274" starttime="20170417 19:52:18.272" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:18.274" starttime="20170417 19:52:18.271" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:52:18.339" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:52:18.339" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:18.339" starttime="20170417 19:52:18.274" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:18.341" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:18.341" starttime="20170417 19:52:18.340" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:18.342" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:18.342" starttime="20170417 19:52:18.342" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:18.343" starttime="20170417 19:52:18.341" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:18.343" starttime="20170417 19:52:18.340" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:18.343" starttime="20170417 19:52:18.339" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:18.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:18.343" starttime="20170417 19:52:18.087" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:18.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:18.344" starttime="20170417 19:52:18.343" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:52:18.344" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:52:18.344" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:52:18.344" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:52:18.344" starttime="20170417 19:52:18.344" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:18.345" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:52:18.345" starttime="20170417 19:52:18.086" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:18.345" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:52:18.345" starttime="20170417 19:52:18.086" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:52:18.345" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:52:18.345" starttime="20170417 19:52:18.345" status="FAIL"></status>
</kw>
<status endtime="20170417 19:52:18.346" starttime="20170417 19:52:18.085" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:52:28.349" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:52:28.349" starttime="20170417 19:52:28.349" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:52:28.350" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:52:28.350" starttime="20170417 19:52:28.350" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:52:28.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:52:28.351" starttime="20170417 19:52:28.350" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:52:28.351" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:52:28.351" starttime="20170417 19:52:28.351" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:52:28.528" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:52:28.528" starttime="20170417 19:52:28.352" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:28.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:52:28.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:28.528" starttime="20170417 19:52:28.352" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:52:28.529" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:28.529" starttime="20170417 19:52:28.528" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:28.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:28.529" starttime="20170417 19:52:28.529" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:28.530" starttime="20170417 19:52:28.348" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:52:28.530" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:52:28.530" starttime="20170417 19:52:28.530" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:28.532" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:28.532" starttime="20170417 19:52:28.531" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:28.533" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:28.533" starttime="20170417 19:52:28.533" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:28.533" starttime="20170417 19:52:28.532" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:28.533" starttime="20170417 19:52:28.531" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:28.533" starttime="20170417 19:52:28.530" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:52:28.605" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:52:28.606" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:28.606" starttime="20170417 19:52:28.534" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:28.607" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:28.607" starttime="20170417 19:52:28.607" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:28.608" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:28.608" starttime="20170417 19:52:28.608" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:28.608" starttime="20170417 19:52:28.607" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:28.608" starttime="20170417 19:52:28.606" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:28.609" starttime="20170417 19:52:28.606" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:28.609" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:28.609" starttime="20170417 19:52:28.348" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:28.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:28.609" starttime="20170417 19:52:28.609" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:52:28.610" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:52:28.610" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:52:28.610" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:52:28.610" starttime="20170417 19:52:28.610" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:28.611" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:52:28.611" starttime="20170417 19:52:28.347" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:28.611" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:52:28.611" starttime="20170417 19:52:28.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:52:28.611" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:52:28.611" starttime="20170417 19:52:28.611" status="FAIL"></status>
</kw>
<status endtime="20170417 19:52:28.612" starttime="20170417 19:52:28.346" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:52:38.616" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:52:38.616" starttime="20170417 19:52:38.615" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:52:38.617" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:52:38.617" starttime="20170417 19:52:38.617" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:52:38.617" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:52:38.617" starttime="20170417 19:52:38.617" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:52:38.618" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:52:38.618" starttime="20170417 19:52:38.618" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:52:38.793" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:52:38.794" starttime="20170417 19:52:38.619" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:38.794" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:52:38.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:38.794" starttime="20170417 19:52:38.618" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:52:38.794" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:38.795" starttime="20170417 19:52:38.794" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:38.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:38.795" starttime="20170417 19:52:38.795" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:38.795" starttime="20170417 19:52:38.614" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:52:38.796" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:52:38.796" starttime="20170417 19:52:38.796" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:38.798" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:38.798" starttime="20170417 19:52:38.797" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:38.799" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:38.799" starttime="20170417 19:52:38.799" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:38.799" starttime="20170417 19:52:38.798" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:38.799" starttime="20170417 19:52:38.797" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:38.799" starttime="20170417 19:52:38.796" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:52:38.864" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:52:38.864" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:38.864" starttime="20170417 19:52:38.800" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:38.866" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:38.866" starttime="20170417 19:52:38.865" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:38.867" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:38.867" starttime="20170417 19:52:38.867" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:38.867" starttime="20170417 19:52:38.866" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:38.867" starttime="20170417 19:52:38.865" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:38.867" starttime="20170417 19:52:38.864" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:38.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:38.868" starttime="20170417 19:52:38.614" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:38.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:38.868" starttime="20170417 19:52:38.868" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:52:38.869" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:52:38.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:52:38.869" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:52:38.869" starttime="20170417 19:52:38.869" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:38.869" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:52:38.870" starttime="20170417 19:52:38.613" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:38.870" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:52:38.870" starttime="20170417 19:52:38.613" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:52:38.871" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:52:38.871" starttime="20170417 19:52:38.870" status="FAIL"></status>
</kw>
<status endtime="20170417 19:52:38.871" starttime="20170417 19:52:38.612" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:52:48.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:52:48.875" starttime="20170417 19:52:48.875" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:52:48.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:52:48.876" starttime="20170417 19:52:48.876" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:52:48.877" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:52:48.877" starttime="20170417 19:52:48.876" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:52:48.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:52:48.877" starttime="20170417 19:52:48.877" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:52:49.054" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:52:49.054" starttime="20170417 19:52:48.878" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:49.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:52:49.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:49.055" starttime="20170417 19:52:48.877" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:52:49.056" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:49.056" starttime="20170417 19:52:49.055" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:49.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:49.056" starttime="20170417 19:52:49.056" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:49.056" starttime="20170417 19:52:48.874" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:52:49.057" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:52:49.057" starttime="20170417 19:52:49.057" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:49.059" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:49.060" starttime="20170417 19:52:49.059" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:49.060" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:49.061" starttime="20170417 19:52:49.060" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:49.061" starttime="20170417 19:52:49.060" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:49.061" starttime="20170417 19:52:49.058" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:49.061" starttime="20170417 19:52:49.057" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:52:49.258" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:52:49.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:49.258" starttime="20170417 19:52:49.061" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:49.260" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:49.260" starttime="20170417 19:52:49.259" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:49.261" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:49.261" starttime="20170417 19:52:49.261" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:49.261" starttime="20170417 19:52:49.260" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:49.261" starttime="20170417 19:52:49.259" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:49.261" starttime="20170417 19:52:49.258" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:49.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:49.261" starttime="20170417 19:52:48.873" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:49.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:49.262" starttime="20170417 19:52:49.262" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:52:49.263" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:52:49.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:52:49.263" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:52:49.263" starttime="20170417 19:52:49.262" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:49.263" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:52:49.263" starttime="20170417 19:52:48.873" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:49.263" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:52:49.263" starttime="20170417 19:52:48.872" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:52:49.264" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:52:49.264" starttime="20170417 19:52:49.264" status="FAIL"></status>
</kw>
<status endtime="20170417 19:52:49.264" starttime="20170417 19:52:48.872" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:52:59.268" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:52:59.268" starttime="20170417 19:52:59.268" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:52:59.269" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:52:59.269" starttime="20170417 19:52:59.269" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:52:59.270" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:52:59.270" starttime="20170417 19:52:59.269" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:52:59.270" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:52:59.270" starttime="20170417 19:52:59.270" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:52:59.445" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:52:59.445" starttime="20170417 19:52:59.271" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:59.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:52:59.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:59.445" starttime="20170417 19:52:59.271" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:52:59.446" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:59.446" starttime="20170417 19:52:59.446" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:59.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:59.447" starttime="20170417 19:52:59.446" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:59.447" starttime="20170417 19:52:59.267" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:52:59.447" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:52:59.447" starttime="20170417 19:52:59.447" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:59.449" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:59.449" starttime="20170417 19:52:59.449" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:59.450" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:52:59.450" starttime="20170417 19:52:59.450" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:59.451" starttime="20170417 19:52:59.450" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:59.451" starttime="20170417 19:52:59.448" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:59.451" starttime="20170417 19:52:59.448" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:52:59.517" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:52:59.517" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:59.517" starttime="20170417 19:52:59.451" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:52:59.519" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:59.519" starttime="20170417 19:52:59.518" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:52:59.519" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:52:59.520" starttime="20170417 19:52:59.519" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:59.520" starttime="20170417 19:52:59.519" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:59.520" starttime="20170417 19:52:59.518" status="PASS"></status>
</kw>
<status endtime="20170417 19:52:59.520" starttime="20170417 19:52:59.517" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:59.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:52:59.520" starttime="20170417 19:52:59.266" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:52:59.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:52:59.521" starttime="20170417 19:52:59.520" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:52:59.521" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:52:59.521" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:52:59.522" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:52:59.522" starttime="20170417 19:52:59.521" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:59.522" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:52:59.522" starttime="20170417 19:52:59.266" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:52:59.522" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:52:59.522" starttime="20170417 19:52:59.265" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:52:59.523" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:52:59.523" starttime="20170417 19:52:59.522" status="FAIL"></status>
</kw>
<status endtime="20170417 19:52:59.523" starttime="20170417 19:52:59.265" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:53:09.527" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:53:09.527" starttime="20170417 19:53:09.527" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:53:09.528" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:53:09.528" starttime="20170417 19:53:09.528" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:53:09.529" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:53:09.529" starttime="20170417 19:53:09.528" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:53:09.529" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:53:09.529" starttime="20170417 19:53:09.529" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:53:09.705" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:53:09.705" starttime="20170417 19:53:09.530" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:09.705" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:53:09.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:09.705" starttime="20170417 19:53:09.529" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:53:09.706" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:09.706" starttime="20170417 19:53:09.706" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:09.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:09.707" starttime="20170417 19:53:09.706" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:09.707" starttime="20170417 19:53:09.526" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:53:09.707" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:53:09.707" starttime="20170417 19:53:09.707" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:09.709" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:09.709" starttime="20170417 19:53:09.709" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:09.710" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:09.710" starttime="20170417 19:53:09.710" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:09.711" starttime="20170417 19:53:09.710" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:09.711" starttime="20170417 19:53:09.708" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:09.711" starttime="20170417 19:53:09.708" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:53:09.776" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:53:09.777" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:09.777" starttime="20170417 19:53:09.711" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:09.782" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:09.782" starttime="20170417 19:53:09.781" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:09.783" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:09.783" starttime="20170417 19:53:09.783" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:09.783" starttime="20170417 19:53:09.782" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:09.783" starttime="20170417 19:53:09.777" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:09.783" starttime="20170417 19:53:09.777" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:09.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:09.783" starttime="20170417 19:53:09.525" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:09.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:09.784" starttime="20170417 19:53:09.784" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:53:09.785" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:53:09.785" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:53:09.785" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:53:09.785" starttime="20170417 19:53:09.784" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:09.785" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:53:09.785" starttime="20170417 19:53:09.524" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:09.785" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:53:09.785" starttime="20170417 19:53:09.524" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:53:09.786" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:53:09.786" starttime="20170417 19:53:09.786" status="FAIL"></status>
</kw>
<status endtime="20170417 19:53:09.786" starttime="20170417 19:53:09.523" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:53:19.790" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:53:19.790" starttime="20170417 19:53:19.789" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:53:19.791" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:53:19.791" starttime="20170417 19:53:19.791" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:53:19.792" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:53:19.792" starttime="20170417 19:53:19.791" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:53:19.792" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:53:19.792" starttime="20170417 19:53:19.792" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:53:20.030" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:53:20.030" starttime="20170417 19:53:19.793" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:20.030" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:53:20.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:20.030" starttime="20170417 19:53:19.793" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:53:20.031" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:20.031" starttime="20170417 19:53:20.031" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:20.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:20.032" starttime="20170417 19:53:20.031" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:20.032" starttime="20170417 19:53:19.789" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:53:20.033" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:53:20.033" starttime="20170417 19:53:20.032" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:20.035" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:20.035" starttime="20170417 19:53:20.034" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:20.036" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:20.036" starttime="20170417 19:53:20.036" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:20.036" starttime="20170417 19:53:20.035" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:20.036" starttime="20170417 19:53:20.033" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:20.036" starttime="20170417 19:53:20.033" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:53:20.118" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:53:20.118" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:20.118" starttime="20170417 19:53:20.037" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:20.120" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:20.120" starttime="20170417 19:53:20.119" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:20.121" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:20.121" starttime="20170417 19:53:20.120" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:20.121" starttime="20170417 19:53:20.120" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:20.121" starttime="20170417 19:53:20.119" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:20.121" starttime="20170417 19:53:20.118" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:20.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:20.122" starttime="20170417 19:53:19.788" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:20.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:20.122" starttime="20170417 19:53:20.122" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:53:20.123" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:53:20.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:53:20.123" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:53:20.123" starttime="20170417 19:53:20.122" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:20.123" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:53:20.123" starttime="20170417 19:53:19.788" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:20.123" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:53:20.123" starttime="20170417 19:53:19.787" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:53:20.124" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:53:20.124" starttime="20170417 19:53:20.124" status="FAIL"></status>
</kw>
<status endtime="20170417 19:53:20.124" starttime="20170417 19:53:19.787" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:53:30.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:53:30.128" starttime="20170417 19:53:30.127" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:53:30.129" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:53:30.129" starttime="20170417 19:53:30.128" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:53:30.129" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:53:30.129" starttime="20170417 19:53:30.129" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:53:30.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:53:30.130" starttime="20170417 19:53:30.130" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:53:30.314" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:53:30.314" starttime="20170417 19:53:30.131" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:30.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:53:30.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:30.314" starttime="20170417 19:53:30.130" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:53:30.315" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:30.315" starttime="20170417 19:53:30.314" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:30.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:30.315" starttime="20170417 19:53:30.315" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:30.315" starttime="20170417 19:53:30.127" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:53:30.316" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:53:30.316" starttime="20170417 19:53:30.316" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:30.318" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:30.318" starttime="20170417 19:53:30.317" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:30.319" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:30.319" starttime="20170417 19:53:30.319" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:30.319" starttime="20170417 19:53:30.318" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:30.319" starttime="20170417 19:53:30.317" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:30.319" starttime="20170417 19:53:30.316" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:53:30.384" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:53:30.384" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:30.384" starttime="20170417 19:53:30.320" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:30.386" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:30.386" starttime="20170417 19:53:30.385" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:30.387" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:30.387" starttime="20170417 19:53:30.387" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:30.387" starttime="20170417 19:53:30.386" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:30.387" starttime="20170417 19:53:30.385" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:30.387" starttime="20170417 19:53:30.385" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:30.387" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:30.387" starttime="20170417 19:53:30.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:30.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:30.388" starttime="20170417 19:53:30.388" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:53:30.389" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:53:30.389" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:53:30.389" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:53:30.389" starttime="20170417 19:53:30.388" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:30.389" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:53:30.389" starttime="20170417 19:53:30.126" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:30.389" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:53:30.389" starttime="20170417 19:53:30.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:53:30.390" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:53:30.390" starttime="20170417 19:53:30.390" status="FAIL"></status>
</kw>
<status endtime="20170417 19:53:30.390" starttime="20170417 19:53:30.125" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:53:40.395" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:53:40.395" starttime="20170417 19:53:40.394" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:53:40.396" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:53:40.396" starttime="20170417 19:53:40.396" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:53:40.396" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:53:40.396" starttime="20170417 19:53:40.396" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:53:40.397" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:53:40.397" starttime="20170417 19:53:40.397" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:53:40.600" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:53:40.601" starttime="20170417 19:53:40.398" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:40.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:53:40.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:40.601" starttime="20170417 19:53:40.397" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:53:40.601" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:40.602" starttime="20170417 19:53:40.601" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:40.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:40.602" starttime="20170417 19:53:40.602" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:40.602" starttime="20170417 19:53:40.393" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:53:40.603" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:53:40.603" starttime="20170417 19:53:40.603" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:40.605" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:40.605" starttime="20170417 19:53:40.604" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:40.606" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:40.606" starttime="20170417 19:53:40.606" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:40.606" starttime="20170417 19:53:40.605" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:40.606" starttime="20170417 19:53:40.604" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:40.606" starttime="20170417 19:53:40.603" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:53:40.671" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:53:40.671" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:40.671" starttime="20170417 19:53:40.607" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:40.673" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:40.673" starttime="20170417 19:53:40.673" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:40.674" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:40.674" starttime="20170417 19:53:40.674" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:40.675" starttime="20170417 19:53:40.673" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:40.675" starttime="20170417 19:53:40.672" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:40.675" starttime="20170417 19:53:40.672" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:40.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:40.675" starttime="20170417 19:53:40.393" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:40.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:40.676" starttime="20170417 19:53:40.675" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:53:40.676" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:53:40.676" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:53:40.676" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:53:40.676" starttime="20170417 19:53:40.676" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:40.677" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:53:40.677" starttime="20170417 19:53:40.392" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:40.677" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:53:40.677" starttime="20170417 19:53:40.392" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:53:40.678" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:53:40.678" starttime="20170417 19:53:40.677" status="FAIL"></status>
</kw>
<status endtime="20170417 19:53:40.678" starttime="20170417 19:53:40.391" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:53:50.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:53:50.682" starttime="20170417 19:53:50.681" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:53:50.683" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:53:50.683" starttime="20170417 19:53:50.682" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:53:50.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:53:50.683" starttime="20170417 19:53:50.683" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:53:50.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:53:50.684" starttime="20170417 19:53:50.683" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:53:50.887" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:53:50.887" starttime="20170417 19:53:50.684" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:50.888" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:53:50.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:50.888" starttime="20170417 19:53:50.684" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:53:50.888" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:50.888" starttime="20170417 19:53:50.888" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:50.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:50.889" starttime="20170417 19:53:50.889" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:50.889" starttime="20170417 19:53:50.681" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:53:50.890" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:53:50.890" starttime="20170417 19:53:50.889" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:50.893" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:50.893" starttime="20170417 19:53:50.892" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:50.893" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:53:50.894" starttime="20170417 19:53:50.893" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:50.894" starttime="20170417 19:53:50.893" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:50.894" starttime="20170417 19:53:50.890" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:50.894" starttime="20170417 19:53:50.890" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:53:50.959" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:53:50.959" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:50.959" starttime="20170417 19:53:50.894" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:53:50.961" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:50.961" starttime="20170417 19:53:50.961" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:53:50.962" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:53:50.962" starttime="20170417 19:53:50.962" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:50.962" starttime="20170417 19:53:50.961" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:50.962" starttime="20170417 19:53:50.960" status="PASS"></status>
</kw>
<status endtime="20170417 19:53:50.962" starttime="20170417 19:53:50.960" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:50.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:53:50.963" starttime="20170417 19:53:50.680" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:53:50.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:53:50.963" starttime="20170417 19:53:50.963" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:53:50.964" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:53:50.964" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:53:50.964" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:53:50.964" starttime="20170417 19:53:50.964" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:50.964" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:53:50.964" starttime="20170417 19:53:50.679" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:53:50.965" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:53:50.965" starttime="20170417 19:53:50.679" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:53:50.965" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:53:50.965" starttime="20170417 19:53:50.965" status="FAIL"></status>
</kw>
<status endtime="20170417 19:53:50.966" starttime="20170417 19:53:50.678" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:54:00.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:54:00.970" starttime="20170417 19:54:00.969" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:54:00.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:54:00.970" starttime="20170417 19:54:00.970" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:54:00.971" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:54:00.971" starttime="20170417 19:54:00.970" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:54:00.971" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:54:00.971" starttime="20170417 19:54:00.971" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:54:01.170" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:54:01.170" starttime="20170417 19:54:00.972" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:01.170" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:54:01.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:01.170" starttime="20170417 19:54:00.972" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:54:01.171" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:01.171" starttime="20170417 19:54:01.170" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:01.171" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:01.171" starttime="20170417 19:54:01.171" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:01.172" starttime="20170417 19:54:00.968" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:54:01.172" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:54:01.172" starttime="20170417 19:54:01.172" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:01.174" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:01.174" starttime="20170417 19:54:01.173" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:01.175" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:01.175" starttime="20170417 19:54:01.175" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:01.175" starttime="20170417 19:54:01.174" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:01.175" starttime="20170417 19:54:01.173" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:01.175" starttime="20170417 19:54:01.172" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:54:01.240" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:54:01.240" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:01.240" starttime="20170417 19:54:01.176" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:01.242" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:01.242" starttime="20170417 19:54:01.241" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:01.242" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:01.243" starttime="20170417 19:54:01.242" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:01.243" starttime="20170417 19:54:01.242" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:01.243" starttime="20170417 19:54:01.241" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:01.243" starttime="20170417 19:54:01.240" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:01.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:01.243" starttime="20170417 19:54:00.967" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:01.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:01.244" starttime="20170417 19:54:01.243" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:54:01.244" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:54:01.244" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:54:01.244" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:54:01.244" starttime="20170417 19:54:01.244" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:01.245" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:54:01.245" starttime="20170417 19:54:00.967" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:01.245" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:54:01.245" starttime="20170417 19:54:00.967" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:54:01.246" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:54:01.246" starttime="20170417 19:54:01.245" status="FAIL"></status>
</kw>
<status endtime="20170417 19:54:01.246" starttime="20170417 19:54:00.966" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:54:11.250" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:54:11.250" starttime="20170417 19:54:11.249" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:54:11.251" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:54:11.251" starttime="20170417 19:54:11.251" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:54:11.251" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:54:11.252" starttime="20170417 19:54:11.251" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:54:11.252" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:54:11.252" starttime="20170417 19:54:11.252" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:54:11.427" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:54:11.427" starttime="20170417 19:54:11.253" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:11.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:54:11.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:11.428" starttime="20170417 19:54:11.252" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:54:11.428" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:11.428" starttime="20170417 19:54:11.428" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:11.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:11.429" starttime="20170417 19:54:11.429" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:11.429" starttime="20170417 19:54:11.249" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:54:11.430" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:54:11.430" starttime="20170417 19:54:11.429" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:11.432" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:11.432" starttime="20170417 19:54:11.431" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:11.433" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:11.433" starttime="20170417 19:54:11.432" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:11.433" starttime="20170417 19:54:11.432" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:11.433" starttime="20170417 19:54:11.430" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:11.433" starttime="20170417 19:54:11.430" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:54:11.536" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:54:11.536" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:11.536" starttime="20170417 19:54:11.433" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:11.538" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:11.538" starttime="20170417 19:54:11.538" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:11.539" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:11.539" starttime="20170417 19:54:11.539" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:11.540" starttime="20170417 19:54:11.539" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:11.540" starttime="20170417 19:54:11.537" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:11.540" starttime="20170417 19:54:11.537" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:11.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:11.540" starttime="20170417 19:54:11.248" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:11.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:11.541" starttime="20170417 19:54:11.540" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:54:11.541" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:54:11.541" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:54:11.541" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:54:11.541" starttime="20170417 19:54:11.541" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:11.542" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:54:11.542" starttime="20170417 19:54:11.247" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:11.542" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:54:11.542" starttime="20170417 19:54:11.247" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:54:11.542" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:54:11.543" starttime="20170417 19:54:11.542" status="FAIL"></status>
</kw>
<status endtime="20170417 19:54:11.543" starttime="20170417 19:54:11.246" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:54:21.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:54:21.547" starttime="20170417 19:54:21.546" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:54:21.547" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:54:21.548" starttime="20170417 19:54:21.547" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:54:21.548" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:54:21.548" starttime="20170417 19:54:21.548" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:54:21.549" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:54:21.549" starttime="20170417 19:54:21.548" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:54:21.733" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:54:21.733" starttime="20170417 19:54:21.549" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:21.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:54:21.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:21.733" starttime="20170417 19:54:21.549" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:54:21.734" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:21.734" starttime="20170417 19:54:21.733" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:21.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:21.734" starttime="20170417 19:54:21.734" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:21.735" starttime="20170417 19:54:21.546" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:54:21.735" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:54:21.735" starttime="20170417 19:54:21.735" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:21.738" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:21.738" starttime="20170417 19:54:21.737" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:21.738" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:21.739" starttime="20170417 19:54:21.738" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:21.739" starttime="20170417 19:54:21.738" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:21.739" starttime="20170417 19:54:21.736" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:21.739" starttime="20170417 19:54:21.735" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:54:21.804" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:54:21.804" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:21.804" starttime="20170417 19:54:21.739" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:21.806" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:21.806" starttime="20170417 19:54:21.805" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:21.807" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:21.807" starttime="20170417 19:54:21.807" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:21.807" starttime="20170417 19:54:21.806" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:21.807" starttime="20170417 19:54:21.805" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:21.807" starttime="20170417 19:54:21.805" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:21.807" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:21.807" starttime="20170417 19:54:21.545" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:21.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:21.808" starttime="20170417 19:54:21.808" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:54:21.809" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:54:21.809" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:54:21.809" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:54:21.809" starttime="20170417 19:54:21.808" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:21.809" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:54:21.809" starttime="20170417 19:54:21.544" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:21.809" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:54:21.809" starttime="20170417 19:54:21.544" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:54:21.810" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:54:21.810" starttime="20170417 19:54:21.810" status="FAIL"></status>
</kw>
<status endtime="20170417 19:54:21.810" starttime="20170417 19:54:21.543" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:54:31.817" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:54:31.818" starttime="20170417 19:54:31.817" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:54:31.818" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:54:31.818" starttime="20170417 19:54:31.818" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:54:31.819" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:54:31.819" starttime="20170417 19:54:31.818" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:54:31.819" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:54:31.819" starttime="20170417 19:54:31.819" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:54:31.996" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:54:31.996" starttime="20170417 19:54:31.820" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:31.997" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:54:31.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:31.997" starttime="20170417 19:54:31.820" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:54:31.997" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:31.997" starttime="20170417 19:54:31.997" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:31.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:31.998" starttime="20170417 19:54:31.998" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:31.998" starttime="20170417 19:54:31.816" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:54:31.999" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:54:31.999" starttime="20170417 19:54:31.998" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:32.001" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:32.001" starttime="20170417 19:54:32.000" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:32.002" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:32.002" starttime="20170417 19:54:32.002" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:32.002" starttime="20170417 19:54:32.001" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:32.002" starttime="20170417 19:54:32.000" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:32.002" starttime="20170417 19:54:31.999" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:54:32.068" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:54:32.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:32.068" starttime="20170417 19:54:32.002" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:32.069" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:32.069" starttime="20170417 19:54:32.069" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:32.070" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:32.070" starttime="20170417 19:54:32.070" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:32.071" starttime="20170417 19:54:32.070" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:32.071" starttime="20170417 19:54:32.068" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:32.071" starttime="20170417 19:54:32.068" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:32.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:32.071" starttime="20170417 19:54:31.816" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:32.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:32.072" starttime="20170417 19:54:32.071" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:54:32.072" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:54:32.072" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:54:32.072" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:54:32.072" starttime="20170417 19:54:32.072" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:32.073" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:54:32.073" starttime="20170417 19:54:31.812" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:32.073" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:54:32.073" starttime="20170417 19:54:31.811" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:54:32.074" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:54:32.074" starttime="20170417 19:54:32.073" status="FAIL"></status>
</kw>
<status endtime="20170417 19:54:32.074" starttime="20170417 19:54:31.811" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:54:42.078" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:54:42.079" starttime="20170417 19:54:42.078" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:54:42.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:54:42.079" starttime="20170417 19:54:42.079" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:54:42.080" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:54:42.080" starttime="20170417 19:54:42.079" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:54:42.080" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:54:42.080" starttime="20170417 19:54:42.080" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:54:42.256" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:54:42.256" starttime="20170417 19:54:42.081" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:42.256" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:54:42.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:42.257" starttime="20170417 19:54:42.081" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:54:42.257" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:42.257" starttime="20170417 19:54:42.257" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:42.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:42.258" starttime="20170417 19:54:42.258" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:42.258" starttime="20170417 19:54:42.077" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:54:42.259" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:54:42.259" starttime="20170417 19:54:42.259" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:42.262" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:42.262" starttime="20170417 19:54:42.261" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:42.263" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:42.263" starttime="20170417 19:54:42.263" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:42.263" starttime="20170417 19:54:42.262" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:42.263" starttime="20170417 19:54:42.260" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:42.263" starttime="20170417 19:54:42.259" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:54:42.329" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:54:42.329" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:42.329" starttime="20170417 19:54:42.264" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:42.333" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:42.333" starttime="20170417 19:54:42.332" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:42.333" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:42.334" starttime="20170417 19:54:42.333" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:42.334" starttime="20170417 19:54:42.333" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:42.334" starttime="20170417 19:54:42.330" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:42.334" starttime="20170417 19:54:42.329" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:42.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:42.334" starttime="20170417 19:54:42.076" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:42.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:42.335" starttime="20170417 19:54:42.335" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:54:42.335" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:54:42.336" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:54:42.336" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:54:42.336" starttime="20170417 19:54:42.335" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:42.336" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:54:42.336" starttime="20170417 19:54:42.075" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:42.336" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:54:42.336" starttime="20170417 19:54:42.075" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:54:42.337" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:54:42.337" starttime="20170417 19:54:42.336" status="FAIL"></status>
</kw>
<status endtime="20170417 19:54:42.337" starttime="20170417 19:54:42.074" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:54:52.341" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:54:52.341" starttime="20170417 19:54:52.340" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:54:52.342" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:54:52.342" starttime="20170417 19:54:52.341" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:54:52.342" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:54:52.342" starttime="20170417 19:54:52.342" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:54:52.343" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:54:52.343" starttime="20170417 19:54:52.343" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:54:52.517" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:54:52.517" starttime="20170417 19:54:52.344" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:52.518" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:54:52.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:52.518" starttime="20170417 19:54:52.343" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:54:52.518" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:52.518" starttime="20170417 19:54:52.518" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:52.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:52.519" starttime="20170417 19:54:52.519" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:52.519" starttime="20170417 19:54:52.340" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:54:52.520" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:54:52.520" starttime="20170417 19:54:52.519" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:52.522" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:52.522" starttime="20170417 19:54:52.521" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:52.523" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:54:52.523" starttime="20170417 19:54:52.523" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:52.523" starttime="20170417 19:54:52.522" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:52.523" starttime="20170417 19:54:52.520" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:52.523" starttime="20170417 19:54:52.520" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:54:52.589" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:54:52.589" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:52.589" starttime="20170417 19:54:52.524" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:54:52.591" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:52.591" starttime="20170417 19:54:52.590" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:54:52.592" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:54:52.592" starttime="20170417 19:54:52.591" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:52.592" starttime="20170417 19:54:52.591" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:52.592" starttime="20170417 19:54:52.590" status="PASS"></status>
</kw>
<status endtime="20170417 19:54:52.592" starttime="20170417 19:54:52.589" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:52.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:54:52.592" starttime="20170417 19:54:52.339" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:54:52.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:54:52.593" starttime="20170417 19:54:52.592" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:54:52.593" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:54:52.593" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:54:52.594" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:54:52.594" starttime="20170417 19:54:52.593" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:52.594" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:54:52.594" starttime="20170417 19:54:52.339" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:54:52.594" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:54:52.594" starttime="20170417 19:54:52.338" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:54:52.595" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:54:52.595" starttime="20170417 19:54:52.594" status="FAIL"></status>
</kw>
<status endtime="20170417 19:54:52.595" starttime="20170417 19:54:52.337" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:55:02.599" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:55:02.599" starttime="20170417 19:55:02.598" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:55:02.600" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:55:02.600" starttime="20170417 19:55:02.600" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:55:02.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:55:02.601" starttime="20170417 19:55:02.600" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:55:02.601" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:55:02.601" starttime="20170417 19:55:02.601" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:55:02.779" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:55:02.779" starttime="20170417 19:55:02.602" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:02.779" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:55:02.779" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:02.779" starttime="20170417 19:55:02.601" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:55:02.780" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:02.780" starttime="20170417 19:55:02.780" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:02.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:02.781" starttime="20170417 19:55:02.780" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:02.781" starttime="20170417 19:55:02.598" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:55:02.781" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:55:02.781" starttime="20170417 19:55:02.781" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:02.783" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:02.783" starttime="20170417 19:55:02.783" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:02.784" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:02.784" starttime="20170417 19:55:02.784" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:02.784" starttime="20170417 19:55:02.784" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:02.785" starttime="20170417 19:55:02.782" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:02.785" starttime="20170417 19:55:02.782" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:55:02.849" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:55:02.849" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:02.849" starttime="20170417 19:55:02.785" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:02.851" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:02.851" starttime="20170417 19:55:02.850" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:02.852" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:02.852" starttime="20170417 19:55:02.852" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:02.852" starttime="20170417 19:55:02.851" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:02.852" starttime="20170417 19:55:02.850" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:02.852" starttime="20170417 19:55:02.849" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:02.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:02.852" starttime="20170417 19:55:02.597" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:02.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:02.853" starttime="20170417 19:55:02.853" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:55:02.854" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:55:02.854" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:55:02.854" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:55:02.854" starttime="20170417 19:55:02.853" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:02.854" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:55:02.854" starttime="20170417 19:55:02.597" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:02.854" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:55:02.854" starttime="20170417 19:55:02.596" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:55:02.855" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:55:02.855" starttime="20170417 19:55:02.855" status="FAIL"></status>
</kw>
<status endtime="20170417 19:55:02.855" starttime="20170417 19:55:02.596" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:55:12.859" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:55:12.860" starttime="20170417 19:55:12.858" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:55:12.860" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:55:12.860" starttime="20170417 19:55:12.860" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:55:12.861" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:55:12.861" starttime="20170417 19:55:12.861" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:55:12.862" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:55:12.862" starttime="20170417 19:55:12.861" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:55:13.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:55:13.036" starttime="20170417 19:55:12.862" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:13.036" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:55:13.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:13.036" starttime="20170417 19:55:12.862" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:55:13.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:13.037" starttime="20170417 19:55:13.037" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:13.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:13.038" starttime="20170417 19:55:13.037" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:13.038" starttime="20170417 19:55:12.858" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:55:13.038" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:55:13.038" starttime="20170417 19:55:13.038" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:13.040" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:13.040" starttime="20170417 19:55:13.040" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:13.041" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:13.041" starttime="20170417 19:55:13.041" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:13.042" starttime="20170417 19:55:13.041" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:13.042" starttime="20170417 19:55:13.039" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:13.042" starttime="20170417 19:55:13.039" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:55:13.114" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:55:13.114" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:13.114" starttime="20170417 19:55:13.042" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:13.115" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:13.116" starttime="20170417 19:55:13.115" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:13.117" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:13.117" starttime="20170417 19:55:13.116" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:13.117" starttime="20170417 19:55:13.116" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:13.117" starttime="20170417 19:55:13.115" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:13.117" starttime="20170417 19:55:13.114" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:13.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:13.117" starttime="20170417 19:55:12.857" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:13.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:13.118" starttime="20170417 19:55:13.118" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:55:13.118" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:55:13.119" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:55:13.119" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:55:13.119" starttime="20170417 19:55:13.118" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:13.119" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:55:13.119" starttime="20170417 19:55:12.857" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:13.119" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:55:13.119" starttime="20170417 19:55:12.856" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:55:13.120" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:55:13.120" starttime="20170417 19:55:13.119" status="FAIL"></status>
</kw>
<status endtime="20170417 19:55:13.120" starttime="20170417 19:55:12.856" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:55:23.124" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:55:23.124" starttime="20170417 19:55:23.123" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:55:23.125" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:55:23.125" starttime="20170417 19:55:23.124" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:55:23.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:55:23.125" starttime="20170417 19:55:23.125" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:55:23.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:55:23.126" starttime="20170417 19:55:23.126" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:55:23.303" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:55:23.303" starttime="20170417 19:55:23.127" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:23.304" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:55:23.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:23.304" starttime="20170417 19:55:23.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:55:23.304" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:23.304" starttime="20170417 19:55:23.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:23.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:23.305" starttime="20170417 19:55:23.305" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:23.305" starttime="20170417 19:55:23.123" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:55:23.306" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:55:23.306" starttime="20170417 19:55:23.305" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:23.308" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:23.308" starttime="20170417 19:55:23.307" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:23.309" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:23.309" starttime="20170417 19:55:23.309" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:23.309" starttime="20170417 19:55:23.309" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:23.310" starttime="20170417 19:55:23.307" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:23.310" starttime="20170417 19:55:23.306" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:55:23.375" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:55:23.375" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:23.375" starttime="20170417 19:55:23.310" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:23.376" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:23.376" starttime="20170417 19:55:23.376" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:23.377" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:23.377" starttime="20170417 19:55:23.377" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:23.378" starttime="20170417 19:55:23.377" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:23.378" starttime="20170417 19:55:23.375" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:23.378" starttime="20170417 19:55:23.375" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:23.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:23.378" starttime="20170417 19:55:23.122" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:23.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:23.379" starttime="20170417 19:55:23.378" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:55:23.379" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:55:23.379" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:55:23.379" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:55:23.379" starttime="20170417 19:55:23.379" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:23.380" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:55:23.380" starttime="20170417 19:55:23.121" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:23.380" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:55:23.380" starttime="20170417 19:55:23.121" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:55:23.380" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:55:23.381" starttime="20170417 19:55:23.380" status="FAIL"></status>
</kw>
<status endtime="20170417 19:55:23.381" starttime="20170417 19:55:23.120" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:55:33.385" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:55:33.385" starttime="20170417 19:55:33.384" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:55:33.386" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:55:33.386" starttime="20170417 19:55:33.386" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:55:33.387" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:55:33.387" starttime="20170417 19:55:33.386" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:55:33.387" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:55:33.387" starttime="20170417 19:55:33.387" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:55:33.565" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:55:33.565" starttime="20170417 19:55:33.388" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:33.565" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:55:33.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:33.565" starttime="20170417 19:55:33.388" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:55:33.566" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:33.566" starttime="20170417 19:55:33.565" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:33.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:33.566" starttime="20170417 19:55:33.566" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:33.566" starttime="20170417 19:55:33.384" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:55:33.567" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:55:33.567" starttime="20170417 19:55:33.567" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:33.569" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:33.569" starttime="20170417 19:55:33.569" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:33.570" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:33.570" starttime="20170417 19:55:33.570" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:33.571" starttime="20170417 19:55:33.570" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:33.571" starttime="20170417 19:55:33.568" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:33.571" starttime="20170417 19:55:33.567" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:55:33.636" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:55:33.636" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:33.636" starttime="20170417 19:55:33.571" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:33.638" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:33.638" starttime="20170417 19:55:33.637" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:33.638" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:33.639" starttime="20170417 19:55:33.638" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:33.639" starttime="20170417 19:55:33.638" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:33.639" starttime="20170417 19:55:33.637" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:33.639" starttime="20170417 19:55:33.636" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:33.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:33.639" starttime="20170417 19:55:33.383" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:33.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:33.640" starttime="20170417 19:55:33.639" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:55:33.640" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:55:33.640" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:55:33.640" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:55:33.640" starttime="20170417 19:55:33.640" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:33.641" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:55:33.641" starttime="20170417 19:55:33.382" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:33.641" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:55:33.641" starttime="20170417 19:55:33.382" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:55:33.642" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:55:33.642" starttime="20170417 19:55:33.641" status="FAIL"></status>
</kw>
<status endtime="20170417 19:55:33.642" starttime="20170417 19:55:33.381" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:55:43.646" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:55:43.646" starttime="20170417 19:55:43.645" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:55:43.647" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:55:43.647" starttime="20170417 19:55:43.647" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:55:43.648" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:55:43.648" starttime="20170417 19:55:43.648" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:55:43.649" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:55:43.649" starttime="20170417 19:55:43.648" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:55:43.823" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:55:43.824" starttime="20170417 19:55:43.649" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:43.824" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:55:43.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:43.824" starttime="20170417 19:55:43.649" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:55:43.824" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:43.825" starttime="20170417 19:55:43.824" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:43.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:43.825" starttime="20170417 19:55:43.825" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:43.825" starttime="20170417 19:55:43.645" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:55:43.826" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:55:43.826" starttime="20170417 19:55:43.826" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:43.828" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:43.828" starttime="20170417 19:55:43.827" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:43.829" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:43.829" starttime="20170417 19:55:43.829" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:43.829" starttime="20170417 19:55:43.828" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:43.829" starttime="20170417 19:55:43.827" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:43.829" starttime="20170417 19:55:43.826" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:55:43.894" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:55:43.894" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:43.894" starttime="20170417 19:55:43.830" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:43.896" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:43.896" starttime="20170417 19:55:43.895" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:43.897" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:43.897" starttime="20170417 19:55:43.897" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:43.897" starttime="20170417 19:55:43.896" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:43.897" starttime="20170417 19:55:43.895" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:43.897" starttime="20170417 19:55:43.894" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:43.898" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:43.898" starttime="20170417 19:55:43.644" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:43.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:43.898" starttime="20170417 19:55:43.898" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:55:43.899" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:55:43.899" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:55:43.899" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:55:43.899" starttime="20170417 19:55:43.899" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:43.900" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:55:43.900" starttime="20170417 19:55:43.643" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:43.900" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:55:43.900" starttime="20170417 19:55:43.643" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:55:43.900" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:55:43.901" starttime="20170417 19:55:43.900" status="FAIL"></status>
</kw>
<status endtime="20170417 19:55:43.901" starttime="20170417 19:55:43.642" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:55:53.905" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:55:53.905" starttime="20170417 19:55:53.904" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:55:53.906" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:55:53.906" starttime="20170417 19:55:53.905" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:55:53.906" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:55:53.906" starttime="20170417 19:55:53.906" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:55:53.907" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:55:53.907" starttime="20170417 19:55:53.906" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:55:54.083" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:55:54.083" starttime="20170417 19:55:53.908" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:54.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:55:54.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:54.084" starttime="20170417 19:55:53.907" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:55:54.084" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:54.084" starttime="20170417 19:55:54.084" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:54.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:54.085" starttime="20170417 19:55:54.085" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:54.085" starttime="20170417 19:55:53.903" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:55:54.086" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:55:54.086" starttime="20170417 19:55:54.085" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:54.088" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:54.088" starttime="20170417 19:55:54.087" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:54.089" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:55:54.089" starttime="20170417 19:55:54.089" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:54.089" starttime="20170417 19:55:54.088" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:54.089" starttime="20170417 19:55:54.086" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:54.090" starttime="20170417 19:55:54.086" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:55:54.154" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:55:54.154" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:54.155" starttime="20170417 19:55:54.090" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:55:54.156" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:54.156" starttime="20170417 19:55:54.156" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:55:54.157" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:55:54.157" starttime="20170417 19:55:54.157" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:54.157" starttime="20170417 19:55:54.156" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:54.157" starttime="20170417 19:55:54.155" status="PASS"></status>
</kw>
<status endtime="20170417 19:55:54.157" starttime="20170417 19:55:54.155" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:54.158" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:55:54.158" starttime="20170417 19:55:53.903" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:55:54.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:55:54.158" starttime="20170417 19:55:54.158" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:55:54.159" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:55:54.159" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:55:54.159" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:55:54.159" starttime="20170417 19:55:54.159" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:54.159" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:55:54.159" starttime="20170417 19:55:53.902" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:55:54.160" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:55:54.160" starttime="20170417 19:55:53.902" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:55:54.160" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:55:54.160" starttime="20170417 19:55:54.160" status="FAIL"></status>
</kw>
<status endtime="20170417 19:55:54.160" starttime="20170417 19:55:53.901" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:56:04.164" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:56:04.165" starttime="20170417 19:56:04.164" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:56:04.165" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:56:04.165" starttime="20170417 19:56:04.165" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:56:04.166" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:56:04.166" starttime="20170417 19:56:04.166" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:56:04.167" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:56:04.167" starttime="20170417 19:56:04.166" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:56:04.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:56:04.342" starttime="20170417 19:56:04.167" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:04.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:56:04.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:04.342" starttime="20170417 19:56:04.167" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:56:04.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:04.343" starttime="20170417 19:56:04.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:04.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:04.343" starttime="20170417 19:56:04.343" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:04.344" starttime="20170417 19:56:04.163" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:56:04.344" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:56:04.344" starttime="20170417 19:56:04.344" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:04.346" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:04.346" starttime="20170417 19:56:04.345" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:04.347" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:04.347" starttime="20170417 19:56:04.347" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:04.347" starttime="20170417 19:56:04.346" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:04.347" starttime="20170417 19:56:04.345" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:04.347" starttime="20170417 19:56:04.344" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:56:04.423" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:56:04.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:04.423" starttime="20170417 19:56:04.348" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:04.425" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:04.425" starttime="20170417 19:56:04.424" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:04.426" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:04.426" starttime="20170417 19:56:04.426" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:04.426" starttime="20170417 19:56:04.425" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:04.426" starttime="20170417 19:56:04.424" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:04.426" starttime="20170417 19:56:04.423" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:04.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:04.427" starttime="20170417 19:56:04.162" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:04.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:04.427" starttime="20170417 19:56:04.427" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:56:04.428" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:56:04.428" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:56:04.428" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:56:04.428" starttime="20170417 19:56:04.427" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:04.428" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:56:04.428" starttime="20170417 19:56:04.162" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:04.428" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:56:04.428" starttime="20170417 19:56:04.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:56:04.429" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:56:04.429" starttime="20170417 19:56:04.429" status="FAIL"></status>
</kw>
<status endtime="20170417 19:56:04.429" starttime="20170417 19:56:04.161" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:56:14.433" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:56:14.434" starttime="20170417 19:56:14.433" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:56:14.434" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:56:14.435" starttime="20170417 19:56:14.434" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:56:14.435" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:56:14.435" starttime="20170417 19:56:14.435" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:56:14.436" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:56:14.436" starttime="20170417 19:56:14.435" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:56:14.633" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:56:14.633" starttime="20170417 19:56:14.436" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:14.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:56:14.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:14.633" starttime="20170417 19:56:14.436" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:56:14.634" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:14.634" starttime="20170417 19:56:14.633" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:14.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:14.634" starttime="20170417 19:56:14.634" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:14.635" starttime="20170417 19:56:14.432" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:56:14.635" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:56:14.635" starttime="20170417 19:56:14.635" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:14.637" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:14.637" starttime="20170417 19:56:14.637" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:14.638" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:14.638" starttime="20170417 19:56:14.638" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:14.638" starttime="20170417 19:56:14.637" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:14.638" starttime="20170417 19:56:14.636" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:14.639" starttime="20170417 19:56:14.635" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:56:14.704" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:56:14.704" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:14.704" starttime="20170417 19:56:14.639" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:14.708" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:14.708" starttime="20170417 19:56:14.705" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:14.709" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:14.709" starttime="20170417 19:56:14.708" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:14.709" starttime="20170417 19:56:14.708" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:14.709" starttime="20170417 19:56:14.705" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:14.709" starttime="20170417 19:56:14.704" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:14.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:14.709" starttime="20170417 19:56:14.431" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:14.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:14.710" starttime="20170417 19:56:14.709" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:56:14.710" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:56:14.710" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:56:14.711" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:56:14.711" starttime="20170417 19:56:14.710" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:14.711" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:56:14.711" starttime="20170417 19:56:14.431" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:14.711" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:56:14.711" starttime="20170417 19:56:14.430" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:56:14.712" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:56:14.712" starttime="20170417 19:56:14.711" status="FAIL"></status>
</kw>
<status endtime="20170417 19:56:14.712" starttime="20170417 19:56:14.430" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:56:24.716" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:56:24.716" starttime="20170417 19:56:24.715" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:56:24.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:56:24.717" starttime="20170417 19:56:24.716" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:56:24.717" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:56:24.717" starttime="20170417 19:56:24.717" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:56:24.718" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:56:24.718" starttime="20170417 19:56:24.718" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:56:24.906" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:56:24.906" starttime="20170417 19:56:24.719" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:24.906" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:56:24.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:24.906" starttime="20170417 19:56:24.718" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:56:24.907" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:24.907" starttime="20170417 19:56:24.906" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:24.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:24.907" starttime="20170417 19:56:24.907" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:24.908" starttime="20170417 19:56:24.715" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:56:24.908" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:56:24.908" starttime="20170417 19:56:24.908" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:24.911" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:24.911" starttime="20170417 19:56:24.909" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:24.911" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:24.912" starttime="20170417 19:56:24.911" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:24.912" starttime="20170417 19:56:24.911" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:24.912" starttime="20170417 19:56:24.909" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:24.912" starttime="20170417 19:56:24.908" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:56:24.976" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:56:24.976" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:24.977" starttime="20170417 19:56:24.912" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:24.978" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:24.978" starttime="20170417 19:56:24.978" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:24.979" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:24.979" starttime="20170417 19:56:24.979" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:24.979" starttime="20170417 19:56:24.978" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:24.979" starttime="20170417 19:56:24.977" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:24.980" starttime="20170417 19:56:24.977" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:24.980" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:24.980" starttime="20170417 19:56:24.714" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:24.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:24.980" starttime="20170417 19:56:24.980" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:56:24.981" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:56:24.981" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:56:24.981" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:56:24.981" starttime="20170417 19:56:24.981" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:24.981" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:56:24.981" starttime="20170417 19:56:24.713" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:24.982" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:56:24.982" starttime="20170417 19:56:24.713" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:56:24.982" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:56:24.982" starttime="20170417 19:56:24.982" status="FAIL"></status>
</kw>
<status endtime="20170417 19:56:24.982" starttime="20170417 19:56:24.712" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:56:34.986" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:56:34.987" starttime="20170417 19:56:34.986" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:56:34.987" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:56:34.987" starttime="20170417 19:56:34.987" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:56:34.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:56:34.988" starttime="20170417 19:56:34.988" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:56:34.989" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:56:34.989" starttime="20170417 19:56:34.988" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:56:35.170" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:56:35.170" starttime="20170417 19:56:34.989" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:35.170" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:56:35.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:35.170" starttime="20170417 19:56:34.989" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:56:35.171" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:35.171" starttime="20170417 19:56:35.171" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:35.172" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:35.172" starttime="20170417 19:56:35.171" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:35.172" starttime="20170417 19:56:34.985" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:56:35.172" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:56:35.172" starttime="20170417 19:56:35.172" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:35.174" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:35.174" starttime="20170417 19:56:35.174" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:35.175" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:35.175" starttime="20170417 19:56:35.175" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:35.176" starttime="20170417 19:56:35.175" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:35.176" starttime="20170417 19:56:35.173" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:35.176" starttime="20170417 19:56:35.173" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:56:35.240" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:56:35.240" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:35.240" starttime="20170417 19:56:35.176" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:35.242" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:35.242" starttime="20170417 19:56:35.241" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:35.243" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:35.243" starttime="20170417 19:56:35.243" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:35.243" starttime="20170417 19:56:35.242" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:35.243" starttime="20170417 19:56:35.241" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:35.243" starttime="20170417 19:56:35.240" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:35.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:35.243" starttime="20170417 19:56:34.985" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:35.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:35.244" starttime="20170417 19:56:35.244" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:56:35.245" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:56:35.245" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:56:35.245" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:56:35.245" starttime="20170417 19:56:35.244" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:35.245" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:56:35.245" starttime="20170417 19:56:34.984" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:35.245" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:56:35.245" starttime="20170417 19:56:34.984" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:56:35.246" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:56:35.246" starttime="20170417 19:56:35.246" status="FAIL"></status>
</kw>
<status endtime="20170417 19:56:35.246" starttime="20170417 19:56:34.983" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:56:45.250" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:56:45.250" starttime="20170417 19:56:45.249" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:56:45.251" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:56:45.251" starttime="20170417 19:56:45.251" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:56:45.252" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:56:45.252" starttime="20170417 19:56:45.251" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:56:45.252" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:56:45.252" starttime="20170417 19:56:45.252" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:56:45.428" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:56:45.428" starttime="20170417 19:56:45.253" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:45.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:56:45.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:45.428" starttime="20170417 19:56:45.253" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:56:45.429" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:45.429" starttime="20170417 19:56:45.428" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:45.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:45.429" starttime="20170417 19:56:45.429" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:45.430" starttime="20170417 19:56:45.249" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:56:45.430" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:56:45.430" starttime="20170417 19:56:45.430" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:45.433" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:45.433" starttime="20170417 19:56:45.432" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:45.433" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:45.434" starttime="20170417 19:56:45.433" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:45.434" starttime="20170417 19:56:45.433" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:45.434" starttime="20170417 19:56:45.431" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:45.434" starttime="20170417 19:56:45.430" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:56:45.516" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:56:45.516" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:45.516" starttime="20170417 19:56:45.434" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:45.518" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:45.518" starttime="20170417 19:56:45.517" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:45.518" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:45.519" starttime="20170417 19:56:45.518" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:45.519" starttime="20170417 19:56:45.518" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:45.519" starttime="20170417 19:56:45.517" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:45.519" starttime="20170417 19:56:45.516" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:45.519" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:45.519" starttime="20170417 19:56:45.248" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:45.520" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:45.520" starttime="20170417 19:56:45.519" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:56:45.520" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:56:45.520" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:56:45.520" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:56:45.521" starttime="20170417 19:56:45.520" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:45.521" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:56:45.521" starttime="20170417 19:56:45.248" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:45.521" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:56:45.521" starttime="20170417 19:56:45.247" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:56:45.522" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:56:45.522" starttime="20170417 19:56:45.521" status="FAIL"></status>
</kw>
<status endtime="20170417 19:56:45.522" starttime="20170417 19:56:45.247" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:56:55.526" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:56:55.526" starttime="20170417 19:56:55.525" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:56:55.527" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:56:55.527" starttime="20170417 19:56:55.526" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:56:55.527" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:56:55.527" starttime="20170417 19:56:55.527" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:56:55.528" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:56:55.528" starttime="20170417 19:56:55.528" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:56:55.702" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:56:55.702" starttime="20170417 19:56:55.529" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:55.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:56:55.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:55.702" starttime="20170417 19:56:55.528" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:56:55.703" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:55.703" starttime="20170417 19:56:55.702" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:55.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:55.703" starttime="20170417 19:56:55.703" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:55.704" starttime="20170417 19:56:55.525" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:56:55.704" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:56:55.704" starttime="20170417 19:56:55.704" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:55.706" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:55.706" starttime="20170417 19:56:55.705" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:55.707" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:56:55.707" starttime="20170417 19:56:55.707" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:55.708" starttime="20170417 19:56:55.706" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:55.708" starttime="20170417 19:56:55.705" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:55.708" starttime="20170417 19:56:55.704" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:56:55.773" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:56:55.773" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:55.773" starttime="20170417 19:56:55.708" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:56:55.775" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:55.775" starttime="20170417 19:56:55.774" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:56:55.776" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:56:55.776" starttime="20170417 19:56:55.775" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:55.776" starttime="20170417 19:56:55.775" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:55.776" starttime="20170417 19:56:55.774" status="PASS"></status>
</kw>
<status endtime="20170417 19:56:55.776" starttime="20170417 19:56:55.773" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:55.776" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:56:55.776" starttime="20170417 19:56:55.524" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:56:55.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:56:55.777" starttime="20170417 19:56:55.777" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:56:55.778" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:56:55.778" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:56:55.778" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:56:55.778" starttime="20170417 19:56:55.777" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:55.778" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:56:55.778" starttime="20170417 19:56:55.524" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:56:55.778" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:56:55.778" starttime="20170417 19:56:55.523" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:56:55.779" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:56:55.779" starttime="20170417 19:56:55.779" status="FAIL"></status>
</kw>
<status endtime="20170417 19:56:55.779" starttime="20170417 19:56:55.522" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:57:05.783" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:57:05.783" starttime="20170417 19:57:05.782" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:57:05.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:57:05.784" starttime="20170417 19:57:05.783" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:57:05.784" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:57:05.784" starttime="20170417 19:57:05.784" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:57:05.785" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:57:05.785" starttime="20170417 19:57:05.785" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:57:05.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:57:05.966" starttime="20170417 19:57:05.786" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:05.966" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:57:05.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:05.966" starttime="20170417 19:57:05.785" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:57:05.967" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:05.967" starttime="20170417 19:57:05.966" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:05.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:05.967" starttime="20170417 19:57:05.967" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:05.968" starttime="20170417 19:57:05.782" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:57:05.968" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:57:05.968" starttime="20170417 19:57:05.968" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:05.970" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:05.970" starttime="20170417 19:57:05.969" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:05.971" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:05.971" starttime="20170417 19:57:05.971" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:05.971" starttime="20170417 19:57:05.970" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:05.971" starttime="20170417 19:57:05.969" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:05.971" starttime="20170417 19:57:05.968" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:57:06.036" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:57:06.036" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:06.036" starttime="20170417 19:57:05.972" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:06.038" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:06.038" starttime="20170417 19:57:06.037" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:06.039" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:06.039" starttime="20170417 19:57:06.039" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:06.039" starttime="20170417 19:57:06.038" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:06.039" starttime="20170417 19:57:06.037" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:06.039" starttime="20170417 19:57:06.036" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:06.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:06.039" starttime="20170417 19:57:05.781" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:06.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:06.040" starttime="20170417 19:57:06.040" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:57:06.041" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:57:06.041" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:57:06.041" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:57:06.041" starttime="20170417 19:57:06.040" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:06.041" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:57:06.041" starttime="20170417 19:57:05.781" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:06.041" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:57:06.041" starttime="20170417 19:57:05.780" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:57:06.042" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:57:06.042" starttime="20170417 19:57:06.042" status="FAIL"></status>
</kw>
<status endtime="20170417 19:57:06.042" starttime="20170417 19:57:05.780" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:57:16.046" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:57:16.047" starttime="20170417 19:57:16.045" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:57:16.047" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:57:16.047" starttime="20170417 19:57:16.047" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:57:16.048" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:57:16.048" starttime="20170417 19:57:16.047" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:57:16.049" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:57:16.049" starttime="20170417 19:57:16.048" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:57:16.222" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:57:16.222" starttime="20170417 19:57:16.049" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:16.222" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:57:16.222" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:16.222" starttime="20170417 19:57:16.049" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:57:16.223" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:16.223" starttime="20170417 19:57:16.223" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:16.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:16.224" starttime="20170417 19:57:16.223" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:16.224" starttime="20170417 19:57:16.045" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:57:16.224" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:57:16.224" starttime="20170417 19:57:16.224" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:16.226" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:16.227" starttime="20170417 19:57:16.226" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:16.227" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:16.227" starttime="20170417 19:57:16.227" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:16.228" starttime="20170417 19:57:16.227" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:16.228" starttime="20170417 19:57:16.225" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:16.228" starttime="20170417 19:57:16.225" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:57:16.293" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:57:16.293" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:16.293" starttime="20170417 19:57:16.228" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:16.295" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:16.295" starttime="20170417 19:57:16.295" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:16.296" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:16.296" starttime="20170417 19:57:16.296" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:16.297" starttime="20170417 19:57:16.295" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:16.297" starttime="20170417 19:57:16.294" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:16.297" starttime="20170417 19:57:16.294" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:16.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:16.297" starttime="20170417 19:57:16.044" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:16.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:16.298" starttime="20170417 19:57:16.297" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:57:16.298" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:57:16.298" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:57:16.298" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:57:16.298" starttime="20170417 19:57:16.298" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:16.299" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:57:16.299" starttime="20170417 19:57:16.044" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:16.299" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:57:16.299" starttime="20170417 19:57:16.043" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:57:16.299" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:57:16.300" starttime="20170417 19:57:16.299" status="FAIL"></status>
</kw>
<status endtime="20170417 19:57:16.300" starttime="20170417 19:57:16.043" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:57:26.303" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:57:26.303" starttime="20170417 19:57:26.303" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:57:26.304" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:57:26.304" starttime="20170417 19:57:26.304" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:57:26.305" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:57:26.305" starttime="20170417 19:57:26.304" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:57:26.305" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:57:26.305" starttime="20170417 19:57:26.305" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:57:26.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:57:26.493" starttime="20170417 19:57:26.306" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:26.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:57:26.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:26.493" starttime="20170417 19:57:26.306" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:57:26.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:26.494" starttime="20170417 19:57:26.494" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:26.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:26.495" starttime="20170417 19:57:26.494" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:26.495" starttime="20170417 19:57:26.302" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:57:26.496" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:57:26.496" starttime="20170417 19:57:26.495" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:26.498" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:26.498" starttime="20170417 19:57:26.497" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:26.499" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:26.499" starttime="20170417 19:57:26.499" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:26.499" starttime="20170417 19:57:26.498" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:26.499" starttime="20170417 19:57:26.496" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:26.499" starttime="20170417 19:57:26.496" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:57:26.564" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:57:26.564" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:26.564" starttime="20170417 19:57:26.500" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:26.566" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:26.566" starttime="20170417 19:57:26.565" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:26.567" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:26.567" starttime="20170417 19:57:26.567" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:26.567" starttime="20170417 19:57:26.566" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:26.567" starttime="20170417 19:57:26.565" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:26.567" starttime="20170417 19:57:26.564" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:26.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:26.567" starttime="20170417 19:57:26.301" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:26.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:26.568" starttime="20170417 19:57:26.568" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:57:26.569" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:57:26.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:57:26.569" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:57:26.569" starttime="20170417 19:57:26.568" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:26.569" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:57:26.569" starttime="20170417 19:57:26.301" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:26.569" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:57:26.569" starttime="20170417 19:57:26.300" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:57:26.570" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:57:26.570" starttime="20170417 19:57:26.570" status="FAIL"></status>
</kw>
<status endtime="20170417 19:57:26.570" starttime="20170417 19:57:26.300" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:57:36.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:57:36.574" starttime="20170417 19:57:36.573" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:57:36.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:57:36.575" starttime="20170417 19:57:36.574" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:57:36.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:57:36.575" starttime="20170417 19:57:36.575" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:57:36.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:57:36.576" starttime="20170417 19:57:36.576" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:57:36.752" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:57:36.752" starttime="20170417 19:57:36.577" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:36.752" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:57:36.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:36.752" starttime="20170417 19:57:36.576" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:57:36.753" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:36.753" starttime="20170417 19:57:36.753" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:36.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:36.754" starttime="20170417 19:57:36.753" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:36.754" starttime="20170417 19:57:36.573" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:57:36.754" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:57:36.755" starttime="20170417 19:57:36.754" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:36.757" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:36.757" starttime="20170417 19:57:36.756" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:36.757" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:36.758" starttime="20170417 19:57:36.757" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:36.758" starttime="20170417 19:57:36.757" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:36.758" starttime="20170417 19:57:36.755" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:36.758" starttime="20170417 19:57:36.755" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:57:36.823" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:57:36.823" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:36.823" starttime="20170417 19:57:36.758" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:36.825" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:36.825" starttime="20170417 19:57:36.824" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:36.825" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:36.826" starttime="20170417 19:57:36.825" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:36.826" starttime="20170417 19:57:36.825" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:36.826" starttime="20170417 19:57:36.824" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:36.826" starttime="20170417 19:57:36.823" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:36.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:36.826" starttime="20170417 19:57:36.572" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:36.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:36.827" starttime="20170417 19:57:36.826" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:57:36.827" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:57:36.827" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:57:36.828" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:57:36.828" starttime="20170417 19:57:36.827" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:36.828" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:57:36.828" starttime="20170417 19:57:36.572" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:36.828" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:57:36.828" starttime="20170417 19:57:36.571" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:57:36.829" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:57:36.829" starttime="20170417 19:57:36.828" status="FAIL"></status>
</kw>
<status endtime="20170417 19:57:36.829" starttime="20170417 19:57:36.571" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:57:46.833" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:57:46.834" starttime="20170417 19:57:46.833" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:57:46.834" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:57:46.834" starttime="20170417 19:57:46.834" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:57:46.835" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:57:46.835" starttime="20170417 19:57:46.835" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:57:46.836" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:57:46.836" starttime="20170417 19:57:46.835" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:57:47.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:57:47.011" starttime="20170417 19:57:46.836" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:47.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:57:47.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:47.012" starttime="20170417 19:57:46.836" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:57:47.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:47.012" starttime="20170417 19:57:47.012" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:47.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:47.013" starttime="20170417 19:57:47.013" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:47.013" starttime="20170417 19:57:46.832" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:57:47.014" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:57:47.014" starttime="20170417 19:57:47.013" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:47.016" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:47.016" starttime="20170417 19:57:47.015" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:47.017" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:47.017" starttime="20170417 19:57:47.016" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:47.017" starttime="20170417 19:57:47.016" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:47.017" starttime="20170417 19:57:47.014" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:47.017" starttime="20170417 19:57:47.014" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:57:47.082" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:57:47.082" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:47.082" starttime="20170417 19:57:47.017" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:47.086" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:47.086" starttime="20170417 19:57:47.084" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:47.087" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:47.087" starttime="20170417 19:57:47.087" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:47.087" starttime="20170417 19:57:47.086" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:47.087" starttime="20170417 19:57:47.083" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:47.088" starttime="20170417 19:57:47.083" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:47.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:47.088" starttime="20170417 19:57:46.831" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:47.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:47.088" starttime="20170417 19:57:47.088" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:57:47.089" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:57:47.089" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:57:47.089" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:57:47.089" starttime="20170417 19:57:47.089" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:47.089" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:57:47.090" starttime="20170417 19:57:46.831" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:47.090" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:57:47.090" starttime="20170417 19:57:46.830" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:57:47.090" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:57:47.090" starttime="20170417 19:57:47.090" status="FAIL"></status>
</kw>
<status endtime="20170417 19:57:47.091" starttime="20170417 19:57:46.830" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:57:57.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:57:57.095" starttime="20170417 19:57:57.094" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:57:57.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:57:57.095" starttime="20170417 19:57:57.095" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:57:57.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:57:57.096" starttime="20170417 19:57:57.095" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:57:57.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:57:57.096" starttime="20170417 19:57:57.096" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:57:57.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:57:57.277" starttime="20170417 19:57:57.097" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:57.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:57:57.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:57.277" starttime="20170417 19:57:57.097" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:57:57.278" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:57.278" starttime="20170417 19:57:57.278" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:57.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:57.279" starttime="20170417 19:57:57.278" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:57.279" starttime="20170417 19:57:57.093" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:57:57.279" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:57:57.279" starttime="20170417 19:57:57.279" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:57.282" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:57.282" starttime="20170417 19:57:57.281" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:57.283" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:57:57.283" starttime="20170417 19:57:57.283" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:57.283" starttime="20170417 19:57:57.282" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:57.283" starttime="20170417 19:57:57.280" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:57.283" starttime="20170417 19:57:57.280" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:57:57.347" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:57:57.347" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:57.347" starttime="20170417 19:57:57.283" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:57:57.349" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:57.349" starttime="20170417 19:57:57.349" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:57:57.350" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:57:57.350" starttime="20170417 19:57:57.350" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:57.350" starttime="20170417 19:57:57.349" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:57.350" starttime="20170417 19:57:57.348" status="PASS"></status>
</kw>
<status endtime="20170417 19:57:57.350" starttime="20170417 19:57:57.348" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:57.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:57:57.351" starttime="20170417 19:57:57.093" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:57:57.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:57:57.351" starttime="20170417 19:57:57.351" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:57:57.352" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:57:57.352" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:57:57.352" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:57:57.352" starttime="20170417 19:57:57.351" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:57.352" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:57:57.352" starttime="20170417 19:57:57.092" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:57:57.352" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:57:57.352" starttime="20170417 19:57:57.092" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:57:57.353" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:57:57.353" starttime="20170417 19:57:57.353" status="FAIL"></status>
</kw>
<status endtime="20170417 19:57:57.353" starttime="20170417 19:57:57.091" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:58:07.357" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:58:07.357" starttime="20170417 19:58:07.357" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:58:07.358" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:58:07.358" starttime="20170417 19:58:07.358" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:58:07.359" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:58:07.359" starttime="20170417 19:58:07.358" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:58:07.359" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:58:07.359" starttime="20170417 19:58:07.359" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:58:07.534" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:58:07.534" starttime="20170417 19:58:07.360" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:07.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:58:07.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:07.535" starttime="20170417 19:58:07.360" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:58:07.535" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:07.535" starttime="20170417 19:58:07.535" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:07.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:07.536" starttime="20170417 19:58:07.536" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:07.536" starttime="20170417 19:58:07.356" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:58:07.537" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:58:07.537" starttime="20170417 19:58:07.537" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:58:07.540" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:58:07.540" starttime="20170417 19:58:07.539" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:58:07.541" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:58:07.541" starttime="20170417 19:58:07.541" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:07.541" starttime="20170417 19:58:07.540" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:07.542" starttime="20170417 19:58:07.538" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:07.542" starttime="20170417 19:58:07.538" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:58:07.607" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:58:07.607" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:07.607" starttime="20170417 19:58:07.542" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:58:07.609" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:58:07.609" starttime="20170417 19:58:07.608" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:58:07.610" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:58:07.610" starttime="20170417 19:58:07.609" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:07.610" starttime="20170417 19:58:07.609" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:07.610" starttime="20170417 19:58:07.608" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:07.610" starttime="20170417 19:58:07.607" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:07.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:07.610" starttime="20170417 19:58:07.355" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:07.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:07.611" starttime="20170417 19:58:07.611" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:58:07.612" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:58:07.612" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:58:07.612" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:58:07.612" starttime="20170417 19:58:07.611" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:07.612" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:58:07.612" starttime="20170417 19:58:07.355" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:07.612" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:58:07.612" starttime="20170417 19:58:07.354" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:58:07.613" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:58:07.613" starttime="20170417 19:58:07.613" status="FAIL"></status>
</kw>
<status endtime="20170417 19:58:07.613" starttime="20170417 19:58:07.354" status="FAIL"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:58:17.617" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:58:17.618" starttime="20170417 19:58:17.617" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:58:17.618" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:58:17.618" starttime="20170417 19:58:17.618" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:58:17.619" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:58:17.619" starttime="20170417 19:58:17.619" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:58:17.620" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:58:17.620" starttime="20170417 19:58:17.619" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:58:17.793" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:58:17.793" starttime="20170417 19:58:17.620" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:17.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:58:17.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:17.793" starttime="20170417 19:58:17.620" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:58:17.794" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:17.794" starttime="20170417 19:58:17.794" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:17.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:17.795" starttime="20170417 19:58:17.794" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:17.795" starttime="20170417 19:58:17.616" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:58:17.795" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170417 19:58:17.795" starttime="20170417 19:58:17.795" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:58:17.798" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:58:17.798" starttime="20170417 19:58:17.797" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:58:17.798" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170417 19:58:17.799" starttime="20170417 19:58:17.798" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:17.799" starttime="20170417 19:58:17.798" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:17.799" starttime="20170417 19:58:17.796" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:17.799" starttime="20170417 19:58:17.796" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:58:17.864" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170417 19:58:17.864" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:17.864" starttime="20170417 19:58:17.799" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:58:17.866" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:58:17.866" starttime="20170417 19:58:17.865" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:58:17.867" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:58:17.867" starttime="20170417 19:58:17.867" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:17.867" starttime="20170417 19:58:17.866" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:17.867" starttime="20170417 19:58:17.865" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:17.867" starttime="20170417 19:58:17.864" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:17.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:17.867" starttime="20170417 19:58:17.615" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:17.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:17.868" starttime="20170417 19:58:17.868" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:58:17.869" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:58:17.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:58:17.869" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170417 19:58:17.869" starttime="20170417 19:58:17.868" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:17.869" level="INFO">${state} = Off</msg>
<status endtime="20170417 19:58:17.869" starttime="20170417 19:58:17.615" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:17.869" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170417 19:58:17.869" starttime="20170417 19:58:17.614" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170417 19:58:17.870" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:58:17.870" starttime="20170417 19:58:17.870" status="FAIL"></status>
</kw>
<status endtime="20170417 19:58:17.870" starttime="20170417 19:58:17.614" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:17.870" level="FAIL">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</msg>
<status endtime="20170417 19:58:17.870" starttime="20170417 19:48:11.583" status="FAIL"></status>
</kw>
<status endtime="20170417 19:58:17.871" starttime="20170417 19:47:42.223" status="FAIL"></status>
</kw>
<status endtime="20170417 19:58:17.871" starttime="20170417 19:47:42.223" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:58:17.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:58:17.875" starttime="20170417 19:58:17.874" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:58:17.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:58:17.876" starttime="20170417 19:58:17.875" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:58:17.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:58:17.876" starttime="20170417 19:58:17.876" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:58:17.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:58:17.877" starttime="20170417 19:58:17.877" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:58:18.051" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:58:18.051" starttime="20170417 19:58:17.878" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:18.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:58:18.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:18.051" starttime="20170417 19:58:17.877" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:58:18.052" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:18.052" starttime="20170417 19:58:18.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:18.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:18.052" starttime="20170417 19:58:18.052" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:18.053" starttime="20170417 19:58:17.874" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:58:18.053" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170417 19:58:18.053" starttime="20170417 19:58:18.053" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:58:18.055" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:58:18.055" starttime="20170417 19:58:18.054" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:58:18.057" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170417 19:58:18.057" starttime="20170417 19:58:18.057" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:18.057" starttime="20170417 19:58:18.056" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:18.057" starttime="20170417 19:58:18.054" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:18.058" starttime="20170417 19:58:18.053" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:58:18.120" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170417 19:58:18.120" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:18.120" starttime="20170417 19:58:18.058" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170417 19:58:18.122" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:58:18.122" starttime="20170417 19:58:18.121" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170417 19:58:18.123" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170417 19:58:18.123" starttime="20170417 19:58:18.122" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:18.123" starttime="20170417 19:58:18.122" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:18.123" starttime="20170417 19:58:18.121" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:18.123" starttime="20170417 19:58:18.120" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:18.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:18.123" starttime="20170417 19:58:17.873" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:18.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:18.124" starttime="20170417 19:58:18.123" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170417 19:58:18.124" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:58:18.124" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170417 19:58:18.124" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170417 19:58:18.125" starttime="20170417 19:58:18.124" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:18.125" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170417 19:58:18.125" starttime="20170417 19:58:17.873" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:18.125" level="INFO">${host_state} = Running</msg>
<status endtime="20170417 19:58:18.125" starttime="20170417 19:58:17.872" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170417 19:58:18.126" level="FAIL">Running != Quiesced</msg>
<status endtime="20170417 19:58:18.126" starttime="20170417 19:58:18.126" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:18.127" level="INFO">${status} = False</msg>
<status endtime="20170417 19:58:18.127" starttime="20170417 19:58:18.126" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:18.127" level="INFO">${status} = False</msg>
<status endtime="20170417 19:58:18.127" starttime="20170417 19:58:17.872" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170417 19:58:18.129" level="INFO">Length is 10</msg>
<status endtime="20170417 19:58:18.129" starttime="20170417 19:58:18.128" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170417 19:58:18.133" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170417 19:58:21.140" level="INFO">${RC} = 0</msg>
<msg timestamp="20170417 19:58:21.141" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.57 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.612 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status endtime="20170417 19:58:21.141" starttime="20170417 19:58:18.129" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170417 19:58:21.144" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.57 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.612 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.615 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.600 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.600/0.850/1.576/0.420 ms</msg>
<status endtime="20170417 19:58:21.144" starttime="20170417 19:58:21.143" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170417 19:58:21.144" starttime="20170417 19:58:21.144" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:21.145" starttime="20170417 19:58:18.128" status="PASS"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170417 19:58:21.311" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170417 19:58:21.311" starttime="20170417 19:58:21.310" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:21.311" level="INFO">${has_host} = False</msg>
<status endtime="20170417 19:58:21.311" starttime="20170417 19:58:21.309" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170417 19:58:21.312" starttime="20170417 19:58:21.312" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:21.312" starttime="20170417 19:58:21.311" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170417 19:58:21.313" level="INFO">${port_num} = 22</msg>
<status endtime="20170417 19:58:21.314" starttime="20170417 19:58:21.313" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170417 19:58:21.314" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170417 19:58:21.314" starttime="20170417 19:58:21.314" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170417 19:58:21.315" level="INFO">${https_num} = 443</msg>
<status endtime="20170417 19:58:21.315" starttime="20170417 19:58:21.314" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170417 19:58:21.315" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170417 19:58:21.315" starttime="20170417 19:58:21.315" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:21.316" starttime="20170417 19:58:21.313" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:21.316" starttime="20170417 19:58:21.312" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170417 19:58:21.317" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170417 19:58:21.317" starttime="20170417 19:58:21.316" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:21.317" level="INFO">${has_port} = False</msg>
<status endtime="20170417 19:58:21.317" starttime="20170417 19:58:21.316" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170417 19:58:21.319" starttime="20170417 19:58:21.318" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170417 19:58:21.319" starttime="20170417 19:58:21.319" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:21.319" starttime="20170417 19:58:21.318" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:21.320" starttime="20170417 19:58:21.317" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170417 19:58:21.320" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170417 19:58:22.970" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170417 19:58:22.970" starttime="20170417 19:58:21.320" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:22.971" starttime="20170417 19:58:21.309" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170417 19:58:22.987" level="INFO">${cur_time} = 2017-04-17 19:58:22:986845</msg>
<status endtime="20170417 19:58:22.987" starttime="20170417 19:58:22.987" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170417 19:58:22.988" level="INFO">${cur_time} = 20170417195822986845</msg>
<status endtime="20170417 19:58:22.988" starttime="20170417 19:58:22.987" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:22.988" starttime="20170417 19:58:22.986" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:22.991" level="INFO">${FFDC_TIME} = 20170417195822986845</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170417 19:58:23.000" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170417 19:58:23.000" starttime="20170417 19:58:23.000" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170417 19:58:23.000" level="INFO">${suite_name} = 20170417195822986845_TestsTestBasicPoweron</msg>
<status endtime="20170417 19:58:23.000" starttime="20170417 19:58:23.000" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170417 19:58:23.001" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170417 19:58:23.001" starttime="20170417 19:58:23.001" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170417 19:58:23.002" level="INFO">${test_name} = 20170417195822986845_PowerOnTest</msg>
<status endtime="20170417 19:58:23.002" starttime="20170417 19:58:23.001" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.002" starttime="20170417 19:58:22.999" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:23.021" level="INFO">${LOG_PREFIX} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.022" level="INFO">Created directory '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.023" starttime="20170417 19:58:23.021" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:23.026" level="INFO">${FFDC_FILE_PATH} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.028" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.028" starttime="20170417 19:58:23.028" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.028" starttime="20170417 19:58:23.027" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.029" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.030" starttime="20170417 19:58:23.029" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.030" starttime="20170417 19:58:23.029" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.031" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.031" starttime="20170417 19:58:23.030" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.031" starttime="20170417 19:58:23.030" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.032" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.032" starttime="20170417 19:58:23.032" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.032" starttime="20170417 19:58:23.031" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.033" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.033" starttime="20170417 19:58:23.033" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.034" starttime="20170417 19:58:23.032" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.035" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.035" starttime="20170417 19:58:23.034" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.035" starttime="20170417 19:58:23.034" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.036" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.036" starttime="20170417 19:58:23.036" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.037" starttime="20170417 19:58:23.035" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.038" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.038" starttime="20170417 19:58:23.037" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.038" starttime="20170417 19:58:23.037" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.039" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.039" starttime="20170417 19:58:23.039" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.039" starttime="20170417 19:58:23.038" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.041" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.041" starttime="20170417 19:58:23.040" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.041" starttime="20170417 19:58:23.040" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.042" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.042" starttime="20170417 19:58:23.041" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.042" starttime="20170417 19:58:23.041" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.043" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.043" starttime="20170417 19:58:23.043" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.043" starttime="20170417 19:58:23.042" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.044" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.044" starttime="20170417 19:58:23.044" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.045" starttime="20170417 19:58:23.043" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:23.046" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170417 19:58:23.113" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:23.113" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170417 19:58:23.113" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:23.113" starttime="20170417 19:58:23.045" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170417 19:58:23.113" level="INFO">Length is 0</msg>
<status endtime="20170417 19:58:23.113" starttime="20170417 19:58:23.113" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170417 19:58:23.114" level="INFO">Length is 11</msg>
<status endtime="20170417 19:58:23.114" starttime="20170417 19:58:23.114" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:23.114" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170417 19:58:23.114" starttime="20170417 19:58:23.045" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.115" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.116" starttime="20170417 19:58:23.115" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.116" starttime="20170417 19:58:23.114" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.116" starttime="20170417 19:58:23.039" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.117" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.117" starttime="20170417 19:58:23.117" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.117" starttime="20170417 19:58:23.116" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170417 19:58:23.118" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170417 19:58:23.118" starttime="20170417 19:58:23.118" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.119" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.120" starttime="20170417 19:58:23.119" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.120" starttime="20170417 19:58:23.118" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.121" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.121" starttime="20170417 19:58:23.120" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.121" starttime="20170417 19:58:23.120" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.121" starttime="20170417 19:58:23.118" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.122" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.122" starttime="20170417 19:58:23.122" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.122" starttime="20170417 19:58:23.121" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.123" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.123" starttime="20170417 19:58:23.123" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.124" starttime="20170417 19:58:23.122" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.124" starttime="20170417 19:58:23.121" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.125" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.125" starttime="20170417 19:58:23.124" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.125" starttime="20170417 19:58:23.124" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.126" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.126" starttime="20170417 19:58:23.126" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.126" starttime="20170417 19:58:23.125" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.126" starttime="20170417 19:58:23.124" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.126" starttime="20170417 19:58:23.118" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:23.127" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:23.127" starttime="20170417 19:58:23.127" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.128" starttime="20170417 19:58:23.126" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.128" starttime="20170417 19:58:23.027" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170417 19:58:23.129" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170417 19:58:23.129" starttime="20170417 19:58:23.128" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170417 19:58:23.130" level="INFO">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC ...</msg>
<status endtime="20170417 19:58:23.130" starttime="20170417 19:58:23.129" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170417 19:58:23.133" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170417 19:58:23.133" starttime="20170417 19:58:23.133" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:23.133" level="INFO">${has_host} = False</msg>
<status endtime="20170417 19:58:23.133" starttime="20170417 19:58:23.132" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170417 19:58:23.134" starttime="20170417 19:58:23.134" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.135" starttime="20170417 19:58:23.134" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170417 19:58:23.136" level="INFO">${port_num} = 22</msg>
<status endtime="20170417 19:58:23.136" starttime="20170417 19:58:23.136" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170417 19:58:23.137" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170417 19:58:23.137" starttime="20170417 19:58:23.136" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170417 19:58:23.137" level="INFO">${https_num} = 443</msg>
<status endtime="20170417 19:58:23.137" starttime="20170417 19:58:23.137" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170417 19:58:23.138" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170417 19:58:23.138" starttime="20170417 19:58:23.137" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.138" starttime="20170417 19:58:23.135" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.138" starttime="20170417 19:58:23.135" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170417 19:58:23.139" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170417 19:58:23.139" starttime="20170417 19:58:23.139" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:23.139" level="INFO">${has_port} = False</msg>
<status endtime="20170417 19:58:23.139" starttime="20170417 19:58:23.138" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170417 19:58:23.141" starttime="20170417 19:58:23.141" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170417 19:58:23.142" starttime="20170417 19:58:23.141" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.142" starttime="20170417 19:58:23.140" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:23.142" starttime="20170417 19:58:23.140" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170417 19:58:23.142" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170417 19:58:24.891" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170417 19:58:24.891" starttime="20170417 19:58:23.142" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:24.891" starttime="20170417 19:58:23.132" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170417 19:58:24.892" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170417 19:58:24.948" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:24.948" level="INFO">${core_files} = /tmp/core_phosphor-hwmon-.765</msg>
<status endtime="20170417 19:58:24.948" starttime="20170417 19:58:24.892" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170417 19:58:24.949" level="INFO">@{core_list} = [ /tmp/core_phosphor-hwmon-.765 ]</msg>
<status endtime="20170417 19:58:24.949" starttime="20170417 19:58:24.949" status="PASS"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170417 19:58:24.956" starttime="20170417 19:58:24.950" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170417 19:58:25.613" starttime="20170417 19:58:24.957" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.613" starttime="20170417 19:58:24.957" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.613" starttime="20170417 19:58:24.956" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.613" starttime="20170417 19:58:24.949" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_phosphor-hwmon-.765" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170417 19:58:25.907" starttime="20170417 19:58:25.614" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:25.909" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.765'.</msg>
<msg timestamp="20170417 19:58:25.955" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:25.955" level="INFO">${stdout} = </msg>
<msg timestamp="20170417 19:58:25.955" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:25.955" starttime="20170417 19:58:25.908" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170417 19:58:25.956" level="INFO">Length is 0</msg>
<status endtime="20170417 19:58:25.956" starttime="20170417 19:58:25.955" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.956" starttime="20170417 19:58:25.907" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.956" starttime="20170417 19:58:25.613" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.956" starttime="20170417 19:58:25.613" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.956" starttime="20170417 19:58:23.131" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.956" starttime="20170417 19:58:23.131" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.956" starttime="20170417 19:58:23.130" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.956" starttime="20170417 19:58:23.130" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170417 19:58:25.959" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170417 19:58:25.959" starttime="20170417 19:58:25.958" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.959" starttime="20170417 19:58:25.958" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.959" starttime="20170417 19:58:25.957" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.959" starttime="20170417 19:58:25.957" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.959" starttime="20170417 19:58:25.956" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170417 19:58:25.963" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170417 19:58:25.963" starttime="20170417 19:58:25.963" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:25.963" level="INFO">${has_host} = False</msg>
<status endtime="20170417 19:58:25.963" starttime="20170417 19:58:25.962" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170417 19:58:25.965" starttime="20170417 19:58:25.964" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.965" starttime="20170417 19:58:25.964" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170417 19:58:25.967" level="INFO">${port_num} = 22</msg>
<status endtime="20170417 19:58:25.967" starttime="20170417 19:58:25.966" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170417 19:58:25.967" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170417 19:58:25.967" starttime="20170417 19:58:25.967" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170417 19:58:25.968" level="INFO">${https_num} = 443</msg>
<status endtime="20170417 19:58:25.968" starttime="20170417 19:58:25.968" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170417 19:58:25.969" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170417 19:58:25.969" starttime="20170417 19:58:25.968" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.969" starttime="20170417 19:58:25.966" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.969" starttime="20170417 19:58:25.965" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170417 19:58:25.970" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170417 19:58:25.970" starttime="20170417 19:58:25.970" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:25.970" level="INFO">${has_port} = False</msg>
<status endtime="20170417 19:58:25.970" starttime="20170417 19:58:25.969" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170417 19:58:25.972" starttime="20170417 19:58:25.972" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170417 19:58:25.973" starttime="20170417 19:58:25.972" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.973" starttime="20170417 19:58:25.971" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:25.974" starttime="20170417 19:58:25.970" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170417 19:58:25.974" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170417 19:58:27.619" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170417 19:58:27.620" starttime="20170417 19:58:25.974" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.620" starttime="20170417 19:58:25.961" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170417 19:58:27.620" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170417 19:58:27.620" starttime="20170417 19:58:27.620" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170417 19:58:27.622" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status endtime="20170417 19:58:27.622" starttime="20170417 19:58:27.621" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170417 19:58:27.626" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170417 19:58:27.626" starttime="20170417 19:58:27.622" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.629" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.629" starttime="20170417 19:58:27.629" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.630" starttime="20170417 19:58:27.628" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.631" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.631" starttime="20170417 19:58:27.630" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.631" starttime="20170417 19:58:27.630" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.632" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.632" starttime="20170417 19:58:27.632" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.632" starttime="20170417 19:58:27.631" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.634" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.634" starttime="20170417 19:58:27.633" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.634" starttime="20170417 19:58:27.633" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.634" starttime="20170417 19:58:27.628" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.634" starttime="20170417 19:58:27.627" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:27.634" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170417 19:58:27.681" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:27.681" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-25"
VERSION_ID="v1.99.4-25-g8f2f0eb"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170417 19:58:27.681" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:27.681" starttime="20170417 19:58:27.634" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.687" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.687" starttime="20170417 19:58:27.686" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.687" starttime="20170417 19:58:27.686" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.687" starttime="20170417 19:58:27.681" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.687" starttime="20170417 19:58:27.627" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.687" starttime="20170417 19:58:27.626" status="PASS"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.690" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.690" starttime="20170417 19:58:27.690" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.690" starttime="20170417 19:58:27.689" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.691" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.692" starttime="20170417 19:58:27.691" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.692" starttime="20170417 19:58:27.690" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.693" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.693" starttime="20170417 19:58:27.692" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.693" starttime="20170417 19:58:27.692" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.694" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.694" starttime="20170417 19:58:27.694" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.694" starttime="20170417 19:58:27.693" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.694" starttime="20170417 19:58:27.689" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.694" starttime="20170417 19:58:27.688" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:27.695" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170417 19:58:27.769" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170417 19:58:27.769" level="INFO">${stdout} = </msg>
<msg timestamp="20170417 19:58:27.770" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170417 19:58:27.770" starttime="20170417 19:58:27.695" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.775" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.775" starttime="20170417 19:58:27.775" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.776" starttime="20170417 19:58:27.774" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.776" starttime="20170417 19:58:27.770" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.776" starttime="20170417 19:58:27.688" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.776" starttime="20170417 19:58:27.687" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.776" starttime="20170417 19:58:27.626" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.776" starttime="20170417 19:58:27.621" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.776" starttime="20170417 19:58:27.621" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170417 19:58:27.777" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170417 19:58:27.777" starttime="20170417 19:58:27.777" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170417 19:58:27.778" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170417 19:58:27.778" starttime="20170417 19:58:27.778" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.783" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.783" starttime="20170417 19:58:27.782" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.783" starttime="20170417 19:58:27.782" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.784" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.784" starttime="20170417 19:58:27.784" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.784" starttime="20170417 19:58:27.783" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.786" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.786" starttime="20170417 19:58:27.785" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.786" starttime="20170417 19:58:27.785" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:27.787" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:27.787" starttime="20170417 19:58:27.786" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.787" starttime="20170417 19:58:27.786" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.787" starttime="20170417 19:58:27.781" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:27.787" starttime="20170417 19:58:27.780" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:27.788" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170417 19:58:29.085" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:29.086" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg timestamp="20170417 19:58:29.086" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:29.086" starttime="20170417 19:58:27.787" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.092" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.092" starttime="20170417 19:58:29.091" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.092" starttime="20170417 19:58:29.091" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.092" starttime="20170417 19:58:29.086" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.092" starttime="20170417 19:58:27.779" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.092" starttime="20170417 19:58:27.779" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.092" starttime="20170417 19:58:27.779" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.092" starttime="20170417 19:58:27.776" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.092" starttime="20170417 19:58:27.776" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170417 19:58:29.093" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170417 19:58:29.093" starttime="20170417 19:58:29.093" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170417 19:58:29.094" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170417 19:58:29.094" starttime="20170417 19:58:29.094" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.098" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.098" starttime="20170417 19:58:29.097" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.098" starttime="20170417 19:58:29.096" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.099" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.099" starttime="20170417 19:58:29.099" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.099" starttime="20170417 19:58:29.098" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.100" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.100" starttime="20170417 19:58:29.100" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.100" starttime="20170417 19:58:29.099" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.102" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.102" starttime="20170417 19:58:29.101" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.102" starttime="20170417 19:58:29.101" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.102" starttime="20170417 19:58:29.096" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.102" starttime="20170417 19:58:29.095" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:29.102" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170417 19:58:29.149" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:29.149" level="INFO">${stdout} =  19:58:31 up 20 min,  load average: 1.20, 1.13, 0.99</msg>
<msg timestamp="20170417 19:58:29.149" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:29.149" starttime="20170417 19:58:29.102" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.155" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.155" starttime="20170417 19:58:29.154" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.155" starttime="20170417 19:58:29.154" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.155" starttime="20170417 19:58:29.149" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.155" starttime="20170417 19:58:29.095" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.155" starttime="20170417 19:58:29.094" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.158" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.158" starttime="20170417 19:58:29.158" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.158" starttime="20170417 19:58:29.157" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.160" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.160" starttime="20170417 19:58:29.159" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.160" starttime="20170417 19:58:29.158" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.161" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.161" starttime="20170417 19:58:29.161" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.161" starttime="20170417 19:58:29.160" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.162" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.163" starttime="20170417 19:58:29.162" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.163" starttime="20170417 19:58:29.162" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.163" starttime="20170417 19:58:29.157" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.163" starttime="20170417 19:58:29.156" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:29.163" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170417 19:58:29.248" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:29.248" level="INFO">${stdout} = Linux witherspoon 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 #1 Mon Apr 17 18:12:33 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170417 19:58:29.248" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:29.248" starttime="20170417 19:58:29.163" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.254" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.254" starttime="20170417 19:58:29.253" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.254" starttime="20170417 19:58:29.253" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.254" starttime="20170417 19:58:29.248" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.255" starttime="20170417 19:58:29.155" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.255" starttime="20170417 19:58:29.155" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.257" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.258" starttime="20170417 19:58:29.257" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.258" starttime="20170417 19:58:29.257" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.259" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.259" starttime="20170417 19:58:29.258" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.259" starttime="20170417 19:58:29.258" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.261" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.261" starttime="20170417 19:58:29.260" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.261" starttime="20170417 19:58:29.259" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.262" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.262" starttime="20170417 19:58:29.261" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.262" starttime="20170417 19:58:29.261" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.262" starttime="20170417 19:58:29.256" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.262" starttime="20170417 19:58:29.256" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:29.263" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170417 19:58:29.337" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:29.337" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170417 19:58:29.337" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:29.338" starttime="20170417 19:58:29.262" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:29.343" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:29.343" starttime="20170417 19:58:29.343" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.343" starttime="20170417 19:58:29.342" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.343" starttime="20170417 19:58:29.338" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.343" starttime="20170417 19:58:29.255" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.343" starttime="20170417 19:58:29.255" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.344" starttime="20170417 19:58:29.094" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.344" starttime="20170417 19:58:29.093" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.344" starttime="20170417 19:58:29.092" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.344" starttime="20170417 19:58:27.620" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.344" starttime="20170417 19:58:25.961" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.344" starttime="20170417 19:58:25.960" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.344" starttime="20170417 19:58:25.960" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.344" starttime="20170417 19:58:25.959" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170417 19:58:29.347" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170417 19:58:29.347" starttime="20170417 19:58:29.347" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:29.347" level="INFO">${has_host} = False</msg>
<status endtime="20170417 19:58:29.347" starttime="20170417 19:58:29.346" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170417 19:58:29.348" starttime="20170417 19:58:29.348" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.348" starttime="20170417 19:58:29.347" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170417 19:58:29.350" level="INFO">${port_num} = 22</msg>
<status endtime="20170417 19:58:29.350" starttime="20170417 19:58:29.350" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170417 19:58:29.351" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170417 19:58:29.351" starttime="20170417 19:58:29.351" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170417 19:58:29.351" level="INFO">${https_num} = 443</msg>
<status endtime="20170417 19:58:29.351" starttime="20170417 19:58:29.351" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170417 19:58:29.352" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170417 19:58:29.352" starttime="20170417 19:58:29.352" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.353" starttime="20170417 19:58:29.349" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.353" starttime="20170417 19:58:29.349" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170417 19:58:29.354" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170417 19:58:29.354" starttime="20170417 19:58:29.353" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:29.354" level="INFO">${has_port} = False</msg>
<status endtime="20170417 19:58:29.354" starttime="20170417 19:58:29.353" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170417 19:58:29.355" starttime="20170417 19:58:29.355" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170417 19:58:29.356" starttime="20170417 19:58:29.356" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.356" starttime="20170417 19:58:29.355" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:29.356" starttime="20170417 19:58:29.354" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170417 19:58:29.357" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170417 19:58:31.004" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170417 19:58:31.004" starttime="20170417 19:58:29.356" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.004" starttime="20170417 19:58:29.346" status="PASS"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170417 19:58:31.005" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170417 19:58:31.005" starttime="20170417 19:58:31.004" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170417 19:58:31.006" level="INFO">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170417 19:58:31.006" starttime="20170417 19:58:31.006" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:31.007" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_record_log.txt</msg>
<status endtime="20170417 19:58:31.007" starttime="20170417 19:58:31.007" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:58:31.009" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:58:31.010" starttime="20170417 19:58:31.008" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:58:31.010" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:58:31.010" starttime="20170417 19:58:31.010" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:58:31.011" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:58:31.011" starttime="20170417 19:58:31.011" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:58:31.012" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:58:31.012" starttime="20170417 19:58:31.011" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.187" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:58:31.187" starttime="20170417 19:58:31.012" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:31.187" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:58:31.187" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:31.187" starttime="20170417 19:58:31.012" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.188" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:31.188" starttime="20170417 19:58:31.187" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.189" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:31.189" starttime="20170417 19:58:31.188" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.189" starttime="20170417 19:58:31.008" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:58:31.190" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170417 19:58:31.190" starttime="20170417 19:58:31.189" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170417 19:58:31.191" starttime="20170417 19:58:31.190" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:58:31.234" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170417 19:58:31.235" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170417 19:58:31.235" starttime="20170417 19:58:31.191" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170417 19:58:31.235" starttime="20170417 19:58:31.235" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:31.235" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170417 19:58:31.235" starttime="20170417 19:58:31.007" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170417 19:58:31.237" level="FAIL">404 != 200</msg>
<status endtime="20170417 19:58:31.237" starttime="20170417 19:58:31.236" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:31.237" level="INFO">${status} = False</msg>
<status endtime="20170417 19:58:31.237" starttime="20170417 19:58:31.236" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170417 19:58:31.238" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170417 19:58:31.238" starttime="20170417 19:58:31.238" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.238" starttime="20170417 19:58:31.237" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.238" starttime="20170417 19:58:31.006" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:31.239" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_led.txt</msg>
<status endtime="20170417 19:58:31.239" starttime="20170417 19:58:31.238" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:58:31.241" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:58:31.242" starttime="20170417 19:58:31.241" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:58:31.242" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:58:31.242" starttime="20170417 19:58:31.242" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:58:31.243" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:58:31.243" starttime="20170417 19:58:31.243" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:58:31.244" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:58:31.244" starttime="20170417 19:58:31.243" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.425" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:58:31.425" starttime="20170417 19:58:31.244" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:31.425" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:58:31.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:31.425" starttime="20170417 19:58:31.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.426" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:31.426" starttime="20170417 19:58:31.425" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.426" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:31.426" starttime="20170417 19:58:31.426" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.427" starttime="20170417 19:58:31.240" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:58:31.427" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170417 19:58:31.427" starttime="20170417 19:58:31.427" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170417 19:58:31.428" starttime="20170417 19:58:31.427" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:58:31.515" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170417 19:58:31.516" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:31.516" starttime="20170417 19:58:31.428" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170417 19:58:31.516" starttime="20170417 19:58:31.516" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:31.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:31.517" starttime="20170417 19:58:31.239" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:31.518" starttime="20170417 19:58:31.518" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:31.518" level="INFO">${status} = True</msg>
<status endtime="20170417 19:58:31.519" starttime="20170417 19:58:31.517" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170417 19:58:31.519" starttime="20170417 19:58:31.519" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170417 19:58:31.520" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:58:31.520" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170417 19:58:31.520" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status endtime="20170417 19:58:31.520" starttime="20170417 19:58:31.520" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:31.522" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_led.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_led.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:31.522" starttime="20170417 19:58:31.522" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.522" starttime="20170417 19:58:31.521" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.522" starttime="20170417 19:58:31.238" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:31.523" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_inventory.txt</msg>
<status endtime="20170417 19:58:31.523" starttime="20170417 19:58:31.523" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:58:31.525" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:58:31.526" starttime="20170417 19:58:31.525" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:58:31.526" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:58:31.527" starttime="20170417 19:58:31.526" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:58:31.527" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:58:31.527" starttime="20170417 19:58:31.527" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:58:31.528" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:58:31.528" starttime="20170417 19:58:31.527" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.702" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:58:31.702" starttime="20170417 19:58:31.528" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:31.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:58:31.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:31.702" starttime="20170417 19:58:31.528" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.703" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:31.703" starttime="20170417 19:58:31.703" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:31.704" starttime="20170417 19:58:31.703" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.704" starttime="20170417 19:58:31.524" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:58:31.704" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170417 19:58:31.704" starttime="20170417 19:58:31.704" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170417 19:58:31.705" starttime="20170417 19:58:31.705" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:58:31.857" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170417 19:58:31.857" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:31.857" starttime="20170417 19:58:31.705" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170417 19:58:31.858" starttime="20170417 19:58:31.857" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:31.858" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:31.858" starttime="20170417 19:58:31.523" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:31.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:31.859" starttime="20170417 19:58:31.859" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:31.859" level="INFO">${status} = True</msg>
<status endtime="20170417 19:58:31.859" starttime="20170417 19:58:31.858" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170417 19:58:31.860" starttime="20170417 19:58:31.859" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170417 19:58:31.861" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:58:31.861" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170417 19:58:31.861" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status endtime="20170417 19:58:31.861" starttime="20170417 19:58:31.860" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:31.862" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_inventory.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:31.863" starttime="20170417 19:58:31.862" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.863" starttime="20170417 19:58:31.861" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:31.863" starttime="20170417 19:58:31.523" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:31.863" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_sensor_list.txt</msg>
<status endtime="20170417 19:58:31.863" starttime="20170417 19:58:31.863" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:58:31.866" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:58:31.866" starttime="20170417 19:58:31.865" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:58:31.867" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:58:31.867" starttime="20170417 19:58:31.867" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:58:31.868" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:58:31.868" starttime="20170417 19:58:31.868" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:58:31.869" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:58:31.869" starttime="20170417 19:58:31.868" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.077" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:58:32.077" starttime="20170417 19:58:31.870" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:32.077" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:58:32.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:32.077" starttime="20170417 19:58:31.869" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.078" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:32.078" starttime="20170417 19:58:32.077" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:32.078" starttime="20170417 19:58:32.078" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.079" starttime="20170417 19:58:31.864" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:58:32.079" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170417 19:58:32.079" starttime="20170417 19:58:32.079" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170417 19:58:32.080" starttime="20170417 19:58:32.079" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:58:32.286" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170417 19:58:32.286" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:32.286" starttime="20170417 19:58:32.080" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170417 19:58:32.286" starttime="20170417 19:58:32.286" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:32.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:32.287" starttime="20170417 19:58:31.864" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:32.288" starttime="20170417 19:58:32.287" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:32.288" level="INFO">${status} = True</msg>
<status endtime="20170417 19:58:32.288" starttime="20170417 19:58:32.287" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170417 19:58:32.288" starttime="20170417 19:58:32.288" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170417 19:58:32.289" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170417 19:58:32.289" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170417 19:58:32.289" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170417 19:58:32.290" starttime="20170417 19:58:32.289" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:32.291" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_sensor_list.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:32.291" starttime="20170417 19:58:32.290" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.291" starttime="20170417 19:58:32.290" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.291" starttime="20170417 19:58:31.863" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:32.292" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_elog.txt</msg>
<status endtime="20170417 19:58:32.292" starttime="20170417 19:58:32.291" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:58:32.294" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:58:32.296" starttime="20170417 19:58:32.294" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:58:32.297" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:58:32.297" starttime="20170417 19:58:32.297" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:58:32.298" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:58:32.298" starttime="20170417 19:58:32.297" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:58:32.298" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:58:32.299" starttime="20170417 19:58:32.298" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:58:32.476" starttime="20170417 19:58:32.299" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:32.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:58:32.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:32.476" starttime="20170417 19:58:32.299" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:32.477" starttime="20170417 19:58:32.476" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:32.477" starttime="20170417 19:58:32.477" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.477" starttime="20170417 19:58:32.293" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:58:32.478" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170417 19:58:32.478" starttime="20170417 19:58:32.478" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170417 19:58:32.479" starttime="20170417 19:58:32.478" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:58:32.521" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170417 19:58:32.521" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170417 19:58:32.521" starttime="20170417 19:58:32.479" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170417 19:58:32.522" starttime="20170417 19:58:32.521" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:32.522" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170417 19:58:32.522" starttime="20170417 19:58:32.292" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170417 19:58:32.523" level="FAIL">404 != 200</msg>
<status endtime="20170417 19:58:32.523" starttime="20170417 19:58:32.523" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:32.524" level="INFO">${status} = False</msg>
<status endtime="20170417 19:58:32.524" starttime="20170417 19:58:32.522" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170417 19:58:32.525" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170417 19:58:32.525" starttime="20170417 19:58:32.525" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.525" starttime="20170417 19:58:32.524" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.525" starttime="20170417 19:58:32.291" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.525" starttime="20170417 19:58:31.006" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.525" starttime="20170417 19:58:31.005" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.525" starttime="20170417 19:58:31.005" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.525" starttime="20170417 19:58:31.005" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.526" starttime="20170417 19:58:29.345" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.526" starttime="20170417 19:58:29.345" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.526" starttime="20170417 19:58:29.344" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.526" starttime="20170417 19:58:29.344" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170417 19:58:32.530" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170417 19:58:32.530" starttime="20170417 19:58:32.529" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:32.530" level="INFO">${has_host} = False</msg>
<status endtime="20170417 19:58:32.530" starttime="20170417 19:58:32.529" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170417 19:58:32.531" starttime="20170417 19:58:32.531" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.531" starttime="20170417 19:58:32.530" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170417 19:58:32.533" level="INFO">${port_num} = 22</msg>
<status endtime="20170417 19:58:32.533" starttime="20170417 19:58:32.532" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170417 19:58:32.533" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170417 19:58:32.533" starttime="20170417 19:58:32.533" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170417 19:58:32.534" level="INFO">${https_num} = 443</msg>
<status endtime="20170417 19:58:32.534" starttime="20170417 19:58:32.534" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.535" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170417 19:58:32.535" starttime="20170417 19:58:32.534" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.535" starttime="20170417 19:58:32.532" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.535" starttime="20170417 19:58:32.531" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170417 19:58:32.536" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170417 19:58:32.536" starttime="20170417 19:58:32.536" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:32.536" level="INFO">${has_port} = False</msg>
<status endtime="20170417 19:58:32.536" starttime="20170417 19:58:32.535" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170417 19:58:32.538" starttime="20170417 19:58:32.538" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170417 19:58:32.539" starttime="20170417 19:58:32.538" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.539" starttime="20170417 19:58:32.537" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:32.539" starttime="20170417 19:58:32.536" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170417 19:58:32.539" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170417 19:58:34.217" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170417 19:58:34.217" starttime="20170417 19:58:32.539" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.217" starttime="20170417 19:58:32.528" status="PASS"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170417 19:58:34.218" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170417 19:58:34.218" starttime="20170417 19:58:34.217" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg timestamp="20170417 19:58:34.224" level="INFO">Running command 'echo 9.3.86.161 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg timestamp="20170417 19:58:34.228" level="INFO">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status endtime="20170417 19:58:34.228" starttime="20170417 19:58:34.219" status="PASS"></status>
</kw>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170417 19:58:34.232" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') ]</msg>
<status endtime="20170417 19:58:34.232" starttime="20170417 19:58:34.230" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:34.233" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_proc_list.txt</msg>
<status endtime="20170417 19:58:34.234" starttime="20170417 19:58:34.233" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170417 19:58:34.236" starttime="20170417 19:58:34.235" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:34.236" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170417 19:58:34.486" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:34.487" level="INFO">${stdout} = Mem: 146740K used, 286192K free, 14368K shrd, 10360K buff, 48504K cached
CPU:  18% usr   0% sys   0% nic  81% idle   0% io   0% irq   0% sirq
Load average: 1.27 1.15 1.00 1/130 1183
  PID  PPID USER  ...</msg>
<msg timestamp="20170417 19:58:34.487" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:34.487" starttime="20170417 19:58:34.236" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:34.493" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_proc_list.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:34.493" starttime="20170417 19:58:34.492" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.493" starttime="20170417 19:58:34.491" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.493" starttime="20170417 19:58:34.487" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.493" starttime="20170417 19:58:34.234" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170417 19:58:34.498" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status endtime="20170417 19:58:34.501" starttime="20170417 19:58:34.493" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.501" starttime="20170417 19:58:34.233" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:34.505" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_procinfo.txt</msg>
<status endtime="20170417 19:58:34.505" starttime="20170417 19:58:34.503" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170417 19:58:34.507" starttime="20170417 19:58:34.507" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:34.508" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170417 19:58:34.569" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:34.569" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170417 19:58:34.569" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:34.569" starttime="20170417 19:58:34.508" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:34.576" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_procinfo.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:34.576" starttime="20170417 19:58:34.574" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.576" starttime="20170417 19:58:34.574" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.576" starttime="20170417 19:58:34.569" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.576" starttime="20170417 19:58:34.505" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170417 19:58:34.581" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status endtime="20170417 19:58:34.584" starttime="20170417 19:58:34.577" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.585" starttime="20170417 19:58:34.502" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:34.588" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_dmesg.txt</msg>
<status endtime="20170417 19:58:34.589" starttime="20170417 19:58:34.587" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170417 19:58:34.591" starttime="20170417 19:58:34.591" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:34.592" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170417 19:58:34.683" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:34.683" level="INFO">${stdout} = On node 0 totalpages: 110592
free_area_init_node: node 0, pgdat 8071d2c4, node_mem_map 9ec19000
  Normal zone: 992 pages used for memmap
  Normal zone: 0 pages reserved
  Normal zone: 110592 pages, LI...</msg>
<msg timestamp="20170417 19:58:34.683" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:34.683" starttime="20170417 19:58:34.592" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:34.692" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_dmesg.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:34.692" starttime="20170417 19:58:34.691" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.692" starttime="20170417 19:58:34.690" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.692" starttime="20170417 19:58:34.683" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.692" starttime="20170417 19:58:34.589" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170417 19:58:34.697" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status endtime="20170417 19:58:34.700" starttime="20170417 19:58:34.692" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:34.700" starttime="20170417 19:58:34.585" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:34.704" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_journalctl.txt</msg>
<status endtime="20170417 19:58:34.704" starttime="20170417 19:58:34.703" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170417 19:58:34.707" starttime="20170417 19:58:34.706" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:34.707" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170417 19:58:36.020" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:36.021" level="INFO">${stdout} = -- Logs begin at Mon 2017-04-17 19:37:48 UTC, end at Mon 2017-04-17 19:58:35 UTC. --
Apr 17 19:37:48 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 17 19:37:48 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170417 19:58:36.021" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:36.021" starttime="20170417 19:58:34.707" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:36.030" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_journalctl.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:36.030" starttime="20170417 19:58:36.029" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.030" starttime="20170417 19:58:36.027" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.030" starttime="20170417 19:58:36.022" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.030" starttime="20170417 19:58:34.704" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170417 19:58:36.035" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status endtime="20170417 19:58:36.039" starttime="20170417 19:58:36.030" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.039" starttime="20170417 19:58:34.701" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170417 19:58:36.043" level="INFO">${logpath} = /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_meminfo.txt</msg>
<status endtime="20170417 19:58:36.043" starttime="20170417 19:58:36.042" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170417 19:58:36.045" starttime="20170417 19:58:36.045" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170417 19:58:36.046" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170417 19:58:36.098" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170417 19:58:36.098" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          286192 kB
MemAvailable:     326444 kB
Buffers:           10360 kB
Cached:            48508 kB
SwapCached:            0 kB
Active:            97872 kB
Inac...</msg>
<msg timestamp="20170417 19:58:36.098" level="INFO">${stderr} = </msg>
<status endtime="20170417 19:58:36.098" starttime="20170417 19:58:36.046" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:36.104" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_meminfo.txt"&gt;/tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:36.105" starttime="20170417 19:58:36.104" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.105" starttime="20170417 19:58:36.103" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.105" starttime="20170417 19:58:36.099" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.105" starttime="20170417 19:58:36.043" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg timestamp="20170417 19:58:36.110" level="INFO">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27468/obmc-robot/logs/20170417195822986845_TestsTestBasicPoweron/20170417195822986845_PowerOnTest/20170417195822986845_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status endtime="20170417 19:58:36.112" starttime="20170417 19:58:36.105" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.113" starttime="20170417 19:58:36.040" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.113" starttime="20170417 19:58:34.232" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.114" starttime="20170417 19:58:34.218" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.114" starttime="20170417 19:58:34.218" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.114" starttime="20170417 19:58:34.218" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.114" starttime="20170417 19:58:32.528" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.115" starttime="20170417 19:58:32.527" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.115" starttime="20170417 19:58:32.526" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.115" starttime="20170417 19:58:32.526" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170417 19:58:36.122" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170417 19:58:36.124" starttime="20170417 19:58:36.122" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170417 19:58:36.124" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170417 19:58:36.124" starttime="20170417 19:58:36.124" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170417 19:58:36.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170417 19:58:36.125" starttime="20170417 19:58:36.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170417 19:58:36.125" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170417 19:58:36.126" starttime="20170417 19:58:36.125" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170417 19:58:36.302" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170417 19:58:36.302" starttime="20170417 19:58:36.126" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:36.303" level="INFO">${status} = PASS</msg>
<msg timestamp="20170417 19:58:36.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170417 19:58:36.303" starttime="20170417 19:58:36.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170417 19:58:36.303" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:36.303" starttime="20170417 19:58:36.303" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:36.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170417 19:58:36.304" starttime="20170417 19:58:36.304" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.304" starttime="20170417 19:58:36.121" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170417 19:58:36.305" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170417 19:58:36.305" starttime="20170417 19:58:36.304" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170417 19:58:36.306" starttime="20170417 19:58:36.305" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170417 19:58:36.378" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170417 19:58:36.378" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170417 19:58:36.378" starttime="20170417 19:58:36.306" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170417 19:58:36.379" starttime="20170417 19:58:36.378" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:36.379" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170417 19:58:36.379" starttime="20170417 19:58:36.120" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170417 19:58:36.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170417 19:58:36.380" level="FAIL">404 != 200</msg>
<status endtime="20170417 19:58:36.380" starttime="20170417 19:58:36.379" status="FAIL"></status>
</kw>
<msg timestamp="20170417 19:58:36.380" level="INFO">${status} = False</msg>
<status endtime="20170417 19:58:36.380" starttime="20170417 19:58:36.379" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170417 19:58:36.381" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170417 19:58:36.381" starttime="20170417 19:58:36.380" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.381" starttime="20170417 19:58:36.119" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.381" starttime="20170417 19:58:36.118" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.381" starttime="20170417 19:58:36.116" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.381" starttime="20170417 19:58:36.115" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.381" starttime="20170417 19:58:23.130" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.381" starttime="20170417 19:58:23.129" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.382" starttime="20170417 19:58:23.129" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.382" starttime="20170417 19:58:23.129" status="PASS"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170417 19:58:36.529" starttime="20170417 19:58:36.382" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.529" starttime="20170417 19:58:23.128" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.529" starttime="20170417 19:58:18.128" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.530" starttime="20170417 19:58:18.127" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170417 19:58:36.530" starttime="20170417 19:58:36.530" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:36.531" level="INFO">Directory '&lt;a href="file:///tmp/root/27468/obmc-robot/logs"&gt;/tmp/root/27468/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170417 19:58:36.531" starttime="20170417 19:58:36.531" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:36.532" level="INFO">File '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27468/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170417 19:58:36.532" starttime="20170417 19:58:36.532" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:36.532" level="INFO">${exist} = True</msg>
<status endtime="20170417 19:58:36.532" starttime="20170417 19:58:36.532" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170417 19:58:36.533" starttime="20170417 19:58:36.533" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170417 19:58:36.534" level="INFO">${cur_time} = 2017-04-17 19:58:36:533815</msg>
<status endtime="20170417 19:58:36.534" starttime="20170417 19:58:36.534" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170417 19:58:36.535" level="INFO">${cur_time} = 20170417195836533815</msg>
<status endtime="20170417 19:58:36.535" starttime="20170417 19:58:36.534" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:36.535" level="INFO">${cur_time} = 20170417195836533815</msg>
<status endtime="20170417 19:58:36.535" starttime="20170417 19:58:36.533" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170417 19:58:36.536" level="INFO">Appended to file '&lt;a href="file:///tmp/root/27468/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27468/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170417 19:58:36.536" starttime="20170417 19:58:36.535" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.536" starttime="20170417 19:58:36.530" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.536" starttime="20170417 19:58:17.871" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170417 19:58:36.538" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170417 19:58:36.538" starttime="20170417 19:58:36.537" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170417 19:58:36.539" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170417 19:58:36.539" starttime="20170417 19:58:36.538" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:36.539" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170417 19:58:36.539" starttime="20170417 19:58:36.537" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:58:36.540" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170417 19:58:36.540" starttime="20170417 19:58:36.540" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:58:36.551" starttime="20170417 19:58:36.541" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170417 19:58:36.566" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170417 19:58:36.585" level="INFO">${rc} = 0</msg>
<msg timestamp="20170417 19:58:36.586" level="INFO">${output} = /tmp/root/27468/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170417 19:58:36.586" starttime="20170417 19:58:36.551" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170417 19:58:36.619" starttime="20170417 19:58:36.598" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170417 19:58:36.622" starttime="20170417 19:58:36.620" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:58:36.623" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170417 19:58:36.623" starttime="20170417 19:58:36.622" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:36.623" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170417 19:58:36.623" starttime="20170417 19:58:36.539" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:58:36.624" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170417 19:58:36.624" starttime="20170417 19:58:36.624" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:58:36.633" starttime="20170417 19:58:36.625" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170417 19:58:36.650" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170417 19:58:36.677" level="INFO">${rc} = 0</msg>
<msg timestamp="20170417 19:58:36.677" level="INFO">${os_con_pid} = 171</msg>
<status endtime="20170417 19:58:36.678" starttime="20170417 19:58:36.634" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170417 19:58:36.705" starttime="20170417 19:58:36.687" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:58:36.705" level="INFO">${cmd_buf} = kill -9 171</msg>
<status endtime="20170417 19:58:36.705" starttime="20170417 19:58:36.705" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:58:36.713" starttime="20170417 19:58:36.706" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.713" starttime="20170417 19:58:36.706" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170417 19:58:36.718" level="INFO">Running command 'kill -9 171 2&gt;&amp;1'.</msg>
<status endtime="20170417 19:58:36.722" starttime="20170417 19:58:36.714" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:36.723" level="INFO">${rc} = 0</msg>
<msg timestamp="20170417 19:58:36.723" level="INFO">${output} = </msg>
<status endtime="20170417 19:58:36.723" starttime="20170417 19:58:36.714" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170417 19:58:36.737" starttime="20170417 19:58:36.726" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.738" starttime="20170417 19:58:36.725" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170417 19:58:36.738" level="INFO">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170417 19:58:36.739" starttime="20170417 19:58:36.738" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170417 19:58:36.750" starttime="20170417 19:58:36.739" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170417 19:58:36.754" level="INFO">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170417 19:58:36.758" level="INFO">${rc} = 0</msg>
<msg timestamp="20170417 19:58:36.758" level="INFO">${output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status endtime="20170417 19:58:36.758" starttime="20170417 19:58:36.750" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170417 19:58:36.773" starttime="20170417 19:58:36.760" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170417 19:58:36.774" starttime="20170417 19:58:36.774" status="PASS"></status>
</kw>
<msg timestamp="20170417 19:58:36.775" level="INFO">${sol_log} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status endtime="20170417 19:58:36.775" starttime="20170417 19:58:36.536" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170417 19:58:36.776" level="INFO">spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: </msg>
<status endtime="20170417 19:58:36.776" starttime="20170417 19:58:36.775" status="PASS"></status>
</kw>
<status endtime="20170417 19:58:36.776" starttime="20170417 19:58:17.871" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170417 19:58:36.776" starttime="20170417 19:47:42.002" critical="yes" status="FAIL">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170417 19:58:36.778" starttime="20170417 19:47:41.973" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170417 19:58:36.781" starttime="20170417 19:47:37.102" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" id="s1" fail="1">Tests</stat>
<stat pass="1" name="Security" id="s1-s1" fail="0">Tests.Security</stat>
<stat pass="1" name="Test Ssl" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
