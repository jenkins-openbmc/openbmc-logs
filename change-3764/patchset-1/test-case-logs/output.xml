<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170419 06:56:58.826">
<suite name="Tests" id="s1" source="/tmp/root/29863/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:56:59.211">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 06:56:59.211" status="FAIL" endtime="20170419 06:56:59.211"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:56:59.211">${has_host} = False</msg>
<status starttime="20170419 06:56:59.211" status="PASS" endtime="20170419 06:56:59.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 06:56:59.212" status="PASS" endtime="20170419 06:56:59.213"></status>
</kw>
<status starttime="20170419 06:56:59.212" status="PASS" endtime="20170419 06:56:59.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:56:59.214">${port_num} = 22</msg>
<status starttime="20170419 06:56:59.214" status="PASS" endtime="20170419 06:56:59.214"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:56:59.214">${SSH_PORT} = 22</msg>
<status starttime="20170419 06:56:59.214" status="PASS" endtime="20170419 06:56:59.214"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:56:59.215">${https_num} = 443</msg>
<status starttime="20170419 06:56:59.215" status="PASS" endtime="20170419 06:56:59.215"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:56:59.216">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 06:56:59.215" status="PASS" endtime="20170419 06:56:59.216"></status>
</kw>
<status starttime="20170419 06:56:59.213" status="PASS" endtime="20170419 06:56:59.216"></status>
</kw>
<status starttime="20170419 06:56:59.213" status="PASS" endtime="20170419 06:56:59.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:56:59.217">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 06:56:59.217" status="FAIL" endtime="20170419 06:56:59.217"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:56:59.217">${has_port} = False</msg>
<status starttime="20170419 06:56:59.216" status="PASS" endtime="20170419 06:56:59.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 06:56:59.218" status="PASS" endtime="20170419 06:56:59.219"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 06:56:59.219" status="PASS" endtime="20170419 06:56:59.219"></status>
</kw>
<status starttime="20170419 06:56:59.218" status="PASS" endtime="20170419 06:56:59.219"></status>
</kw>
<status starttime="20170419 06:56:59.217" status="PASS" endtime="20170419 06:56:59.219"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:56:59.220">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 06:57:01.089">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 06:56:59.219" status="PASS" endtime="20170419 06:57:01.089"></status>
</kw>
<status starttime="20170419 06:56:59.210" status="PASS" endtime="20170419 06:57:01.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:01.090">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170419 06:57:01.157">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 06:57:01.157">${output} = VERSION_ID="v1.99.4-39-g1fa1b6c"</msg>
<msg level="INFO" timestamp="20170419 06:57:01.157">${stderr} = </msg>
<status starttime="20170419 06:57:01.090" status="PASS" endtime="20170419 06:57:01.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:01.158">Length is 0</msg>
<status starttime="20170419 06:57:01.158" status="PASS" endtime="20170419 06:57:01.158"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:01.158">VERSION_ID="v1.99.4-39-g1fa1b6c"</msg>
<status starttime="20170419 06:57:01.158" status="PASS" endtime="20170419 06:57:01.159"></status>
</kw>
<status starttime="20170419 06:57:01.090" status="PASS" endtime="20170419 06:57:01.159"></status>
</kw>
<status starttime="20170419 06:57:01.089" status="PASS" endtime="20170419 06:57:01.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:01.160">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170419 06:57:01.295">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 06:57:01.295">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170419 06:57:01.295">${stderr} = </msg>
<status starttime="20170419 06:57:01.160" status="PASS" endtime="20170419 06:57:01.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:01.296">Length is 0</msg>
<status starttime="20170419 06:57:01.296" status="PASS" endtime="20170419 06:57:01.296"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:01.296">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status starttime="20170419 06:57:01.159" status="PASS" endtime="20170419 06:57:01.296"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:01.297">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status starttime="20170419 06:57:01.296" status="PASS" endtime="20170419 06:57:01.298"></status>
</kw>
<status starttime="20170419 06:57:01.159" status="PASS" endtime="20170419 06:57:01.298"></status>
</kw>
<status starttime="20170419 06:57:01.159" status="PASS" endtime="20170419 06:57:01.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:01.299">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170419 06:57:01.426">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 06:57:01.427">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170419 06:57:01.427">${stderr} = </msg>
<status starttime="20170419 06:57:01.299" status="PASS" endtime="20170419 06:57:01.427"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:01.427">Length is 0</msg>
<status starttime="20170419 06:57:01.427" status="PASS" endtime="20170419 06:57:01.427"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:01.428">Length is 11</msg>
<status starttime="20170419 06:57:01.427" status="PASS" endtime="20170419 06:57:01.428"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:01.428">${bmc_model} = Witherspoon</msg>
<status starttime="20170419 06:57:01.299" status="PASS" endtime="20170419 06:57:01.428"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:01.428">BMC Model=Witherspoon</msg>
<status starttime="20170419 06:57:01.428" status="PASS" endtime="20170419 06:57:01.428"></status>
</kw>
<status starttime="20170419 06:57:01.298" status="PASS" endtime="20170419 06:57:01.428"></status>
</kw>
<status starttime="20170419 06:57:01.298" status="PASS" endtime="20170419 06:57:01.429"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:01.431">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 06:57:01.430" status="FAIL" endtime="20170419 06:57:01.431"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:01.431">${has_host} = False</msg>
<status starttime="20170419 06:57:01.430" status="PASS" endtime="20170419 06:57:01.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 06:57:01.432" status="PASS" endtime="20170419 06:57:01.432"></status>
</kw>
<status starttime="20170419 06:57:01.431" status="PASS" endtime="20170419 06:57:01.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:01.433">${port_num} = 22</msg>
<status starttime="20170419 06:57:01.433" status="PASS" endtime="20170419 06:57:01.433"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:01.434">${SSH_PORT} = 22</msg>
<status starttime="20170419 06:57:01.433" status="PASS" endtime="20170419 06:57:01.434"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:01.434">${https_num} = 443</msg>
<status starttime="20170419 06:57:01.434" status="PASS" endtime="20170419 06:57:01.434"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:01.435">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 06:57:01.435" status="PASS" endtime="20170419 06:57:01.435"></status>
</kw>
<status starttime="20170419 06:57:01.433" status="PASS" endtime="20170419 06:57:01.435"></status>
</kw>
<status starttime="20170419 06:57:01.432" status="PASS" endtime="20170419 06:57:01.435"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:01.436">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 06:57:01.436" status="FAIL" endtime="20170419 06:57:01.436"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:01.436">${has_port} = False</msg>
<status starttime="20170419 06:57:01.435" status="PASS" endtime="20170419 06:57:01.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 06:57:01.438" status="PASS" endtime="20170419 06:57:01.438"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 06:57:01.438" status="PASS" endtime="20170419 06:57:01.439"></status>
</kw>
<status starttime="20170419 06:57:01.437" status="PASS" endtime="20170419 06:57:01.439"></status>
</kw>
<status starttime="20170419 06:57:01.437" status="PASS" endtime="20170419 06:57:01.439"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:01.439">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 06:57:03.091">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 06:57:01.439" status="PASS" endtime="20170419 06:57:03.091"></status>
</kw>
<status starttime="20170419 06:57:01.429" status="PASS" endtime="20170419 06:57:03.091"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.092">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170419 06:57:03.197">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 06:57:03.197">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170419 06:57:03.197">${stderr} = </msg>
<status starttime="20170419 06:57:03.092" status="PASS" endtime="20170419 06:57:03.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.198">Length is 0</msg>
<status starttime="20170419 06:57:03.198" status="PASS" endtime="20170419 06:57:03.198"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.198">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170419 06:57:03.092" status="PASS" endtime="20170419 06:57:03.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170419 06:57:03.198" status="PASS" endtime="20170419 06:57:03.199"></status>
</kw>
<status starttime="20170419 06:57:01.429" status="PASS" endtime="20170419 06:57:03.199"></status>
</kw>
<status starttime="20170419 06:57:01.429" status="PASS" endtime="20170419 06:57:03.199"></status>
</kw>
<status starttime="20170419 06:56:59.210" status="PASS" endtime="20170419 06:57:03.199"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/root/29863/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/root/29863/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.271">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:03.271" status="PASS" endtime="20170419 06:57:03.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.273">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:03.272" status="PASS" endtime="20170419 06:57:03.273"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.273">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:03.273" status="PASS" endtime="20170419 06:57:03.273"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.274">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:03.274" status="PASS" endtime="20170419 06:57:03.274"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.469">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:03.275" status="PASS" endtime="20170419 06:57:03.470"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.470">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:03.470">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:03.274" status="PASS" endtime="20170419 06:57:03.470"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.471">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:03.470" status="PASS" endtime="20170419 06:57:03.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:03.471" status="PASS" endtime="20170419 06:57:03.471"></status>
</kw>
<status starttime="20170419 06:57:03.271" status="PASS" endtime="20170419 06:57:03.472"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.477">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:03.476" status="PASS" endtime="20170419 06:57:03.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:03.477" status="PASS" endtime="20170419 06:57:03.478"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.478">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:03.478" status="PASS" endtime="20170419 06:57:03.479"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:03.479" status="PASS" endtime="20170419 06:57:03.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.678">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:03.480" status="PASS" endtime="20170419 06:57:03.678"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.678">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:03.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:03.479" status="PASS" endtime="20170419 06:57:03.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.679">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:03.679" status="PASS" endtime="20170419 06:57:03.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.680">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:03.680" status="PASS" endtime="20170419 06:57:03.680"></status>
</kw>
<status starttime="20170419 06:57:03.476" status="PASS" endtime="20170419 06:57:03.680"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.681">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:57:03.680" status="PASS" endtime="20170419 06:57:03.681"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.683">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:03.682" status="PASS" endtime="20170419 06:57:03.683"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.684">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:03.684" status="PASS" endtime="20170419 06:57:03.684"></status>
</kw>
<status starttime="20170419 06:57:03.683" status="PASS" endtime="20170419 06:57:03.684"></status>
</kw>
<status starttime="20170419 06:57:03.681" status="PASS" endtime="20170419 06:57:03.685"></status>
</kw>
<status starttime="20170419 06:57:03.681" status="PASS" endtime="20170419 06:57:03.685"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.748">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:57:03.748">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:03.685" status="PASS" endtime="20170419 06:57:03.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.750">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:03.749" status="PASS" endtime="20170419 06:57:03.750"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.751">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:03.750" status="PASS" endtime="20170419 06:57:03.751"></status>
</kw>
<status starttime="20170419 06:57:03.750" status="PASS" endtime="20170419 06:57:03.751"></status>
</kw>
<status starttime="20170419 06:57:03.749" status="PASS" endtime="20170419 06:57:03.751"></status>
</kw>
<status starttime="20170419 06:57:03.748" status="PASS" endtime="20170419 06:57:03.751"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.751">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:03.475" status="PASS" endtime="20170419 06:57:03.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:03.751" status="PASS" endtime="20170419 06:57:03.752"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.752">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:03.752">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:03.752">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:57:03.752" status="PASS" endtime="20170419 06:57:03.753"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.753">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:57:03.473" status="PASS" endtime="20170419 06:57:03.753"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.753">${host_state} = Off</msg>
<status starttime="20170419 06:57:03.473" status="PASS" endtime="20170419 06:57:03.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:03.754">Off != Quiesced</msg>
<status starttime="20170419 06:57:03.754" status="FAIL" endtime="20170419 06:57:03.754"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.754">${status} = False</msg>
<status starttime="20170419 06:57:03.753" status="PASS" endtime="20170419 06:57:03.754"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.755">${status} = False</msg>
<status starttime="20170419 06:57:03.472" status="PASS" endtime="20170419 06:57:03.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170419 06:57:03.755" status="PASS" endtime="20170419 06:57:03.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170419 06:57:03.755" status="PASS" endtime="20170419 06:57:03.756"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 06:57:03.757">Created directory '&lt;a href="file:///tmp/root/29863/obmc-robot/logs"&gt;/tmp/root/29863/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170419 06:57:03.756" status="PASS" endtime="20170419 06:57:03.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:03.758">File '/tmp/root/29863/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170419 06:57:03.758" status="FAIL" endtime="20170419 06:57:03.758"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.758">${exist} = False</msg>
<status starttime="20170419 06:57:03.757" status="PASS" endtime="20170419 06:57:03.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 06:57:03.759">Created file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/test_history.txt"&gt;/tmp/root/29863/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 06:57:03.759" status="PASS" endtime="20170419 06:57:03.759"></status>
</kw>
<status starttime="20170419 06:57:03.758" status="PASS" endtime="20170419 06:57:03.759"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.760">${cur_time} = 2017-04-19 06:57:03:760087</msg>
<status starttime="20170419 06:57:03.760" status="PASS" endtime="20170419 06:57:03.760"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.761">${cur_time} = 20170419065703760087</msg>
<status starttime="20170419 06:57:03.761" status="PASS" endtime="20170419 06:57:03.761"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.761">${cur_time} = 20170419065703760087</msg>
<status starttime="20170419 06:57:03.759" status="PASS" endtime="20170419 06:57:03.761"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 06:57:03.762">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/test_history.txt"&gt;/tmp/root/29863/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 06:57:03.761" status="PASS" endtime="20170419 06:57:03.762"></status>
</kw>
<status starttime="20170419 06:57:03.756" status="PASS" endtime="20170419 06:57:03.762"></status>
</kw>
<status starttime="20170419 06:57:03.472" status="PASS" endtime="20170419 06:57:03.762"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170419 06:57:03.270" critical="yes" status="PASS" endtime="20170419 06:57:03.762"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170419 06:57:03.763">Delete All Sessions</msg>
<status starttime="20170419 06:57:03.763" status="PASS" endtime="20170419 06:57:03.763"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170419 06:57:03.201" status="PASS" endtime="20170419 06:57:03.763"></status>
</suite>
<status starttime="20170419 06:57:03.199" status="PASS" endtime="20170419 06:57:03.764"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/root/29863/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.797">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 06:57:03.797" status="PASS" endtime="20170419 06:57:03.797"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.798">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 06:57:03.797" status="PASS" endtime="20170419 06:57:03.798"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.798">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 06:57:03.796" status="PASS" endtime="20170419 06:57:03.798"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.799">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 06:57:03.799" status="PASS" endtime="20170419 06:57:03.799"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.800">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 06:57:03.800" status="PASS" endtime="20170419 06:57:03.800"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.800">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 06:57:03.799" status="PASS" endtime="20170419 06:57:03.800"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.801">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170419 06:57:03.801" status="PASS" endtime="20170419 06:57:03.801"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 06:57:03.801" status="PASS" endtime="20170419 06:57:03.808"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.812">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 06:57:03.817">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 06:57:03.817">${output} = /tmp/root/29863/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170419 06:57:03.809" status="PASS" endtime="20170419 06:57:03.817"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 06:57:03.819" status="PASS" endtime="20170419 06:57:03.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170419 06:57:03.827" status="PASS" endtime="20170419 06:57:03.828"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.828">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 06:57:03.828" status="PASS" endtime="20170419 06:57:03.828"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.829">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 06:57:03.801" status="PASS" endtime="20170419 06:57:03.829"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.829">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170419 06:57:03.829" status="PASS" endtime="20170419 06:57:03.829"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 06:57:03.830" status="PASS" endtime="20170419 06:57:03.840"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.844">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 06:57:03.853">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 06:57:03.853">${os_con_pid} = </msg>
<status starttime="20170419 06:57:03.841" status="PASS" endtime="20170419 06:57:03.853"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170419 06:57:03.855" status="PASS" endtime="20170419 06:57:03.863"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.863">${cmd_buf} = kill -9 </msg>
<status starttime="20170419 06:57:03.863" status="PASS" endtime="20170419 06:57:03.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 06:57:03.864" status="PASS" endtime="20170419 06:57:03.864"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.865">${rc} = None</msg>
<msg level="INFO" timestamp="20170419 06:57:03.865">${output} = None</msg>
<status starttime="20170419 06:57:03.865" status="PASS" endtime="20170419 06:57:03.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 06:57:03.865" status="PASS" endtime="20170419 06:57:03.866"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.866">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170419 06:57:03.866" status="PASS" endtime="20170419 06:57:03.866"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 06:57:03.866" status="PASS" endtime="20170419 06:57:03.873"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.876">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 06:57:03.881">${rc} = 1</msg>
<msg level="INFO" timestamp="20170419 06:57:03.881">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170419 06:57:03.874" status="PASS" endtime="20170419 06:57:03.881"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170419 06:57:03.883" status="PASS" endtime="20170419 06:57:03.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170419 06:57:03.891" status="PASS" endtime="20170419 06:57:03.892"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.892">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170419 06:57:03.798" status="PASS" endtime="20170419 06:57:03.892"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 06:57:03.893">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170419 06:57:03.892" status="PASS" endtime="20170419 06:57:03.893"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.894">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170419 06:57:03.893" status="PASS" endtime="20170419 06:57:03.894"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 06:57:03.894" status="PASS" endtime="20170419 06:57:03.901"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.906">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 06:57:03.909">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 06:57:03.909">${output} = /tmp/root/29863/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170419 06:57:03.901" status="PASS" endtime="20170419 06:57:03.909"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 06:57:03.911" status="PASS" endtime="20170419 06:57:03.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170419 06:57:03.920" status="PASS" endtime="20170419 06:57:03.921"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.921">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 06:57:03.921" status="PASS" endtime="20170419 06:57:03.921"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:03.922">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 06:57:03.893" status="PASS" endtime="20170419 06:57:03.922"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.922">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170419 06:57:03.922" status="PASS" endtime="20170419 06:57:03.922"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 06:57:03.923" status="PASS" endtime="20170419 06:57:03.930"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.936">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170419 06:57:03.939">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 06:57:03.940">${output} = </msg>
<status starttime="20170419 06:57:03.930" status="PASS" endtime="20170419 06:57:03.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170419 06:57:03.942" status="PASS" endtime="20170419 06:57:03.943"></status>
</kw>
<status starttime="20170419 06:57:03.796" status="PASS" endtime="20170419 06:57:03.943"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.944">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.947">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170419 06:57:03.946" status="PASS" endtime="20170419 06:57:03.947"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.949">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170419 06:57:03.948" status="PASS" endtime="20170419 06:57:03.949"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:03.953">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:03.952" status="PASS" endtime="20170419 06:57:03.954"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.954">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:03.954" status="PASS" endtime="20170419 06:57:03.954"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.955">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:03.955" status="PASS" endtime="20170419 06:57:03.955"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:03.956">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:03.955" status="PASS" endtime="20170419 06:57:03.956"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:04.482">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:03.957" status="PASS" endtime="20170419 06:57:04.482"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:04.482">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:04.482">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:03.956" status="PASS" endtime="20170419 06:57:04.482"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:04.483">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:04.482" status="PASS" endtime="20170419 06:57:04.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:04.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:04.483" status="PASS" endtime="20170419 06:57:04.483"></status>
</kw>
<status starttime="20170419 06:57:03.951" status="PASS" endtime="20170419 06:57:04.484"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:04.484">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170419 06:57:04.484" status="PASS" endtime="20170419 06:57:04.484"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:04.485">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:04.484" status="PASS" endtime="20170419 06:57:04.485"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170419 06:57:04.485" status="PASS" endtime="20170419 06:57:04.485"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:04.487">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170419 06:57:04.486" status="PASS" endtime="20170419 06:57:04.487"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:04.488">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170419 06:57:04.488" status="PASS" endtime="20170419 06:57:04.488"></status>
</kw>
<status starttime="20170419 06:57:04.487" status="PASS" endtime="20170419 06:57:04.488"></status>
</kw>
<status starttime="20170419 06:57:04.485" status="PASS" endtime="20170419 06:57:04.488"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:04.826">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170419 06:57:04.826">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:04.488" status="PASS" endtime="20170419 06:57:04.826"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:04.827">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:04.827" status="PASS" endtime="20170419 06:57:04.828"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:04.828">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:04.828" status="PASS" endtime="20170419 06:57:04.829"></status>
</kw>
<status starttime="20170419 06:57:04.828" status="PASS" endtime="20170419 06:57:04.829"></status>
</kw>
<status starttime="20170419 06:57:04.826" status="PASS" endtime="20170419 06:57:04.829"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:04.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:03.950" status="PASS" endtime="20170419 06:57:04.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:04.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:04.829" status="PASS" endtime="20170419 06:57:04.830"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:04.830">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:04.830">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:04.830">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status starttime="20170419 06:57:04.830" status="PASS" endtime="20170419 06:57:04.830"></status>
</kw>
<status starttime="20170419 06:57:03.947" status="PASS" endtime="20170419 06:57:04.830"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170419 06:57:04.831" status="PASS" endtime="20170419 06:57:04.831"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:04.835">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:04.834" status="PASS" endtime="20170419 06:57:04.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:04.836">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:04.835" status="PASS" endtime="20170419 06:57:04.836"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:04.836">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:04.836" status="PASS" endtime="20170419 06:57:04.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:04.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:04.836" status="PASS" endtime="20170419 06:57:04.837"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.143">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:04.838" status="PASS" endtime="20170419 06:57:05.143"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.143">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:05.143">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:04.837" status="PASS" endtime="20170419 06:57:05.144"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.144">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:05.144" status="PASS" endtime="20170419 06:57:05.144"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.145">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:05.144" status="PASS" endtime="20170419 06:57:05.145"></status>
</kw>
<status starttime="20170419 06:57:04.834" status="PASS" endtime="20170419 06:57:05.145"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.146">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:57:05.145" status="PASS" endtime="20170419 06:57:05.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.148">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:05.147" status="PASS" endtime="20170419 06:57:05.148"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.149">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:05.148" status="PASS" endtime="20170419 06:57:05.149"></status>
</kw>
<status starttime="20170419 06:57:05.148" status="PASS" endtime="20170419 06:57:05.149"></status>
</kw>
<status starttime="20170419 06:57:05.146" status="PASS" endtime="20170419 06:57:05.149"></status>
</kw>
<status starttime="20170419 06:57:05.146" status="PASS" endtime="20170419 06:57:05.149"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.230">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:57:05.231">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:05.149" status="PASS" endtime="20170419 06:57:05.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.233">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:05.232" status="PASS" endtime="20170419 06:57:05.233"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.234">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:05.233" status="PASS" endtime="20170419 06:57:05.234"></status>
</kw>
<status starttime="20170419 06:57:05.233" status="PASS" endtime="20170419 06:57:05.234"></status>
</kw>
<status starttime="20170419 06:57:05.232" status="PASS" endtime="20170419 06:57:05.234"></status>
</kw>
<status starttime="20170419 06:57:05.231" status="PASS" endtime="20170419 06:57:05.234"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:04.833" status="PASS" endtime="20170419 06:57:05.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.235">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:05.235" status="PASS" endtime="20170419 06:57:05.235"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.235">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:05.236">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:05.236">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:57:05.235" status="PASS" endtime="20170419 06:57:05.236"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.236">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:57:04.832" status="PASS" endtime="20170419 06:57:05.236"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.236">${host_state} = Off</msg>
<status starttime="20170419 06:57:04.832" status="PASS" endtime="20170419 06:57:05.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170419 06:57:05.237" status="PASS" endtime="20170419 06:57:05.237"></status>
</kw>
<status starttime="20170419 06:57:04.832" status="PASS" endtime="20170419 06:57:05.237"></status>
</kw>
<status starttime="20170419 06:57:04.831" status="PASS" endtime="20170419 06:57:05.237"></status>
</kw>
<status starttime="20170419 06:57:03.945" status="PASS" endtime="20170419 06:57:05.237"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.241">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:05.240" status="PASS" endtime="20170419 06:57:05.241"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.241">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:05.241" status="PASS" endtime="20170419 06:57:05.242"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.242">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:05.242" status="PASS" endtime="20170419 06:57:05.242"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.243">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:05.242" status="PASS" endtime="20170419 06:57:05.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:05.243" status="PASS" endtime="20170419 06:57:05.422"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:05.422">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:05.243" status="PASS" endtime="20170419 06:57:05.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:05.422" status="PASS" endtime="20170419 06:57:05.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:05.423" status="PASS" endtime="20170419 06:57:05.423"></status>
</kw>
<status starttime="20170419 06:57:05.240" status="PASS" endtime="20170419 06:57:05.423"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.424">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170419 06:57:05.424" status="PASS" endtime="20170419 06:57:05.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.426">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170419 06:57:05.426" status="PASS" endtime="20170419 06:57:05.426"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.427">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170419 06:57:05.427" status="PASS" endtime="20170419 06:57:05.427"></status>
</kw>
<status starttime="20170419 06:57:05.427" status="PASS" endtime="20170419 06:57:05.428"></status>
</kw>
<status starttime="20170419 06:57:05.425" status="PASS" endtime="20170419 06:57:05.428"></status>
</kw>
<status starttime="20170419 06:57:05.424" status="PASS" endtime="20170419 06:57:05.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.494">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:57:05.495">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:05.428" status="PASS" endtime="20170419 06:57:05.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.497">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:05.496" status="PASS" endtime="20170419 06:57:05.497"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.498">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:05.498" status="PASS" endtime="20170419 06:57:05.498"></status>
</kw>
<status starttime="20170419 06:57:05.497" status="PASS" endtime="20170419 06:57:05.498"></status>
</kw>
<status starttime="20170419 06:57:05.495" status="PASS" endtime="20170419 06:57:05.498"></status>
</kw>
<status starttime="20170419 06:57:05.495" status="PASS" endtime="20170419 06:57:05.498"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.498">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:05.239" status="PASS" endtime="20170419 06:57:05.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:05.499" status="PASS" endtime="20170419 06:57:05.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.500">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:05.500">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:05.500">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:57:05.499" status="PASS" endtime="20170419 06:57:05.500"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.500">${state} = Off</msg>
<status starttime="20170419 06:57:05.239" status="PASS" endtime="20170419 06:57:05.500"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.500">${boot_progress} = Off</msg>
<status starttime="20170419 06:57:05.238" status="PASS" endtime="20170419 06:57:05.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170419 06:57:05.501" status="PASS" endtime="20170419 06:57:05.501"></status>
</kw>
<status starttime="20170419 06:57:05.238" status="PASS" endtime="20170419 06:57:05.501"></status>
</kw>
<status starttime="20170419 06:57:05.237" status="PASS" endtime="20170419 06:57:05.501"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.502">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170419 06:57:05.502" status="PASS" endtime="20170419 06:57:05.502"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.503">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170419 06:57:05.503" status="PASS" endtime="20170419 06:57:05.503"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.505">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:05.505" status="PASS" endtime="20170419 06:57:05.505"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.506">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:05.506" status="PASS" endtime="20170419 06:57:05.506"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.507">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:05.506" status="PASS" endtime="20170419 06:57:05.507"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.507">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:05.507" status="PASS" endtime="20170419 06:57:05.507"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:05.508" status="PASS" endtime="20170419 06:57:05.685"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.685">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:05.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:05.507" status="PASS" endtime="20170419 06:57:05.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:05.686" status="PASS" endtime="20170419 06:57:05.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:05.686" status="PASS" endtime="20170419 06:57:05.687"></status>
</kw>
<status starttime="20170419 06:57:05.504" status="PASS" endtime="20170419 06:57:05.687"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.687">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170419 06:57:05.687" status="PASS" endtime="20170419 06:57:05.688"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.688">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:05.688" status="PASS" endtime="20170419 06:57:05.688"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170419 06:57:05.688" status="PASS" endtime="20170419 06:57:05.689"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.690">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170419 06:57:05.689" status="PASS" endtime="20170419 06:57:05.690"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.691">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170419 06:57:05.691" status="PASS" endtime="20170419 06:57:05.691"></status>
</kw>
<status starttime="20170419 06:57:05.690" status="PASS" endtime="20170419 06:57:05.691"></status>
</kw>
<status starttime="20170419 06:57:05.689" status="PASS" endtime="20170419 06:57:05.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.846">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170419 06:57:05.846">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:05.692" status="PASS" endtime="20170419 06:57:05.846"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.847">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:05.847" status="PASS" endtime="20170419 06:57:05.847"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.848">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:05.848" status="PASS" endtime="20170419 06:57:05.848"></status>
</kw>
<status starttime="20170419 06:57:05.848" status="PASS" endtime="20170419 06:57:05.849"></status>
</kw>
<status starttime="20170419 06:57:05.846" status="PASS" endtime="20170419 06:57:05.849"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:05.849">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:05.504" status="PASS" endtime="20170419 06:57:05.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:05.849" status="PASS" endtime="20170419 06:57:05.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.851">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:05.851">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:05.851">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status starttime="20170419 06:57:05.850" status="PASS" endtime="20170419 06:57:05.851"></status>
</kw>
<status starttime="20170419 06:57:05.502" status="PASS" endtime="20170419 06:57:05.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170419 06:57:05.851" status="PASS" endtime="20170419 06:57:05.852"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:05.856">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:05.855" status="PASS" endtime="20170419 06:57:05.856"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.857">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:05.857" status="PASS" endtime="20170419 06:57:05.857"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.858">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:05.857" status="PASS" endtime="20170419 06:57:05.858"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:05.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:05.858" status="PASS" endtime="20170419 06:57:05.859"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:06.046">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:05.860" status="PASS" endtime="20170419 06:57:06.046"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:06.047">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:06.047">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:05.859" status="PASS" endtime="20170419 06:57:06.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:06.047">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:06.047" status="PASS" endtime="20170419 06:57:06.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:06.048">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:06.048" status="PASS" endtime="20170419 06:57:06.048"></status>
</kw>
<status starttime="20170419 06:57:05.855" status="PASS" endtime="20170419 06:57:06.048"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:06.049">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:57:06.048" status="PASS" endtime="20170419 06:57:06.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:06.051">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:06.050" status="PASS" endtime="20170419 06:57:06.051"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:06.052">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:06.052" status="PASS" endtime="20170419 06:57:06.052"></status>
</kw>
<status starttime="20170419 06:57:06.051" status="PASS" endtime="20170419 06:57:06.052"></status>
</kw>
<status starttime="20170419 06:57:06.050" status="PASS" endtime="20170419 06:57:06.052"></status>
</kw>
<status starttime="20170419 06:57:06.049" status="PASS" endtime="20170419 06:57:06.052"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:06.115">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:57:06.115">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:06.053" status="PASS" endtime="20170419 06:57:06.115"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:06.117">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:06.116" status="PASS" endtime="20170419 06:57:06.117"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:06.118">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:06.118" status="PASS" endtime="20170419 06:57:06.118"></status>
</kw>
<status starttime="20170419 06:57:06.117" status="PASS" endtime="20170419 06:57:06.118"></status>
</kw>
<status starttime="20170419 06:57:06.116" status="PASS" endtime="20170419 06:57:06.118"></status>
</kw>
<status starttime="20170419 06:57:06.115" status="PASS" endtime="20170419 06:57:06.118"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:06.119">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:05.854" status="PASS" endtime="20170419 06:57:06.119"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:06.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:06.119" status="PASS" endtime="20170419 06:57:06.119"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:06.120">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:06.120">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:06.120">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:57:06.120" status="PASS" endtime="20170419 06:57:06.120"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:06.120">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:57:05.853" status="PASS" endtime="20170419 06:57:06.120"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:06.121">${host_state} = Off</msg>
<status starttime="20170419 06:57:05.853" status="PASS" endtime="20170419 06:57:06.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:06.121">Running != Off</msg>
<status starttime="20170419 06:57:06.121" status="FAIL" endtime="20170419 06:57:06.121"></status>
</kw>
<status starttime="20170419 06:57:05.853" status="FAIL" endtime="20170419 06:57:06.122"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:16.126">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:16.125" status="PASS" endtime="20170419 06:57:16.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:16.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:16.126" status="PASS" endtime="20170419 06:57:16.127"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:16.127">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:16.127" status="PASS" endtime="20170419 06:57:16.127"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:16.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:16.128" status="PASS" endtime="20170419 06:57:16.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:16.312">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:16.129" status="PASS" endtime="20170419 06:57:16.312"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:16.312">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:16.312">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:16.128" status="PASS" endtime="20170419 06:57:16.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:16.313">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:16.312" status="PASS" endtime="20170419 06:57:16.313"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:16.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:16.313" status="PASS" endtime="20170419 06:57:16.314"></status>
</kw>
<status starttime="20170419 06:57:16.125" status="PASS" endtime="20170419 06:57:16.314"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:16.315">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:57:16.314" status="PASS" endtime="20170419 06:57:16.315"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:16.318">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:16.317" status="PASS" endtime="20170419 06:57:16.318"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:16.319">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:16.319" status="PASS" endtime="20170419 06:57:16.319"></status>
</kw>
<status starttime="20170419 06:57:16.318" status="PASS" endtime="20170419 06:57:16.319"></status>
</kw>
<status starttime="20170419 06:57:16.316" status="PASS" endtime="20170419 06:57:16.320"></status>
</kw>
<status starttime="20170419 06:57:16.315" status="PASS" endtime="20170419 06:57:16.320"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:16.383">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:57:16.383">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:16.320" status="PASS" endtime="20170419 06:57:16.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:16.385">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:16.384" status="PASS" endtime="20170419 06:57:16.385"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:16.386">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:16.386" status="PASS" endtime="20170419 06:57:16.386"></status>
</kw>
<status starttime="20170419 06:57:16.385" status="PASS" endtime="20170419 06:57:16.386"></status>
</kw>
<status starttime="20170419 06:57:16.384" status="PASS" endtime="20170419 06:57:16.386"></status>
</kw>
<status starttime="20170419 06:57:16.384" status="PASS" endtime="20170419 06:57:16.386"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:16.387">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:16.124" status="PASS" endtime="20170419 06:57:16.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:16.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:16.387" status="PASS" endtime="20170419 06:57:16.387"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:16.388">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:16.388">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:16.388">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:57:16.387" status="PASS" endtime="20170419 06:57:16.388"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:16.388">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:57:16.123" status="PASS" endtime="20170419 06:57:16.388"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:16.389">${host_state} = Off</msg>
<status starttime="20170419 06:57:16.123" status="PASS" endtime="20170419 06:57:16.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:16.389">Running != Off</msg>
<status starttime="20170419 06:57:16.389" status="FAIL" endtime="20170419 06:57:16.389"></status>
</kw>
<status starttime="20170419 06:57:16.122" status="FAIL" endtime="20170419 06:57:16.389"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:26.393">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:26.393" status="PASS" endtime="20170419 06:57:26.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:26.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:26.394" status="PASS" endtime="20170419 06:57:26.394"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:26.395">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:26.394" status="PASS" endtime="20170419 06:57:26.395"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:26.395">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:26.395" status="PASS" endtime="20170419 06:57:26.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:26.572">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:26.396" status="PASS" endtime="20170419 06:57:26.572"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:26.572">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:26.572">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:26.396" status="PASS" endtime="20170419 06:57:26.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:26.573">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:26.573" status="PASS" endtime="20170419 06:57:26.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:26.574">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:26.573" status="PASS" endtime="20170419 06:57:26.574"></status>
</kw>
<status starttime="20170419 06:57:26.392" status="PASS" endtime="20170419 06:57:26.574"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:26.574">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:57:26.574" status="PASS" endtime="20170419 06:57:26.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:26.577">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:26.576" status="PASS" endtime="20170419 06:57:26.577"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:26.577">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:26.577" status="PASS" endtime="20170419 06:57:26.578"></status>
</kw>
<status starttime="20170419 06:57:26.577" status="PASS" endtime="20170419 06:57:26.578"></status>
</kw>
<status starttime="20170419 06:57:26.575" status="PASS" endtime="20170419 06:57:26.578"></status>
</kw>
<status starttime="20170419 06:57:26.575" status="PASS" endtime="20170419 06:57:26.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:26.641">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:57:26.642">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:26.578" status="PASS" endtime="20170419 06:57:26.642"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:26.643">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:26.643" status="PASS" endtime="20170419 06:57:26.643"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:26.644">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:26.644" status="PASS" endtime="20170419 06:57:26.644"></status>
</kw>
<status starttime="20170419 06:57:26.644" status="PASS" endtime="20170419 06:57:26.644"></status>
</kw>
<status starttime="20170419 06:57:26.642" status="PASS" endtime="20170419 06:57:26.645"></status>
</kw>
<status starttime="20170419 06:57:26.642" status="PASS" endtime="20170419 06:57:26.645"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:26.645">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:26.392" status="PASS" endtime="20170419 06:57:26.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:26.645">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:26.645" status="PASS" endtime="20170419 06:57:26.645"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:26.646">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:26.646">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:26.646">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:57:26.646" status="PASS" endtime="20170419 06:57:26.646"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:26.647">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:57:26.391" status="PASS" endtime="20170419 06:57:26.647"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:26.647">${host_state} = Off</msg>
<status starttime="20170419 06:57:26.391" status="PASS" endtime="20170419 06:57:26.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:26.648">Running != Off</msg>
<status starttime="20170419 06:57:26.647" status="FAIL" endtime="20170419 06:57:26.648"></status>
</kw>
<status starttime="20170419 06:57:26.390" status="FAIL" endtime="20170419 06:57:26.648"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:36.652">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:36.652" status="PASS" endtime="20170419 06:57:36.652"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:36.653">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:36.653" status="PASS" endtime="20170419 06:57:36.653"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:36.654">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:36.653" status="PASS" endtime="20170419 06:57:36.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:36.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:36.654" status="PASS" endtime="20170419 06:57:36.654"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:36.829">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:36.655" status="PASS" endtime="20170419 06:57:36.829"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:36.829">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:36.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:36.655" status="PASS" endtime="20170419 06:57:36.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:36.830">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:36.829" status="PASS" endtime="20170419 06:57:36.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:36.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:36.830" status="PASS" endtime="20170419 06:57:36.830"></status>
</kw>
<status starttime="20170419 06:57:36.651" status="PASS" endtime="20170419 06:57:36.831"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:36.831">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:57:36.831" status="PASS" endtime="20170419 06:57:36.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:36.833">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:36.833" status="PASS" endtime="20170419 06:57:36.833"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:36.834">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:36.834" status="PASS" endtime="20170419 06:57:36.834"></status>
</kw>
<status starttime="20170419 06:57:36.833" status="PASS" endtime="20170419 06:57:36.834"></status>
</kw>
<status starttime="20170419 06:57:36.832" status="PASS" endtime="20170419 06:57:36.834"></status>
</kw>
<status starttime="20170419 06:57:36.831" status="PASS" endtime="20170419 06:57:36.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:36.898">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:57:36.898">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:36.835" status="PASS" endtime="20170419 06:57:36.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:36.900">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:36.899" status="PASS" endtime="20170419 06:57:36.900"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:36.901">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:36.900" status="PASS" endtime="20170419 06:57:36.901"></status>
</kw>
<status starttime="20170419 06:57:36.900" status="PASS" endtime="20170419 06:57:36.901"></status>
</kw>
<status starttime="20170419 06:57:36.899" status="PASS" endtime="20170419 06:57:36.901"></status>
</kw>
<status starttime="20170419 06:57:36.898" status="PASS" endtime="20170419 06:57:36.901"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:36.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:36.650" status="PASS" endtime="20170419 06:57:36.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:36.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:36.902" status="PASS" endtime="20170419 06:57:36.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:36.903">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:36.903">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:36.903">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:57:36.902" status="PASS" endtime="20170419 06:57:36.903"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:36.903">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:57:36.649" status="PASS" endtime="20170419 06:57:36.903"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:36.904">${host_state} = Off</msg>
<status starttime="20170419 06:57:36.649" status="PASS" endtime="20170419 06:57:36.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:36.905">Running != Off</msg>
<status starttime="20170419 06:57:36.904" status="FAIL" endtime="20170419 06:57:36.905"></status>
</kw>
<status starttime="20170419 06:57:36.648" status="FAIL" endtime="20170419 06:57:36.905"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:46.909">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:46.908" status="PASS" endtime="20170419 06:57:46.909"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:46.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:46.910" status="PASS" endtime="20170419 06:57:46.910"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:46.910">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:46.910" status="PASS" endtime="20170419 06:57:46.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:46.911">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:46.911" status="PASS" endtime="20170419 06:57:46.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:47.087">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:46.912" status="PASS" endtime="20170419 06:57:47.087"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:47.087">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:47.088">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:46.911" status="PASS" endtime="20170419 06:57:47.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:47.088">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:47.088" status="PASS" endtime="20170419 06:57:47.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:47.089">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:47.089" status="PASS" endtime="20170419 06:57:47.089"></status>
</kw>
<status starttime="20170419 06:57:46.908" status="PASS" endtime="20170419 06:57:47.089"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:47.090">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:57:47.089" status="PASS" endtime="20170419 06:57:47.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:47.092">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:47.091" status="PASS" endtime="20170419 06:57:47.092"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:47.093">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:47.093" status="PASS" endtime="20170419 06:57:47.093"></status>
</kw>
<status starttime="20170419 06:57:47.092" status="PASS" endtime="20170419 06:57:47.093"></status>
</kw>
<status starttime="20170419 06:57:47.090" status="PASS" endtime="20170419 06:57:47.093"></status>
</kw>
<status starttime="20170419 06:57:47.090" status="PASS" endtime="20170419 06:57:47.093"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:47.157">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:57:47.157">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:47.094" status="PASS" endtime="20170419 06:57:47.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:47.159">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:47.158" status="PASS" endtime="20170419 06:57:47.159"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:47.160">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:47.160" status="PASS" endtime="20170419 06:57:47.160"></status>
</kw>
<status starttime="20170419 06:57:47.159" status="PASS" endtime="20170419 06:57:47.160"></status>
</kw>
<status starttime="20170419 06:57:47.158" status="PASS" endtime="20170419 06:57:47.160"></status>
</kw>
<status starttime="20170419 06:57:47.158" status="PASS" endtime="20170419 06:57:47.160"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:47.160">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:46.907" status="PASS" endtime="20170419 06:57:47.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:47.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:47.161" status="PASS" endtime="20170419 06:57:47.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:47.162">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:47.162">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:47.162">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:57:47.161" status="PASS" endtime="20170419 06:57:47.162"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:47.162">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:57:46.907" status="PASS" endtime="20170419 06:57:47.162"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:47.163">${host_state} = Off</msg>
<status starttime="20170419 06:57:46.906" status="PASS" endtime="20170419 06:57:47.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:47.164">Running != Off</msg>
<status starttime="20170419 06:57:47.163" status="FAIL" endtime="20170419 06:57:47.164"></status>
</kw>
<status starttime="20170419 06:57:46.905" status="FAIL" endtime="20170419 06:57:47.164"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:57.168">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:57:57.168" status="PASS" endtime="20170419 06:57:57.168"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:57.169">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:57:57.169" status="PASS" endtime="20170419 06:57:57.169"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:57.170">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:57:57.169" status="PASS" endtime="20170419 06:57:57.170"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:57.170">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:57:57.170" status="PASS" endtime="20170419 06:57:57.170"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:57.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:57:57.171" status="PASS" endtime="20170419 06:57:57.348"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:57.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:57:57.348">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:57.171" status="PASS" endtime="20170419 06:57:57.348"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:57.349">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:57.348" status="PASS" endtime="20170419 06:57:57.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:57.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:57.349" status="PASS" endtime="20170419 06:57:57.350"></status>
</kw>
<status starttime="20170419 06:57:57.167" status="PASS" endtime="20170419 06:57:57.350"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:57.350">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:57:57.350" status="PASS" endtime="20170419 06:57:57.350"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:57.352">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:57.352" status="PASS" endtime="20170419 06:57:57.352"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:57.353">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:57:57.353" status="PASS" endtime="20170419 06:57:57.353"></status>
</kw>
<status starttime="20170419 06:57:57.353" status="PASS" endtime="20170419 06:57:57.354"></status>
</kw>
<status starttime="20170419 06:57:57.351" status="PASS" endtime="20170419 06:57:57.354"></status>
</kw>
<status starttime="20170419 06:57:57.351" status="PASS" endtime="20170419 06:57:57.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:57.417">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:57:57.417">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:57.354" status="PASS" endtime="20170419 06:57:57.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:57.419">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:57.419" status="PASS" endtime="20170419 06:57:57.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:57.420">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:57:57.420" status="PASS" endtime="20170419 06:57:57.420"></status>
</kw>
<status starttime="20170419 06:57:57.419" status="PASS" endtime="20170419 06:57:57.420"></status>
</kw>
<status starttime="20170419 06:57:57.418" status="PASS" endtime="20170419 06:57:57.420"></status>
</kw>
<status starttime="20170419 06:57:57.418" status="PASS" endtime="20170419 06:57:57.420"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:57.421">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:57:57.166" status="PASS" endtime="20170419 06:57:57.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:57:57.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:57:57.421" status="PASS" endtime="20170419 06:57:57.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:57:57.422">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:57:57.422">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:57:57.422">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:57:57.421" status="PASS" endtime="20170419 06:57:57.422"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:57.422">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:57:57.166" status="PASS" endtime="20170419 06:57:57.422"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:57:57.423">${host_state} = Off</msg>
<status starttime="20170419 06:57:57.165" status="PASS" endtime="20170419 06:57:57.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:57:57.423">Running != Off</msg>
<status starttime="20170419 06:57:57.423" status="FAIL" endtime="20170419 06:57:57.423"></status>
</kw>
<status starttime="20170419 06:57:57.165" status="FAIL" endtime="20170419 06:57:57.423"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:07.427">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:58:07.427" status="PASS" endtime="20170419 06:58:07.428"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:07.428">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:58:07.428" status="PASS" endtime="20170419 06:58:07.428"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:07.429">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:58:07.429" status="PASS" endtime="20170419 06:58:07.429"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:07.430">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:58:07.429" status="PASS" endtime="20170419 06:58:07.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:07.605">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:58:07.430" status="PASS" endtime="20170419 06:58:07.606"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:07.606">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:58:07.606">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:07.430" status="PASS" endtime="20170419 06:58:07.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:07.606">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:07.606" status="PASS" endtime="20170419 06:58:07.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:07.607">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:07.607" status="PASS" endtime="20170419 06:58:07.607"></status>
</kw>
<status starttime="20170419 06:58:07.426" status="PASS" endtime="20170419 06:58:07.607"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:07.608">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:58:07.608" status="PASS" endtime="20170419 06:58:07.608"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:07.610">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:07.609" status="PASS" endtime="20170419 06:58:07.610"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:07.611">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:07.611" status="PASS" endtime="20170419 06:58:07.611"></status>
</kw>
<status starttime="20170419 06:58:07.610" status="PASS" endtime="20170419 06:58:07.611"></status>
</kw>
<status starttime="20170419 06:58:07.609" status="PASS" endtime="20170419 06:58:07.611"></status>
</kw>
<status starttime="20170419 06:58:07.608" status="PASS" endtime="20170419 06:58:07.611"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:07.682">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:58:07.682">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:07.611" status="PASS" endtime="20170419 06:58:07.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:07.683">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:07.683" status="PASS" endtime="20170419 06:58:07.683"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:07.685">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:07.684" status="PASS" endtime="20170419 06:58:07.685"></status>
</kw>
<status starttime="20170419 06:58:07.684" status="PASS" endtime="20170419 06:58:07.685"></status>
</kw>
<status starttime="20170419 06:58:07.682" status="PASS" endtime="20170419 06:58:07.685"></status>
</kw>
<status starttime="20170419 06:58:07.682" status="PASS" endtime="20170419 06:58:07.685"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:07.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:07.425" status="PASS" endtime="20170419 06:58:07.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:07.686">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:07.685" status="PASS" endtime="20170419 06:58:07.686"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:07.686">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:58:07.686">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:58:07.687">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:58:07.686" status="PASS" endtime="20170419 06:58:07.687"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:07.687">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:58:07.425" status="PASS" endtime="20170419 06:58:07.687"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:07.687">${host_state} = Off</msg>
<status starttime="20170419 06:58:07.424" status="PASS" endtime="20170419 06:58:07.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:58:07.688">Running != Off</msg>
<status starttime="20170419 06:58:07.688" status="FAIL" endtime="20170419 06:58:07.688"></status>
</kw>
<status starttime="20170419 06:58:07.424" status="FAIL" endtime="20170419 06:58:07.688"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:17.694">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:58:17.693" status="PASS" endtime="20170419 06:58:17.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:17.695">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:58:17.694" status="PASS" endtime="20170419 06:58:17.695"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:17.695">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:58:17.695" status="PASS" endtime="20170419 06:58:17.695"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:17.696">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:58:17.695" status="PASS" endtime="20170419 06:58:17.696"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:17.877">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:58:17.696" status="PASS" endtime="20170419 06:58:17.877"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:17.877">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:58:17.877">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:17.696" status="PASS" endtime="20170419 06:58:17.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:17.878">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:17.878" status="PASS" endtime="20170419 06:58:17.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:17.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:17.878" status="PASS" endtime="20170419 06:58:17.879"></status>
</kw>
<status starttime="20170419 06:58:17.692" status="PASS" endtime="20170419 06:58:17.879"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:17.879">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:58:17.879" status="PASS" endtime="20170419 06:58:17.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:17.882">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:17.881" status="PASS" endtime="20170419 06:58:17.882"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:17.883">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:17.882" status="PASS" endtime="20170419 06:58:17.883"></status>
</kw>
<status starttime="20170419 06:58:17.882" status="PASS" endtime="20170419 06:58:17.883"></status>
</kw>
<status starttime="20170419 06:58:17.880" status="PASS" endtime="20170419 06:58:17.883"></status>
</kw>
<status starttime="20170419 06:58:17.880" status="PASS" endtime="20170419 06:58:17.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:17.946">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:58:17.946">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:17.883" status="PASS" endtime="20170419 06:58:17.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:17.948">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:17.947" status="PASS" endtime="20170419 06:58:17.948"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:17.949">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:17.948" status="PASS" endtime="20170419 06:58:17.949"></status>
</kw>
<status starttime="20170419 06:58:17.948" status="PASS" endtime="20170419 06:58:17.949"></status>
</kw>
<status starttime="20170419 06:58:17.947" status="PASS" endtime="20170419 06:58:17.949"></status>
</kw>
<status starttime="20170419 06:58:17.946" status="PASS" endtime="20170419 06:58:17.949"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:17.949">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:17.692" status="PASS" endtime="20170419 06:58:17.949"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:17.950">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:17.950" status="PASS" endtime="20170419 06:58:17.950"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:17.950">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:58:17.950">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:58:17.951">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:58:17.950" status="PASS" endtime="20170419 06:58:17.951"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:17.951">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:58:17.691" status="PASS" endtime="20170419 06:58:17.951"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:17.951">${host_state} = Off</msg>
<status starttime="20170419 06:58:17.691" status="PASS" endtime="20170419 06:58:17.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:58:17.952">Running != Off</msg>
<status starttime="20170419 06:58:17.951" status="FAIL" endtime="20170419 06:58:17.952"></status>
</kw>
<status starttime="20170419 06:58:17.690" status="FAIL" endtime="20170419 06:58:17.952"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:27.956">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:58:27.955" status="PASS" endtime="20170419 06:58:27.956"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:27.957">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:58:27.956" status="PASS" endtime="20170419 06:58:27.957"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:27.957">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:58:27.957" status="PASS" endtime="20170419 06:58:27.957"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:27.958">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:58:27.957" status="PASS" endtime="20170419 06:58:27.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:28.134">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:58:27.959" status="PASS" endtime="20170419 06:58:28.134"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:28.135">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:58:28.135">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:27.958" status="PASS" endtime="20170419 06:58:28.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:28.135">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:28.135" status="PASS" endtime="20170419 06:58:28.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:28.136">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:28.136" status="PASS" endtime="20170419 06:58:28.136"></status>
</kw>
<status starttime="20170419 06:58:27.955" status="PASS" endtime="20170419 06:58:28.136"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:28.137">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:58:28.137" status="PASS" endtime="20170419 06:58:28.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:28.139">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:28.139" status="PASS" endtime="20170419 06:58:28.139"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:28.140">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:28.140" status="PASS" endtime="20170419 06:58:28.140"></status>
</kw>
<status starttime="20170419 06:58:28.139" status="PASS" endtime="20170419 06:58:28.140"></status>
</kw>
<status starttime="20170419 06:58:28.138" status="PASS" endtime="20170419 06:58:28.140"></status>
</kw>
<status starttime="20170419 06:58:28.137" status="PASS" endtime="20170419 06:58:28.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:28.204">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:58:28.204">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:28.141" status="PASS" endtime="20170419 06:58:28.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:28.206">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:28.205" status="PASS" endtime="20170419 06:58:28.206"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:28.207">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:28.206" status="PASS" endtime="20170419 06:58:28.207"></status>
</kw>
<status starttime="20170419 06:58:28.206" status="PASS" endtime="20170419 06:58:28.207"></status>
</kw>
<status starttime="20170419 06:58:28.205" status="PASS" endtime="20170419 06:58:28.207"></status>
</kw>
<status starttime="20170419 06:58:28.204" status="PASS" endtime="20170419 06:58:28.207"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:28.207">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:27.954" status="PASS" endtime="20170419 06:58:28.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:28.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:28.207" status="PASS" endtime="20170419 06:58:28.208"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:28.208">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:58:28.208">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:58:28.209">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:58:28.208" status="PASS" endtime="20170419 06:58:28.209"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:28.209">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:58:27.953" status="PASS" endtime="20170419 06:58:28.209"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:28.209">${host_state} = Off</msg>
<status starttime="20170419 06:58:27.953" status="PASS" endtime="20170419 06:58:28.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:58:28.210">Running != Off</msg>
<status starttime="20170419 06:58:28.209" status="FAIL" endtime="20170419 06:58:28.210"></status>
</kw>
<status starttime="20170419 06:58:27.953" status="FAIL" endtime="20170419 06:58:28.210"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:38.214">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:58:38.214" status="PASS" endtime="20170419 06:58:38.215"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:38.215">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:58:38.215" status="PASS" endtime="20170419 06:58:38.216"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:38.216">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:58:38.216" status="PASS" endtime="20170419 06:58:38.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:38.217">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:58:38.216" status="PASS" endtime="20170419 06:58:38.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:38.399">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:58:38.217" status="PASS" endtime="20170419 06:58:38.399"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:38.399">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:58:38.399">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:38.217" status="PASS" endtime="20170419 06:58:38.399"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:38.400">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:38.400" status="PASS" endtime="20170419 06:58:38.400"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:38.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:38.400" status="PASS" endtime="20170419 06:58:38.401"></status>
</kw>
<status starttime="20170419 06:58:38.213" status="PASS" endtime="20170419 06:58:38.401"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:38.401">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:58:38.401" status="PASS" endtime="20170419 06:58:38.401"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:38.403">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:38.403" status="PASS" endtime="20170419 06:58:38.403"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:38.404">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:38.404" status="PASS" endtime="20170419 06:58:38.404"></status>
</kw>
<status starttime="20170419 06:58:38.404" status="PASS" endtime="20170419 06:58:38.405"></status>
</kw>
<status starttime="20170419 06:58:38.402" status="PASS" endtime="20170419 06:58:38.405"></status>
</kw>
<status starttime="20170419 06:58:38.402" status="PASS" endtime="20170419 06:58:38.405"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:38.468">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:58:38.468">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:38.405" status="PASS" endtime="20170419 06:58:38.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:38.470">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:38.469" status="PASS" endtime="20170419 06:58:38.470"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:38.471">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:38.471" status="PASS" endtime="20170419 06:58:38.471"></status>
</kw>
<status starttime="20170419 06:58:38.470" status="PASS" endtime="20170419 06:58:38.471"></status>
</kw>
<status starttime="20170419 06:58:38.469" status="PASS" endtime="20170419 06:58:38.471"></status>
</kw>
<status starttime="20170419 06:58:38.468" status="PASS" endtime="20170419 06:58:38.471"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:38.472">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:38.212" status="PASS" endtime="20170419 06:58:38.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:38.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:38.472" status="PASS" endtime="20170419 06:58:38.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:38.473">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:58:38.473">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:58:38.473">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:58:38.472" status="PASS" endtime="20170419 06:58:38.473"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:38.473">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:58:38.212" status="PASS" endtime="20170419 06:58:38.473"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:38.474">${host_state} = Off</msg>
<status starttime="20170419 06:58:38.211" status="PASS" endtime="20170419 06:58:38.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:58:38.474">Running != Off</msg>
<status starttime="20170419 06:58:38.474" status="FAIL" endtime="20170419 06:58:38.474"></status>
</kw>
<status starttime="20170419 06:58:38.211" status="FAIL" endtime="20170419 06:58:38.474"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:48.479">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:58:48.478" status="PASS" endtime="20170419 06:58:48.479"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:48.480">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:58:48.479" status="PASS" endtime="20170419 06:58:48.480"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:48.480">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:58:48.480" status="PASS" endtime="20170419 06:58:48.480"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:48.481">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:58:48.481" status="PASS" endtime="20170419 06:58:48.481"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:48.680">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:58:48.482" status="PASS" endtime="20170419 06:58:48.681"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:48.681">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:58:48.681">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:48.481" status="PASS" endtime="20170419 06:58:48.681"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:48.681">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:48.681" status="PASS" endtime="20170419 06:58:48.682"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:48.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:48.682" status="PASS" endtime="20170419 06:58:48.682"></status>
</kw>
<status starttime="20170419 06:58:48.478" status="PASS" endtime="20170419 06:58:48.682"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:48.683">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:58:48.683" status="PASS" endtime="20170419 06:58:48.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:48.685">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:48.684" status="PASS" endtime="20170419 06:58:48.685"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:48.686">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:48.686" status="PASS" endtime="20170419 06:58:48.686"></status>
</kw>
<status starttime="20170419 06:58:48.685" status="PASS" endtime="20170419 06:58:48.687"></status>
</kw>
<status starttime="20170419 06:58:48.684" status="PASS" endtime="20170419 06:58:48.687"></status>
</kw>
<status starttime="20170419 06:58:48.683" status="PASS" endtime="20170419 06:58:48.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:48.749">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:58:48.750">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:48.687" status="PASS" endtime="20170419 06:58:48.750"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:48.752">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:48.751" status="PASS" endtime="20170419 06:58:48.752"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:48.752">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:48.752" status="PASS" endtime="20170419 06:58:48.753"></status>
</kw>
<status starttime="20170419 06:58:48.752" status="PASS" endtime="20170419 06:58:48.753"></status>
</kw>
<status starttime="20170419 06:58:48.751" status="PASS" endtime="20170419 06:58:48.753"></status>
</kw>
<status starttime="20170419 06:58:48.750" status="PASS" endtime="20170419 06:58:48.753"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:48.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:48.477" status="PASS" endtime="20170419 06:58:48.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:48.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:48.753" status="PASS" endtime="20170419 06:58:48.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:48.754">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:58:48.754">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:58:48.754">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:58:48.754" status="PASS" endtime="20170419 06:58:48.754"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:48.755">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:58:48.476" status="PASS" endtime="20170419 06:58:48.755"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:48.755">${host_state} = Off</msg>
<status starttime="20170419 06:58:48.476" status="PASS" endtime="20170419 06:58:48.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:58:48.756">Running != Off</msg>
<status starttime="20170419 06:58:48.755" status="FAIL" endtime="20170419 06:58:48.756"></status>
</kw>
<status starttime="20170419 06:58:48.475" status="FAIL" endtime="20170419 06:58:48.756"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:58.760">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:58:58.759" status="PASS" endtime="20170419 06:58:58.760"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:58.761">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:58:58.760" status="PASS" endtime="20170419 06:58:58.761"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:58.761">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:58:58.761" status="PASS" endtime="20170419 06:58:58.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:58.762">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:58:58.762" status="PASS" endtime="20170419 06:58:58.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:58.963">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:58:58.763" status="PASS" endtime="20170419 06:58:58.963"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:58.963">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:58:58.963">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:58.762" status="PASS" endtime="20170419 06:58:58.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:58.964">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:58.964" status="PASS" endtime="20170419 06:58:58.964"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:58.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:58.964" status="PASS" endtime="20170419 06:58:58.965"></status>
</kw>
<status starttime="20170419 06:58:58.759" status="PASS" endtime="20170419 06:58:58.965"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:58.966">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:58:58.965" status="PASS" endtime="20170419 06:58:58.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:58.969">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:58.968" status="PASS" endtime="20170419 06:58:58.969"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:58.970">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:58:58.970" status="PASS" endtime="20170419 06:58:58.970"></status>
</kw>
<status starttime="20170419 06:58:58.969" status="PASS" endtime="20170419 06:58:58.970"></status>
</kw>
<status starttime="20170419 06:58:58.967" status="PASS" endtime="20170419 06:58:58.970"></status>
</kw>
<status starttime="20170419 06:58:58.966" status="PASS" endtime="20170419 06:58:58.971"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:59.041">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:58:59.041">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:58.971" status="PASS" endtime="20170419 06:58:59.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:59.043">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:59.042" status="PASS" endtime="20170419 06:58:59.043"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:59.043">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:58:59.043" status="PASS" endtime="20170419 06:58:59.043"></status>
</kw>
<status starttime="20170419 06:58:59.043" status="PASS" endtime="20170419 06:58:59.044"></status>
</kw>
<status starttime="20170419 06:58:59.042" status="PASS" endtime="20170419 06:58:59.044"></status>
</kw>
<status starttime="20170419 06:58:59.041" status="PASS" endtime="20170419 06:58:59.044"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:59.044">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:58:58.758" status="PASS" endtime="20170419 06:58:59.044"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:58:59.045">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:58:59.044" status="PASS" endtime="20170419 06:58:59.045"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:58:59.046">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:58:59.046">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:58:59.046">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:58:59.045" status="PASS" endtime="20170419 06:58:59.046"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:59.046">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:58:58.757" status="PASS" endtime="20170419 06:58:59.046"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:58:59.046">${host_state} = Off</msg>
<status starttime="20170419 06:58:58.757" status="PASS" endtime="20170419 06:58:59.046"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:58:59.047">Running != Off</msg>
<status starttime="20170419 06:58:59.047" status="FAIL" endtime="20170419 06:58:59.047"></status>
</kw>
<status starttime="20170419 06:58:58.756" status="FAIL" endtime="20170419 06:58:59.047"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:09.051">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:59:09.051" status="PASS" endtime="20170419 06:59:09.052"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:09.052">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:59:09.052" status="PASS" endtime="20170419 06:59:09.052"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:09.053">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:59:09.053" status="PASS" endtime="20170419 06:59:09.053"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:09.054">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:59:09.053" status="PASS" endtime="20170419 06:59:09.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:09.241">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:59:09.054" status="PASS" endtime="20170419 06:59:09.241"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:09.242">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:59:09.242">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:09.054" status="PASS" endtime="20170419 06:59:09.242"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:09.242">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:09.242" status="PASS" endtime="20170419 06:59:09.242"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:09.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:09.243" status="PASS" endtime="20170419 06:59:09.243"></status>
</kw>
<status starttime="20170419 06:59:09.050" status="PASS" endtime="20170419 06:59:09.243"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:09.244">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:59:09.243" status="PASS" endtime="20170419 06:59:09.244"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:09.246">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:09.245" status="PASS" endtime="20170419 06:59:09.246"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:09.247">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:09.247" status="PASS" endtime="20170419 06:59:09.247"></status>
</kw>
<status starttime="20170419 06:59:09.246" status="PASS" endtime="20170419 06:59:09.247"></status>
</kw>
<status starttime="20170419 06:59:09.244" status="PASS" endtime="20170419 06:59:09.247"></status>
</kw>
<status starttime="20170419 06:59:09.244" status="PASS" endtime="20170419 06:59:09.247"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:09.342">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:59:09.342">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:09.248" status="PASS" endtime="20170419 06:59:09.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:09.344">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:09.343" status="PASS" endtime="20170419 06:59:09.344"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:09.345">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:09.344" status="PASS" endtime="20170419 06:59:09.345"></status>
</kw>
<status starttime="20170419 06:59:09.344" status="PASS" endtime="20170419 06:59:09.345"></status>
</kw>
<status starttime="20170419 06:59:09.343" status="PASS" endtime="20170419 06:59:09.345"></status>
</kw>
<status starttime="20170419 06:59:09.342" status="PASS" endtime="20170419 06:59:09.345"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:09.345">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:09.049" status="PASS" endtime="20170419 06:59:09.345"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:09.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:09.346" status="PASS" endtime="20170419 06:59:09.346"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:09.347">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:59:09.347">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:59:09.347">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:59:09.346" status="PASS" endtime="20170419 06:59:09.347"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:09.347">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:59:09.049" status="PASS" endtime="20170419 06:59:09.347"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:09.347">${host_state} = Off</msg>
<status starttime="20170419 06:59:09.048" status="PASS" endtime="20170419 06:59:09.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:59:09.348">Running != Off</msg>
<status starttime="20170419 06:59:09.348" status="FAIL" endtime="20170419 06:59:09.348"></status>
</kw>
<status starttime="20170419 06:59:09.048" status="FAIL" endtime="20170419 06:59:09.348"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:19.357">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:59:19.356" status="PASS" endtime="20170419 06:59:19.357"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:19.358">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:59:19.358" status="PASS" endtime="20170419 06:59:19.358"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:19.359">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:59:19.359" status="PASS" endtime="20170419 06:59:19.359"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:19.360">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:59:19.359" status="PASS" endtime="20170419 06:59:19.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:19.563">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:59:19.361" status="PASS" endtime="20170419 06:59:19.563"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:19.563">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:59:19.563">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:19.360" status="PASS" endtime="20170419 06:59:19.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:19.564">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:19.564" status="PASS" endtime="20170419 06:59:19.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:19.565">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:19.564" status="PASS" endtime="20170419 06:59:19.565"></status>
</kw>
<status starttime="20170419 06:59:19.356" status="PASS" endtime="20170419 06:59:19.565"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:19.566">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:59:19.565" status="PASS" endtime="20170419 06:59:19.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:19.568">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:19.567" status="PASS" endtime="20170419 06:59:19.568"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:19.569">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:19.569" status="PASS" endtime="20170419 06:59:19.569"></status>
</kw>
<status starttime="20170419 06:59:19.568" status="PASS" endtime="20170419 06:59:19.569"></status>
</kw>
<status starttime="20170419 06:59:19.566" status="PASS" endtime="20170419 06:59:19.569"></status>
</kw>
<status starttime="20170419 06:59:19.566" status="PASS" endtime="20170419 06:59:19.569"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:19.632">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:59:19.632">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:19.569" status="PASS" endtime="20170419 06:59:19.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:19.634">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:19.633" status="PASS" endtime="20170419 06:59:19.634"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:19.635">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:19.634" status="PASS" endtime="20170419 06:59:19.635"></status>
</kw>
<status starttime="20170419 06:59:19.634" status="PASS" endtime="20170419 06:59:19.635"></status>
</kw>
<status starttime="20170419 06:59:19.633" status="PASS" endtime="20170419 06:59:19.635"></status>
</kw>
<status starttime="20170419 06:59:19.632" status="PASS" endtime="20170419 06:59:19.635"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:19.635">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:19.355" status="PASS" endtime="20170419 06:59:19.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:19.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:19.635" status="PASS" endtime="20170419 06:59:19.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:19.636">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:59:19.636">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:59:19.637">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:59:19.636" status="PASS" endtime="20170419 06:59:19.637"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:19.637">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:59:19.354" status="PASS" endtime="20170419 06:59:19.637"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:19.637">${host_state} = Off</msg>
<status starttime="20170419 06:59:19.353" status="PASS" endtime="20170419 06:59:19.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:59:19.638">Running != Off</msg>
<status starttime="20170419 06:59:19.637" status="FAIL" endtime="20170419 06:59:19.638"></status>
</kw>
<status starttime="20170419 06:59:19.353" status="FAIL" endtime="20170419 06:59:19.638"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:29.642">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:59:29.642" status="PASS" endtime="20170419 06:59:29.642"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:29.643">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:59:29.643" status="PASS" endtime="20170419 06:59:29.643"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:29.644">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:59:29.643" status="PASS" endtime="20170419 06:59:29.644"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:29.644">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:59:29.644" status="PASS" endtime="20170419 06:59:29.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:29.820">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:59:29.645" status="PASS" endtime="20170419 06:59:29.820"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:29.820">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:59:29.820">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:29.644" status="PASS" endtime="20170419 06:59:29.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:29.821">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:29.821" status="PASS" endtime="20170419 06:59:29.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:29.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:29.821" status="PASS" endtime="20170419 06:59:29.822"></status>
</kw>
<status starttime="20170419 06:59:29.641" status="PASS" endtime="20170419 06:59:29.822"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:29.822">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:59:29.822" status="PASS" endtime="20170419 06:59:29.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:29.824">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:29.824" status="PASS" endtime="20170419 06:59:29.824"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:29.825">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:29.825" status="PASS" endtime="20170419 06:59:29.825"></status>
</kw>
<status starttime="20170419 06:59:29.825" status="PASS" endtime="20170419 06:59:29.825"></status>
</kw>
<status starttime="20170419 06:59:29.823" status="PASS" endtime="20170419 06:59:29.826"></status>
</kw>
<status starttime="20170419 06:59:29.823" status="PASS" endtime="20170419 06:59:29.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:29.889">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:59:29.889">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:29.826" status="PASS" endtime="20170419 06:59:29.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:29.891">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:29.890" status="PASS" endtime="20170419 06:59:29.891"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:29.892">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:29.892" status="PASS" endtime="20170419 06:59:29.892"></status>
</kw>
<status starttime="20170419 06:59:29.891" status="PASS" endtime="20170419 06:59:29.892"></status>
</kw>
<status starttime="20170419 06:59:29.890" status="PASS" endtime="20170419 06:59:29.892"></status>
</kw>
<status starttime="20170419 06:59:29.889" status="PASS" endtime="20170419 06:59:29.892"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:29.892">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:29.640" status="PASS" endtime="20170419 06:59:29.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:29.893">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:29.893" status="PASS" endtime="20170419 06:59:29.893"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:29.894">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:59:29.894">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:59:29.894">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:59:29.893" status="PASS" endtime="20170419 06:59:29.894"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:29.894">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:59:29.640" status="PASS" endtime="20170419 06:59:29.894"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:29.894">${host_state} = Off</msg>
<status starttime="20170419 06:59:29.639" status="PASS" endtime="20170419 06:59:29.894"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:59:29.895">Running != Off</msg>
<status starttime="20170419 06:59:29.895" status="FAIL" endtime="20170419 06:59:29.895"></status>
</kw>
<status starttime="20170419 06:59:29.639" status="FAIL" endtime="20170419 06:59:29.895"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:39.899">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:59:39.899" status="PASS" endtime="20170419 06:59:39.900"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:39.900">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:59:39.900" status="PASS" endtime="20170419 06:59:39.900"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:39.901">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:59:39.901" status="PASS" endtime="20170419 06:59:39.901"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:39.902">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:59:39.901" status="PASS" endtime="20170419 06:59:39.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:40.079">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:59:39.902" status="PASS" endtime="20170419 06:59:40.079"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:40.079">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:59:40.079">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:39.902" status="PASS" endtime="20170419 06:59:40.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:40.080">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:40.079" status="PASS" endtime="20170419 06:59:40.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:40.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:40.080" status="PASS" endtime="20170419 06:59:40.081"></status>
</kw>
<status starttime="20170419 06:59:39.898" status="PASS" endtime="20170419 06:59:40.081"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:40.081">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:59:40.081" status="PASS" endtime="20170419 06:59:40.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:40.083">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:40.083" status="PASS" endtime="20170419 06:59:40.083"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:40.084">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:40.084" status="PASS" endtime="20170419 06:59:40.084"></status>
</kw>
<status starttime="20170419 06:59:40.083" status="PASS" endtime="20170419 06:59:40.084"></status>
</kw>
<status starttime="20170419 06:59:40.082" status="PASS" endtime="20170419 06:59:40.085"></status>
</kw>
<status starttime="20170419 06:59:40.082" status="PASS" endtime="20170419 06:59:40.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:40.147">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:59:40.147">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:40.085" status="PASS" endtime="20170419 06:59:40.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:40.149">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:40.148" status="PASS" endtime="20170419 06:59:40.149"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:40.150">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:40.150" status="PASS" endtime="20170419 06:59:40.150"></status>
</kw>
<status starttime="20170419 06:59:40.149" status="PASS" endtime="20170419 06:59:40.150"></status>
</kw>
<status starttime="20170419 06:59:40.148" status="PASS" endtime="20170419 06:59:40.150"></status>
</kw>
<status starttime="20170419 06:59:40.147" status="PASS" endtime="20170419 06:59:40.150"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:40.150">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:39.897" status="PASS" endtime="20170419 06:59:40.150"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:40.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:40.151" status="PASS" endtime="20170419 06:59:40.151"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:40.152">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:59:40.152">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:59:40.152">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:59:40.151" status="PASS" endtime="20170419 06:59:40.152"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:40.152">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:59:39.897" status="PASS" endtime="20170419 06:59:40.152"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:40.152">${host_state} = Off</msg>
<status starttime="20170419 06:59:39.896" status="PASS" endtime="20170419 06:59:40.152"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:59:40.153">Running != Off</msg>
<status starttime="20170419 06:59:40.153" status="FAIL" endtime="20170419 06:59:40.153"></status>
</kw>
<status starttime="20170419 06:59:39.896" status="FAIL" endtime="20170419 06:59:40.153"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:50.157">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 06:59:50.157" status="PASS" endtime="20170419 06:59:50.158"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:50.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 06:59:50.158" status="PASS" endtime="20170419 06:59:50.159"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:50.159">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 06:59:50.159" status="PASS" endtime="20170419 06:59:50.159"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:50.160">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 06:59:50.159" status="PASS" endtime="20170419 06:59:50.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:50.335">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 06:59:50.160" status="PASS" endtime="20170419 06:59:50.335"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:50.335">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 06:59:50.335">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:50.160" status="PASS" endtime="20170419 06:59:50.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:50.336">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:50.335" status="PASS" endtime="20170419 06:59:50.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:50.336">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:50.336" status="PASS" endtime="20170419 06:59:50.337"></status>
</kw>
<status starttime="20170419 06:59:50.157" status="PASS" endtime="20170419 06:59:50.337"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:50.337">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 06:59:50.337" status="PASS" endtime="20170419 06:59:50.337"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:50.340">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:50.339" status="PASS" endtime="20170419 06:59:50.340"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:50.342">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 06:59:50.341" status="PASS" endtime="20170419 06:59:50.342"></status>
</kw>
<status starttime="20170419 06:59:50.340" status="PASS" endtime="20170419 06:59:50.342"></status>
</kw>
<status starttime="20170419 06:59:50.338" status="PASS" endtime="20170419 06:59:50.342"></status>
</kw>
<status starttime="20170419 06:59:50.338" status="PASS" endtime="20170419 06:59:50.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:50.405">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 06:59:50.405">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:50.342" status="PASS" endtime="20170419 06:59:50.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:50.407">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:50.406" status="PASS" endtime="20170419 06:59:50.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:50.408">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 06:59:50.407" status="PASS" endtime="20170419 06:59:50.408"></status>
</kw>
<status starttime="20170419 06:59:50.407" status="PASS" endtime="20170419 06:59:50.408"></status>
</kw>
<status starttime="20170419 06:59:50.406" status="PASS" endtime="20170419 06:59:50.408"></status>
</kw>
<status starttime="20170419 06:59:50.405" status="PASS" endtime="20170419 06:59:50.408"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:50.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 06:59:50.156" status="PASS" endtime="20170419 06:59:50.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 06:59:50.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 06:59:50.408" status="PASS" endtime="20170419 06:59:50.409"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 06:59:50.409">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 06:59:50.410">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 06:59:50.410">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 06:59:50.409" status="PASS" endtime="20170419 06:59:50.410"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:50.410">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 06:59:50.155" status="PASS" endtime="20170419 06:59:50.410"></status>
</kw>
<msg level="INFO" timestamp="20170419 06:59:50.410">${host_state} = Off</msg>
<status starttime="20170419 06:59:50.154" status="PASS" endtime="20170419 06:59:50.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 06:59:50.411">Running != Off</msg>
<status starttime="20170419 06:59:50.411" status="FAIL" endtime="20170419 06:59:50.411"></status>
</kw>
<status starttime="20170419 06:59:50.154" status="FAIL" endtime="20170419 06:59:50.411"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:00.416">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:00:00.415" status="PASS" endtime="20170419 07:00:00.416"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:00.417">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:00:00.416" status="PASS" endtime="20170419 07:00:00.417"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:00.418">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:00:00.417" status="PASS" endtime="20170419 07:00:00.418"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:00.418">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:00:00.418" status="PASS" endtime="20170419 07:00:00.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:00.595">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:00:00.419" status="PASS" endtime="20170419 07:00:00.595"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:00.595">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:00:00.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:00.419" status="PASS" endtime="20170419 07:00:00.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:00.596">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:00.596" status="PASS" endtime="20170419 07:00:00.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:00.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:00.596" status="PASS" endtime="20170419 07:00:00.597"></status>
</kw>
<status starttime="20170419 07:00:00.414" status="PASS" endtime="20170419 07:00:00.597"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:00.597">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:00:00.597" status="PASS" endtime="20170419 07:00:00.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:00.600">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:00.599" status="PASS" endtime="20170419 07:00:00.600"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:00.600">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:00.600" status="PASS" endtime="20170419 07:00:00.601"></status>
</kw>
<status starttime="20170419 07:00:00.600" status="PASS" endtime="20170419 07:00:00.601"></status>
</kw>
<status starttime="20170419 07:00:00.598" status="PASS" endtime="20170419 07:00:00.601"></status>
</kw>
<status starttime="20170419 07:00:00.598" status="PASS" endtime="20170419 07:00:00.601"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:00.664">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:00:00.664">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:00.601" status="PASS" endtime="20170419 07:00:00.664"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:00.665">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:00.665" status="PASS" endtime="20170419 07:00:00.665"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:00.666">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:00.666" status="PASS" endtime="20170419 07:00:00.666"></status>
</kw>
<status starttime="20170419 07:00:00.666" status="PASS" endtime="20170419 07:00:00.667"></status>
</kw>
<status starttime="20170419 07:00:00.664" status="PASS" endtime="20170419 07:00:00.667"></status>
</kw>
<status starttime="20170419 07:00:00.664" status="PASS" endtime="20170419 07:00:00.667"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:00.667">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:00.413" status="PASS" endtime="20170419 07:00:00.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:00.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:00.667" status="PASS" endtime="20170419 07:00:00.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:00.668">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:00:00.668">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:00:00.668">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:00:00.668" status="PASS" endtime="20170419 07:00:00.668"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:00.669">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:00:00.413" status="PASS" endtime="20170419 07:00:00.669"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:00.669">${host_state} = Off</msg>
<status starttime="20170419 07:00:00.412" status="PASS" endtime="20170419 07:00:00.669"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:00:00.670">Running != Off</msg>
<status starttime="20170419 07:00:00.669" status="FAIL" endtime="20170419 07:00:00.670"></status>
</kw>
<status starttime="20170419 07:00:00.412" status="FAIL" endtime="20170419 07:00:00.670"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:10.674">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:00:10.673" status="PASS" endtime="20170419 07:00:10.675"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:10.675">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:00:10.675" status="PASS" endtime="20170419 07:00:10.675"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:10.676">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:00:10.676" status="PASS" endtime="20170419 07:00:10.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:10.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:00:10.676" status="PASS" endtime="20170419 07:00:10.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:10.858">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:00:10.677" status="PASS" endtime="20170419 07:00:10.858"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:10.858">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:00:10.858">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:10.677" status="PASS" endtime="20170419 07:00:10.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:10.859">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:10.859" status="PASS" endtime="20170419 07:00:10.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:10.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:10.859" status="PASS" endtime="20170419 07:00:10.860"></status>
</kw>
<status starttime="20170419 07:00:10.673" status="PASS" endtime="20170419 07:00:10.860"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:10.860">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:00:10.860" status="PASS" endtime="20170419 07:00:10.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:10.862">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:10.862" status="PASS" endtime="20170419 07:00:10.862"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:10.863">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:10.863" status="PASS" endtime="20170419 07:00:10.863"></status>
</kw>
<status starttime="20170419 07:00:10.863" status="PASS" endtime="20170419 07:00:10.864"></status>
</kw>
<status starttime="20170419 07:00:10.861" status="PASS" endtime="20170419 07:00:10.864"></status>
</kw>
<status starttime="20170419 07:00:10.861" status="PASS" endtime="20170419 07:00:10.864"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:10.926">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:00:10.926">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:10.864" status="PASS" endtime="20170419 07:00:10.926"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:10.927">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:10.927" status="PASS" endtime="20170419 07:00:10.927"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:10.928">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:10.928" status="PASS" endtime="20170419 07:00:10.929"></status>
</kw>
<status starttime="20170419 07:00:10.928" status="PASS" endtime="20170419 07:00:10.929"></status>
</kw>
<status starttime="20170419 07:00:10.926" status="PASS" endtime="20170419 07:00:10.929"></status>
</kw>
<status starttime="20170419 07:00:10.926" status="PASS" endtime="20170419 07:00:10.929"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:10.929">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:10.672" status="PASS" endtime="20170419 07:00:10.929"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:10.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:10.929" status="PASS" endtime="20170419 07:00:10.930"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:10.930">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:00:10.930">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:00:10.930">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:00:10.930" status="PASS" endtime="20170419 07:00:10.930"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:10.931">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:00:10.671" status="PASS" endtime="20170419 07:00:10.931"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:10.931">${host_state} = Off</msg>
<status starttime="20170419 07:00:10.671" status="PASS" endtime="20170419 07:00:10.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:00:10.932">Running != Off</msg>
<status starttime="20170419 07:00:10.931" status="FAIL" endtime="20170419 07:00:10.932"></status>
</kw>
<status starttime="20170419 07:00:10.670" status="FAIL" endtime="20170419 07:00:10.932"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:20.936">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:00:20.936" status="PASS" endtime="20170419 07:00:20.937"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:20.937">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:00:20.937" status="PASS" endtime="20170419 07:00:20.938"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:20.938">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:00:20.938" status="PASS" endtime="20170419 07:00:20.938"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:20.939">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:00:20.938" status="PASS" endtime="20170419 07:00:20.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:21.116">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:00:20.939" status="PASS" endtime="20170419 07:00:21.116"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:21.116">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:00:21.116">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:20.939" status="PASS" endtime="20170419 07:00:21.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:21.117">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:21.116" status="PASS" endtime="20170419 07:00:21.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:21.117">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:21.117" status="PASS" endtime="20170419 07:00:21.118"></status>
</kw>
<status starttime="20170419 07:00:20.936" status="PASS" endtime="20170419 07:00:21.118"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:21.118">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:00:21.118" status="PASS" endtime="20170419 07:00:21.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:21.120">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:21.120" status="PASS" endtime="20170419 07:00:21.120"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:21.122">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:21.121" status="PASS" endtime="20170419 07:00:21.122"></status>
</kw>
<status starttime="20170419 07:00:21.121" status="PASS" endtime="20170419 07:00:21.122"></status>
</kw>
<status starttime="20170419 07:00:21.119" status="PASS" endtime="20170419 07:00:21.122"></status>
</kw>
<status starttime="20170419 07:00:21.119" status="PASS" endtime="20170419 07:00:21.122"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:21.185">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:00:21.186">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:21.122" status="PASS" endtime="20170419 07:00:21.186"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:21.187">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:21.187" status="PASS" endtime="20170419 07:00:21.187"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:21.188">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:21.188" status="PASS" endtime="20170419 07:00:21.188"></status>
</kw>
<status starttime="20170419 07:00:21.187" status="PASS" endtime="20170419 07:00:21.188"></status>
</kw>
<status starttime="20170419 07:00:21.186" status="PASS" endtime="20170419 07:00:21.189"></status>
</kw>
<status starttime="20170419 07:00:21.186" status="PASS" endtime="20170419 07:00:21.189"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:21.189">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:20.935" status="PASS" endtime="20170419 07:00:21.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:21.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:21.189" status="PASS" endtime="20170419 07:00:21.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:21.190">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:00:21.190">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:00:21.190">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:00:21.190" status="PASS" endtime="20170419 07:00:21.190"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:21.190">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:00:20.934" status="PASS" endtime="20170419 07:00:21.191"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:21.191">${host_state} = Off</msg>
<status starttime="20170419 07:00:20.933" status="PASS" endtime="20170419 07:00:21.191"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:00:21.191">Running != Off</msg>
<status starttime="20170419 07:00:21.191" status="FAIL" endtime="20170419 07:00:21.192"></status>
</kw>
<status starttime="20170419 07:00:20.933" status="FAIL" endtime="20170419 07:00:21.192"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:31.195">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:00:31.195" status="PASS" endtime="20170419 07:00:31.196"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:31.197">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:00:31.196" status="PASS" endtime="20170419 07:00:31.197"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:31.197">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:00:31.197" status="PASS" endtime="20170419 07:00:31.197"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:31.198">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:00:31.197" status="PASS" endtime="20170419 07:00:31.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:31.373">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:00:31.199" status="PASS" endtime="20170419 07:00:31.373"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:31.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:00:31.373">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:31.198" status="PASS" endtime="20170419 07:00:31.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:31.374">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:31.374" status="PASS" endtime="20170419 07:00:31.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:31.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:31.374" status="PASS" endtime="20170419 07:00:31.375"></status>
</kw>
<status starttime="20170419 07:00:31.194" status="PASS" endtime="20170419 07:00:31.375"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:31.375">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:00:31.375" status="PASS" endtime="20170419 07:00:31.375"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:31.377">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:31.377" status="PASS" endtime="20170419 07:00:31.377"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:31.378">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:31.378" status="PASS" endtime="20170419 07:00:31.378"></status>
</kw>
<status starttime="20170419 07:00:31.378" status="PASS" endtime="20170419 07:00:31.378"></status>
</kw>
<status starttime="20170419 07:00:31.376" status="PASS" endtime="20170419 07:00:31.379"></status>
</kw>
<status starttime="20170419 07:00:31.376" status="PASS" endtime="20170419 07:00:31.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:31.441">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:00:31.442">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:31.379" status="PASS" endtime="20170419 07:00:31.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:31.443">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:31.443" status="PASS" endtime="20170419 07:00:31.443"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:31.444">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:31.444" status="PASS" endtime="20170419 07:00:31.444"></status>
</kw>
<status starttime="20170419 07:00:31.443" status="PASS" endtime="20170419 07:00:31.444"></status>
</kw>
<status starttime="20170419 07:00:31.442" status="PASS" endtime="20170419 07:00:31.444"></status>
</kw>
<status starttime="20170419 07:00:31.442" status="PASS" endtime="20170419 07:00:31.445"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:31.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:31.194" status="PASS" endtime="20170419 07:00:31.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:31.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:31.445" status="PASS" endtime="20170419 07:00:31.446"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:31.446">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:00:31.446">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:00:31.446">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:00:31.446" status="PASS" endtime="20170419 07:00:31.446"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:31.446">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:00:31.193" status="PASS" endtime="20170419 07:00:31.447"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:31.447">${host_state} = Off</msg>
<status starttime="20170419 07:00:31.193" status="PASS" endtime="20170419 07:00:31.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:00:31.447">Running != Off</msg>
<status starttime="20170419 07:00:31.447" status="FAIL" endtime="20170419 07:00:31.447"></status>
</kw>
<status starttime="20170419 07:00:31.192" status="FAIL" endtime="20170419 07:00:31.448"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:41.452">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:00:41.451" status="PASS" endtime="20170419 07:00:41.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:41.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:00:41.453" status="PASS" endtime="20170419 07:00:41.453"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:41.454">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:00:41.454" status="PASS" endtime="20170419 07:00:41.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:41.455">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:00:41.454" status="PASS" endtime="20170419 07:00:41.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:41.632">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:00:41.455" status="PASS" endtime="20170419 07:00:41.632"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:41.632">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:00:41.633">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:41.455" status="PASS" endtime="20170419 07:00:41.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:41.633">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:41.633" status="PASS" endtime="20170419 07:00:41.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:41.634">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:41.633" status="PASS" endtime="20170419 07:00:41.634"></status>
</kw>
<status starttime="20170419 07:00:41.451" status="PASS" endtime="20170419 07:00:41.634"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:41.635">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:00:41.634" status="PASS" endtime="20170419 07:00:41.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:41.637">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:41.636" status="PASS" endtime="20170419 07:00:41.637"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:41.638">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:41.637" status="PASS" endtime="20170419 07:00:41.638"></status>
</kw>
<status starttime="20170419 07:00:41.637" status="PASS" endtime="20170419 07:00:41.638"></status>
</kw>
<status starttime="20170419 07:00:41.635" status="PASS" endtime="20170419 07:00:41.638"></status>
</kw>
<status starttime="20170419 07:00:41.635" status="PASS" endtime="20170419 07:00:41.638"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:41.701">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:00:41.701">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:41.638" status="PASS" endtime="20170419 07:00:41.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:41.703">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:41.703" status="PASS" endtime="20170419 07:00:41.703"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:41.704">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:41.704" status="PASS" endtime="20170419 07:00:41.704"></status>
</kw>
<status starttime="20170419 07:00:41.703" status="PASS" endtime="20170419 07:00:41.704"></status>
</kw>
<status starttime="20170419 07:00:41.702" status="PASS" endtime="20170419 07:00:41.704"></status>
</kw>
<status starttime="20170419 07:00:41.702" status="PASS" endtime="20170419 07:00:41.704"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:41.705">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:41.450" status="PASS" endtime="20170419 07:00:41.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:41.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:41.705" status="PASS" endtime="20170419 07:00:41.705"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:41.706">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:00:41.706">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:00:41.706">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:00:41.706" status="PASS" endtime="20170419 07:00:41.706"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:41.706">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:00:41.449" status="PASS" endtime="20170419 07:00:41.706"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:41.707">${host_state} = Off</msg>
<status starttime="20170419 07:00:41.449" status="PASS" endtime="20170419 07:00:41.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:00:41.707">Running != Off</msg>
<status starttime="20170419 07:00:41.707" status="FAIL" endtime="20170419 07:00:41.707"></status>
</kw>
<status starttime="20170419 07:00:41.448" status="FAIL" endtime="20170419 07:00:41.708"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:51.712">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:00:51.712" status="PASS" endtime="20170419 07:00:51.712"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:51.713">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:00:51.713" status="PASS" endtime="20170419 07:00:51.713"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:51.714">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:00:51.713" status="PASS" endtime="20170419 07:00:51.714"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:51.714">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:00:51.714" status="PASS" endtime="20170419 07:00:51.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:51.892">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:00:51.715" status="PASS" endtime="20170419 07:00:51.892"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:51.892">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:00:51.892">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:51.715" status="PASS" endtime="20170419 07:00:51.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:51.893">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:51.892" status="PASS" endtime="20170419 07:00:51.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:51.893">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:51.893" status="PASS" endtime="20170419 07:00:51.893"></status>
</kw>
<status starttime="20170419 07:00:51.711" status="PASS" endtime="20170419 07:00:51.894"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:51.894">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:00:51.894" status="PASS" endtime="20170419 07:00:51.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:51.897">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:51.896" status="PASS" endtime="20170419 07:00:51.897"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:51.899">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:00:51.898" status="PASS" endtime="20170419 07:00:51.899"></status>
</kw>
<status starttime="20170419 07:00:51.897" status="PASS" endtime="20170419 07:00:51.899"></status>
</kw>
<status starttime="20170419 07:00:51.895" status="PASS" endtime="20170419 07:00:51.899"></status>
</kw>
<status starttime="20170419 07:00:51.895" status="PASS" endtime="20170419 07:00:51.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:51.962">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:00:51.962">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:51.899" status="PASS" endtime="20170419 07:00:51.962"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:51.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:51.964" status="PASS" endtime="20170419 07:00:51.964"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:51.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:00:51.965" status="PASS" endtime="20170419 07:00:51.965"></status>
</kw>
<status starttime="20170419 07:00:51.964" status="PASS" endtime="20170419 07:00:51.965"></status>
</kw>
<status starttime="20170419 07:00:51.963" status="PASS" endtime="20170419 07:00:51.965"></status>
</kw>
<status starttime="20170419 07:00:51.963" status="PASS" endtime="20170419 07:00:51.965"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:51.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:00:51.710" status="PASS" endtime="20170419 07:00:51.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:00:51.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:00:51.966" status="PASS" endtime="20170419 07:00:51.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:00:51.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:00:51.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:00:51.967">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:00:51.967" status="PASS" endtime="20170419 07:00:51.967"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:51.967">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:00:51.710" status="PASS" endtime="20170419 07:00:51.967"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:00:51.968">${host_state} = Off</msg>
<status starttime="20170419 07:00:51.709" status="PASS" endtime="20170419 07:00:51.968"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:00:51.968">Running != Off</msg>
<status starttime="20170419 07:00:51.968" status="FAIL" endtime="20170419 07:00:51.968"></status>
</kw>
<status starttime="20170419 07:00:51.708" status="FAIL" endtime="20170419 07:00:51.969"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:01.972">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:01:01.972" status="PASS" endtime="20170419 07:01:01.973"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:01.973">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:01:01.973" status="PASS" endtime="20170419 07:01:01.973"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:01.974">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:01:01.974" status="PASS" endtime="20170419 07:01:01.974"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:01.975">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:01:01.974" status="PASS" endtime="20170419 07:01:01.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:02.218">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:01:01.975" status="PASS" endtime="20170419 07:01:02.218"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:02.218">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:01:02.218">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:01.975" status="PASS" endtime="20170419 07:01:02.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:02.219">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:02.219" status="PASS" endtime="20170419 07:01:02.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:02.220">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:02.219" status="PASS" endtime="20170419 07:01:02.220"></status>
</kw>
<status starttime="20170419 07:01:01.971" status="PASS" endtime="20170419 07:01:02.220"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:02.221">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:01:02.220" status="PASS" endtime="20170419 07:01:02.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:02.223">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:02.222" status="PASS" endtime="20170419 07:01:02.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:02.223">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:02.223" status="PASS" endtime="20170419 07:01:02.224"></status>
</kw>
<status starttime="20170419 07:01:02.223" status="PASS" endtime="20170419 07:01:02.224"></status>
</kw>
<status starttime="20170419 07:01:02.221" status="PASS" endtime="20170419 07:01:02.224"></status>
</kw>
<status starttime="20170419 07:01:02.221" status="PASS" endtime="20170419 07:01:02.224"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:02.287">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:01:02.287">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:02.224" status="PASS" endtime="20170419 07:01:02.287"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:02.288">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:02.288" status="PASS" endtime="20170419 07:01:02.288"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:02.289">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:02.289" status="PASS" endtime="20170419 07:01:02.289"></status>
</kw>
<status starttime="20170419 07:01:02.289" status="PASS" endtime="20170419 07:01:02.290"></status>
</kw>
<status starttime="20170419 07:01:02.287" status="PASS" endtime="20170419 07:01:02.290"></status>
</kw>
<status starttime="20170419 07:01:02.287" status="PASS" endtime="20170419 07:01:02.290"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:02.290">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:01.971" status="PASS" endtime="20170419 07:01:02.290"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:02.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:02.290" status="PASS" endtime="20170419 07:01:02.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:02.291">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:01:02.291">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:01:02.291">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:01:02.291" status="PASS" endtime="20170419 07:01:02.291"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:02.292">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:01:01.970" status="PASS" endtime="20170419 07:01:02.292"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:02.292">${host_state} = Off</msg>
<status starttime="20170419 07:01:01.970" status="PASS" endtime="20170419 07:01:02.292"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:01:02.293">Running != Off</msg>
<status starttime="20170419 07:01:02.292" status="FAIL" endtime="20170419 07:01:02.293"></status>
</kw>
<status starttime="20170419 07:01:01.969" status="FAIL" endtime="20170419 07:01:02.293"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:12.297">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:01:12.296" status="PASS" endtime="20170419 07:01:12.329"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:12.330">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:01:12.330" status="PASS" endtime="20170419 07:01:12.330"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:12.331">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:01:12.331" status="PASS" endtime="20170419 07:01:12.331"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:12.332">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:01:12.331" status="PASS" endtime="20170419 07:01:12.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:12.518">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:01:12.333" status="PASS" endtime="20170419 07:01:12.518"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:12.518">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:01:12.518">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:12.332" status="PASS" endtime="20170419 07:01:12.518"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:12.519">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:12.518" status="PASS" endtime="20170419 07:01:12.519"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:12.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:12.519" status="PASS" endtime="20170419 07:01:12.520"></status>
</kw>
<status starttime="20170419 07:01:12.296" status="PASS" endtime="20170419 07:01:12.520"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:12.520">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:01:12.520" status="PASS" endtime="20170419 07:01:12.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:12.522">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:12.522" status="PASS" endtime="20170419 07:01:12.522"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:12.523">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:12.523" status="PASS" endtime="20170419 07:01:12.523"></status>
</kw>
<status starttime="20170419 07:01:12.523" status="PASS" endtime="20170419 07:01:12.524"></status>
</kw>
<status starttime="20170419 07:01:12.521" status="PASS" endtime="20170419 07:01:12.524"></status>
</kw>
<status starttime="20170419 07:01:12.521" status="PASS" endtime="20170419 07:01:12.524"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:12.587">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:01:12.587">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:12.524" status="PASS" endtime="20170419 07:01:12.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:12.589">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:12.588" status="PASS" endtime="20170419 07:01:12.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:12.590">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:12.589" status="PASS" endtime="20170419 07:01:12.590"></status>
</kw>
<status starttime="20170419 07:01:12.589" status="PASS" endtime="20170419 07:01:12.590"></status>
</kw>
<status starttime="20170419 07:01:12.588" status="PASS" endtime="20170419 07:01:12.590"></status>
</kw>
<status starttime="20170419 07:01:12.587" status="PASS" endtime="20170419 07:01:12.590"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:12.590">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:12.295" status="PASS" endtime="20170419 07:01:12.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:12.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:12.591" status="PASS" endtime="20170419 07:01:12.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:12.591">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:01:12.592">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:01:12.592">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:01:12.591" status="PASS" endtime="20170419 07:01:12.592"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:12.592">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:01:12.294" status="PASS" endtime="20170419 07:01:12.592"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:12.592">${host_state} = Off</msg>
<status starttime="20170419 07:01:12.294" status="PASS" endtime="20170419 07:01:12.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:01:12.593">Running != Off</msg>
<status starttime="20170419 07:01:12.593" status="FAIL" endtime="20170419 07:01:12.593"></status>
</kw>
<status starttime="20170419 07:01:12.293" status="FAIL" endtime="20170419 07:01:12.593"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:22.598">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:01:22.598" status="PASS" endtime="20170419 07:01:22.599"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:22.599">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:01:22.599" status="PASS" endtime="20170419 07:01:22.599"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:22.600">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:01:22.600" status="PASS" endtime="20170419 07:01:22.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:22.600">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:01:22.600" status="PASS" endtime="20170419 07:01:22.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:22.784">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:01:22.601" status="PASS" endtime="20170419 07:01:22.784"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:22.784">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:01:22.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:22.601" status="PASS" endtime="20170419 07:01:22.784"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:22.785">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:22.785" status="PASS" endtime="20170419 07:01:22.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:22.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:22.785" status="PASS" endtime="20170419 07:01:22.786"></status>
</kw>
<status starttime="20170419 07:01:22.597" status="PASS" endtime="20170419 07:01:22.786"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:22.786">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:01:22.786" status="PASS" endtime="20170419 07:01:22.786"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:22.789">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:22.788" status="PASS" endtime="20170419 07:01:22.789"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:22.790">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:22.789" status="PASS" endtime="20170419 07:01:22.790"></status>
</kw>
<status starttime="20170419 07:01:22.789" status="PASS" endtime="20170419 07:01:22.790"></status>
</kw>
<status starttime="20170419 07:01:22.787" status="PASS" endtime="20170419 07:01:22.790"></status>
</kw>
<status starttime="20170419 07:01:22.787" status="PASS" endtime="20170419 07:01:22.790"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:22.853">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:01:22.853">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:22.790" status="PASS" endtime="20170419 07:01:22.853"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:22.855">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:22.855" status="PASS" endtime="20170419 07:01:22.855"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:22.856">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:22.856" status="PASS" endtime="20170419 07:01:22.856"></status>
</kw>
<status starttime="20170419 07:01:22.855" status="PASS" endtime="20170419 07:01:22.856"></status>
</kw>
<status starttime="20170419 07:01:22.854" status="PASS" endtime="20170419 07:01:22.857"></status>
</kw>
<status starttime="20170419 07:01:22.854" status="PASS" endtime="20170419 07:01:22.857"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:22.857">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:22.597" status="PASS" endtime="20170419 07:01:22.857"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:22.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:22.857" status="PASS" endtime="20170419 07:01:22.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:22.858">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:01:22.858">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:01:22.858">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:01:22.858" status="PASS" endtime="20170419 07:01:22.858"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:22.858">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:01:22.595" status="PASS" endtime="20170419 07:01:22.858"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:22.859">${host_state} = Off</msg>
<status starttime="20170419 07:01:22.595" status="PASS" endtime="20170419 07:01:22.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:01:22.859">Running != Off</msg>
<status starttime="20170419 07:01:22.859" status="FAIL" endtime="20170419 07:01:22.859"></status>
</kw>
<status starttime="20170419 07:01:22.594" status="FAIL" endtime="20170419 07:01:22.860"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:32.864">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:01:32.863" status="PASS" endtime="20170419 07:01:32.864"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:32.865">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:01:32.864" status="PASS" endtime="20170419 07:01:32.865"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:32.865">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:01:32.865" status="PASS" endtime="20170419 07:01:32.865"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:32.866">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:01:32.865" status="PASS" endtime="20170419 07:01:32.866"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:33.047">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:01:32.867" status="PASS" endtime="20170419 07:01:33.047"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:33.047">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:01:33.047">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:32.867" status="PASS" endtime="20170419 07:01:33.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:33.048">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:33.048" status="PASS" endtime="20170419 07:01:33.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:33.049">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:33.048" status="PASS" endtime="20170419 07:01:33.049"></status>
</kw>
<status starttime="20170419 07:01:32.863" status="PASS" endtime="20170419 07:01:33.049"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:33.049">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:01:33.049" status="PASS" endtime="20170419 07:01:33.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:33.051">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:33.051" status="PASS" endtime="20170419 07:01:33.051"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:33.052">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:33.052" status="PASS" endtime="20170419 07:01:33.052"></status>
</kw>
<status starttime="20170419 07:01:33.052" status="PASS" endtime="20170419 07:01:33.053"></status>
</kw>
<status starttime="20170419 07:01:33.050" status="PASS" endtime="20170419 07:01:33.053"></status>
</kw>
<status starttime="20170419 07:01:33.050" status="PASS" endtime="20170419 07:01:33.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:33.119">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:01:33.119">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:33.053" status="PASS" endtime="20170419 07:01:33.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:33.121">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:33.120" status="PASS" endtime="20170419 07:01:33.121"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:33.122">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:33.121" status="PASS" endtime="20170419 07:01:33.122"></status>
</kw>
<status starttime="20170419 07:01:33.121" status="PASS" endtime="20170419 07:01:33.122"></status>
</kw>
<status starttime="20170419 07:01:33.120" status="PASS" endtime="20170419 07:01:33.122"></status>
</kw>
<status starttime="20170419 07:01:33.119" status="PASS" endtime="20170419 07:01:33.122"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:33.122">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:32.862" status="PASS" endtime="20170419 07:01:33.122"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:33.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:33.123" status="PASS" endtime="20170419 07:01:33.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:33.123">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:01:33.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:01:33.124">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:01:33.123" status="PASS" endtime="20170419 07:01:33.124"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:33.124">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:01:32.861" status="PASS" endtime="20170419 07:01:33.124"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:33.124">${host_state} = Off</msg>
<status starttime="20170419 07:01:32.861" status="PASS" endtime="20170419 07:01:33.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:01:33.125">Running != Off</msg>
<status starttime="20170419 07:01:33.124" status="FAIL" endtime="20170419 07:01:33.125"></status>
</kw>
<status starttime="20170419 07:01:32.860" status="FAIL" endtime="20170419 07:01:33.125"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:43.129">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:01:43.129" status="PASS" endtime="20170419 07:01:43.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:43.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:01:43.130" status="PASS" endtime="20170419 07:01:43.130"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:43.131">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:01:43.131" status="PASS" endtime="20170419 07:01:43.131"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:43.132">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:01:43.131" status="PASS" endtime="20170419 07:01:43.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:43.314">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:01:43.132" status="PASS" endtime="20170419 07:01:43.314"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:43.314">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:01:43.314">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:43.132" status="PASS" endtime="20170419 07:01:43.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:43.315">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:43.315" status="PASS" endtime="20170419 07:01:43.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:43.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:43.315" status="PASS" endtime="20170419 07:01:43.316"></status>
</kw>
<status starttime="20170419 07:01:43.129" status="PASS" endtime="20170419 07:01:43.316"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:43.317">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:01:43.316" status="PASS" endtime="20170419 07:01:43.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:43.319">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:43.318" status="PASS" endtime="20170419 07:01:43.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:43.319">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:43.319" status="PASS" endtime="20170419 07:01:43.320"></status>
</kw>
<status starttime="20170419 07:01:43.319" status="PASS" endtime="20170419 07:01:43.320"></status>
</kw>
<status starttime="20170419 07:01:43.317" status="PASS" endtime="20170419 07:01:43.320"></status>
</kw>
<status starttime="20170419 07:01:43.317" status="PASS" endtime="20170419 07:01:43.320"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:43.383">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:01:43.383">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:43.320" status="PASS" endtime="20170419 07:01:43.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:43.385">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:43.384" status="PASS" endtime="20170419 07:01:43.385"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:43.385">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:43.385" status="PASS" endtime="20170419 07:01:43.386"></status>
</kw>
<status starttime="20170419 07:01:43.385" status="PASS" endtime="20170419 07:01:43.386"></status>
</kw>
<status starttime="20170419 07:01:43.384" status="PASS" endtime="20170419 07:01:43.386"></status>
</kw>
<status starttime="20170419 07:01:43.383" status="PASS" endtime="20170419 07:01:43.386"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:43.386">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:43.128" status="PASS" endtime="20170419 07:01:43.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:43.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:43.386" status="PASS" endtime="20170419 07:01:43.387"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:43.387">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:01:43.387">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:01:43.387">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:01:43.387" status="PASS" endtime="20170419 07:01:43.388"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:43.388">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:01:43.127" status="PASS" endtime="20170419 07:01:43.388"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:43.388">${host_state} = Off</msg>
<status starttime="20170419 07:01:43.126" status="PASS" endtime="20170419 07:01:43.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:01:43.389">Running != Off</msg>
<status starttime="20170419 07:01:43.388" status="FAIL" endtime="20170419 07:01:43.389"></status>
</kw>
<status starttime="20170419 07:01:43.126" status="FAIL" endtime="20170419 07:01:43.389"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:53.393">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:01:53.392" status="PASS" endtime="20170419 07:01:53.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:53.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:01:53.393" status="PASS" endtime="20170419 07:01:53.394"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:53.394">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:01:53.394" status="PASS" endtime="20170419 07:01:53.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:53.395">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:01:53.394" status="PASS" endtime="20170419 07:01:53.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:53.574">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:01:53.396" status="PASS" endtime="20170419 07:01:53.574"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:53.574">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:01:53.574">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:53.395" status="PASS" endtime="20170419 07:01:53.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:53.575">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:53.574" status="PASS" endtime="20170419 07:01:53.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:53.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:53.575" status="PASS" endtime="20170419 07:01:53.576"></status>
</kw>
<status starttime="20170419 07:01:53.392" status="PASS" endtime="20170419 07:01:53.576"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:53.576">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:01:53.576" status="PASS" endtime="20170419 07:01:53.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:53.578">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:53.578" status="PASS" endtime="20170419 07:01:53.578"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:53.579">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:01:53.579" status="PASS" endtime="20170419 07:01:53.579"></status>
</kw>
<status starttime="20170419 07:01:53.578" status="PASS" endtime="20170419 07:01:53.579"></status>
</kw>
<status starttime="20170419 07:01:53.577" status="PASS" endtime="20170419 07:01:53.579"></status>
</kw>
<status starttime="20170419 07:01:53.577" status="PASS" endtime="20170419 07:01:53.580"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:53.649">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:01:53.649">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:53.580" status="PASS" endtime="20170419 07:01:53.649"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:53.651">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:53.650" status="PASS" endtime="20170419 07:01:53.651"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:53.652">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:01:53.651" status="PASS" endtime="20170419 07:01:53.652"></status>
</kw>
<status starttime="20170419 07:01:53.651" status="PASS" endtime="20170419 07:01:53.652"></status>
</kw>
<status starttime="20170419 07:01:53.650" status="PASS" endtime="20170419 07:01:53.652"></status>
</kw>
<status starttime="20170419 07:01:53.649" status="PASS" endtime="20170419 07:01:53.652"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:53.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:01:53.391" status="PASS" endtime="20170419 07:01:53.652"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:01:53.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:01:53.652" status="PASS" endtime="20170419 07:01:53.653"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:01:53.653">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:01:53.653">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:01:53.654">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:01:53.653" status="PASS" endtime="20170419 07:01:53.654"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:53.654">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:01:53.390" status="PASS" endtime="20170419 07:01:53.654"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:01:53.654">${host_state} = Off</msg>
<status starttime="20170419 07:01:53.390" status="PASS" endtime="20170419 07:01:53.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:01:53.655">Running != Off</msg>
<status starttime="20170419 07:01:53.654" status="FAIL" endtime="20170419 07:01:53.655"></status>
</kw>
<status starttime="20170419 07:01:53.389" status="FAIL" endtime="20170419 07:01:53.655"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:03.660">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:02:03.659" status="PASS" endtime="20170419 07:02:03.660"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:03.661">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:02:03.660" status="PASS" endtime="20170419 07:02:03.661"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:03.661">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:02:03.661" status="PASS" endtime="20170419 07:02:03.661"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:03.662">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:02:03.662" status="PASS" endtime="20170419 07:02:03.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:03.841">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:02:03.663" status="PASS" endtime="20170419 07:02:03.841"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:03.841">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:02:03.841">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:03.662" status="PASS" endtime="20170419 07:02:03.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:03.842">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:03.842" status="PASS" endtime="20170419 07:02:03.842"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:03.843">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:03.842" status="PASS" endtime="20170419 07:02:03.843"></status>
</kw>
<status starttime="20170419 07:02:03.658" status="PASS" endtime="20170419 07:02:03.843"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:03.843">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:02:03.843" status="PASS" endtime="20170419 07:02:03.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:03.845">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:03.845" status="PASS" endtime="20170419 07:02:03.846"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:03.846">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:03.846" status="PASS" endtime="20170419 07:02:03.846"></status>
</kw>
<status starttime="20170419 07:02:03.846" status="PASS" endtime="20170419 07:02:03.847"></status>
</kw>
<status starttime="20170419 07:02:03.844" status="PASS" endtime="20170419 07:02:03.847"></status>
</kw>
<status starttime="20170419 07:02:03.844" status="PASS" endtime="20170419 07:02:03.847"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:03.910">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:02:03.910">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:03.847" status="PASS" endtime="20170419 07:02:03.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:03.912">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:03.911" status="PASS" endtime="20170419 07:02:03.912"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:03.913">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:03.913" status="PASS" endtime="20170419 07:02:03.913"></status>
</kw>
<status starttime="20170419 07:02:03.912" status="PASS" endtime="20170419 07:02:03.913"></status>
</kw>
<status starttime="20170419 07:02:03.911" status="PASS" endtime="20170419 07:02:03.913"></status>
</kw>
<status starttime="20170419 07:02:03.910" status="PASS" endtime="20170419 07:02:03.913"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:03.914">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:03.657" status="PASS" endtime="20170419 07:02:03.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:03.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:03.914" status="PASS" endtime="20170419 07:02:03.914"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:03.915">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:02:03.915">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:02:03.915">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:02:03.915" status="PASS" endtime="20170419 07:02:03.915"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:03.915">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:02:03.657" status="PASS" endtime="20170419 07:02:03.915"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:03.916">${host_state} = Off</msg>
<status starttime="20170419 07:02:03.656" status="PASS" endtime="20170419 07:02:03.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:02:03.917">Running != Off</msg>
<status starttime="20170419 07:02:03.916" status="FAIL" endtime="20170419 07:02:03.917"></status>
</kw>
<status starttime="20170419 07:02:03.656" status="FAIL" endtime="20170419 07:02:03.917"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:13.921">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:02:13.920" status="PASS" endtime="20170419 07:02:13.921"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:13.922">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:02:13.921" status="PASS" endtime="20170419 07:02:13.922"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:13.923">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:02:13.922" status="PASS" endtime="20170419 07:02:13.923"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:13.923">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:02:13.923" status="PASS" endtime="20170419 07:02:13.923"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:14.150">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:02:13.924" status="PASS" endtime="20170419 07:02:14.150"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:14.150">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:02:14.150">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:13.923" status="PASS" endtime="20170419 07:02:14.150"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:14.151">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:14.151" status="PASS" endtime="20170419 07:02:14.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:14.152">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:14.151" status="PASS" endtime="20170419 07:02:14.152"></status>
</kw>
<status starttime="20170419 07:02:13.920" status="PASS" endtime="20170419 07:02:14.152"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:14.152">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:02:14.152" status="PASS" endtime="20170419 07:02:14.152"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:14.155">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:14.154" status="PASS" endtime="20170419 07:02:14.155"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:14.156">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:14.156" status="PASS" endtime="20170419 07:02:14.156"></status>
</kw>
<status starttime="20170419 07:02:14.155" status="PASS" endtime="20170419 07:02:14.156"></status>
</kw>
<status starttime="20170419 07:02:14.153" status="PASS" endtime="20170419 07:02:14.156"></status>
</kw>
<status starttime="20170419 07:02:14.153" status="PASS" endtime="20170419 07:02:14.156"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:14.219">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:02:14.219">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:14.156" status="PASS" endtime="20170419 07:02:14.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:14.221">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:14.221" status="PASS" endtime="20170419 07:02:14.221"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:14.222">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:14.222" status="PASS" endtime="20170419 07:02:14.222"></status>
</kw>
<status starttime="20170419 07:02:14.221" status="PASS" endtime="20170419 07:02:14.222"></status>
</kw>
<status starttime="20170419 07:02:14.220" status="PASS" endtime="20170419 07:02:14.222"></status>
</kw>
<status starttime="20170419 07:02:14.220" status="PASS" endtime="20170419 07:02:14.223"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:14.223">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:13.919" status="PASS" endtime="20170419 07:02:14.223"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:14.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:14.223" status="PASS" endtime="20170419 07:02:14.223"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:14.224">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:02:14.224">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:02:14.224">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:02:14.224" status="PASS" endtime="20170419 07:02:14.224"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:14.224">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:02:13.919" status="PASS" endtime="20170419 07:02:14.224"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:14.225">${host_state} = Off</msg>
<status starttime="20170419 07:02:13.918" status="PASS" endtime="20170419 07:02:14.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:02:14.225">Running != Off</msg>
<status starttime="20170419 07:02:14.225" status="FAIL" endtime="20170419 07:02:14.225"></status>
</kw>
<status starttime="20170419 07:02:13.917" status="FAIL" endtime="20170419 07:02:14.226"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:24.231">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:02:24.230" status="PASS" endtime="20170419 07:02:24.231"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:24.232">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:02:24.231" status="PASS" endtime="20170419 07:02:24.232"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:24.233">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:02:24.232" status="PASS" endtime="20170419 07:02:24.233"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:24.233">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:02:24.233" status="PASS" endtime="20170419 07:02:24.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:24.444">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:02:24.234" status="PASS" endtime="20170419 07:02:24.444"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:24.444">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:02:24.444">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:24.234" status="PASS" endtime="20170419 07:02:24.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:24.445">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:24.444" status="PASS" endtime="20170419 07:02:24.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:24.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:24.445" status="PASS" endtime="20170419 07:02:24.445"></status>
</kw>
<status starttime="20170419 07:02:24.229" status="PASS" endtime="20170419 07:02:24.446"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:24.446">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:02:24.446" status="PASS" endtime="20170419 07:02:24.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:24.448">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:24.447" status="PASS" endtime="20170419 07:02:24.448"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:24.449">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:24.449" status="PASS" endtime="20170419 07:02:24.449"></status>
</kw>
<status starttime="20170419 07:02:24.448" status="PASS" endtime="20170419 07:02:24.449"></status>
</kw>
<status starttime="20170419 07:02:24.447" status="PASS" endtime="20170419 07:02:24.449"></status>
</kw>
<status starttime="20170419 07:02:24.446" status="PASS" endtime="20170419 07:02:24.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:24.513">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:02:24.514">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:24.450" status="PASS" endtime="20170419 07:02:24.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:24.515">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:24.515" status="PASS" endtime="20170419 07:02:24.515"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:24.516">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:24.516" status="PASS" endtime="20170419 07:02:24.516"></status>
</kw>
<status starttime="20170419 07:02:24.516" status="PASS" endtime="20170419 07:02:24.517"></status>
</kw>
<status starttime="20170419 07:02:24.514" status="PASS" endtime="20170419 07:02:24.517"></status>
</kw>
<status starttime="20170419 07:02:24.514" status="PASS" endtime="20170419 07:02:24.517"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:24.517">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:24.228" status="PASS" endtime="20170419 07:02:24.517"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:24.518">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:24.517" status="PASS" endtime="20170419 07:02:24.518"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:24.518">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:02:24.518">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:02:24.518">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:02:24.518" status="PASS" endtime="20170419 07:02:24.518"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:24.519">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:02:24.228" status="PASS" endtime="20170419 07:02:24.519"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:24.519">${host_state} = Off</msg>
<status starttime="20170419 07:02:24.227" status="PASS" endtime="20170419 07:02:24.519"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:02:24.520">Running != Off</msg>
<status starttime="20170419 07:02:24.519" status="FAIL" endtime="20170419 07:02:24.520"></status>
</kw>
<status starttime="20170419 07:02:24.226" status="FAIL" endtime="20170419 07:02:24.520"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:34.524">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:02:34.524" status="PASS" endtime="20170419 07:02:34.525"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:34.525">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:02:34.525" status="PASS" endtime="20170419 07:02:34.525"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:34.526">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:02:34.525" status="PASS" endtime="20170419 07:02:34.526"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:34.526">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:02:34.526" status="PASS" endtime="20170419 07:02:34.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:34.712">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:02:34.527" status="PASS" endtime="20170419 07:02:34.712"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:34.712">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:02:34.712">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:34.527" status="PASS" endtime="20170419 07:02:34.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:34.713">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:34.713" status="PASS" endtime="20170419 07:02:34.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:34.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:34.713" status="PASS" endtime="20170419 07:02:34.714"></status>
</kw>
<status starttime="20170419 07:02:34.523" status="PASS" endtime="20170419 07:02:34.714"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:34.715">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:02:34.714" status="PASS" endtime="20170419 07:02:34.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:34.717">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:34.716" status="PASS" endtime="20170419 07:02:34.717"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:34.718">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:34.717" status="PASS" endtime="20170419 07:02:34.718"></status>
</kw>
<status starttime="20170419 07:02:34.717" status="PASS" endtime="20170419 07:02:34.718"></status>
</kw>
<status starttime="20170419 07:02:34.715" status="PASS" endtime="20170419 07:02:34.718"></status>
</kw>
<status starttime="20170419 07:02:34.715" status="PASS" endtime="20170419 07:02:34.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:34.804">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:02:34.804">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:34.718" status="PASS" endtime="20170419 07:02:34.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:34.808">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:34.807" status="PASS" endtime="20170419 07:02:34.808"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:34.808">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:34.808" status="PASS" endtime="20170419 07:02:34.809"></status>
</kw>
<status starttime="20170419 07:02:34.808" status="PASS" endtime="20170419 07:02:34.809"></status>
</kw>
<status starttime="20170419 07:02:34.805" status="PASS" endtime="20170419 07:02:34.809"></status>
</kw>
<status starttime="20170419 07:02:34.804" status="PASS" endtime="20170419 07:02:34.809"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:34.809">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:34.522" status="PASS" endtime="20170419 07:02:34.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:34.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:34.809" status="PASS" endtime="20170419 07:02:34.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:34.810">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:02:34.810">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:02:34.810">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:02:34.810" status="PASS" endtime="20170419 07:02:34.810"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:34.811">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:02:34.521" status="PASS" endtime="20170419 07:02:34.811"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:34.811">${host_state} = Off</msg>
<status starttime="20170419 07:02:34.521" status="PASS" endtime="20170419 07:02:34.811"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:02:34.812">Running != Off</msg>
<status starttime="20170419 07:02:34.811" status="FAIL" endtime="20170419 07:02:34.812"></status>
</kw>
<status starttime="20170419 07:02:34.520" status="FAIL" endtime="20170419 07:02:34.812"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:44.817">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:02:44.816" status="PASS" endtime="20170419 07:02:44.818"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:44.818">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:02:44.818" status="PASS" endtime="20170419 07:02:44.818"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:44.819">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:02:44.818" status="PASS" endtime="20170419 07:02:44.819"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:44.819">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:02:44.819" status="PASS" endtime="20170419 07:02:44.819"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:44.997">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:02:44.820" status="PASS" endtime="20170419 07:02:44.997"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:44.997">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:02:44.997">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:44.820" status="PASS" endtime="20170419 07:02:44.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:44.997">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:44.997" status="PASS" endtime="20170419 07:02:44.998"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:44.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:44.998" status="PASS" endtime="20170419 07:02:44.998"></status>
</kw>
<status starttime="20170419 07:02:44.815" status="PASS" endtime="20170419 07:02:44.998"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:44.999">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:02:44.999" status="PASS" endtime="20170419 07:02:44.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:45.002">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:45.001" status="PASS" endtime="20170419 07:02:45.002"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:45.003">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:45.002" status="PASS" endtime="20170419 07:02:45.003"></status>
</kw>
<status starttime="20170419 07:02:45.002" status="PASS" endtime="20170419 07:02:45.003"></status>
</kw>
<status starttime="20170419 07:02:45.000" status="PASS" endtime="20170419 07:02:45.003"></status>
</kw>
<status starttime="20170419 07:02:44.999" status="PASS" endtime="20170419 07:02:45.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:45.066">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:02:45.066">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:45.003" status="PASS" endtime="20170419 07:02:45.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:45.068">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:45.068" status="PASS" endtime="20170419 07:02:45.068"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:45.069">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:45.069" status="PASS" endtime="20170419 07:02:45.069"></status>
</kw>
<status starttime="20170419 07:02:45.068" status="PASS" endtime="20170419 07:02:45.069"></status>
</kw>
<status starttime="20170419 07:02:45.067" status="PASS" endtime="20170419 07:02:45.070"></status>
</kw>
<status starttime="20170419 07:02:45.067" status="PASS" endtime="20170419 07:02:45.070"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:45.070">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:44.814" status="PASS" endtime="20170419 07:02:45.070"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:45.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:45.070" status="PASS" endtime="20170419 07:02:45.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:45.071">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:02:45.071">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:02:45.071">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:02:45.071" status="PASS" endtime="20170419 07:02:45.071"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:45.072">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:02:44.814" status="PASS" endtime="20170419 07:02:45.072"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:45.072">${host_state} = Off</msg>
<status starttime="20170419 07:02:44.813" status="PASS" endtime="20170419 07:02:45.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:02:45.073">Running != Off</msg>
<status starttime="20170419 07:02:45.072" status="FAIL" endtime="20170419 07:02:45.073"></status>
</kw>
<status starttime="20170419 07:02:44.813" status="FAIL" endtime="20170419 07:02:45.073"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:55.077">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:02:55.077" status="PASS" endtime="20170419 07:02:55.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:55.079">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:02:55.078" status="PASS" endtime="20170419 07:02:55.079"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:55.080">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:02:55.079" status="PASS" endtime="20170419 07:02:55.080"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:55.080">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:02:55.080" status="PASS" endtime="20170419 07:02:55.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:55.266">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:02:55.081" status="PASS" endtime="20170419 07:02:55.266"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:55.266">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:02:55.266">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:55.081" status="PASS" endtime="20170419 07:02:55.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:55.267">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:55.266" status="PASS" endtime="20170419 07:02:55.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:55.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:55.267" status="PASS" endtime="20170419 07:02:55.267"></status>
</kw>
<status starttime="20170419 07:02:55.076" status="PASS" endtime="20170419 07:02:55.268"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:55.268">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:02:55.268" status="PASS" endtime="20170419 07:02:55.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:55.270">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:55.269" status="PASS" endtime="20170419 07:02:55.270"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:55.271">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:02:55.271" status="PASS" endtime="20170419 07:02:55.271"></status>
</kw>
<status starttime="20170419 07:02:55.270" status="PASS" endtime="20170419 07:02:55.271"></status>
</kw>
<status starttime="20170419 07:02:55.269" status="PASS" endtime="20170419 07:02:55.271"></status>
</kw>
<status starttime="20170419 07:02:55.268" status="PASS" endtime="20170419 07:02:55.272"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:55.334">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:02:55.334">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:55.272" status="PASS" endtime="20170419 07:02:55.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:55.336">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:55.335" status="PASS" endtime="20170419 07:02:55.336"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:55.337">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:02:55.337" status="PASS" endtime="20170419 07:02:55.337"></status>
</kw>
<status starttime="20170419 07:02:55.336" status="PASS" endtime="20170419 07:02:55.337"></status>
</kw>
<status starttime="20170419 07:02:55.335" status="PASS" endtime="20170419 07:02:55.337"></status>
</kw>
<status starttime="20170419 07:02:55.335" status="PASS" endtime="20170419 07:02:55.337"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:55.337">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:02:55.075" status="PASS" endtime="20170419 07:02:55.338"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:02:55.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:02:55.338" status="PASS" endtime="20170419 07:02:55.338"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:02:55.339">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:02:55.339">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:02:55.339">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:02:55.338" status="PASS" endtime="20170419 07:02:55.339"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:55.339">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:02:55.075" status="PASS" endtime="20170419 07:02:55.339"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:02:55.339">${host_state} = Off</msg>
<status starttime="20170419 07:02:55.074" status="PASS" endtime="20170419 07:02:55.339"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:02:55.340">Running != Off</msg>
<status starttime="20170419 07:02:55.340" status="FAIL" endtime="20170419 07:02:55.340"></status>
</kw>
<status starttime="20170419 07:02:55.073" status="FAIL" endtime="20170419 07:02:55.340"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:05.345">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:03:05.344" status="PASS" endtime="20170419 07:03:05.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:05.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:03:05.345" status="PASS" endtime="20170419 07:03:05.346"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:05.346">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:03:05.346" status="PASS" endtime="20170419 07:03:05.346"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:05.347">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:03:05.347" status="PASS" endtime="20170419 07:03:05.347"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:05.526">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:03:05.348" status="PASS" endtime="20170419 07:03:05.526"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:05.526">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:03:05.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:05.347" status="PASS" endtime="20170419 07:03:05.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:05.527">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:05.526" status="PASS" endtime="20170419 07:03:05.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:05.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:05.527" status="PASS" endtime="20170419 07:03:05.527"></status>
</kw>
<status starttime="20170419 07:03:05.343" status="PASS" endtime="20170419 07:03:05.527"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:05.528">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:03:05.528" status="PASS" endtime="20170419 07:03:05.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:05.530">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:05.529" status="PASS" endtime="20170419 07:03:05.530"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:05.531">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:05.531" status="PASS" endtime="20170419 07:03:05.531"></status>
</kw>
<status starttime="20170419 07:03:05.530" status="PASS" endtime="20170419 07:03:05.531"></status>
</kw>
<status starttime="20170419 07:03:05.529" status="PASS" endtime="20170419 07:03:05.531"></status>
</kw>
<status starttime="20170419 07:03:05.528" status="PASS" endtime="20170419 07:03:05.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:05.595">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:03:05.595">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:05.532" status="PASS" endtime="20170419 07:03:05.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:05.597">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:05.596" status="PASS" endtime="20170419 07:03:05.597"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:05.598">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:05.598" status="PASS" endtime="20170419 07:03:05.598"></status>
</kw>
<status starttime="20170419 07:03:05.597" status="PASS" endtime="20170419 07:03:05.599"></status>
</kw>
<status starttime="20170419 07:03:05.596" status="PASS" endtime="20170419 07:03:05.599"></status>
</kw>
<status starttime="20170419 07:03:05.595" status="PASS" endtime="20170419 07:03:05.599"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:05.599">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:05.343" status="PASS" endtime="20170419 07:03:05.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:05.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:05.600" status="PASS" endtime="20170419 07:03:05.600"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:05.601">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:03:05.601">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:03:05.601">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:03:05.600" status="PASS" endtime="20170419 07:03:05.601"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:05.601">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:03:05.342" status="PASS" endtime="20170419 07:03:05.602"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:05.602">${host_state} = Off</msg>
<status starttime="20170419 07:03:05.342" status="PASS" endtime="20170419 07:03:05.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:03:05.603">Running != Off</msg>
<status starttime="20170419 07:03:05.602" status="FAIL" endtime="20170419 07:03:05.603"></status>
</kw>
<status starttime="20170419 07:03:05.341" status="FAIL" endtime="20170419 07:03:05.603"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:15.608">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:03:15.608" status="PASS" endtime="20170419 07:03:15.609"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:15.609">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:03:15.609" status="PASS" endtime="20170419 07:03:15.609"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:15.610">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:03:15.610" status="PASS" endtime="20170419 07:03:15.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:15.611">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:03:15.610" status="PASS" endtime="20170419 07:03:15.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:15.786">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:03:15.611" status="PASS" endtime="20170419 07:03:15.786"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:15.786">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:03:15.786">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:15.611" status="PASS" endtime="20170419 07:03:15.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:15.787">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:15.787" status="PASS" endtime="20170419 07:03:15.787"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:15.788">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:15.787" status="PASS" endtime="20170419 07:03:15.788"></status>
</kw>
<status starttime="20170419 07:03:15.607" status="PASS" endtime="20170419 07:03:15.788"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:15.788">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:03:15.788" status="PASS" endtime="20170419 07:03:15.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:15.791">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:15.790" status="PASS" endtime="20170419 07:03:15.791"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:15.792">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:15.792" status="PASS" endtime="20170419 07:03:15.792"></status>
</kw>
<status starttime="20170419 07:03:15.791" status="PASS" endtime="20170419 07:03:15.792"></status>
</kw>
<status starttime="20170419 07:03:15.789" status="PASS" endtime="20170419 07:03:15.792"></status>
</kw>
<status starttime="20170419 07:03:15.789" status="PASS" endtime="20170419 07:03:15.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:15.856">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:03:15.856">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:15.793" status="PASS" endtime="20170419 07:03:15.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:15.858">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:15.857" status="PASS" endtime="20170419 07:03:15.858"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:15.859">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:15.858" status="PASS" endtime="20170419 07:03:15.859"></status>
</kw>
<status starttime="20170419 07:03:15.858" status="PASS" endtime="20170419 07:03:15.859"></status>
</kw>
<status starttime="20170419 07:03:15.857" status="PASS" endtime="20170419 07:03:15.859"></status>
</kw>
<status starttime="20170419 07:03:15.856" status="PASS" endtime="20170419 07:03:15.859"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:15.859">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:15.607" status="PASS" endtime="20170419 07:03:15.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:15.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:15.860" status="PASS" endtime="20170419 07:03:15.860"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:15.860">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:03:15.860">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:03:15.861">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:03:15.860" status="PASS" endtime="20170419 07:03:15.861"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:15.861">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:03:15.606" status="PASS" endtime="20170419 07:03:15.861"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:15.861">${host_state} = Off</msg>
<status starttime="20170419 07:03:15.605" status="PASS" endtime="20170419 07:03:15.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:03:15.862">Running != Off</msg>
<status starttime="20170419 07:03:15.861" status="FAIL" endtime="20170419 07:03:15.862"></status>
</kw>
<status starttime="20170419 07:03:15.604" status="FAIL" endtime="20170419 07:03:15.862"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:25.866">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:03:25.866" status="PASS" endtime="20170419 07:03:25.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:25.867">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:03:25.867" status="PASS" endtime="20170419 07:03:25.867"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:25.868">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:03:25.868" status="PASS" endtime="20170419 07:03:25.868"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:25.869">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:03:25.869" status="PASS" endtime="20170419 07:03:25.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:26.045">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:03:25.870" status="PASS" endtime="20170419 07:03:26.046"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:26.046">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:03:26.046">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:25.870" status="PASS" endtime="20170419 07:03:26.046"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:26.047">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:26.046" status="PASS" endtime="20170419 07:03:26.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:26.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:26.047" status="PASS" endtime="20170419 07:03:26.047"></status>
</kw>
<status starttime="20170419 07:03:25.865" status="PASS" endtime="20170419 07:03:26.047"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:26.048">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:03:26.048" status="PASS" endtime="20170419 07:03:26.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:26.050">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:26.049" status="PASS" endtime="20170419 07:03:26.050"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:26.051">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:26.051" status="PASS" endtime="20170419 07:03:26.051"></status>
</kw>
<status starttime="20170419 07:03:26.050" status="PASS" endtime="20170419 07:03:26.051"></status>
</kw>
<status starttime="20170419 07:03:26.049" status="PASS" endtime="20170419 07:03:26.051"></status>
</kw>
<status starttime="20170419 07:03:26.048" status="PASS" endtime="20170419 07:03:26.051"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:26.115">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:03:26.115">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:26.052" status="PASS" endtime="20170419 07:03:26.115"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:26.117">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:26.116" status="PASS" endtime="20170419 07:03:26.117"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:26.118">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:26.117" status="PASS" endtime="20170419 07:03:26.118"></status>
</kw>
<status starttime="20170419 07:03:26.117" status="PASS" endtime="20170419 07:03:26.118"></status>
</kw>
<status starttime="20170419 07:03:26.116" status="PASS" endtime="20170419 07:03:26.118"></status>
</kw>
<status starttime="20170419 07:03:26.115" status="PASS" endtime="20170419 07:03:26.118"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:26.118">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:25.864" status="PASS" endtime="20170419 07:03:26.118"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:26.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:26.118" status="PASS" endtime="20170419 07:03:26.119"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:26.119">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:03:26.119">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:03:26.119">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:03:26.119" status="PASS" endtime="20170419 07:03:26.120"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:26.120">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:03:25.864" status="PASS" endtime="20170419 07:03:26.120"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:26.120">${host_state} = Off</msg>
<status starttime="20170419 07:03:25.863" status="PASS" endtime="20170419 07:03:26.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:03:26.121">Running != Off</msg>
<status starttime="20170419 07:03:26.120" status="FAIL" endtime="20170419 07:03:26.121"></status>
</kw>
<status starttime="20170419 07:03:25.863" status="FAIL" endtime="20170419 07:03:26.121"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:36.125">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:03:36.125" status="PASS" endtime="20170419 07:03:36.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:36.126">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:03:36.126" status="PASS" endtime="20170419 07:03:36.126"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:36.127">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:03:36.126" status="PASS" endtime="20170419 07:03:36.127"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:36.127">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:03:36.127" status="PASS" endtime="20170419 07:03:36.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:36.302">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:03:36.128" status="PASS" endtime="20170419 07:03:36.302"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:36.302">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:03:36.302">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:36.128" status="PASS" endtime="20170419 07:03:36.302"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:36.303">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:36.303" status="PASS" endtime="20170419 07:03:36.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:36.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:36.303" status="PASS" endtime="20170419 07:03:36.304"></status>
</kw>
<status starttime="20170419 07:03:36.124" status="PASS" endtime="20170419 07:03:36.304"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:36.305">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:03:36.304" status="PASS" endtime="20170419 07:03:36.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:36.307">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:36.306" status="PASS" endtime="20170419 07:03:36.307"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:36.307">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:36.307" status="PASS" endtime="20170419 07:03:36.308"></status>
</kw>
<status starttime="20170419 07:03:36.307" status="PASS" endtime="20170419 07:03:36.308"></status>
</kw>
<status starttime="20170419 07:03:36.305" status="PASS" endtime="20170419 07:03:36.308"></status>
</kw>
<status starttime="20170419 07:03:36.305" status="PASS" endtime="20170419 07:03:36.308"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:36.370">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:03:36.371">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:36.308" status="PASS" endtime="20170419 07:03:36.371"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:36.373">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:36.372" status="PASS" endtime="20170419 07:03:36.373"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:36.374">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:36.373" status="PASS" endtime="20170419 07:03:36.374"></status>
</kw>
<status starttime="20170419 07:03:36.373" status="PASS" endtime="20170419 07:03:36.374"></status>
</kw>
<status starttime="20170419 07:03:36.371" status="PASS" endtime="20170419 07:03:36.374"></status>
</kw>
<status starttime="20170419 07:03:36.371" status="PASS" endtime="20170419 07:03:36.374"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:36.374">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:36.123" status="PASS" endtime="20170419 07:03:36.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:36.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:36.375" status="PASS" endtime="20170419 07:03:36.375"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:36.375">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:03:36.376">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:03:36.376">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:03:36.375" status="PASS" endtime="20170419 07:03:36.376"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:36.376">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:03:36.123" status="PASS" endtime="20170419 07:03:36.376"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:36.376">${host_state} = Off</msg>
<status starttime="20170419 07:03:36.122" status="PASS" endtime="20170419 07:03:36.376"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:03:36.377">Running != Off</msg>
<status starttime="20170419 07:03:36.377" status="FAIL" endtime="20170419 07:03:36.377"></status>
</kw>
<status starttime="20170419 07:03:36.121" status="FAIL" endtime="20170419 07:03:36.377"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:46.381">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:03:46.381" status="PASS" endtime="20170419 07:03:46.381"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:46.382">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:03:46.382" status="PASS" endtime="20170419 07:03:46.382"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:46.383">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:03:46.382" status="PASS" endtime="20170419 07:03:46.383"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:46.383">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:03:46.383" status="PASS" endtime="20170419 07:03:46.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:46.566">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:03:46.384" status="PASS" endtime="20170419 07:03:46.566"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:46.566">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:03:46.566">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:46.384" status="PASS" endtime="20170419 07:03:46.566"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:46.567">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:46.566" status="PASS" endtime="20170419 07:03:46.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:46.568">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:46.567" status="PASS" endtime="20170419 07:03:46.568"></status>
</kw>
<status starttime="20170419 07:03:46.380" status="PASS" endtime="20170419 07:03:46.568"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:46.568">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:03:46.568" status="PASS" endtime="20170419 07:03:46.568"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:46.571">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:46.570" status="PASS" endtime="20170419 07:03:46.571"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:46.572">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:46.571" status="PASS" endtime="20170419 07:03:46.572"></status>
</kw>
<status starttime="20170419 07:03:46.571" status="PASS" endtime="20170419 07:03:46.572"></status>
</kw>
<status starttime="20170419 07:03:46.569" status="PASS" endtime="20170419 07:03:46.572"></status>
</kw>
<status starttime="20170419 07:03:46.569" status="PASS" endtime="20170419 07:03:46.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:46.635">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:03:46.635">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:46.572" status="PASS" endtime="20170419 07:03:46.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:46.637">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:46.637" status="PASS" endtime="20170419 07:03:46.637"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:46.638">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:46.638" status="PASS" endtime="20170419 07:03:46.638"></status>
</kw>
<status starttime="20170419 07:03:46.637" status="PASS" endtime="20170419 07:03:46.638"></status>
</kw>
<status starttime="20170419 07:03:46.636" status="PASS" endtime="20170419 07:03:46.638"></status>
</kw>
<status starttime="20170419 07:03:46.636" status="PASS" endtime="20170419 07:03:46.638"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:46.639">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:46.379" status="PASS" endtime="20170419 07:03:46.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:46.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:46.639" status="PASS" endtime="20170419 07:03:46.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:46.640">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:03:46.640">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:03:46.640">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:03:46.640" status="PASS" endtime="20170419 07:03:46.640"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:46.640">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:03:46.379" status="PASS" endtime="20170419 07:03:46.640"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:46.641">${host_state} = Off</msg>
<status starttime="20170419 07:03:46.378" status="PASS" endtime="20170419 07:03:46.641"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:03:46.641">Running != Off</msg>
<status starttime="20170419 07:03:46.641" status="FAIL" endtime="20170419 07:03:46.641"></status>
</kw>
<status starttime="20170419 07:03:46.378" status="FAIL" endtime="20170419 07:03:46.641"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:56.645">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:03:56.645" status="PASS" endtime="20170419 07:03:56.646"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:56.646">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:03:56.646" status="PASS" endtime="20170419 07:03:56.646"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:56.647">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:03:56.646" status="PASS" endtime="20170419 07:03:56.647"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:56.647">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:03:56.647" status="PASS" endtime="20170419 07:03:56.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:56.824">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:03:56.648" status="PASS" endtime="20170419 07:03:56.824"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:56.824">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:03:56.824">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:56.648" status="PASS" endtime="20170419 07:03:56.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:56.825">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:56.825" status="PASS" endtime="20170419 07:03:56.825"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:56.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:56.825" status="PASS" endtime="20170419 07:03:56.826"></status>
</kw>
<status starttime="20170419 07:03:56.644" status="PASS" endtime="20170419 07:03:56.826"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:56.826">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:03:56.826" status="PASS" endtime="20170419 07:03:56.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:56.828">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:56.828" status="PASS" endtime="20170419 07:03:56.828"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:56.829">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:03:56.829" status="PASS" endtime="20170419 07:03:56.829"></status>
</kw>
<status starttime="20170419 07:03:56.829" status="PASS" endtime="20170419 07:03:56.830"></status>
</kw>
<status starttime="20170419 07:03:56.827" status="PASS" endtime="20170419 07:03:56.830"></status>
</kw>
<status starttime="20170419 07:03:56.827" status="PASS" endtime="20170419 07:03:56.830"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:56.893">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:03:56.894">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:56.830" status="PASS" endtime="20170419 07:03:56.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:56.895">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:56.895" status="PASS" endtime="20170419 07:03:56.895"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:56.896">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:03:56.896" status="PASS" endtime="20170419 07:03:56.896"></status>
</kw>
<status starttime="20170419 07:03:56.896" status="PASS" endtime="20170419 07:03:56.897"></status>
</kw>
<status starttime="20170419 07:03:56.894" status="PASS" endtime="20170419 07:03:56.897"></status>
</kw>
<status starttime="20170419 07:03:56.894" status="PASS" endtime="20170419 07:03:56.897"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:56.897">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:03:56.644" status="PASS" endtime="20170419 07:03:56.897"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:03:56.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:03:56.897" status="PASS" endtime="20170419 07:03:56.898"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:03:56.898">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:03:56.898">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:03:56.898">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:03:56.898" status="PASS" endtime="20170419 07:03:56.898"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:56.899">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:03:56.643" status="PASS" endtime="20170419 07:03:56.899"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:03:56.899">${host_state} = Off</msg>
<status starttime="20170419 07:03:56.643" status="PASS" endtime="20170419 07:03:56.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:03:56.900">Running != Off</msg>
<status starttime="20170419 07:03:56.899" status="FAIL" endtime="20170419 07:03:56.900"></status>
</kw>
<status starttime="20170419 07:03:56.642" status="FAIL" endtime="20170419 07:03:56.900"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:06.904">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:04:06.904" status="PASS" endtime="20170419 07:04:06.905"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:06.905">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:04:06.905" status="PASS" endtime="20170419 07:04:06.905"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:06.906">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:04:06.905" status="PASS" endtime="20170419 07:04:06.906"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:06.906">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:04:06.906" status="PASS" endtime="20170419 07:04:06.907"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:07.101">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:04:06.907" status="PASS" endtime="20170419 07:04:07.101"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:07.101">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:04:07.101">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:06.907" status="PASS" endtime="20170419 07:04:07.101"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:07.102">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:07.101" status="PASS" endtime="20170419 07:04:07.102"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:07.102">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:07.102" status="PASS" endtime="20170419 07:04:07.102"></status>
</kw>
<status starttime="20170419 07:04:06.903" status="PASS" endtime="20170419 07:04:07.103"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:07.103">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:04:07.103" status="PASS" endtime="20170419 07:04:07.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:07.105">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:07.105" status="PASS" endtime="20170419 07:04:07.105"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:07.106">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:07.106" status="PASS" endtime="20170419 07:04:07.106"></status>
</kw>
<status starttime="20170419 07:04:07.106" status="PASS" endtime="20170419 07:04:07.106"></status>
</kw>
<status starttime="20170419 07:04:07.104" status="PASS" endtime="20170419 07:04:07.107"></status>
</kw>
<status starttime="20170419 07:04:07.103" status="PASS" endtime="20170419 07:04:07.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:07.169">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:04:07.169">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:07.107" status="PASS" endtime="20170419 07:04:07.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:07.173">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:07.172" status="PASS" endtime="20170419 07:04:07.173"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:07.174">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:07.174" status="PASS" endtime="20170419 07:04:07.174"></status>
</kw>
<status starttime="20170419 07:04:07.173" status="PASS" endtime="20170419 07:04:07.174"></status>
</kw>
<status starttime="20170419 07:04:07.170" status="PASS" endtime="20170419 07:04:07.174"></status>
</kw>
<status starttime="20170419 07:04:07.170" status="PASS" endtime="20170419 07:04:07.174"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:07.175">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:06.902" status="PASS" endtime="20170419 07:04:07.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:07.175">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:07.175" status="PASS" endtime="20170419 07:04:07.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:07.176">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:04:07.176">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:04:07.176">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:04:07.176" status="PASS" endtime="20170419 07:04:07.176"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:07.176">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:04:06.901" status="PASS" endtime="20170419 07:04:07.176"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:07.177">${host_state} = Off</msg>
<status starttime="20170419 07:04:06.901" status="PASS" endtime="20170419 07:04:07.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:04:07.177">Running != Off</msg>
<status starttime="20170419 07:04:07.177" status="FAIL" endtime="20170419 07:04:07.177"></status>
</kw>
<status starttime="20170419 07:04:06.900" status="FAIL" endtime="20170419 07:04:07.177"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:17.181">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:04:17.181" status="PASS" endtime="20170419 07:04:17.182"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:17.183">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:04:17.182" status="PASS" endtime="20170419 07:04:17.183"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:17.183">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:04:17.183" status="PASS" endtime="20170419 07:04:17.183"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:17.184">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:04:17.183" status="PASS" endtime="20170419 07:04:17.184"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:17.395">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:04:17.185" status="PASS" endtime="20170419 07:04:17.395"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:17.395">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:04:17.395">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:17.184" status="PASS" endtime="20170419 07:04:17.395"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:17.396">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:17.395" status="PASS" endtime="20170419 07:04:17.396"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:17.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:17.396" status="PASS" endtime="20170419 07:04:17.396"></status>
</kw>
<status starttime="20170419 07:04:17.180" status="PASS" endtime="20170419 07:04:17.396"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:17.397">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:04:17.397" status="PASS" endtime="20170419 07:04:17.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:17.399">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:17.398" status="PASS" endtime="20170419 07:04:17.399"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:17.400">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:17.400" status="PASS" endtime="20170419 07:04:17.400"></status>
</kw>
<status starttime="20170419 07:04:17.400" status="PASS" endtime="20170419 07:04:17.400"></status>
</kw>
<status starttime="20170419 07:04:17.398" status="PASS" endtime="20170419 07:04:17.401"></status>
</kw>
<status starttime="20170419 07:04:17.397" status="PASS" endtime="20170419 07:04:17.401"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:17.463">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:04:17.464">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:17.401" status="PASS" endtime="20170419 07:04:17.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:17.465">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:17.465" status="PASS" endtime="20170419 07:04:17.465"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:17.466">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:17.466" status="PASS" endtime="20170419 07:04:17.466"></status>
</kw>
<status starttime="20170419 07:04:17.465" status="PASS" endtime="20170419 07:04:17.466"></status>
</kw>
<status starttime="20170419 07:04:17.464" status="PASS" endtime="20170419 07:04:17.467"></status>
</kw>
<status starttime="20170419 07:04:17.464" status="PASS" endtime="20170419 07:04:17.467"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:17.467">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:17.180" status="PASS" endtime="20170419 07:04:17.467"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:17.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:17.467" status="PASS" endtime="20170419 07:04:17.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:17.468">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:04:17.468">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:04:17.468">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:04:17.468" status="PASS" endtime="20170419 07:04:17.468"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:17.469">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:04:17.179" status="PASS" endtime="20170419 07:04:17.469"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:17.469">${host_state} = Off</msg>
<status starttime="20170419 07:04:17.179" status="PASS" endtime="20170419 07:04:17.469"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:04:17.469">Running != Off</msg>
<status starttime="20170419 07:04:17.469" status="FAIL" endtime="20170419 07:04:17.470"></status>
</kw>
<status starttime="20170419 07:04:17.178" status="FAIL" endtime="20170419 07:04:17.470"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:27.474">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:04:27.473" status="PASS" endtime="20170419 07:04:27.474"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:27.475">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:04:27.475" status="PASS" endtime="20170419 07:04:27.475"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:27.475">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:04:27.475" status="PASS" endtime="20170419 07:04:27.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:27.476">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:04:27.476" status="PASS" endtime="20170419 07:04:27.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:27.687">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:04:27.477" status="PASS" endtime="20170419 07:04:27.687"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:27.687">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:04:27.687">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:27.476" status="PASS" endtime="20170419 07:04:27.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:27.688">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:27.687" status="PASS" endtime="20170419 07:04:27.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:27.688">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:27.688" status="PASS" endtime="20170419 07:04:27.689"></status>
</kw>
<status starttime="20170419 07:04:27.473" status="PASS" endtime="20170419 07:04:27.689"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:27.689">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:04:27.689" status="PASS" endtime="20170419 07:04:27.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:27.691">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:27.691" status="PASS" endtime="20170419 07:04:27.691"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:27.692">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:27.692" status="PASS" endtime="20170419 07:04:27.692"></status>
</kw>
<status starttime="20170419 07:04:27.692" status="PASS" endtime="20170419 07:04:27.692"></status>
</kw>
<status starttime="20170419 07:04:27.690" status="PASS" endtime="20170419 07:04:27.693"></status>
</kw>
<status starttime="20170419 07:04:27.689" status="PASS" endtime="20170419 07:04:27.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:27.755">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:04:27.756">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:27.693" status="PASS" endtime="20170419 07:04:27.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:27.757">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:27.757" status="PASS" endtime="20170419 07:04:27.757"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:27.758">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:27.758" status="PASS" endtime="20170419 07:04:27.758"></status>
</kw>
<status starttime="20170419 07:04:27.757" status="PASS" endtime="20170419 07:04:27.758"></status>
</kw>
<status starttime="20170419 07:04:27.756" status="PASS" endtime="20170419 07:04:27.759"></status>
</kw>
<status starttime="20170419 07:04:27.756" status="PASS" endtime="20170419 07:04:27.759"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:27.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:27.472" status="PASS" endtime="20170419 07:04:27.759"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:27.759">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:27.759" status="PASS" endtime="20170419 07:04:27.759"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:27.760">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:04:27.760">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:04:27.760">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:04:27.760" status="PASS" endtime="20170419 07:04:27.760"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:27.760">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:04:27.471" status="PASS" endtime="20170419 07:04:27.760"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:27.761">${host_state} = Off</msg>
<status starttime="20170419 07:04:27.471" status="PASS" endtime="20170419 07:04:27.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:04:27.761">Running != Off</msg>
<status starttime="20170419 07:04:27.761" status="FAIL" endtime="20170419 07:04:27.761"></status>
</kw>
<status starttime="20170419 07:04:27.470" status="FAIL" endtime="20170419 07:04:27.762"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:37.765">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:04:37.765" status="PASS" endtime="20170419 07:04:37.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:37.767">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:04:37.766" status="PASS" endtime="20170419 07:04:37.767"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:37.767">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:04:37.767" status="PASS" endtime="20170419 07:04:37.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:37.768">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:04:37.768" status="PASS" endtime="20170419 07:04:37.768"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:37.956">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:04:37.769" status="PASS" endtime="20170419 07:04:37.956"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:37.956">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:04:37.956">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:37.768" status="PASS" endtime="20170419 07:04:37.956"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:37.957">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:37.956" status="PASS" endtime="20170419 07:04:37.957"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:37.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:37.957" status="PASS" endtime="20170419 07:04:37.957"></status>
</kw>
<status starttime="20170419 07:04:37.764" status="PASS" endtime="20170419 07:04:37.957"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:37.958">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:04:37.958" status="PASS" endtime="20170419 07:04:37.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:37.960">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:37.959" status="PASS" endtime="20170419 07:04:37.960"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:37.961">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:37.961" status="PASS" endtime="20170419 07:04:37.961"></status>
</kw>
<status starttime="20170419 07:04:37.960" status="PASS" endtime="20170419 07:04:37.961"></status>
</kw>
<status starttime="20170419 07:04:37.959" status="PASS" endtime="20170419 07:04:37.962"></status>
</kw>
<status starttime="20170419 07:04:37.958" status="PASS" endtime="20170419 07:04:37.962"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:38.030">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:04:38.030">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:37.962" status="PASS" endtime="20170419 07:04:38.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:38.032">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:38.031" status="PASS" endtime="20170419 07:04:38.032"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:38.033">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:38.033" status="PASS" endtime="20170419 07:04:38.033"></status>
</kw>
<status starttime="20170419 07:04:38.032" status="PASS" endtime="20170419 07:04:38.033"></status>
</kw>
<status starttime="20170419 07:04:38.031" status="PASS" endtime="20170419 07:04:38.033"></status>
</kw>
<status starttime="20170419 07:04:38.031" status="PASS" endtime="20170419 07:04:38.033"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:38.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:37.764" status="PASS" endtime="20170419 07:04:38.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:38.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:38.034" status="PASS" endtime="20170419 07:04:38.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:38.035">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:04:38.035">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:04:38.035">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:04:38.035" status="PASS" endtime="20170419 07:04:38.035"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:38.036">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:04:37.763" status="PASS" endtime="20170419 07:04:38.036"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:38.036">${host_state} = Off</msg>
<status starttime="20170419 07:04:37.763" status="PASS" endtime="20170419 07:04:38.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:04:38.036">Running != Off</msg>
<status starttime="20170419 07:04:38.036" status="FAIL" endtime="20170419 07:04:38.037"></status>
</kw>
<status starttime="20170419 07:04:37.762" status="FAIL" endtime="20170419 07:04:38.037"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:48.042">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:04:48.042" status="PASS" endtime="20170419 07:04:48.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:48.043">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:04:48.043" status="PASS" endtime="20170419 07:04:48.044"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:48.044">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:04:48.044" status="PASS" endtime="20170419 07:04:48.044"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:48.045">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:04:48.044" status="PASS" endtime="20170419 07:04:48.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:48.254">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:04:48.045" status="PASS" endtime="20170419 07:04:48.254"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:48.254">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:04:48.254">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:48.045" status="PASS" endtime="20170419 07:04:48.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:48.255">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:48.255" status="PASS" endtime="20170419 07:04:48.255"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:48.256">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:48.255" status="PASS" endtime="20170419 07:04:48.256"></status>
</kw>
<status starttime="20170419 07:04:48.041" status="PASS" endtime="20170419 07:04:48.256"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:48.256">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:04:48.256" status="PASS" endtime="20170419 07:04:48.256"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:48.258">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:48.258" status="PASS" endtime="20170419 07:04:48.259"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:48.260">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:48.259" status="PASS" endtime="20170419 07:04:48.260"></status>
</kw>
<status starttime="20170419 07:04:48.259" status="PASS" endtime="20170419 07:04:48.260"></status>
</kw>
<status starttime="20170419 07:04:48.257" status="PASS" endtime="20170419 07:04:48.260"></status>
</kw>
<status starttime="20170419 07:04:48.257" status="PASS" endtime="20170419 07:04:48.260"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:48.323">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:04:48.324">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:48.260" status="PASS" endtime="20170419 07:04:48.324"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:48.325">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:48.325" status="PASS" endtime="20170419 07:04:48.325"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:48.326">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:48.326" status="PASS" endtime="20170419 07:04:48.326"></status>
</kw>
<status starttime="20170419 07:04:48.326" status="PASS" endtime="20170419 07:04:48.326"></status>
</kw>
<status starttime="20170419 07:04:48.324" status="PASS" endtime="20170419 07:04:48.327"></status>
</kw>
<status starttime="20170419 07:04:48.324" status="PASS" endtime="20170419 07:04:48.327"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:48.327">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:48.041" status="PASS" endtime="20170419 07:04:48.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:48.327">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:48.327" status="PASS" endtime="20170419 07:04:48.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:48.328">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:04:48.328">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:04:48.328">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:04:48.328" status="PASS" endtime="20170419 07:04:48.328"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:48.328">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:04:48.040" status="PASS" endtime="20170419 07:04:48.329"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:48.329">${host_state} = Off</msg>
<status starttime="20170419 07:04:48.038" status="PASS" endtime="20170419 07:04:48.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:04:48.330">Running != Off</msg>
<status starttime="20170419 07:04:48.329" status="FAIL" endtime="20170419 07:04:48.330"></status>
</kw>
<status starttime="20170419 07:04:48.037" status="FAIL" endtime="20170419 07:04:48.330"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:58.333">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:04:58.333" status="PASS" endtime="20170419 07:04:58.334"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:58.334">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:04:58.334" status="PASS" endtime="20170419 07:04:58.334"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:58.335">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:04:58.335" status="PASS" endtime="20170419 07:04:58.335"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:58.336">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:04:58.335" status="PASS" endtime="20170419 07:04:58.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:58.544">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:04:58.336" status="PASS" endtime="20170419 07:04:58.544"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:58.544">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:04:58.544">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:58.336" status="PASS" endtime="20170419 07:04:58.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:58.545">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:58.544" status="PASS" endtime="20170419 07:04:58.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:58.546">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:58.545" status="PASS" endtime="20170419 07:04:58.546"></status>
</kw>
<status starttime="20170419 07:04:58.332" status="PASS" endtime="20170419 07:04:58.546"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:58.546">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:04:58.546" status="PASS" endtime="20170419 07:04:58.546"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:58.548">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:58.548" status="PASS" endtime="20170419 07:04:58.549"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:58.549">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:04:58.549" status="PASS" endtime="20170419 07:04:58.550"></status>
</kw>
<status starttime="20170419 07:04:58.549" status="PASS" endtime="20170419 07:04:58.550"></status>
</kw>
<status starttime="20170419 07:04:58.547" status="PASS" endtime="20170419 07:04:58.550"></status>
</kw>
<status starttime="20170419 07:04:58.547" status="PASS" endtime="20170419 07:04:58.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:58.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:04:58.613">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:58.550" status="PASS" endtime="20170419 07:04:58.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:58.615">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:58.614" status="PASS" endtime="20170419 07:04:58.615"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:58.616">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:04:58.615" status="PASS" endtime="20170419 07:04:58.616"></status>
</kw>
<status starttime="20170419 07:04:58.615" status="PASS" endtime="20170419 07:04:58.616"></status>
</kw>
<status starttime="20170419 07:04:58.614" status="PASS" endtime="20170419 07:04:58.616"></status>
</kw>
<status starttime="20170419 07:04:58.613" status="PASS" endtime="20170419 07:04:58.616"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:58.616">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:04:58.332" status="PASS" endtime="20170419 07:04:58.616"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:04:58.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:04:58.616" status="PASS" endtime="20170419 07:04:58.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:04:58.617">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:04:58.617">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:04:58.618">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:04:58.617" status="PASS" endtime="20170419 07:04:58.618"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:58.618">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:04:58.331" status="PASS" endtime="20170419 07:04:58.618"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:04:58.618">${host_state} = Off</msg>
<status starttime="20170419 07:04:58.331" status="PASS" endtime="20170419 07:04:58.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:04:58.619">Running != Off</msg>
<status starttime="20170419 07:04:58.619" status="FAIL" endtime="20170419 07:04:58.619"></status>
</kw>
<status starttime="20170419 07:04:58.330" status="FAIL" endtime="20170419 07:04:58.619"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:08.623">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:05:08.623" status="PASS" endtime="20170419 07:05:08.624"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:08.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:05:08.624" status="PASS" endtime="20170419 07:05:08.625"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:08.625">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:05:08.625" status="PASS" endtime="20170419 07:05:08.625"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:08.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:05:08.625" status="PASS" endtime="20170419 07:05:08.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:08.836">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:05:08.627" status="PASS" endtime="20170419 07:05:08.836"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:08.836">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:05:08.836">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:08.626" status="PASS" endtime="20170419 07:05:08.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:08.837">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:08.836" status="PASS" endtime="20170419 07:05:08.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:08.837">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:08.837" status="PASS" endtime="20170419 07:05:08.838"></status>
</kw>
<status starttime="20170419 07:05:08.622" status="PASS" endtime="20170419 07:05:08.838"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:08.838">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:05:08.838" status="PASS" endtime="20170419 07:05:08.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:08.840">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:08.840" status="PASS" endtime="20170419 07:05:08.840"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:08.841">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:08.841" status="PASS" endtime="20170419 07:05:08.841"></status>
</kw>
<status starttime="20170419 07:05:08.840" status="PASS" endtime="20170419 07:05:08.841"></status>
</kw>
<status starttime="20170419 07:05:08.839" status="PASS" endtime="20170419 07:05:08.842"></status>
</kw>
<status starttime="20170419 07:05:08.839" status="PASS" endtime="20170419 07:05:08.842"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:08.915">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:05:08.916">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:08.842" status="PASS" endtime="20170419 07:05:08.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:08.917">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:08.917" status="PASS" endtime="20170419 07:05:08.917"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:08.919">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:08.918" status="PASS" endtime="20170419 07:05:08.919"></status>
</kw>
<status starttime="20170419 07:05:08.918" status="PASS" endtime="20170419 07:05:08.919"></status>
</kw>
<status starttime="20170419 07:05:08.916" status="PASS" endtime="20170419 07:05:08.919"></status>
</kw>
<status starttime="20170419 07:05:08.916" status="PASS" endtime="20170419 07:05:08.919"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:08.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:08.621" status="PASS" endtime="20170419 07:05:08.919"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:08.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:08.920" status="PASS" endtime="20170419 07:05:08.920"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:08.920">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:05:08.920">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:05:08.921">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:05:08.920" status="PASS" endtime="20170419 07:05:08.921"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:08.921">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:05:08.621" status="PASS" endtime="20170419 07:05:08.921"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:08.921">${host_state} = Off</msg>
<status starttime="20170419 07:05:08.620" status="PASS" endtime="20170419 07:05:08.921"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:05:08.922">Running != Off</msg>
<status starttime="20170419 07:05:08.921" status="FAIL" endtime="20170419 07:05:08.922"></status>
</kw>
<status starttime="20170419 07:05:08.620" status="FAIL" endtime="20170419 07:05:08.922"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:18.926">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:05:18.926" status="PASS" endtime="20170419 07:05:18.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:18.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:05:18.927" status="PASS" endtime="20170419 07:05:18.927"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:18.928">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:05:18.927" status="PASS" endtime="20170419 07:05:18.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:18.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:05:18.928" status="PASS" endtime="20170419 07:05:18.929"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:19.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:05:18.929" status="PASS" endtime="20170419 07:05:19.126"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:19.126">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:05:19.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:18.929" status="PASS" endtime="20170419 07:05:19.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:19.127">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:19.126" status="PASS" endtime="20170419 07:05:19.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:19.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:19.127" status="PASS" endtime="20170419 07:05:19.127"></status>
</kw>
<status starttime="20170419 07:05:18.925" status="PASS" endtime="20170419 07:05:19.127"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:19.128">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:05:19.128" status="PASS" endtime="20170419 07:05:19.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:19.130">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:19.130" status="PASS" endtime="20170419 07:05:19.130"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:19.131">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:19.131" status="PASS" endtime="20170419 07:05:19.132"></status>
</kw>
<status starttime="20170419 07:05:19.131" status="PASS" endtime="20170419 07:05:19.132"></status>
</kw>
<status starttime="20170419 07:05:19.129" status="PASS" endtime="20170419 07:05:19.132"></status>
</kw>
<status starttime="20170419 07:05:19.128" status="PASS" endtime="20170419 07:05:19.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:19.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:05:19.196">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:19.132" status="PASS" endtime="20170419 07:05:19.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:19.197">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:19.197" status="PASS" endtime="20170419 07:05:19.197"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:19.198">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:19.198" status="PASS" endtime="20170419 07:05:19.198"></status>
</kw>
<status starttime="20170419 07:05:19.198" status="PASS" endtime="20170419 07:05:19.199"></status>
</kw>
<status starttime="20170419 07:05:19.196" status="PASS" endtime="20170419 07:05:19.199"></status>
</kw>
<status starttime="20170419 07:05:19.196" status="PASS" endtime="20170419 07:05:19.199"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:19.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:18.924" status="PASS" endtime="20170419 07:05:19.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:19.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:19.199" status="PASS" endtime="20170419 07:05:19.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:19.200">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:05:19.200">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:05:19.200">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:05:19.200" status="PASS" endtime="20170419 07:05:19.200"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:19.201">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:05:18.924" status="PASS" endtime="20170419 07:05:19.201"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:19.201">${host_state} = Off</msg>
<status starttime="20170419 07:05:18.923" status="PASS" endtime="20170419 07:05:19.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:05:19.202">Running != Off</msg>
<status starttime="20170419 07:05:19.201" status="FAIL" endtime="20170419 07:05:19.202"></status>
</kw>
<status starttime="20170419 07:05:18.923" status="FAIL" endtime="20170419 07:05:19.202"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:29.207">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:05:29.206" status="PASS" endtime="20170419 07:05:29.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:29.208">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:05:29.208" status="PASS" endtime="20170419 07:05:29.208"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:29.209">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:05:29.208" status="PASS" endtime="20170419 07:05:29.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:29.210">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:05:29.209" status="PASS" endtime="20170419 07:05:29.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:29.385">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:05:29.211" status="PASS" endtime="20170419 07:05:29.385"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:29.385">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:05:29.385">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:29.210" status="PASS" endtime="20170419 07:05:29.385"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:29.386">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:29.386" status="PASS" endtime="20170419 07:05:29.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:29.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:29.386" status="PASS" endtime="20170419 07:05:29.387"></status>
</kw>
<status starttime="20170419 07:05:29.205" status="PASS" endtime="20170419 07:05:29.387"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:29.388">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:05:29.387" status="PASS" endtime="20170419 07:05:29.388"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:29.390">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:29.389" status="PASS" endtime="20170419 07:05:29.390"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:29.390">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:29.390" status="PASS" endtime="20170419 07:05:29.391"></status>
</kw>
<status starttime="20170419 07:05:29.390" status="PASS" endtime="20170419 07:05:29.391"></status>
</kw>
<status starttime="20170419 07:05:29.388" status="PASS" endtime="20170419 07:05:29.391"></status>
</kw>
<status starttime="20170419 07:05:29.388" status="PASS" endtime="20170419 07:05:29.391"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:29.491">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:05:29.492">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:29.391" status="PASS" endtime="20170419 07:05:29.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:29.493">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:29.493" status="PASS" endtime="20170419 07:05:29.493"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:29.494">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:29.494" status="PASS" endtime="20170419 07:05:29.494"></status>
</kw>
<status starttime="20170419 07:05:29.494" status="PASS" endtime="20170419 07:05:29.495"></status>
</kw>
<status starttime="20170419 07:05:29.492" status="PASS" endtime="20170419 07:05:29.495"></status>
</kw>
<status starttime="20170419 07:05:29.492" status="PASS" endtime="20170419 07:05:29.495"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:29.495">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:29.204" status="PASS" endtime="20170419 07:05:29.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:29.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:29.495" status="PASS" endtime="20170419 07:05:29.496"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:29.496">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:05:29.496">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:05:29.496">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:05:29.496" status="PASS" endtime="20170419 07:05:29.496"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:29.497">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:05:29.204" status="PASS" endtime="20170419 07:05:29.497"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:29.497">${host_state} = Off</msg>
<status starttime="20170419 07:05:29.203" status="PASS" endtime="20170419 07:05:29.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:05:29.498">Running != Off</msg>
<status starttime="20170419 07:05:29.497" status="FAIL" endtime="20170419 07:05:29.498"></status>
</kw>
<status starttime="20170419 07:05:29.202" status="FAIL" endtime="20170419 07:05:29.498"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:39.502">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:05:39.501" status="PASS" endtime="20170419 07:05:39.502"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:39.503">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:05:39.502" status="PASS" endtime="20170419 07:05:39.503"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:39.503">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:05:39.503" status="PASS" endtime="20170419 07:05:39.503"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:39.504">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:05:39.504" status="PASS" endtime="20170419 07:05:39.504"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:39.684">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:05:39.505" status="PASS" endtime="20170419 07:05:39.684"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:39.684">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:05:39.684">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:39.504" status="PASS" endtime="20170419 07:05:39.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:39.685">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:39.684" status="PASS" endtime="20170419 07:05:39.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:39.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:39.685" status="PASS" endtime="20170419 07:05:39.686"></status>
</kw>
<status starttime="20170419 07:05:39.500" status="PASS" endtime="20170419 07:05:39.686"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:39.686">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:05:39.686" status="PASS" endtime="20170419 07:05:39.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:39.688">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:39.688" status="PASS" endtime="20170419 07:05:39.688"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:39.689">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:39.689" status="PASS" endtime="20170419 07:05:39.689"></status>
</kw>
<status starttime="20170419 07:05:39.688" status="PASS" endtime="20170419 07:05:39.689"></status>
</kw>
<status starttime="20170419 07:05:39.687" status="PASS" endtime="20170419 07:05:39.690"></status>
</kw>
<status starttime="20170419 07:05:39.687" status="PASS" endtime="20170419 07:05:39.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:39.776">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:05:39.776">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:39.690" status="PASS" endtime="20170419 07:05:39.776"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:39.780">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:39.778" status="PASS" endtime="20170419 07:05:39.780"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:39.781">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:39.781" status="PASS" endtime="20170419 07:05:39.781"></status>
</kw>
<status starttime="20170419 07:05:39.780" status="PASS" endtime="20170419 07:05:39.781"></status>
</kw>
<status starttime="20170419 07:05:39.777" status="PASS" endtime="20170419 07:05:39.781"></status>
</kw>
<status starttime="20170419 07:05:39.777" status="PASS" endtime="20170419 07:05:39.781"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:39.782">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:39.500" status="PASS" endtime="20170419 07:05:39.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:39.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:39.782" status="PASS" endtime="20170419 07:05:39.782"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:39.783">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:05:39.783">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:05:39.783">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:05:39.783" status="PASS" endtime="20170419 07:05:39.783"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:39.783">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:05:39.499" status="PASS" endtime="20170419 07:05:39.783"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:39.784">${host_state} = Off</msg>
<status starttime="20170419 07:05:39.499" status="PASS" endtime="20170419 07:05:39.784"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:05:39.784">Running != Off</msg>
<status starttime="20170419 07:05:39.784" status="FAIL" endtime="20170419 07:05:39.784"></status>
</kw>
<status starttime="20170419 07:05:39.498" status="FAIL" endtime="20170419 07:05:39.785"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:49.788">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:05:49.788" status="PASS" endtime="20170419 07:05:49.789"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:49.789">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:05:49.789" status="PASS" endtime="20170419 07:05:49.789"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:49.790">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:05:49.790" status="PASS" endtime="20170419 07:05:49.790"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:49.791">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:05:49.790" status="PASS" endtime="20170419 07:05:49.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:49.965">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:05:49.791" status="PASS" endtime="20170419 07:05:49.965"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:49.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:05:49.965">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:49.791" status="PASS" endtime="20170419 07:05:49.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:49.966">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:49.966" status="PASS" endtime="20170419 07:05:49.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:49.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:49.966" status="PASS" endtime="20170419 07:05:49.967"></status>
</kw>
<status starttime="20170419 07:05:49.787" status="PASS" endtime="20170419 07:05:49.967"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:49.967">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:05:49.967" status="PASS" endtime="20170419 07:05:49.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:49.970">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:49.969" status="PASS" endtime="20170419 07:05:49.970"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:49.971">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:05:49.970" status="PASS" endtime="20170419 07:05:49.971"></status>
</kw>
<status starttime="20170419 07:05:49.970" status="PASS" endtime="20170419 07:05:49.971"></status>
</kw>
<status starttime="20170419 07:05:49.968" status="PASS" endtime="20170419 07:05:49.971"></status>
</kw>
<status starttime="20170419 07:05:49.968" status="PASS" endtime="20170419 07:05:49.971"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:50.056">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:05:50.056">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:49.971" status="PASS" endtime="20170419 07:05:50.056"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:50.058">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:50.057" status="PASS" endtime="20170419 07:05:50.058"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:50.059">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:05:50.059" status="PASS" endtime="20170419 07:05:50.059"></status>
</kw>
<status starttime="20170419 07:05:50.058" status="PASS" endtime="20170419 07:05:50.059"></status>
</kw>
<status starttime="20170419 07:05:50.057" status="PASS" endtime="20170419 07:05:50.059"></status>
</kw>
<status starttime="20170419 07:05:50.057" status="PASS" endtime="20170419 07:05:50.059"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:50.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:05:49.787" status="PASS" endtime="20170419 07:05:50.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:05:50.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:05:50.060" status="PASS" endtime="20170419 07:05:50.060"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:05:50.061">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:05:50.061">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:05:50.061">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:05:50.060" status="PASS" endtime="20170419 07:05:50.061"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:50.061">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:05:49.786" status="PASS" endtime="20170419 07:05:50.061"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:05:50.061">${host_state} = Off</msg>
<status starttime="20170419 07:05:49.786" status="PASS" endtime="20170419 07:05:50.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:05:50.062">Running != Off</msg>
<status starttime="20170419 07:05:50.062" status="FAIL" endtime="20170419 07:05:50.062"></status>
</kw>
<status starttime="20170419 07:05:49.785" status="FAIL" endtime="20170419 07:05:50.063"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:00.066">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:06:00.066" status="PASS" endtime="20170419 07:06:00.067"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:00.067">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:06:00.067" status="PASS" endtime="20170419 07:06:00.067"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:00.068">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:06:00.068" status="PASS" endtime="20170419 07:06:00.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:00.069">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:06:00.068" status="PASS" endtime="20170419 07:06:00.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:00.244">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:06:00.069" status="PASS" endtime="20170419 07:06:00.245"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:00.245">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:06:00.245">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:00.069" status="PASS" endtime="20170419 07:06:00.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:00.245">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:00.245" status="PASS" endtime="20170419 07:06:00.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:00.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:00.246" status="PASS" endtime="20170419 07:06:00.246"></status>
</kw>
<status starttime="20170419 07:06:00.065" status="PASS" endtime="20170419 07:06:00.246"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:00.247">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:06:00.247" status="PASS" endtime="20170419 07:06:00.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:00.249">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:00.248" status="PASS" endtime="20170419 07:06:00.249"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:00.250">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:00.250" status="PASS" endtime="20170419 07:06:00.250"></status>
</kw>
<status starttime="20170419 07:06:00.249" status="PASS" endtime="20170419 07:06:00.250"></status>
</kw>
<status starttime="20170419 07:06:00.248" status="PASS" endtime="20170419 07:06:00.250"></status>
</kw>
<status starttime="20170419 07:06:00.247" status="PASS" endtime="20170419 07:06:00.250"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:00.313">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:06:00.313">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:00.251" status="PASS" endtime="20170419 07:06:00.313"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:00.315">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:00.314" status="PASS" endtime="20170419 07:06:00.315"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:00.315">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:00.315" status="PASS" endtime="20170419 07:06:00.316"></status>
</kw>
<status starttime="20170419 07:06:00.315" status="PASS" endtime="20170419 07:06:00.316"></status>
</kw>
<status starttime="20170419 07:06:00.314" status="PASS" endtime="20170419 07:06:00.316"></status>
</kw>
<status starttime="20170419 07:06:00.313" status="PASS" endtime="20170419 07:06:00.316"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:00.316">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:00.065" status="PASS" endtime="20170419 07:06:00.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:00.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:00.316" status="PASS" endtime="20170419 07:06:00.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:00.317">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:06:00.317">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:06:00.318">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:06:00.317" status="PASS" endtime="20170419 07:06:00.318"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:00.318">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:06:00.064" status="PASS" endtime="20170419 07:06:00.318"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:00.318">${host_state} = Off</msg>
<status starttime="20170419 07:06:00.064" status="PASS" endtime="20170419 07:06:00.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:06:00.319">Running != Off</msg>
<status starttime="20170419 07:06:00.318" status="FAIL" endtime="20170419 07:06:00.319"></status>
</kw>
<status starttime="20170419 07:06:00.063" status="FAIL" endtime="20170419 07:06:00.319"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:10.323">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:06:10.322" status="PASS" endtime="20170419 07:06:10.324"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:10.324">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:06:10.324" status="PASS" endtime="20170419 07:06:10.324"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:10.325">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:06:10.325" status="PASS" endtime="20170419 07:06:10.325"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:10.326">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:06:10.325" status="PASS" endtime="20170419 07:06:10.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:10.501">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:06:10.326" status="PASS" endtime="20170419 07:06:10.501"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:10.501">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:06:10.501">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:10.326" status="PASS" endtime="20170419 07:06:10.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:10.502">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:10.501" status="PASS" endtime="20170419 07:06:10.502"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:10.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:10.502" status="PASS" endtime="20170419 07:06:10.502"></status>
</kw>
<status starttime="20170419 07:06:10.322" status="PASS" endtime="20170419 07:06:10.503"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:10.503">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:06:10.503" status="PASS" endtime="20170419 07:06:10.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:10.505">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:10.505" status="PASS" endtime="20170419 07:06:10.505"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:10.506">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:10.506" status="PASS" endtime="20170419 07:06:10.506"></status>
</kw>
<status starttime="20170419 07:06:10.505" status="PASS" endtime="20170419 07:06:10.506"></status>
</kw>
<status starttime="20170419 07:06:10.504" status="PASS" endtime="20170419 07:06:10.507"></status>
</kw>
<status starttime="20170419 07:06:10.503" status="PASS" endtime="20170419 07:06:10.507"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:10.569">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:06:10.569">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:10.507" status="PASS" endtime="20170419 07:06:10.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:10.571">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:10.570" status="PASS" endtime="20170419 07:06:10.571"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:10.572">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:10.571" status="PASS" endtime="20170419 07:06:10.572"></status>
</kw>
<status starttime="20170419 07:06:10.571" status="PASS" endtime="20170419 07:06:10.572"></status>
</kw>
<status starttime="20170419 07:06:10.570" status="PASS" endtime="20170419 07:06:10.572"></status>
</kw>
<status starttime="20170419 07:06:10.569" status="PASS" endtime="20170419 07:06:10.572"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:10.572">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:10.321" status="PASS" endtime="20170419 07:06:10.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:10.573">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:10.573" status="PASS" endtime="20170419 07:06:10.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:10.574">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:06:10.574">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:06:10.574">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:06:10.573" status="PASS" endtime="20170419 07:06:10.574"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:10.574">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:06:10.321" status="PASS" endtime="20170419 07:06:10.574"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:10.574">${host_state} = Off</msg>
<status starttime="20170419 07:06:10.320" status="PASS" endtime="20170419 07:06:10.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:06:10.575">Running != Off</msg>
<status starttime="20170419 07:06:10.575" status="FAIL" endtime="20170419 07:06:10.575"></status>
</kw>
<status starttime="20170419 07:06:10.320" status="FAIL" endtime="20170419 07:06:10.575"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:20.580">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:06:20.579" status="PASS" endtime="20170419 07:06:20.580"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:20.581">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:06:20.580" status="PASS" endtime="20170419 07:06:20.581"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:20.581">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:06:20.581" status="PASS" endtime="20170419 07:06:20.581"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:20.582">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:06:20.582" status="PASS" endtime="20170419 07:06:20.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:20.758">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:06:20.583" status="PASS" endtime="20170419 07:06:20.758"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:20.758">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:06:20.758">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:20.582" status="PASS" endtime="20170419 07:06:20.758"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:20.759">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:20.758" status="PASS" endtime="20170419 07:06:20.759"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:20.759">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:20.759" status="PASS" endtime="20170419 07:06:20.759"></status>
</kw>
<status starttime="20170419 07:06:20.579" status="PASS" endtime="20170419 07:06:20.760"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:20.760">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:06:20.760" status="PASS" endtime="20170419 07:06:20.760"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:20.762">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:20.761" status="PASS" endtime="20170419 07:06:20.762"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:20.763">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:20.763" status="PASS" endtime="20170419 07:06:20.764"></status>
</kw>
<status starttime="20170419 07:06:20.762" status="PASS" endtime="20170419 07:06:20.764"></status>
</kw>
<status starttime="20170419 07:06:20.761" status="PASS" endtime="20170419 07:06:20.764"></status>
</kw>
<status starttime="20170419 07:06:20.760" status="PASS" endtime="20170419 07:06:20.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:20.826">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:06:20.826">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:20.764" status="PASS" endtime="20170419 07:06:20.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:20.828">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:20.827" status="PASS" endtime="20170419 07:06:20.828"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:20.829">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:20.828" status="PASS" endtime="20170419 07:06:20.829"></status>
</kw>
<status starttime="20170419 07:06:20.828" status="PASS" endtime="20170419 07:06:20.829"></status>
</kw>
<status starttime="20170419 07:06:20.827" status="PASS" endtime="20170419 07:06:20.829"></status>
</kw>
<status starttime="20170419 07:06:20.826" status="PASS" endtime="20170419 07:06:20.829"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:20.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:20.578" status="PASS" endtime="20170419 07:06:20.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:20.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:20.830" status="PASS" endtime="20170419 07:06:20.830"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:20.830">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:06:20.831">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:06:20.831">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:06:20.830" status="PASS" endtime="20170419 07:06:20.831"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:20.831">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:06:20.577" status="PASS" endtime="20170419 07:06:20.831"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:20.831">${host_state} = Off</msg>
<status starttime="20170419 07:06:20.577" status="PASS" endtime="20170419 07:06:20.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:06:20.832">Running != Off</msg>
<status starttime="20170419 07:06:20.832" status="FAIL" endtime="20170419 07:06:20.832"></status>
</kw>
<status starttime="20170419 07:06:20.576" status="FAIL" endtime="20170419 07:06:20.832"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:30.836">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:06:30.836" status="PASS" endtime="20170419 07:06:30.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:30.837">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:06:30.837" status="PASS" endtime="20170419 07:06:30.837"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:30.838">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:06:30.837" status="PASS" endtime="20170419 07:06:30.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:30.838">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:06:30.838" status="PASS" endtime="20170419 07:06:30.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:31.018">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:06:30.839" status="PASS" endtime="20170419 07:06:31.019"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:31.019">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:06:31.019">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:30.839" status="PASS" endtime="20170419 07:06:31.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:31.019">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:31.019" status="PASS" endtime="20170419 07:06:31.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:31.020">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:31.020" status="PASS" endtime="20170419 07:06:31.020"></status>
</kw>
<status starttime="20170419 07:06:30.835" status="PASS" endtime="20170419 07:06:31.020"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:31.021">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:06:31.021" status="PASS" endtime="20170419 07:06:31.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:31.023">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:31.022" status="PASS" endtime="20170419 07:06:31.023"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:31.024">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:31.024" status="PASS" endtime="20170419 07:06:31.024"></status>
</kw>
<status starttime="20170419 07:06:31.023" status="PASS" endtime="20170419 07:06:31.024"></status>
</kw>
<status starttime="20170419 07:06:31.022" status="PASS" endtime="20170419 07:06:31.024"></status>
</kw>
<status starttime="20170419 07:06:31.021" status="PASS" endtime="20170419 07:06:31.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:31.087">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:06:31.087">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:31.024" status="PASS" endtime="20170419 07:06:31.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:31.089">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:31.088" status="PASS" endtime="20170419 07:06:31.089"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:31.090">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:31.089" status="PASS" endtime="20170419 07:06:31.090"></status>
</kw>
<status starttime="20170419 07:06:31.089" status="PASS" endtime="20170419 07:06:31.090"></status>
</kw>
<status starttime="20170419 07:06:31.088" status="PASS" endtime="20170419 07:06:31.090"></status>
</kw>
<status starttime="20170419 07:06:31.087" status="PASS" endtime="20170419 07:06:31.090"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:31.090">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:30.834" status="PASS" endtime="20170419 07:06:31.090"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:31.091">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:31.090" status="PASS" endtime="20170419 07:06:31.091"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:31.091">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:06:31.092">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:06:31.092">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:06:31.091" status="PASS" endtime="20170419 07:06:31.092"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:31.092">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:06:30.834" status="PASS" endtime="20170419 07:06:31.092"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:31.092">${host_state} = Off</msg>
<status starttime="20170419 07:06:30.833" status="PASS" endtime="20170419 07:06:31.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:06:31.093">Running != Off</msg>
<status starttime="20170419 07:06:31.093" status="FAIL" endtime="20170419 07:06:31.093"></status>
</kw>
<status starttime="20170419 07:06:30.833" status="FAIL" endtime="20170419 07:06:31.093"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:41.097">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:06:41.097" status="PASS" endtime="20170419 07:06:41.098"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:41.098">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:06:41.098" status="PASS" endtime="20170419 07:06:41.098"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:41.099">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:06:41.099" status="PASS" endtime="20170419 07:06:41.099"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:41.100">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:06:41.099" status="PASS" endtime="20170419 07:06:41.100"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:41.274">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:06:41.100" status="PASS" endtime="20170419 07:06:41.274"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:41.274">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:06:41.275">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:41.100" status="PASS" endtime="20170419 07:06:41.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:41.275">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:41.275" status="PASS" endtime="20170419 07:06:41.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:41.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:41.275" status="PASS" endtime="20170419 07:06:41.276"></status>
</kw>
<status starttime="20170419 07:06:41.096" status="PASS" endtime="20170419 07:06:41.276"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:41.277">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:06:41.276" status="PASS" endtime="20170419 07:06:41.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:41.279">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:41.278" status="PASS" endtime="20170419 07:06:41.279"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:41.280">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:41.279" status="PASS" endtime="20170419 07:06:41.280"></status>
</kw>
<status starttime="20170419 07:06:41.279" status="PASS" endtime="20170419 07:06:41.280"></status>
</kw>
<status starttime="20170419 07:06:41.277" status="PASS" endtime="20170419 07:06:41.280"></status>
</kw>
<status starttime="20170419 07:06:41.277" status="PASS" endtime="20170419 07:06:41.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:41.343">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:06:41.343">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:41.280" status="PASS" endtime="20170419 07:06:41.343"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:41.345">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:41.344" status="PASS" endtime="20170419 07:06:41.345"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:41.346">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:41.345" status="PASS" endtime="20170419 07:06:41.346"></status>
</kw>
<status starttime="20170419 07:06:41.345" status="PASS" endtime="20170419 07:06:41.346"></status>
</kw>
<status starttime="20170419 07:06:41.344" status="PASS" endtime="20170419 07:06:41.346"></status>
</kw>
<status starttime="20170419 07:06:41.343" status="PASS" endtime="20170419 07:06:41.346"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:41.346">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:41.095" status="PASS" endtime="20170419 07:06:41.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:41.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:41.347" status="PASS" endtime="20170419 07:06:41.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:41.348">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:06:41.348">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:06:41.348">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:06:41.347" status="PASS" endtime="20170419 07:06:41.348"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:41.348">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:06:41.095" status="PASS" endtime="20170419 07:06:41.348"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:41.348">${host_state} = Off</msg>
<status starttime="20170419 07:06:41.094" status="PASS" endtime="20170419 07:06:41.348"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:06:41.349">Running != Off</msg>
<status starttime="20170419 07:06:41.349" status="FAIL" endtime="20170419 07:06:41.349"></status>
</kw>
<status starttime="20170419 07:06:41.094" status="FAIL" endtime="20170419 07:06:41.349"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:51.353">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:06:51.353" status="PASS" endtime="20170419 07:06:51.354"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:51.354">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:06:51.354" status="PASS" endtime="20170419 07:06:51.354"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:51.355">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:06:51.354" status="PASS" endtime="20170419 07:06:51.355"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:51.355">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:06:51.355" status="PASS" endtime="20170419 07:06:51.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:51.532">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:06:51.356" status="PASS" endtime="20170419 07:06:51.532"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:51.532">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:06:51.532">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:51.356" status="PASS" endtime="20170419 07:06:51.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:51.533">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:51.532" status="PASS" endtime="20170419 07:06:51.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:51.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:51.533" status="PASS" endtime="20170419 07:06:51.533"></status>
</kw>
<status starttime="20170419 07:06:51.352" status="PASS" endtime="20170419 07:06:51.534"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:51.534">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:06:51.534" status="PASS" endtime="20170419 07:06:51.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:51.537">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:51.536" status="PASS" endtime="20170419 07:06:51.537"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:51.538">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:06:51.538" status="PASS" endtime="20170419 07:06:51.538"></status>
</kw>
<status starttime="20170419 07:06:51.537" status="PASS" endtime="20170419 07:06:51.538"></status>
</kw>
<status starttime="20170419 07:06:51.535" status="PASS" endtime="20170419 07:06:51.539"></status>
</kw>
<status starttime="20170419 07:06:51.534" status="PASS" endtime="20170419 07:06:51.539"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:51.601">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:06:51.602">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:51.539" status="PASS" endtime="20170419 07:06:51.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:51.603">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:51.603" status="PASS" endtime="20170419 07:06:51.603"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:51.604">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:06:51.604" status="PASS" endtime="20170419 07:06:51.604"></status>
</kw>
<status starttime="20170419 07:06:51.603" status="PASS" endtime="20170419 07:06:51.604"></status>
</kw>
<status starttime="20170419 07:06:51.602" status="PASS" endtime="20170419 07:06:51.604"></status>
</kw>
<status starttime="20170419 07:06:51.602" status="PASS" endtime="20170419 07:06:51.605"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:51.605">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:06:51.352" status="PASS" endtime="20170419 07:06:51.605"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:06:51.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:06:51.605" status="PASS" endtime="20170419 07:06:51.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:06:51.606">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:06:51.606">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:06:51.606">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:06:51.606" status="PASS" endtime="20170419 07:06:51.606"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:51.606">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:06:51.351" status="PASS" endtime="20170419 07:06:51.606"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:06:51.607">${host_state} = Off</msg>
<status starttime="20170419 07:06:51.351" status="PASS" endtime="20170419 07:06:51.607"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:06:51.608">Running != Off</msg>
<status starttime="20170419 07:06:51.607" status="FAIL" endtime="20170419 07:06:51.608"></status>
</kw>
<status starttime="20170419 07:06:51.350" status="FAIL" endtime="20170419 07:06:51.608"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:01.612">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:07:01.611" status="PASS" endtime="20170419 07:07:01.612"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:01.613">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:07:01.612" status="PASS" endtime="20170419 07:07:01.613"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:01.613">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:07:01.613" status="PASS" endtime="20170419 07:07:01.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:01.614">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:07:01.614" status="PASS" endtime="20170419 07:07:01.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:01.789">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:07:01.615" status="PASS" endtime="20170419 07:07:01.789"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:01.789">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:07:01.789">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:01.614" status="PASS" endtime="20170419 07:07:01.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:01.790">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:01.790" status="PASS" endtime="20170419 07:07:01.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:01.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:01.790" status="PASS" endtime="20170419 07:07:01.791"></status>
</kw>
<status starttime="20170419 07:07:01.611" status="PASS" endtime="20170419 07:07:01.791"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:01.791">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:07:01.791" status="PASS" endtime="20170419 07:07:01.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:01.793">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:07:01.793" status="PASS" endtime="20170419 07:07:01.793"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:01.794">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:07:01.794" status="PASS" endtime="20170419 07:07:01.794"></status>
</kw>
<status starttime="20170419 07:07:01.794" status="PASS" endtime="20170419 07:07:01.795"></status>
</kw>
<status starttime="20170419 07:07:01.792" status="PASS" endtime="20170419 07:07:01.795"></status>
</kw>
<status starttime="20170419 07:07:01.792" status="PASS" endtime="20170419 07:07:01.795"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:01.857">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:07:01.857">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:01.795" status="PASS" endtime="20170419 07:07:01.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:01.859">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:07:01.858" status="PASS" endtime="20170419 07:07:01.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:01.860">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:07:01.860" status="PASS" endtime="20170419 07:07:01.861"></status>
</kw>
<status starttime="20170419 07:07:01.859" status="PASS" endtime="20170419 07:07:01.861"></status>
</kw>
<status starttime="20170419 07:07:01.858" status="PASS" endtime="20170419 07:07:01.861"></status>
</kw>
<status starttime="20170419 07:07:01.857" status="PASS" endtime="20170419 07:07:01.861"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:01.861">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:01.610" status="PASS" endtime="20170419 07:07:01.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:01.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:01.861" status="PASS" endtime="20170419 07:07:01.862"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:01.862">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:07:01.862">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:07:01.862">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:07:01.862" status="PASS" endtime="20170419 07:07:01.862"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:01.863">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:07:01.610" status="PASS" endtime="20170419 07:07:01.863"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:01.863">${host_state} = Off</msg>
<status starttime="20170419 07:07:01.609" status="PASS" endtime="20170419 07:07:01.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:01.864">Running != Off</msg>
<status starttime="20170419 07:07:01.863" status="FAIL" endtime="20170419 07:07:01.864"></status>
</kw>
<status starttime="20170419 07:07:01.608" status="FAIL" endtime="20170419 07:07:01.864"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:11.868">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:07:11.868" status="PASS" endtime="20170419 07:07:11.868"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:11.869">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:07:11.869" status="PASS" endtime="20170419 07:07:11.869"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:11.870">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:07:11.869" status="PASS" endtime="20170419 07:07:11.870"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:11.870">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:07:11.870" status="PASS" endtime="20170419 07:07:11.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.045">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:07:11.871" status="PASS" endtime="20170419 07:07:12.045"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.045">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:07:12.045">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:11.871" status="PASS" endtime="20170419 07:07:12.045"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.046">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:12.045" status="PASS" endtime="20170419 07:07:12.046"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:12.046" status="PASS" endtime="20170419 07:07:12.046"></status>
</kw>
<status starttime="20170419 07:07:11.867" status="PASS" endtime="20170419 07:07:12.047"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.047">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:07:12.047" status="PASS" endtime="20170419 07:07:12.047"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.049">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:07:12.049" status="PASS" endtime="20170419 07:07:12.049"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.050">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:07:12.050" status="PASS" endtime="20170419 07:07:12.050"></status>
</kw>
<status starttime="20170419 07:07:12.049" status="PASS" endtime="20170419 07:07:12.050"></status>
</kw>
<status starttime="20170419 07:07:12.048" status="PASS" endtime="20170419 07:07:12.051"></status>
</kw>
<status starttime="20170419 07:07:12.048" status="PASS" endtime="20170419 07:07:12.051"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.114">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:07:12.114">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:12.051" status="PASS" endtime="20170419 07:07:12.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.118">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:07:12.115" status="PASS" endtime="20170419 07:07:12.118"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.119">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:07:12.118" status="PASS" endtime="20170419 07:07:12.119"></status>
</kw>
<status starttime="20170419 07:07:12.118" status="PASS" endtime="20170419 07:07:12.119"></status>
</kw>
<status starttime="20170419 07:07:12.115" status="PASS" endtime="20170419 07:07:12.119"></status>
</kw>
<status starttime="20170419 07:07:12.114" status="PASS" endtime="20170419 07:07:12.119"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.119">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:11.866" status="PASS" endtime="20170419 07:07:12.119"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.120">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:12.120" status="PASS" endtime="20170419 07:07:12.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.120">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:07:12.121">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:07:12.121">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:07:12.120" status="PASS" endtime="20170419 07:07:12.121"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.121">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:07:11.865" status="PASS" endtime="20170419 07:07:12.121"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.121">${host_state} = Off</msg>
<status starttime="20170419 07:07:11.865" status="PASS" endtime="20170419 07:07:12.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:12.122">Running != Off</msg>
<status starttime="20170419 07:07:12.122" status="FAIL" endtime="20170419 07:07:12.122"></status>
</kw>
<status starttime="20170419 07:07:11.864" status="FAIL" endtime="20170419 07:07:12.122"></status>
</kw>
<msg level="FAIL" timestamp="20170419 07:07:12.122">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Off</msg>
<status starttime="20170419 06:57:05.852" status="FAIL" endtime="20170419 07:07:12.122"></status>
</kw>
<status starttime="20170419 06:57:05.501" status="FAIL" endtime="20170419 07:07:12.123"></status>
</kw>
<status starttime="20170419 06:57:03.944" status="FAIL" endtime="20170419 07:07:12.123"></status>
</kw>
<status starttime="20170419 06:57:03.944" status="FAIL" endtime="20170419 07:07:12.123"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.127">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:07:12.126" status="PASS" endtime="20170419 07:07:12.127"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.128">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:07:12.128" status="PASS" endtime="20170419 07:07:12.128"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.128">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:07:12.128" status="PASS" endtime="20170419 07:07:12.128"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.129">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:07:12.129" status="PASS" endtime="20170419 07:07:12.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:07:12.130" status="PASS" endtime="20170419 07:07:12.311"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:07:12.312">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:12.129" status="PASS" endtime="20170419 07:07:12.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:12.312" status="PASS" endtime="20170419 07:07:12.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:12.312" status="PASS" endtime="20170419 07:07:12.313"></status>
</kw>
<status starttime="20170419 07:07:12.126" status="PASS" endtime="20170419 07:07:12.313"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.314">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 07:07:12.313" status="PASS" endtime="20170419 07:07:12.314"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.316">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:07:12.315" status="PASS" endtime="20170419 07:07:12.316"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.317">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 07:07:12.317" status="PASS" endtime="20170419 07:07:12.317"></status>
</kw>
<status starttime="20170419 07:07:12.316" status="PASS" endtime="20170419 07:07:12.317"></status>
</kw>
<status starttime="20170419 07:07:12.315" status="PASS" endtime="20170419 07:07:12.317"></status>
</kw>
<status starttime="20170419 07:07:12.314" status="PASS" endtime="20170419 07:07:12.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.381">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:07:12.381">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:12.318" status="PASS" endtime="20170419 07:07:12.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.383">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:07:12.382" status="PASS" endtime="20170419 07:07:12.383"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.384">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 07:07:12.384" status="PASS" endtime="20170419 07:07:12.384"></status>
</kw>
<status starttime="20170419 07:07:12.383" status="PASS" endtime="20170419 07:07:12.384"></status>
</kw>
<status starttime="20170419 07:07:12.382" status="PASS" endtime="20170419 07:07:12.384"></status>
</kw>
<status starttime="20170419 07:07:12.381" status="PASS" endtime="20170419 07:07:12.384"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.384">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:12.125" status="PASS" endtime="20170419 07:07:12.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:12.385" status="PASS" endtime="20170419 07:07:12.385"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.386">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:07:12.386">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 07:07:12.386">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status starttime="20170419 07:07:12.385" status="PASS" endtime="20170419 07:07:12.386"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.386">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 07:07:12.125" status="PASS" endtime="20170419 07:07:12.386"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.386">${host_state} = Off</msg>
<status starttime="20170419 07:07:12.124" status="PASS" endtime="20170419 07:07:12.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:12.387">Off != Quiesced</msg>
<status starttime="20170419 07:07:12.387" status="FAIL" endtime="20170419 07:07:12.387"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.388">${status} = False</msg>
<status starttime="20170419 07:07:12.387" status="PASS" endtime="20170419 07:07:12.388"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:12.388">${status} = False</msg>
<status starttime="20170419 07:07:12.124" status="PASS" endtime="20170419 07:07:12.388"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:12.390">Length is 12</msg>
<status starttime="20170419 07:07:12.389" status="PASS" endtime="20170419 07:07:12.390"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:12.394">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 07:07:15.402">${RC} = 0</msg>
<msg level="INFO" timestamp="20170419 07:07:15.402">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.41 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.609 ms
64 bytes from 9.41.166.169...</msg>
<status starttime="20170419 07:07:12.390" status="PASS" endtime="20170419 07:07:15.402"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:15.405">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.41 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.609 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.613 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.37 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.609/1.002/1.414/0.392 ms</msg>
<status starttime="20170419 07:07:15.404" status="PASS" endtime="20170419 07:07:15.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170419 07:07:15.405" status="PASS" endtime="20170419 07:07:15.406"></status>
</kw>
<status starttime="20170419 07:07:12.389" status="PASS" endtime="20170419 07:07:15.406"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:15.565">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 07:07:15.564" status="FAIL" endtime="20170419 07:07:15.565"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:15.565">${has_host} = False</msg>
<status starttime="20170419 07:07:15.564" status="PASS" endtime="20170419 07:07:15.565"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 07:07:15.566" status="PASS" endtime="20170419 07:07:15.566"></status>
</kw>
<status starttime="20170419 07:07:15.565" status="PASS" endtime="20170419 07:07:15.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:15.568">${port_num} = 22</msg>
<status starttime="20170419 07:07:15.568" status="PASS" endtime="20170419 07:07:15.568"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:15.568">${SSH_PORT} = 22</msg>
<status starttime="20170419 07:07:15.568" status="PASS" endtime="20170419 07:07:15.568"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:15.569">${https_num} = 443</msg>
<status starttime="20170419 07:07:15.569" status="PASS" endtime="20170419 07:07:15.569"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:15.570">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 07:07:15.569" status="PASS" endtime="20170419 07:07:15.570"></status>
</kw>
<status starttime="20170419 07:07:15.567" status="PASS" endtime="20170419 07:07:15.570"></status>
</kw>
<status starttime="20170419 07:07:15.566" status="PASS" endtime="20170419 07:07:15.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:15.571">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 07:07:15.571" status="FAIL" endtime="20170419 07:07:15.571"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:15.571">${has_port} = False</msg>
<status starttime="20170419 07:07:15.570" status="PASS" endtime="20170419 07:07:15.571"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 07:07:15.573" status="PASS" endtime="20170419 07:07:15.573"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 07:07:15.573" status="PASS" endtime="20170419 07:07:15.574"></status>
</kw>
<status starttime="20170419 07:07:15.572" status="PASS" endtime="20170419 07:07:15.574"></status>
</kw>
<status starttime="20170419 07:07:15.571" status="PASS" endtime="20170419 07:07:15.574"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:15.574">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 07:07:17.221">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 07:07:15.574" status="PASS" endtime="20170419 07:07:17.221"></status>
</kw>
<status starttime="20170419 07:07:15.563" status="PASS" endtime="20170419 07:07:17.221"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.238">${cur_time} = 2017-04-19 07:07:17:237355</msg>
<status starttime="20170419 07:07:17.237" status="PASS" endtime="20170419 07:07:17.238"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.238">${cur_time} = 20170419070717237355</msg>
<status starttime="20170419 07:07:17.238" status="PASS" endtime="20170419 07:07:17.238"></status>
</kw>
<status starttime="20170419 07:07:17.237" status="PASS" endtime="20170419 07:07:17.238"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:17.242">${FFDC_TIME} = 20170419070717237355</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.250">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170419 07:07:17.250" status="PASS" endtime="20170419 07:07:17.250"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.251">${suite_name} = 20170419070717237355_TestsTestBasicPoweron</msg>
<status starttime="20170419 07:07:17.251" status="PASS" endtime="20170419 07:07:17.251"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.251">${test_name} = PowerOnTest</msg>
<status starttime="20170419 07:07:17.251" status="PASS" endtime="20170419 07:07:17.251"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.252">${test_name} = 20170419070717237355_PowerOnTest</msg>
<status starttime="20170419 07:07:17.252" status="PASS" endtime="20170419 07:07:17.252"></status>
</kw>
<status starttime="20170419 07:07:17.250" status="PASS" endtime="20170419 07:07:17.252"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:17.272">${LOG_PREFIX} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.272">Created directory '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.272" status="PASS" endtime="20170419 07:07:17.273"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:17.276">${FFDC_FILE_PATH} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.278">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.278" status="PASS" endtime="20170419 07:07:17.278"></status>
</kw>
<status starttime="20170419 07:07:17.277" status="PASS" endtime="20170419 07:07:17.278"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.279">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.279" status="PASS" endtime="20170419 07:07:17.279"></status>
</kw>
<status starttime="20170419 07:07:17.278" status="PASS" endtime="20170419 07:07:17.279"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.281">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.280" status="PASS" endtime="20170419 07:07:17.281"></status>
</kw>
<status starttime="20170419 07:07:17.280" status="PASS" endtime="20170419 07:07:17.281"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.282">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.282" status="PASS" endtime="20170419 07:07:17.282"></status>
</kw>
<status starttime="20170419 07:07:17.281" status="PASS" endtime="20170419 07:07:17.282"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.283">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.283" status="PASS" endtime="20170419 07:07:17.283"></status>
</kw>
<status starttime="20170419 07:07:17.282" status="PASS" endtime="20170419 07:07:17.283"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.285">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.284" status="PASS" endtime="20170419 07:07:17.285"></status>
</kw>
<status starttime="20170419 07:07:17.284" status="PASS" endtime="20170419 07:07:17.285"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.287">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.286" status="PASS" endtime="20170419 07:07:17.287"></status>
</kw>
<status starttime="20170419 07:07:17.286" status="PASS" endtime="20170419 07:07:17.287"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.288">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.288" status="PASS" endtime="20170419 07:07:17.288"></status>
</kw>
<status starttime="20170419 07:07:17.287" status="PASS" endtime="20170419 07:07:17.288"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.289">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.289" status="PASS" endtime="20170419 07:07:17.289"></status>
</kw>
<status starttime="20170419 07:07:17.288" status="PASS" endtime="20170419 07:07:17.289"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.291">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.290" status="PASS" endtime="20170419 07:07:17.291"></status>
</kw>
<status starttime="20170419 07:07:17.290" status="PASS" endtime="20170419 07:07:17.291"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.292">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.292" status="PASS" endtime="20170419 07:07:17.292"></status>
</kw>
<status starttime="20170419 07:07:17.291" status="PASS" endtime="20170419 07:07:17.292"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.293">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.293" status="PASS" endtime="20170419 07:07:17.293"></status>
</kw>
<status starttime="20170419 07:07:17.292" status="PASS" endtime="20170419 07:07:17.293"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.295">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.294" status="PASS" endtime="20170419 07:07:17.295"></status>
</kw>
<status starttime="20170419 07:07:17.294" status="PASS" endtime="20170419 07:07:17.295"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.296">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170419 07:07:17.363">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:17.363">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170419 07:07:17.363">${stderr} = </msg>
<status starttime="20170419 07:07:17.296" status="PASS" endtime="20170419 07:07:17.363"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:17.364">Length is 0</msg>
<status starttime="20170419 07:07:17.363" status="PASS" endtime="20170419 07:07:17.364"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:17.364">Length is 11</msg>
<status starttime="20170419 07:07:17.364" status="PASS" endtime="20170419 07:07:17.364"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:17.364">${model_name} = Witherspoon</msg>
<status starttime="20170419 07:07:17.295" status="PASS" endtime="20170419 07:07:17.364"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.366">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.365" status="PASS" endtime="20170419 07:07:17.366"></status>
</kw>
<status starttime="20170419 07:07:17.365" status="PASS" endtime="20170419 07:07:17.366"></status>
</kw>
<status starttime="20170419 07:07:17.290" status="PASS" endtime="20170419 07:07:17.366"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.367">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.367" status="PASS" endtime="20170419 07:07:17.368"></status>
</kw>
<status starttime="20170419 07:07:17.366" status="PASS" endtime="20170419 07:07:17.368"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.368">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170419 07:07:17.368" status="PASS" endtime="20170419 07:07:17.368"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.370">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.369" status="PASS" endtime="20170419 07:07:17.370"></status>
</kw>
<status starttime="20170419 07:07:17.369" status="PASS" endtime="20170419 07:07:17.370"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.371">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.370" status="PASS" endtime="20170419 07:07:17.371"></status>
</kw>
<status starttime="20170419 07:07:17.370" status="PASS" endtime="20170419 07:07:17.371"></status>
</kw>
<status starttime="20170419 07:07:17.368" status="PASS" endtime="20170419 07:07:17.371"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.372">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.372" status="PASS" endtime="20170419 07:07:17.372"></status>
</kw>
<status starttime="20170419 07:07:17.371" status="PASS" endtime="20170419 07:07:17.372"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.373">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.373" status="PASS" endtime="20170419 07:07:17.374"></status>
</kw>
<status starttime="20170419 07:07:17.373" status="PASS" endtime="20170419 07:07:17.374"></status>
</kw>
<status starttime="20170419 07:07:17.371" status="PASS" endtime="20170419 07:07:17.374"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.375">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.375" status="PASS" endtime="20170419 07:07:17.376"></status>
</kw>
<status starttime="20170419 07:07:17.374" status="PASS" endtime="20170419 07:07:17.376"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.378">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.377" status="PASS" endtime="20170419 07:07:17.378"></status>
</kw>
<status starttime="20170419 07:07:17.376" status="PASS" endtime="20170419 07:07:17.378"></status>
</kw>
<status starttime="20170419 07:07:17.374" status="PASS" endtime="20170419 07:07:17.378"></status>
</kw>
<status starttime="20170419 07:07:17.368" status="PASS" endtime="20170419 07:07:17.378"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:17.379">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:17.379" status="PASS" endtime="20170419 07:07:17.380"></status>
</kw>
<status starttime="20170419 07:07:17.378" status="PASS" endtime="20170419 07:07:17.380"></status>
</kw>
<status starttime="20170419 07:07:17.277" status="PASS" endtime="20170419 07:07:17.380"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.381">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170419 07:07:17.381" status="PASS" endtime="20170419 07:07:17.381"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.382">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Req...</msg>
<status starttime="20170419 07:07:17.382" status="PASS" endtime="20170419 07:07:17.382"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:17.385">Returning from the enclosing user keyword.</msg>
<status starttime="20170419 07:07:17.384" status="PASS" endtime="20170419 07:07:17.385"></status>
</kw>
<status starttime="20170419 07:07:17.384" status="PASS" endtime="20170419 07:07:17.385"></status>
</kw>
<status starttime="20170419 07:07:17.383" status="PASS" endtime="20170419 07:07:17.385"></status>
</kw>
<status starttime="20170419 07:07:17.382" status="PASS" endtime="20170419 07:07:17.385"></status>
</kw>
<status starttime="20170419 07:07:17.382" status="PASS" endtime="20170419 07:07:17.385"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:17.389">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 07:07:17.389" status="FAIL" endtime="20170419 07:07:17.389"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:17.389">${has_host} = False</msg>
<status starttime="20170419 07:07:17.388" status="PASS" endtime="20170419 07:07:17.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 07:07:17.390" status="PASS" endtime="20170419 07:07:17.391"></status>
</kw>
<status starttime="20170419 07:07:17.390" status="PASS" endtime="20170419 07:07:17.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.393">${port_num} = 22</msg>
<status starttime="20170419 07:07:17.393" status="PASS" endtime="20170419 07:07:17.393"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.394">${SSH_PORT} = 22</msg>
<status starttime="20170419 07:07:17.393" status="PASS" endtime="20170419 07:07:17.394"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:17.394">${https_num} = 443</msg>
<status starttime="20170419 07:07:17.394" status="PASS" endtime="20170419 07:07:17.394"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:17.395">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 07:07:17.394" status="PASS" endtime="20170419 07:07:17.395"></status>
</kw>
<status starttime="20170419 07:07:17.392" status="PASS" endtime="20170419 07:07:17.395"></status>
</kw>
<status starttime="20170419 07:07:17.391" status="PASS" endtime="20170419 07:07:17.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:17.396">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 07:07:17.396" status="FAIL" endtime="20170419 07:07:17.396"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:17.396">${has_port} = False</msg>
<status starttime="20170419 07:07:17.395" status="PASS" endtime="20170419 07:07:17.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 07:07:17.398" status="PASS" endtime="20170419 07:07:17.398"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 07:07:17.398" status="PASS" endtime="20170419 07:07:17.399"></status>
</kw>
<status starttime="20170419 07:07:17.397" status="PASS" endtime="20170419 07:07:17.399"></status>
</kw>
<status starttime="20170419 07:07:17.397" status="PASS" endtime="20170419 07:07:17.399"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:17.399">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 07:07:19.047">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 07:07:17.399" status="PASS" endtime="20170419 07:07:19.047"></status>
</kw>
<status starttime="20170419 07:07:17.387" status="PASS" endtime="20170419 07:07:19.047"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:19.048">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170419 07:07:19.095">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170419 07:07:19.095">${core_files} = </msg>
<status starttime="20170419 07:07:19.048" status="PASS" endtime="20170419 07:07:19.095"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:19.096">@{core_list} = [ ]</msg>
<status starttime="20170419 07:07:19.096" status="PASS" endtime="20170419 07:07:19.096"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170419 07:07:19.097" status="PASS" endtime="20170419 07:07:19.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170419 07:07:19.104" status="PASS" endtime="20170419 07:07:19.739"></status>
</kw>
<status starttime="20170419 07:07:19.104" status="PASS" endtime="20170419 07:07:19.739"></status>
</kw>
<status starttime="20170419 07:07:19.103" status="PASS" endtime="20170419 07:07:19.739"></status>
</kw>
<status starttime="20170419 07:07:19.096" status="PASS" endtime="20170419 07:07:19.739"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20170419 07:07:19.739" status="PASS" endtime="20170419 07:07:19.740"></status>
</kw>
<status starttime="20170419 07:07:17.387" status="PASS" endtime="20170419 07:07:19.740"></status>
</kw>
<status starttime="20170419 07:07:17.386" status="PASS" endtime="20170419 07:07:19.740"></status>
</kw>
<status starttime="20170419 07:07:17.386" status="PASS" endtime="20170419 07:07:19.740"></status>
</kw>
<status starttime="20170419 07:07:17.385" status="PASS" endtime="20170419 07:07:19.740"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:19.743">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 07:07:19.743" status="FAIL" endtime="20170419 07:07:19.743"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:19.743">${has_host} = False</msg>
<status starttime="20170419 07:07:19.742" status="PASS" endtime="20170419 07:07:19.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 07:07:19.744" status="PASS" endtime="20170419 07:07:19.744"></status>
</kw>
<status starttime="20170419 07:07:19.743" status="PASS" endtime="20170419 07:07:19.744"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:19.746">${port_num} = 22</msg>
<status starttime="20170419 07:07:19.746" status="PASS" endtime="20170419 07:07:19.746"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:19.746">${SSH_PORT} = 22</msg>
<status starttime="20170419 07:07:19.746" status="PASS" endtime="20170419 07:07:19.746"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:19.747">${https_num} = 443</msg>
<status starttime="20170419 07:07:19.747" status="PASS" endtime="20170419 07:07:19.747"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:19.748">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 07:07:19.747" status="PASS" endtime="20170419 07:07:19.748"></status>
</kw>
<status starttime="20170419 07:07:19.745" status="PASS" endtime="20170419 07:07:19.748"></status>
</kw>
<status starttime="20170419 07:07:19.745" status="PASS" endtime="20170419 07:07:19.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:19.749">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 07:07:19.749" status="FAIL" endtime="20170419 07:07:19.749"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:19.749">${has_port} = False</msg>
<status starttime="20170419 07:07:19.748" status="PASS" endtime="20170419 07:07:19.749"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 07:07:19.751" status="PASS" endtime="20170419 07:07:19.751"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 07:07:19.751" status="PASS" endtime="20170419 07:07:19.752"></status>
</kw>
<status starttime="20170419 07:07:19.750" status="PASS" endtime="20170419 07:07:19.752"></status>
</kw>
<status starttime="20170419 07:07:19.750" status="PASS" endtime="20170419 07:07:19.752"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:19.752">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 07:07:21.401">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 07:07:19.752" status="PASS" endtime="20170419 07:07:21.401"></status>
</kw>
<status starttime="20170419 07:07:19.742" status="PASS" endtime="20170419 07:07:21.402"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:21.402">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170419 07:07:21.402" status="PASS" endtime="20170419 07:07:21.402"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:21.404">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170419 07:07:21.403" status="PASS" endtime="20170419 07:07:21.404"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:21.408">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170419 07:07:21.404" status="PASS" endtime="20170419 07:07:21.408"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:21.411">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:21.411" status="PASS" endtime="20170419 07:07:21.411"></status>
</kw>
<status starttime="20170419 07:07:21.410" status="PASS" endtime="20170419 07:07:21.411"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:21.413">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:21.412" status="PASS" endtime="20170419 07:07:21.413"></status>
</kw>
<status starttime="20170419 07:07:21.412" status="PASS" endtime="20170419 07:07:21.413"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:21.414">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:21.413" status="PASS" endtime="20170419 07:07:21.414"></status>
</kw>
<status starttime="20170419 07:07:21.413" status="PASS" endtime="20170419 07:07:21.414"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:21.415">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:21.415" status="PASS" endtime="20170419 07:07:21.415"></status>
</kw>
<status starttime="20170419 07:07:21.414" status="PASS" endtime="20170419 07:07:21.415"></status>
</kw>
<status starttime="20170419 07:07:21.410" status="PASS" endtime="20170419 07:07:21.415"></status>
</kw>
<status starttime="20170419 07:07:21.409" status="PASS" endtime="20170419 07:07:21.415"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:21.416">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170419 07:07:22.685">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:22.685">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg level="INFO" timestamp="20170419 07:07:22.685">${stderr} = </msg>
<status starttime="20170419 07:07:21.416" status="PASS" endtime="20170419 07:07:22.685"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.692">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.691" status="PASS" endtime="20170419 07:07:22.692"></status>
</kw>
<status starttime="20170419 07:07:22.690" status="PASS" endtime="20170419 07:07:22.692"></status>
</kw>
<status starttime="20170419 07:07:22.685" status="PASS" endtime="20170419 07:07:22.692"></status>
</kw>
<status starttime="20170419 07:07:21.409" status="PASS" endtime="20170419 07:07:22.693"></status>
</kw>
<status starttime="20170419 07:07:21.408" status="PASS" endtime="20170419 07:07:22.693"></status>
</kw>
<status starttime="20170419 07:07:21.408" status="PASS" endtime="20170419 07:07:22.693"></status>
</kw>
<status starttime="20170419 07:07:21.403" status="PASS" endtime="20170419 07:07:22.693"></status>
</kw>
<status starttime="20170419 07:07:21.403" status="PASS" endtime="20170419 07:07:22.693"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:22.694">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20170419 07:07:22.694" status="PASS" endtime="20170419 07:07:22.694"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:22.695">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170419 07:07:22.694" status="PASS" endtime="20170419 07:07:22.695"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.698">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.698" status="PASS" endtime="20170419 07:07:22.698"></status>
</kw>
<status starttime="20170419 07:07:22.697" status="PASS" endtime="20170419 07:07:22.698"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.700">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.699" status="PASS" endtime="20170419 07:07:22.700"></status>
</kw>
<status starttime="20170419 07:07:22.699" status="PASS" endtime="20170419 07:07:22.700"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.701">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.700" status="PASS" endtime="20170419 07:07:22.701"></status>
</kw>
<status starttime="20170419 07:07:22.700" status="PASS" endtime="20170419 07:07:22.701"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.703">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.703" status="PASS" endtime="20170419 07:07:22.703"></status>
</kw>
<status starttime="20170419 07:07:22.702" status="PASS" endtime="20170419 07:07:22.703"></status>
</kw>
<status starttime="20170419 07:07:22.697" status="PASS" endtime="20170419 07:07:22.703"></status>
</kw>
<status starttime="20170419 07:07:22.696" status="PASS" endtime="20170419 07:07:22.703"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:22.704">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170419 07:07:22.763">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:22.763">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-39"
VERSION_ID="v1.99.4-39-g1fa1b6c"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170419 07:07:22.763">${stderr} = </msg>
<status starttime="20170419 07:07:22.704" status="PASS" endtime="20170419 07:07:22.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.772">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.771" status="PASS" endtime="20170419 07:07:22.772"></status>
</kw>
<status starttime="20170419 07:07:22.770" status="PASS" endtime="20170419 07:07:22.772"></status>
</kw>
<status starttime="20170419 07:07:22.764" status="PASS" endtime="20170419 07:07:22.772"></status>
</kw>
<status starttime="20170419 07:07:22.695" status="PASS" endtime="20170419 07:07:22.772"></status>
</kw>
<status starttime="20170419 07:07:22.695" status="PASS" endtime="20170419 07:07:22.772"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.779">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.778" status="PASS" endtime="20170419 07:07:22.779"></status>
</kw>
<status starttime="20170419 07:07:22.777" status="PASS" endtime="20170419 07:07:22.779"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.780">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.780" status="PASS" endtime="20170419 07:07:22.780"></status>
</kw>
<status starttime="20170419 07:07:22.779" status="PASS" endtime="20170419 07:07:22.780"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.781">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.781" status="PASS" endtime="20170419 07:07:22.781"></status>
</kw>
<status starttime="20170419 07:07:22.780" status="PASS" endtime="20170419 07:07:22.781"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.782">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.782" status="PASS" endtime="20170419 07:07:22.783"></status>
</kw>
<status starttime="20170419 07:07:22.782" status="PASS" endtime="20170419 07:07:22.783"></status>
</kw>
<status starttime="20170419 07:07:22.774" status="PASS" endtime="20170419 07:07:22.783"></status>
</kw>
<status starttime="20170419 07:07:22.773" status="PASS" endtime="20170419 07:07:22.783"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:22.783">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170419 07:07:22.858">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170419 07:07:22.858">${stdout} = </msg>
<msg level="INFO" timestamp="20170419 07:07:22.858">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170419 07:07:22.783" status="PASS" endtime="20170419 07:07:22.858"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.864">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.864" status="PASS" endtime="20170419 07:07:22.864"></status>
</kw>
<status starttime="20170419 07:07:22.863" status="PASS" endtime="20170419 07:07:22.864"></status>
</kw>
<status starttime="20170419 07:07:22.858" status="PASS" endtime="20170419 07:07:22.864"></status>
</kw>
<status starttime="20170419 07:07:22.772" status="PASS" endtime="20170419 07:07:22.864"></status>
</kw>
<status starttime="20170419 07:07:22.772" status="PASS" endtime="20170419 07:07:22.865"></status>
</kw>
<status starttime="20170419 07:07:22.695" status="PASS" endtime="20170419 07:07:22.865"></status>
</kw>
<status starttime="20170419 07:07:22.693" status="PASS" endtime="20170419 07:07:22.865"></status>
</kw>
<status starttime="20170419 07:07:22.693" status="PASS" endtime="20170419 07:07:22.865"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:22.866">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170419 07:07:22.865" status="PASS" endtime="20170419 07:07:22.866"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:22.866">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170419 07:07:22.866" status="PASS" endtime="20170419 07:07:22.867"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.870">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.869" status="PASS" endtime="20170419 07:07:22.870"></status>
</kw>
<status starttime="20170419 07:07:22.869" status="PASS" endtime="20170419 07:07:22.870"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.871">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.871" status="PASS" endtime="20170419 07:07:22.871"></status>
</kw>
<status starttime="20170419 07:07:22.870" status="PASS" endtime="20170419 07:07:22.871"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.873">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.872" status="PASS" endtime="20170419 07:07:22.873"></status>
</kw>
<status starttime="20170419 07:07:22.871" status="PASS" endtime="20170419 07:07:22.873"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.874">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.874" status="PASS" endtime="20170419 07:07:22.874"></status>
</kw>
<status starttime="20170419 07:07:22.873" status="PASS" endtime="20170419 07:07:22.874"></status>
</kw>
<status starttime="20170419 07:07:22.868" status="PASS" endtime="20170419 07:07:22.875"></status>
</kw>
<status starttime="20170419 07:07:22.868" status="PASS" endtime="20170419 07:07:22.875"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:22.875">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170419 07:07:22.960">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:22.960">${stdout} =  07:07:23 up  3:53,  load average: 0.04, 0.07, 0.02</msg>
<msg level="INFO" timestamp="20170419 07:07:22.960">${stderr} = </msg>
<status starttime="20170419 07:07:22.875" status="PASS" endtime="20170419 07:07:22.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.966">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.965" status="PASS" endtime="20170419 07:07:22.966"></status>
</kw>
<status starttime="20170419 07:07:22.965" status="PASS" endtime="20170419 07:07:22.966"></status>
</kw>
<status starttime="20170419 07:07:22.960" status="PASS" endtime="20170419 07:07:22.966"></status>
</kw>
<status starttime="20170419 07:07:22.867" status="PASS" endtime="20170419 07:07:22.966"></status>
</kw>
<status starttime="20170419 07:07:22.867" status="PASS" endtime="20170419 07:07:22.966"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.969">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.969" status="PASS" endtime="20170419 07:07:22.969"></status>
</kw>
<status starttime="20170419 07:07:22.968" status="PASS" endtime="20170419 07:07:22.969"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.970">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.970" status="PASS" endtime="20170419 07:07:22.971"></status>
</kw>
<status starttime="20170419 07:07:22.969" status="PASS" endtime="20170419 07:07:22.971"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.972">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.971" status="PASS" endtime="20170419 07:07:22.972"></status>
</kw>
<status starttime="20170419 07:07:22.971" status="PASS" endtime="20170419 07:07:22.972"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:22.973">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:22.973" status="PASS" endtime="20170419 07:07:22.973"></status>
</kw>
<status starttime="20170419 07:07:22.972" status="PASS" endtime="20170419 07:07:22.973"></status>
</kw>
<status starttime="20170419 07:07:22.968" status="PASS" endtime="20170419 07:07:22.973"></status>
</kw>
<status starttime="20170419 07:07:22.967" status="PASS" endtime="20170419 07:07:22.974"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:22.974">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170419 07:07:23.059">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:23.059">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170419 07:07:23.059">${stderr} = </msg>
<status starttime="20170419 07:07:22.974" status="PASS" endtime="20170419 07:07:23.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:23.065">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:23.065" status="PASS" endtime="20170419 07:07:23.065"></status>
</kw>
<status starttime="20170419 07:07:23.064" status="PASS" endtime="20170419 07:07:23.066"></status>
</kw>
<status starttime="20170419 07:07:23.060" status="PASS" endtime="20170419 07:07:23.066"></status>
</kw>
<status starttime="20170419 07:07:22.966" status="PASS" endtime="20170419 07:07:23.066"></status>
</kw>
<status starttime="20170419 07:07:22.966" status="PASS" endtime="20170419 07:07:23.066"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:23.069">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:23.069" status="PASS" endtime="20170419 07:07:23.069"></status>
</kw>
<status starttime="20170419 07:07:23.068" status="PASS" endtime="20170419 07:07:23.069"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:23.071">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:23.070" status="PASS" endtime="20170419 07:07:23.071"></status>
</kw>
<status starttime="20170419 07:07:23.069" status="PASS" endtime="20170419 07:07:23.071"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:23.072">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:23.072" status="PASS" endtime="20170419 07:07:23.072"></status>
</kw>
<status starttime="20170419 07:07:23.071" status="PASS" endtime="20170419 07:07:23.072"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:23.073">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:23.073" status="PASS" endtime="20170419 07:07:23.073"></status>
</kw>
<status starttime="20170419 07:07:23.072" status="PASS" endtime="20170419 07:07:23.073"></status>
</kw>
<status starttime="20170419 07:07:23.067" status="PASS" endtime="20170419 07:07:23.073"></status>
</kw>
<status starttime="20170419 07:07:23.067" status="PASS" endtime="20170419 07:07:23.074"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:23.074">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170419 07:07:23.149">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:23.150">${stdout} = Linux witherspoon 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 #1 Wed Apr 19 02:47:50 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170419 07:07:23.150">${stderr} = </msg>
<status starttime="20170419 07:07:23.074" status="PASS" endtime="20170419 07:07:23.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:23.155">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:23.155" status="PASS" endtime="20170419 07:07:23.155"></status>
</kw>
<status starttime="20170419 07:07:23.154" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:23.150" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:23.066" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:23.066" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:22.867" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:22.865" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:22.865" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:21.402" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:19.741" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:19.741" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:19.740" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<status starttime="20170419 07:07:19.740" status="PASS" endtime="20170419 07:07:23.156"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:23.160">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 07:07:23.159" status="FAIL" endtime="20170419 07:07:23.160"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:23.160">${has_host} = False</msg>
<status starttime="20170419 07:07:23.159" status="PASS" endtime="20170419 07:07:23.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 07:07:23.161" status="PASS" endtime="20170419 07:07:23.161"></status>
</kw>
<status starttime="20170419 07:07:23.160" status="PASS" endtime="20170419 07:07:23.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:23.163">${port_num} = 22</msg>
<status starttime="20170419 07:07:23.162" status="PASS" endtime="20170419 07:07:23.163"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:23.163">${SSH_PORT} = 22</msg>
<status starttime="20170419 07:07:23.163" status="PASS" endtime="20170419 07:07:23.163"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:23.164">${https_num} = 443</msg>
<status starttime="20170419 07:07:23.163" status="PASS" endtime="20170419 07:07:23.164"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:23.164">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 07:07:23.164" status="PASS" endtime="20170419 07:07:23.165"></status>
</kw>
<status starttime="20170419 07:07:23.162" status="PASS" endtime="20170419 07:07:23.165"></status>
</kw>
<status starttime="20170419 07:07:23.161" status="PASS" endtime="20170419 07:07:23.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:23.166">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 07:07:23.165" status="FAIL" endtime="20170419 07:07:23.166"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:23.166">${has_port} = False</msg>
<status starttime="20170419 07:07:23.165" status="PASS" endtime="20170419 07:07:23.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 07:07:23.167" status="PASS" endtime="20170419 07:07:23.168"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 07:07:23.168" status="PASS" endtime="20170419 07:07:23.169"></status>
</kw>
<status starttime="20170419 07:07:23.167" status="PASS" endtime="20170419 07:07:23.169"></status>
</kw>
<status starttime="20170419 07:07:23.166" status="PASS" endtime="20170419 07:07:23.169"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:23.169">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 07:07:24.850">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 07:07:23.169" status="PASS" endtime="20170419 07:07:24.850"></status>
</kw>
<status starttime="20170419 07:07:23.158" status="PASS" endtime="20170419 07:07:24.850"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:24.851">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170419 07:07:24.851" status="PASS" endtime="20170419 07:07:24.851"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:24.861">Running command 'echo 9.41.166.169 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 07:07:24.865">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status starttime="20170419 07:07:24.852" status="PASS" endtime="20170419 07:07:24.865"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:24.871">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status starttime="20170419 07:07:24.867" status="PASS" endtime="20170419 07:07:24.871"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:24.873">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_dmesg.txt</msg>
<status starttime="20170419 07:07:24.872" status="PASS" endtime="20170419 07:07:24.873"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 07:07:24.874" status="PASS" endtime="20170419 07:07:24.875"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:24.876">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170419 07:07:24.966">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:24.966">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Wed Apr 19 02:47:50 UTC 2017
CPU: ARMv6-compati...</msg>
<msg level="INFO" timestamp="20170419 07:07:24.966">${stderr} = </msg>
<status starttime="20170419 07:07:24.875" status="PASS" endtime="20170419 07:07:24.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:24.974">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_dmesg.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:24.973" status="PASS" endtime="20170419 07:07:24.974"></status>
</kw>
<status starttime="20170419 07:07:24.972" status="PASS" endtime="20170419 07:07:24.974"></status>
</kw>
<status starttime="20170419 07:07:24.966" status="PASS" endtime="20170419 07:07:24.974"></status>
</kw>
<status starttime="20170419 07:07:24.873" status="PASS" endtime="20170419 07:07:24.974"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:24.979">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 07:07:24.974" status="PASS" endtime="20170419 07:07:24.982"></status>
</kw>
<status starttime="20170419 07:07:24.872" status="PASS" endtime="20170419 07:07:24.983"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:24.986">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_procinfo.txt</msg>
<status starttime="20170419 07:07:24.985" status="PASS" endtime="20170419 07:07:24.987"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 07:07:24.988" status="PASS" endtime="20170419 07:07:24.989"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:24.989">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170419 07:07:25.060">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:25.061">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170419 07:07:25.061">${stderr} = </msg>
<status starttime="20170419 07:07:24.989" status="PASS" endtime="20170419 07:07:25.061"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:25.067">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_procinfo.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:25.066" status="PASS" endtime="20170419 07:07:25.067"></status>
</kw>
<status starttime="20170419 07:07:25.066" status="PASS" endtime="20170419 07:07:25.067"></status>
</kw>
<status starttime="20170419 07:07:25.061" status="PASS" endtime="20170419 07:07:25.067"></status>
</kw>
<status starttime="20170419 07:07:24.987" status="PASS" endtime="20170419 07:07:25.068"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:25.072">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 07:07:25.068" status="PASS" endtime="20170419 07:07:25.075"></status>
</kw>
<status starttime="20170419 07:07:24.984" status="PASS" endtime="20170419 07:07:25.075"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:25.079">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_proc_list.txt</msg>
<status starttime="20170419 07:07:25.077" status="PASS" endtime="20170419 07:07:25.079"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 07:07:25.080" status="PASS" endtime="20170419 07:07:25.081"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:25.081">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170419 07:07:25.341">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:25.341">${stdout} = Mem: 144884K used, 288048K free, 14352K shrd, 10304K buff, 48180K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.12 0.09 0.03 1/127 929
  PID  PPID USER   ...</msg>
<msg level="INFO" timestamp="20170419 07:07:25.342">${stderr} = </msg>
<status starttime="20170419 07:07:25.081" status="PASS" endtime="20170419 07:07:25.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:25.349">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_proc_list.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:25.348" status="PASS" endtime="20170419 07:07:25.349"></status>
</kw>
<status starttime="20170419 07:07:25.347" status="PASS" endtime="20170419 07:07:25.349"></status>
</kw>
<status starttime="20170419 07:07:25.342" status="PASS" endtime="20170419 07:07:25.349"></status>
</kw>
<status starttime="20170419 07:07:25.079" status="PASS" endtime="20170419 07:07:25.349"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:25.354">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 07:07:25.350" status="PASS" endtime="20170419 07:07:25.358"></status>
</kw>
<status starttime="20170419 07:07:25.076" status="PASS" endtime="20170419 07:07:25.359"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:25.362">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_meminfo.txt</msg>
<status starttime="20170419 07:07:25.361" status="PASS" endtime="20170419 07:07:25.362"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 07:07:25.364" status="PASS" endtime="20170419 07:07:25.364"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:25.365">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170419 07:07:25.418">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:25.418">${stdout} = MemTotal:         432932 kB
MemFree:          288048 kB
MemAvailable:     327828 kB
Buffers:           10304 kB
Cached:            48180 kB
SwapCached:            0 kB
Active:            96088 kB
Inac...</msg>
<msg level="INFO" timestamp="20170419 07:07:25.418">${stderr} = </msg>
<status starttime="20170419 07:07:25.365" status="PASS" endtime="20170419 07:07:25.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:25.425">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_meminfo.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:25.424" status="PASS" endtime="20170419 07:07:25.425"></status>
</kw>
<status starttime="20170419 07:07:25.423" status="PASS" endtime="20170419 07:07:25.425"></status>
</kw>
<status starttime="20170419 07:07:25.419" status="PASS" endtime="20170419 07:07:25.425"></status>
</kw>
<status starttime="20170419 07:07:25.362" status="PASS" endtime="20170419 07:07:25.425"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:25.430">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 07:07:25.425" status="PASS" endtime="20170419 07:07:25.433"></status>
</kw>
<status starttime="20170419 07:07:25.359" status="PASS" endtime="20170419 07:07:25.433"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:25.436">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_journalctl.txt</msg>
<status starttime="20170419 07:07:25.435" status="PASS" endtime="20170419 07:07:25.437"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 07:07:25.438" status="PASS" endtime="20170419 07:07:25.439"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:25.439">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170419 07:07:26.541">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 07:07:26.541">${stdout} = -- Logs begin at Wed 2017-04-19 03:14:20 UTC, end at Wed 2017-04-19 07:07:24 UTC. --
Apr 19 03:14:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 19 03:14:20 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170419 07:07:26.542">${stderr} = </msg>
<status starttime="20170419 07:07:25.439" status="PASS" endtime="20170419 07:07:26.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:26.550">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_journalctl.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:26.548" status="PASS" endtime="20170419 07:07:26.550"></status>
</kw>
<status starttime="20170419 07:07:26.547" status="PASS" endtime="20170419 07:07:26.550"></status>
</kw>
<status starttime="20170419 07:07:26.542" status="PASS" endtime="20170419 07:07:26.550"></status>
</kw>
<status starttime="20170419 07:07:25.437" status="PASS" endtime="20170419 07:07:26.550"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:26.556">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 07:07:26.550" status="PASS" endtime="20170419 07:07:26.561"></status>
</kw>
<status starttime="20170419 07:07:25.434" status="PASS" endtime="20170419 07:07:26.561"></status>
</kw>
<status starttime="20170419 07:07:24.872" status="PASS" endtime="20170419 07:07:26.562"></status>
</kw>
<status starttime="20170419 07:07:24.851" status="PASS" endtime="20170419 07:07:26.562"></status>
</kw>
<status starttime="20170419 07:07:24.851" status="PASS" endtime="20170419 07:07:26.563"></status>
</kw>
<status starttime="20170419 07:07:24.851" status="PASS" endtime="20170419 07:07:26.563"></status>
</kw>
<status starttime="20170419 07:07:23.158" status="PASS" endtime="20170419 07:07:26.563"></status>
</kw>
<status starttime="20170419 07:07:23.157" status="PASS" endtime="20170419 07:07:26.563"></status>
</kw>
<status starttime="20170419 07:07:23.157" status="PASS" endtime="20170419 07:07:26.563"></status>
</kw>
<status starttime="20170419 07:07:23.156" status="PASS" endtime="20170419 07:07:26.563"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:26.569">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 07:07:26.569" status="FAIL" endtime="20170419 07:07:26.569"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:26.569">${has_host} = False</msg>
<status starttime="20170419 07:07:26.568" status="PASS" endtime="20170419 07:07:26.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 07:07:26.570" status="PASS" endtime="20170419 07:07:26.571"></status>
</kw>
<status starttime="20170419 07:07:26.570" status="PASS" endtime="20170419 07:07:26.571"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:26.573">${port_num} = 22</msg>
<status starttime="20170419 07:07:26.572" status="PASS" endtime="20170419 07:07:26.573"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:26.573">${SSH_PORT} = 22</msg>
<status starttime="20170419 07:07:26.573" status="PASS" endtime="20170419 07:07:26.573"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:26.574">${https_num} = 443</msg>
<status starttime="20170419 07:07:26.573" status="PASS" endtime="20170419 07:07:26.574"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:26.575">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170419 07:07:26.574" status="PASS" endtime="20170419 07:07:26.575"></status>
</kw>
<status starttime="20170419 07:07:26.572" status="PASS" endtime="20170419 07:07:26.575"></status>
</kw>
<status starttime="20170419 07:07:26.571" status="PASS" endtime="20170419 07:07:26.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 07:07:26.576">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 07:07:26.576" status="FAIL" endtime="20170419 07:07:26.576"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:26.576">${has_port} = False</msg>
<status starttime="20170419 07:07:26.575" status="PASS" endtime="20170419 07:07:26.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 07:07:26.578" status="PASS" endtime="20170419 07:07:26.578"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 07:07:26.578" status="PASS" endtime="20170419 07:07:26.579"></status>
</kw>
<status starttime="20170419 07:07:26.577" status="PASS" endtime="20170419 07:07:26.579"></status>
</kw>
<status starttime="20170419 07:07:26.576" status="PASS" endtime="20170419 07:07:26.579"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:26.580">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 07:07:28.231">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 07:07:26.579" status="PASS" endtime="20170419 07:07:28.231"></status>
</kw>
<status starttime="20170419 07:07:26.567" status="PASS" endtime="20170419 07:07:28.231"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.232">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170419 07:07:28.232" status="PASS" endtime="20170419 07:07:28.232"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.233">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/o...</msg>
<status starttime="20170419 07:07:28.233" status="PASS" endtime="20170419 07:07:28.234"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.234">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_inventory.txt</msg>
<status starttime="20170419 07:07:28.234" status="PASS" endtime="20170419 07:07:28.235"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.236">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:07:28.236" status="PASS" endtime="20170419 07:07:28.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:07:28.237" status="PASS" endtime="20170419 07:07:28.237"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.238">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:07:28.238" status="PASS" endtime="20170419 07:07:28.238"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.239">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:07:28.238" status="PASS" endtime="20170419 07:07:28.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.440">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:07:28.240" status="PASS" endtime="20170419 07:07:28.440"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:28.440">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:07:28.440">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:28.239" status="PASS" endtime="20170419 07:07:28.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.441">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:28.441" status="PASS" endtime="20170419 07:07:28.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.442">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:28.442" status="PASS" endtime="20170419 07:07:28.442"></status>
</kw>
<status starttime="20170419 07:07:28.235" status="PASS" endtime="20170419 07:07:28.442"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.443">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170419 07:07:28.443" status="PASS" endtime="20170419 07:07:28.443"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 07:07:28.444" status="PASS" endtime="20170419 07:07:28.444"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.604">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:07:28.604">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:28.444" status="PASS" endtime="20170419 07:07:28.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 07:07:28.604" status="PASS" endtime="20170419 07:07:28.605"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:28.605">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:28.235" status="PASS" endtime="20170419 07:07:28.605"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:28.606" status="PASS" endtime="20170419 07:07:28.606"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:28.606">${status} = True</msg>
<status starttime="20170419 07:07:28.605" status="PASS" endtime="20170419 07:07:28.606"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170419 07:07:28.607" status="PASS" endtime="20170419 07:07:28.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.608">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:07:28.608">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170419 07:07:28.608">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status starttime="20170419 07:07:28.607" status="PASS" endtime="20170419 07:07:28.608"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:28.609">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_inventory.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:28.609" status="PASS" endtime="20170419 07:07:28.609"></status>
</kw>
<status starttime="20170419 07:07:28.608" status="PASS" endtime="20170419 07:07:28.610"></status>
</kw>
<status starttime="20170419 07:07:28.234" status="PASS" endtime="20170419 07:07:28.610"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.611">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_led.txt</msg>
<status starttime="20170419 07:07:28.610" status="PASS" endtime="20170419 07:07:28.611"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.613">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:07:28.613" status="PASS" endtime="20170419 07:07:28.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:07:28.614" status="PASS" endtime="20170419 07:07:28.614"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.615">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:07:28.615" status="PASS" endtime="20170419 07:07:28.615"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:07:28.615" status="PASS" endtime="20170419 07:07:28.616"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:07:28.617" status="PASS" endtime="20170419 07:07:28.791"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:28.791">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:07:28.791">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:28.616" status="PASS" endtime="20170419 07:07:28.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.792">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:28.792" status="PASS" endtime="20170419 07:07:28.792"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:28.792" status="PASS" endtime="20170419 07:07:28.793"></status>
</kw>
<status starttime="20170419 07:07:28.612" status="PASS" endtime="20170419 07:07:28.793"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.793">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170419 07:07:28.793" status="PASS" endtime="20170419 07:07:28.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 07:07:28.794" status="PASS" endtime="20170419 07:07:28.794"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.879">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:07:28.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:28.794" status="PASS" endtime="20170419 07:07:28.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 07:07:28.879" status="PASS" endtime="20170419 07:07:28.880"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:28.880">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:28.611" status="PASS" endtime="20170419 07:07:28.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:28.881" status="PASS" endtime="20170419 07:07:28.881"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:28.881">${status} = True</msg>
<status starttime="20170419 07:07:28.880" status="PASS" endtime="20170419 07:07:28.881"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170419 07:07:28.882" status="PASS" endtime="20170419 07:07:28.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.882">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:07:28.882">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170419 07:07:28.883">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status starttime="20170419 07:07:28.882" status="PASS" endtime="20170419 07:07:28.883"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:28.884">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_led.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:28.883" status="PASS" endtime="20170419 07:07:28.884"></status>
</kw>
<status starttime="20170419 07:07:28.883" status="PASS" endtime="20170419 07:07:28.884"></status>
</kw>
<status starttime="20170419 07:07:28.610" status="PASS" endtime="20170419 07:07:28.884"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.885">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_record_log.txt</msg>
<status starttime="20170419 07:07:28.885" status="PASS" endtime="20170419 07:07:28.885"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:28.887">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:07:28.886" status="PASS" endtime="20170419 07:07:28.887"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.888">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:07:28.887" status="PASS" endtime="20170419 07:07:28.888"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.888">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:07:28.888" status="PASS" endtime="20170419 07:07:28.888"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:28.889">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:07:28.889" status="PASS" endtime="20170419 07:07:28.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.064">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:07:28.890" status="PASS" endtime="20170419 07:07:29.065"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.065">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:07:29.065">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:28.890" status="PASS" endtime="20170419 07:07:29.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.065">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:29.065" status="PASS" endtime="20170419 07:07:29.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.066">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:29.066" status="PASS" endtime="20170419 07:07:29.066"></status>
</kw>
<status starttime="20170419 07:07:28.886" status="PASS" endtime="20170419 07:07:29.066"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.067">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170419 07:07:29.066" status="PASS" endtime="20170419 07:07:29.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 07:07:29.067" status="PASS" endtime="20170419 07:07:29.068"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.111">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:07:29.111">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 07:07:29.068" status="PASS" endtime="20170419 07:07:29.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 07:07:29.112" status="PASS" endtime="20170419 07:07:29.112"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.112">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 07:07:28.885" status="PASS" endtime="20170419 07:07:29.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.113">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170419 07:07:29.113">404 != 200</msg>
<status starttime="20170419 07:07:29.113" status="FAIL" endtime="20170419 07:07:29.113"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.114">${status} = False</msg>
<status starttime="20170419 07:07:29.112" status="PASS" endtime="20170419 07:07:29.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170419 07:07:29.114">Continuing for loop from the next iteration.</msg>
<status starttime="20170419 07:07:29.114" status="PASS" endtime="20170419 07:07:29.115"></status>
</kw>
<status starttime="20170419 07:07:29.114" status="PASS" endtime="20170419 07:07:29.115"></status>
</kw>
<status starttime="20170419 07:07:28.884" status="PASS" endtime="20170419 07:07:29.115"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.115">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_elog.txt</msg>
<status starttime="20170419 07:07:29.115" status="PASS" endtime="20170419 07:07:29.115"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.117">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:07:29.117" status="PASS" endtime="20170419 07:07:29.118"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.118">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:07:29.118" status="PASS" endtime="20170419 07:07:29.118"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.119">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:07:29.118" status="PASS" endtime="20170419 07:07:29.119"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.120">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:07:29.119" status="PASS" endtime="20170419 07:07:29.120"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.294">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:07:29.121" status="PASS" endtime="20170419 07:07:29.294"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.294">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:07:29.294">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:29.120" status="PASS" endtime="20170419 07:07:29.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.295">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:29.295" status="PASS" endtime="20170419 07:07:29.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.296">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:29.295" status="PASS" endtime="20170419 07:07:29.296"></status>
</kw>
<status starttime="20170419 07:07:29.116" status="PASS" endtime="20170419 07:07:29.296"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.296">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170419 07:07:29.296" status="PASS" endtime="20170419 07:07:29.296"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 07:07:29.297" status="PASS" endtime="20170419 07:07:29.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.339">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:07:29.339">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 07:07:29.297" status="PASS" endtime="20170419 07:07:29.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 07:07:29.340" status="PASS" endtime="20170419 07:07:29.340"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.341">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 07:07:29.116" status="PASS" endtime="20170419 07:07:29.341"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.342">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170419 07:07:29.342">404 != 200</msg>
<status starttime="20170419 07:07:29.341" status="FAIL" endtime="20170419 07:07:29.342"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.342">${status} = False</msg>
<status starttime="20170419 07:07:29.341" status="PASS" endtime="20170419 07:07:29.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170419 07:07:29.343">Continuing for loop from the next iteration.</msg>
<status starttime="20170419 07:07:29.343" status="PASS" endtime="20170419 07:07:29.343"></status>
</kw>
<status starttime="20170419 07:07:29.342" status="PASS" endtime="20170419 07:07:29.343"></status>
</kw>
<status starttime="20170419 07:07:29.115" status="PASS" endtime="20170419 07:07:29.343"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.344">${logpath} = /tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_sensor_list.txt</msg>
<status starttime="20170419 07:07:29.344" status="PASS" endtime="20170419 07:07:29.344"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.346">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:07:29.345" status="PASS" endtime="20170419 07:07:29.346"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.347">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:07:29.346" status="PASS" endtime="20170419 07:07:29.347"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.347">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:07:29.347" status="PASS" endtime="20170419 07:07:29.347"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.348">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:07:29.348" status="PASS" endtime="20170419 07:07:29.348"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.563">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:07:29.349" status="PASS" endtime="20170419 07:07:29.563"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.564">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:07:29.564">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:29.348" status="PASS" endtime="20170419 07:07:29.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.564">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:29.564" status="PASS" endtime="20170419 07:07:29.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.565">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:29.565" status="PASS" endtime="20170419 07:07:29.566"></status>
</kw>
<status starttime="20170419 07:07:29.345" status="PASS" endtime="20170419 07:07:29.566"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.566">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170419 07:07:29.566" status="PASS" endtime="20170419 07:07:29.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 07:07:29.567" status="PASS" endtime="20170419 07:07:29.567"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.776">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:07:29.777">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:29.568" status="PASS" endtime="20170419 07:07:29.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 07:07:29.777" status="PASS" endtime="20170419 07:07:29.777"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.777">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:29.344" status="PASS" endtime="20170419 07:07:29.778"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.779">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:29.778" status="PASS" endtime="20170419 07:07:29.779"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.779">${status} = True</msg>
<status starttime="20170419 07:07:29.778" status="PASS" endtime="20170419 07:07:29.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170419 07:07:29.779" status="PASS" endtime="20170419 07:07:29.780"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.780">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 07:07:29.780">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170419 07:07:29.781">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170419 07:07:29.780" status="PASS" endtime="20170419 07:07:29.781"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:29.782">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_sensor_list.txt"&gt;/tmp/root/29863/obmc-robot/logs/20170419070717237355_TestsTestBasicPoweron/20170419070717237355_PowerOnTest/20170419070717237355_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:29.782" status="PASS" endtime="20170419 07:07:29.782"></status>
</kw>
<status starttime="20170419 07:07:29.781" status="PASS" endtime="20170419 07:07:29.782"></status>
</kw>
<status starttime="20170419 07:07:29.343" status="PASS" endtime="20170419 07:07:29.782"></status>
</kw>
<status starttime="20170419 07:07:28.234" status="PASS" endtime="20170419 07:07:29.782"></status>
</kw>
<status starttime="20170419 07:07:28.233" status="PASS" endtime="20170419 07:07:29.782"></status>
</kw>
<status starttime="20170419 07:07:28.232" status="PASS" endtime="20170419 07:07:29.782"></status>
</kw>
<status starttime="20170419 07:07:28.232" status="PASS" endtime="20170419 07:07:29.783"></status>
</kw>
<status starttime="20170419 07:07:26.567" status="PASS" endtime="20170419 07:07:29.783"></status>
</kw>
<status starttime="20170419 07:07:26.566" status="PASS" endtime="20170419 07:07:29.783"></status>
</kw>
<status starttime="20170419 07:07:26.564" status="PASS" endtime="20170419 07:07:29.783"></status>
</kw>
<status starttime="20170419 07:07:26.564" status="PASS" endtime="20170419 07:07:29.783"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.786">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 07:07:29.786" status="PASS" endtime="20170419 07:07:29.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 07:07:29.787" status="PASS" endtime="20170419 07:07:29.787"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.788">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 07:07:29.787" status="PASS" endtime="20170419 07:07:29.788"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.788">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 07:07:29.788" status="PASS" endtime="20170419 07:07:29.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 07:07:29.789" status="PASS" endtime="20170419 07:07:29.965"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:29.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 07:07:29.965">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 07:07:29.788" status="PASS" endtime="20170419 07:07:29.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.965">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:29.965" status="PASS" endtime="20170419 07:07:29.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:29.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 07:07:29.966" status="PASS" endtime="20170419 07:07:29.966"></status>
</kw>
<status starttime="20170419 07:07:29.785" status="PASS" endtime="20170419 07:07:29.966"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:29.967">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170419 07:07:29.966" status="PASS" endtime="20170419 07:07:29.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 07:07:29.967" status="PASS" endtime="20170419 07:07:29.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.012">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 07:07:30.012">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 07:07:29.968" status="PASS" endtime="20170419 07:07:30.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 07:07:30.012" status="PASS" endtime="20170419 07:07:30.013"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:30.013">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 07:07:29.784" status="PASS" endtime="20170419 07:07:30.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:30.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170419 07:07:30.014">404 != 200</msg>
<status starttime="20170419 07:07:30.014" status="FAIL" endtime="20170419 07:07:30.014"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:30.014">${status} = False</msg>
<status starttime="20170419 07:07:30.013" status="PASS" endtime="20170419 07:07:30.014"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:30.015">Returning from the enclosing user keyword.</msg>
<status starttime="20170419 07:07:30.015" status="PASS" endtime="20170419 07:07:30.015"></status>
</kw>
<status starttime="20170419 07:07:29.784" status="PASS" endtime="20170419 07:07:30.015"></status>
</kw>
<status starttime="20170419 07:07:29.784" status="PASS" endtime="20170419 07:07:30.015"></status>
</kw>
<status starttime="20170419 07:07:29.783" status="PASS" endtime="20170419 07:07:30.015"></status>
</kw>
<status starttime="20170419 07:07:29.783" status="PASS" endtime="20170419 07:07:30.015"></status>
</kw>
<status starttime="20170419 07:07:17.382" status="PASS" endtime="20170419 07:07:30.015"></status>
</kw>
<status starttime="20170419 07:07:17.381" status="PASS" endtime="20170419 07:07:30.016"></status>
</kw>
<status starttime="20170419 07:07:17.381" status="PASS" endtime="20170419 07:07:30.016"></status>
</kw>
<status starttime="20170419 07:07:17.381" status="PASS" endtime="20170419 07:07:30.016"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170419 07:07:30.016" status="PASS" endtime="20170419 07:07:30.149"></status>
</kw>
<status starttime="20170419 07:07:17.380" status="PASS" endtime="20170419 07:07:30.149"></status>
</kw>
<status starttime="20170419 07:07:12.389" status="PASS" endtime="20170419 07:07:30.149"></status>
</kw>
<status starttime="20170419 07:07:12.388" status="PASS" endtime="20170419 07:07:30.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170419 07:07:30.150" status="PASS" endtime="20170419 07:07:30.150"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:30.151">Directory '&lt;a href="file:///tmp/root/29863/obmc-robot/logs"&gt;/tmp/root/29863/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170419 07:07:30.151" status="PASS" endtime="20170419 07:07:30.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:30.152">File '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/test_history.txt"&gt;/tmp/root/29863/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170419 07:07:30.152" status="PASS" endtime="20170419 07:07:30.152"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:30.152">${exist} = True</msg>
<status starttime="20170419 07:07:30.152" status="PASS" endtime="20170419 07:07:30.152"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170419 07:07:30.153" status="PASS" endtime="20170419 07:07:30.153"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.154">${cur_time} = 2017-04-19 07:07:30:153722</msg>
<status starttime="20170419 07:07:30.154" status="PASS" endtime="20170419 07:07:30.154"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.154">${cur_time} = 20170419070730153722</msg>
<status starttime="20170419 07:07:30.154" status="PASS" endtime="20170419 07:07:30.154"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:30.155">${cur_time} = 20170419070730153722</msg>
<status starttime="20170419 07:07:30.153" status="PASS" endtime="20170419 07:07:30.155"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170419 07:07:30.156">Appended to file '&lt;a href="file:///tmp/root/29863/obmc-robot/logs/test_history.txt"&gt;/tmp/root/29863/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 07:07:30.155" status="PASS" endtime="20170419 07:07:30.156"></status>
</kw>
<status starttime="20170419 07:07:30.150" status="PASS" endtime="20170419 07:07:30.156"></status>
</kw>
<status starttime="20170419 07:07:12.123" status="PASS" endtime="20170419 07:07:30.156"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.157">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 07:07:30.157" status="PASS" endtime="20170419 07:07:30.157"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.158">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 07:07:30.158" status="PASS" endtime="20170419 07:07:30.158"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:30.159">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170419 07:07:30.157" status="PASS" endtime="20170419 07:07:30.159"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.160">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170419 07:07:30.159" status="PASS" endtime="20170419 07:07:30.160"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 07:07:30.160" status="PASS" endtime="20170419 07:07:30.167"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.172">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 07:07:30.176">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 07:07:30.176">${output} = /tmp/root/29863/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170419 07:07:30.167" status="PASS" endtime="20170419 07:07:30.176"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 07:07:30.178" status="PASS" endtime="20170419 07:07:30.187"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170419 07:07:30.188" status="PASS" endtime="20170419 07:07:30.188"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.189">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 07:07:30.188" status="PASS" endtime="20170419 07:07:30.189"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:30.189">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170419 07:07:30.159" status="PASS" endtime="20170419 07:07:30.189"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.190">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170419 07:07:30.190" status="PASS" endtime="20170419 07:07:30.190"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 07:07:30.190" status="PASS" endtime="20170419 07:07:30.198"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.202">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 07:07:30.213">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 07:07:30.213">${os_con_pid} = 168</msg>
<status starttime="20170419 07:07:30.198" status="PASS" endtime="20170419 07:07:30.213"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170419 07:07:30.215" status="PASS" endtime="20170419 07:07:30.226"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.227">${cmd_buf} = kill -9 168</msg>
<status starttime="20170419 07:07:30.227" status="PASS" endtime="20170419 07:07:30.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 07:07:30.228" status="PASS" endtime="20170419 07:07:30.235"></status>
</kw>
<status starttime="20170419 07:07:30.228" status="PASS" endtime="20170419 07:07:30.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:30.240">Running command 'kill -9 168 2&gt;&amp;1'.</msg>
<status starttime="20170419 07:07:30.236" status="PASS" endtime="20170419 07:07:30.243"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:30.244">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 07:07:30.244">${output} = </msg>
<status starttime="20170419 07:07:30.236" status="PASS" endtime="20170419 07:07:30.244"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 07:07:30.248" status="PASS" endtime="20170419 07:07:30.258"></status>
</kw>
<status starttime="20170419 07:07:30.247" status="PASS" endtime="20170419 07:07:30.258"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.259">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170419 07:07:30.258" status="PASS" endtime="20170419 07:07:30.259"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 07:07:30.259" status="PASS" endtime="20170419 07:07:30.270"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 07:07:30.274">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 07:07:30.278">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 07:07:30.278">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170419 07:07:30.270" status="PASS" endtime="20170419 07:07:30.278"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170419 07:07:30.280" status="PASS" endtime="20170419 07:07:30.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170419 07:07:30.290" status="PASS" endtime="20170419 07:07:30.290"></status>
</kw>
<msg level="INFO" timestamp="20170419 07:07:30.291">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170419 07:07:30.156" status="PASS" endtime="20170419 07:07:30.291"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 07:07:30.291">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: </msg>
<status starttime="20170419 07:07:30.291" status="PASS" endtime="20170419 07:07:30.291"></status>
</kw>
<status starttime="20170419 07:07:12.123" status="PASS" endtime="20170419 07:07:30.292"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170419 06:57:03.795" critical="yes" status="FAIL" endtime="20170419 07:07:30.292">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170419 06:57:03.765" status="FAIL" endtime="20170419 07:07:30.293"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170419 06:56:58.827" status="FAIL" endtime="20170419 07:07:30.296"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" fail="1" id="s1">Tests</stat>
<stat name="Security" pass="1" fail="0" id="s1-s1">Tests.Security</stat>
<stat name="Test Ssl" pass="1" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
